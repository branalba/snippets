ARM GAS  /tmp/ccycMeWv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"SEGGER_RTT.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_GetAvailWriteSpace:
  24              	.LVL0:
  25              	.LFB4:
  26              		.file 1 "base/debug/RTT/SEGGER_RTT.c"
   1:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
   2:base/debug/RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:base/debug/RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
   5:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
   6:base/debug/RTT/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
   8:base/debug/RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  10:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
  11:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  12:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  14:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
  15:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  16:base/debug/RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  18:base/debug/RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:base/debug/RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:base/debug/RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  22:base/debug/RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:base/debug/RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:base/debug/RTT/SEGGER_RTT.c **** * condition is met:                                                  *
  25:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  26:base/debug/RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:base/debug/RTT/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  29:base/debug/RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:base/debug/RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:base/debug/RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:base/debug/RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
ARM GAS  /tmp/ccycMeWv.s 			page 2


  33:base/debug/RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:base/debug/RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:base/debug/RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:base/debug/RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:base/debug/RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:base/debug/RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:base/debug/RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:base/debug/RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:base/debug/RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:base/debug/RTT/SEGGER_RTT.c **** *                                                                    *
  43:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
  44:base/debug/RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:base/debug/RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:base/debug/RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:base/debug/RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:base/debug/RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:base/debug/RTT/SEGGER_RTT.c **** Revision: $Rev: 22333 $
  50:base/debug/RTT/SEGGER_RTT.c **** 
  51:base/debug/RTT/SEGGER_RTT.c **** Additional information:
  52:base/debug/RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:base/debug/RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  54:base/debug/RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  55:base/debug/RTT/SEGGER_RTT.c **** 
  56:base/debug/RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:base/debug/RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:base/debug/RTT/SEGGER_RTT.c **** 
  59:base/debug/RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:base/debug/RTT/SEGGER_RTT.c **** 
  61:base/debug/RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:base/debug/RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:base/debug/RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:base/debug/RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:base/debug/RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:base/debug/RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:base/debug/RTT/SEGGER_RTT.c **** 
  68:base/debug/RTT/SEGGER_RTT.c **** 
  69:base/debug/RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:base/debug/RTT/SEGGER_RTT.c **** */
  71:base/debug/RTT/SEGGER_RTT.c **** 
  72:base/debug/RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:base/debug/RTT/SEGGER_RTT.c **** 
  74:base/debug/RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:base/debug/RTT/SEGGER_RTT.c **** 
  76:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
  77:base/debug/RTT/SEGGER_RTT.c **** *
  78:base/debug/RTT/SEGGER_RTT.c **** *       Configuration, default values
  79:base/debug/RTT/SEGGER_RTT.c **** *
  80:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
  81:base/debug/RTT/SEGGER_RTT.c **** */
  82:base/debug/RTT/SEGGER_RTT.c **** 
  83:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  84:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  85:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  86:base/debug/RTT/SEGGER_RTT.c ****   #endif
  87:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  88:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  89:base/debug/RTT/SEGGER_RTT.c ****   #endif
ARM GAS  /tmp/ccycMeWv.s 			page 3


  90:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  91:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  92:base/debug/RTT/SEGGER_RTT.c ****   #endif
  93:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  94:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  95:base/debug/RTT/SEGGER_RTT.c ****   #endif
  96:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  97:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  98:base/debug/RTT/SEGGER_RTT.c ****   #endif
  99:base/debug/RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 100:base/debug/RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 101:base/debug/RTT/SEGGER_RTT.c ****   #endif
 102:base/debug/RTT/SEGGER_RTT.c **** #endif
 103:base/debug/RTT/SEGGER_RTT.c **** 
 104:base/debug/RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 105:base/debug/RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 106:base/debug/RTT/SEGGER_RTT.c **** #endif
 107:base/debug/RTT/SEGGER_RTT.c **** 
 108:base/debug/RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 109:base/debug/RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 110:base/debug/RTT/SEGGER_RTT.c **** #endif
 111:base/debug/RTT/SEGGER_RTT.c **** 
 112:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 113:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 114:base/debug/RTT/SEGGER_RTT.c **** #endif
 115:base/debug/RTT/SEGGER_RTT.c **** 
 116:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 117:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 118:base/debug/RTT/SEGGER_RTT.c **** #endif
 119:base/debug/RTT/SEGGER_RTT.c **** 
 120:base/debug/RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 121:base/debug/RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 122:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 123:base/debug/RTT/SEGGER_RTT.c ****   #endif
 124:base/debug/RTT/SEGGER_RTT.c **** #endif
 125:base/debug/RTT/SEGGER_RTT.c **** 
 126:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 127:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 128:base/debug/RTT/SEGGER_RTT.c **** #endif
 129:base/debug/RTT/SEGGER_RTT.c **** 
 130:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 131:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 132:base/debug/RTT/SEGGER_RTT.c **** #endif
 133:base/debug/RTT/SEGGER_RTT.c **** 
 134:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 135:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 136:base/debug/RTT/SEGGER_RTT.c **** #endif
 137:base/debug/RTT/SEGGER_RTT.c **** 
 138:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 139:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 140:base/debug/RTT/SEGGER_RTT.c **** #endif
 141:base/debug/RTT/SEGGER_RTT.c **** 
 142:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 143:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 144:base/debug/RTT/SEGGER_RTT.c **** #endif
 145:base/debug/RTT/SEGGER_RTT.c **** 
 146:base/debug/RTT/SEGGER_RTT.c **** #ifndef   STRLEN
ARM GAS  /tmp/ccycMeWv.s 			page 4


 147:base/debug/RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 148:base/debug/RTT/SEGGER_RTT.c **** #endif
 149:base/debug/RTT/SEGGER_RTT.c **** 
 150:base/debug/RTT/SEGGER_RTT.c **** #ifndef   STRCPY
 151:base/debug/RTT/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 152:base/debug/RTT/SEGGER_RTT.c **** #endif
 153:base/debug/RTT/SEGGER_RTT.c **** 
 154:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 155:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 156:base/debug/RTT/SEGGER_RTT.c **** #endif
 157:base/debug/RTT/SEGGER_RTT.c **** 
 158:base/debug/RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 159:base/debug/RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 160:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 161:base/debug/RTT/SEGGER_RTT.c ****   #else
 162:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 163:base/debug/RTT/SEGGER_RTT.c ****   #endif
 164:base/debug/RTT/SEGGER_RTT.c **** #endif
 165:base/debug/RTT/SEGGER_RTT.c **** 
 166:base/debug/RTT/SEGGER_RTT.c **** #ifndef   MIN
 167:base/debug/RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 168:base/debug/RTT/SEGGER_RTT.c **** #endif
 169:base/debug/RTT/SEGGER_RTT.c **** 
 170:base/debug/RTT/SEGGER_RTT.c **** #ifndef   MAX
 171:base/debug/RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 172:base/debug/RTT/SEGGER_RTT.c **** #endif
 173:base/debug/RTT/SEGGER_RTT.c **** //
 174:base/debug/RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 175:base/debug/RTT/SEGGER_RTT.c **** //
 176:base/debug/RTT/SEGGER_RTT.c **** #ifndef NULL
 177:base/debug/RTT/SEGGER_RTT.c ****   #define NULL 0
 178:base/debug/RTT/SEGGER_RTT.c **** #endif
 179:base/debug/RTT/SEGGER_RTT.c **** 
 180:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 181:base/debug/RTT/SEGGER_RTT.c **** *
 182:base/debug/RTT/SEGGER_RTT.c **** *       Defines, fixed
 183:base/debug/RTT/SEGGER_RTT.c **** *
 184:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
 185:base/debug/RTT/SEGGER_RTT.c **** */
 186:base/debug/RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 187:base/debug/RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 188:base/debug/RTT/SEGGER_RTT.c **** #endif
 189:base/debug/RTT/SEGGER_RTT.c **** 
 190:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 191:base/debug/RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 192:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 193:base/debug/RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:base/debug/RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 195:base/debug/RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 196:base/debug/RTT/SEGGER_RTT.c ****                                   Var
 197:base/debug/RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 198:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 199:base/debug/RTT/SEGGER_RTT.c ****   #else
 200:base/debug/RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 201:base/debug/RTT/SEGGER_RTT.c ****   #endif
 202:base/debug/RTT/SEGGER_RTT.c **** #else
 203:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
ARM GAS  /tmp/ccycMeWv.s 			page 5


 204:base/debug/RTT/SEGGER_RTT.c **** #endif
 205:base/debug/RTT/SEGGER_RTT.c **** 
 206:base/debug/RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 207:base/debug/RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 208:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 209:base/debug/RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 210:base/debug/RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 211:base/debug/RTT/SEGGER_RTT.c ****                                         Var
 212:base/debug/RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 213:base/debug/RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 214:base/debug/RTT/SEGGER_RTT.c ****   #else
 215:base/debug/RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 216:base/debug/RTT/SEGGER_RTT.c ****   #endif
 217:base/debug/RTT/SEGGER_RTT.c **** #else
 218:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 219:base/debug/RTT/SEGGER_RTT.c **** #endif
 220:base/debug/RTT/SEGGER_RTT.c **** 
 221:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 222:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 223:base/debug/RTT/SEGGER_RTT.c **** #else
 224:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 225:base/debug/RTT/SEGGER_RTT.c **** #endif
 226:base/debug/RTT/SEGGER_RTT.c **** 
 227:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 228:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 229:base/debug/RTT/SEGGER_RTT.c **** #else
 230:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 231:base/debug/RTT/SEGGER_RTT.c **** #endif
 232:base/debug/RTT/SEGGER_RTT.c **** 
 233:base/debug/RTT/SEGGER_RTT.c **** 
 234:base/debug/RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 235:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 236:base/debug/RTT/SEGGER_RTT.c **** #else
 237:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 238:base/debug/RTT/SEGGER_RTT.c **** #endif
 239:base/debug/RTT/SEGGER_RTT.c **** 
 240:base/debug/RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 241:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 242:base/debug/RTT/SEGGER_RTT.c **** #else
 243:base/debug/RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 244:base/debug/RTT/SEGGER_RTT.c **** #endif
 245:base/debug/RTT/SEGGER_RTT.c **** 
 246:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 247:base/debug/RTT/SEGGER_RTT.c **** *
 248:base/debug/RTT/SEGGER_RTT.c **** *       Static const data
 249:base/debug/RTT/SEGGER_RTT.c **** *
 250:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
 251:base/debug/RTT/SEGGER_RTT.c **** */
 252:base/debug/RTT/SEGGER_RTT.c **** 
 253:base/debug/RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 254:base/debug/RTT/SEGGER_RTT.c **** 
 255:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 256:base/debug/RTT/SEGGER_RTT.c **** *
 257:base/debug/RTT/SEGGER_RTT.c **** *       Static data
 258:base/debug/RTT/SEGGER_RTT.c **** *
 259:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
 260:base/debug/RTT/SEGGER_RTT.c **** */
ARM GAS  /tmp/ccycMeWv.s 			page 6


 261:base/debug/RTT/SEGGER_RTT.c **** 
 262:base/debug/RTT/SEGGER_RTT.c **** //
 263:base/debug/RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 264:base/debug/RTT/SEGGER_RTT.c **** //
 265:base/debug/RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 266:base/debug/RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [SEGGER_RTT__ROUND_U
 267:base/debug/RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[SEGGER_RTT__ROUND_U
 268:base/debug/RTT/SEGGER_RTT.c **** 
 269:base/debug/RTT/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 270:base/debug/RTT/SEGGER_RTT.c **** 
 271:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 272:base/debug/RTT/SEGGER_RTT.c **** *
 273:base/debug/RTT/SEGGER_RTT.c **** *       Static functions
 274:base/debug/RTT/SEGGER_RTT.c **** *
 275:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
 276:base/debug/RTT/SEGGER_RTT.c **** */
 277:base/debug/RTT/SEGGER_RTT.c **** 
 278:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 279:base/debug/RTT/SEGGER_RTT.c **** *
 280:base/debug/RTT/SEGGER_RTT.c **** *       _DoInit()
 281:base/debug/RTT/SEGGER_RTT.c **** *
 282:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 283:base/debug/RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 284:base/debug/RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 285:base/debug/RTT/SEGGER_RTT.c **** *
 286:base/debug/RTT/SEGGER_RTT.c **** */
 287:base/debug/RTT/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 288:base/debug/RTT/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 289:base/debug/RTT/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 290:base/debug/RTT/SEGGER_RTT.c ****                   do {                                                                             
 291:base/debug/RTT/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 292:base/debug/RTT/SEGGER_RTT.c ****                       _DoInit();                                                                   
 293:base/debug/RTT/SEGGER_RTT.c ****                     }                                                                              
 294:base/debug/RTT/SEGGER_RTT.c ****                   } while (0);                                                                     
 295:base/debug/RTT/SEGGER_RTT.c ****                 }
 296:base/debug/RTT/SEGGER_RTT.c **** 
 297:base/debug/RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 298:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 299:base/debug/RTT/SEGGER_RTT.c ****   //
 300:base/debug/RTT/SEGGER_RTT.c ****   // Initialize control block
 301:base/debug/RTT/SEGGER_RTT.c ****   //
 302:base/debug/RTT/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 303:base/debug/RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 304:base/debug/RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 305:base/debug/RTT/SEGGER_RTT.c ****   //
 306:base/debug/RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 307:base/debug/RTT/SEGGER_RTT.c ****   //
 308:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 309:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 310:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 311:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 312:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 313:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 314:base/debug/RTT/SEGGER_RTT.c ****   //
 315:base/debug/RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 316:base/debug/RTT/SEGGER_RTT.c ****   //
 317:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
ARM GAS  /tmp/ccycMeWv.s 			page 7


 318:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 319:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 320:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 321:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 322:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 323:base/debug/RTT/SEGGER_RTT.c ****   //
 324:base/debug/RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 325:base/debug/RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 326:base/debug/RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 327:base/debug/RTT/SEGGER_RTT.c ****   //
 328:base/debug/RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[7], "RTT");
 329:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 330:base/debug/RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[0], "SEGGER");
 331:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 332:base/debug/RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 333:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 334:base/debug/RTT/SEGGER_RTT.c **** }
 335:base/debug/RTT/SEGGER_RTT.c **** 
 336:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 337:base/debug/RTT/SEGGER_RTT.c **** *
 338:base/debug/RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 339:base/debug/RTT/SEGGER_RTT.c **** *
 340:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 341:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 342:base/debug/RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 343:base/debug/RTT/SEGGER_RTT.c **** *    read by the host.
 344:base/debug/RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 345:base/debug/RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 346:base/debug/RTT/SEGGER_RTT.c **** *
 347:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 348:base/debug/RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 349:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 350:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 351:base/debug/RTT/SEGGER_RTT.c **** *
 352:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 353:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 354:base/debug/RTT/SEGGER_RTT.c **** */
 355:base/debug/RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 356:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 357:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 358:base/debug/RTT/SEGGER_RTT.c ****   unsigned RdOff;
 359:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
 360:base/debug/RTT/SEGGER_RTT.c ****   volatile char* pDst;
 361:base/debug/RTT/SEGGER_RTT.c ****   //
 362:base/debug/RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 363:base/debug/RTT/SEGGER_RTT.c ****   //
 364:base/debug/RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 365:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 366:base/debug/RTT/SEGGER_RTT.c ****   do {
 367:base/debug/RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 368:base/debug/RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 369:base/debug/RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 370:base/debug/RTT/SEGGER_RTT.c ****     } else {
 371:base/debug/RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 372:base/debug/RTT/SEGGER_RTT.c ****     }
 373:base/debug/RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 374:base/debug/RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
ARM GAS  /tmp/ccycMeWv.s 			page 8


 375:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 376:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 377:base/debug/RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 378:base/debug/RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 379:base/debug/RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 380:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 381:base/debug/RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 382:base/debug/RTT/SEGGER_RTT.c ****     };
 383:base/debug/RTT/SEGGER_RTT.c **** #else
 384:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 385:base/debug/RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 386:base/debug/RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 387:base/debug/RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 388:base/debug/RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 389:base/debug/RTT/SEGGER_RTT.c **** #endif
 390:base/debug/RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 391:base/debug/RTT/SEGGER_RTT.c ****       WrOff = 0u;
 392:base/debug/RTT/SEGGER_RTT.c ****     }
 393:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 394:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 395:base/debug/RTT/SEGGER_RTT.c ****   } while (NumBytes);
 396:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 397:base/debug/RTT/SEGGER_RTT.c **** }
 398:base/debug/RTT/SEGGER_RTT.c **** 
 399:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 400:base/debug/RTT/SEGGER_RTT.c **** *
 401:base/debug/RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 402:base/debug/RTT/SEGGER_RTT.c **** *
 403:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 404:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 405:base/debug/RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 406:base/debug/RTT/SEGGER_RTT.c **** *    read by the host.
 407:base/debug/RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 408:base/debug/RTT/SEGGER_RTT.c **** *
 409:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 410:base/debug/RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 411:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 412:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 413:base/debug/RTT/SEGGER_RTT.c **** *
 414:base/debug/RTT/SEGGER_RTT.c **** *  Notes
 415:base/debug/RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 416:base/debug/RTT/SEGGER_RTT.c **** */
 417:base/debug/RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 418:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 419:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
 420:base/debug/RTT/SEGGER_RTT.c ****   unsigned Rem;
 421:base/debug/RTT/SEGGER_RTT.c ****   volatile char* pDst;
 422:base/debug/RTT/SEGGER_RTT.c **** 
 423:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 424:base/debug/RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 425:base/debug/RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 426:base/debug/RTT/SEGGER_RTT.c ****     //
 427:base/debug/RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 428:base/debug/RTT/SEGGER_RTT.c ****     //
 429:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 430:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 431:base/debug/RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
ARM GAS  /tmp/ccycMeWv.s 			page 9


 432:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 433:base/debug/RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 434:base/debug/RTT/SEGGER_RTT.c ****     };
 435:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 436:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 437:base/debug/RTT/SEGGER_RTT.c **** #else
 438:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 439:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 440:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 441:base/debug/RTT/SEGGER_RTT.c **** #endif
 442:base/debug/RTT/SEGGER_RTT.c ****   } else {
 443:base/debug/RTT/SEGGER_RTT.c ****     //
 444:base/debug/RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 445:base/debug/RTT/SEGGER_RTT.c ****     //
 446:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 447:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 448:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 449:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 450:base/debug/RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 451:base/debug/RTT/SEGGER_RTT.c ****     };
 452:base/debug/RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 453:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 454:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 455:base/debug/RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 456:base/debug/RTT/SEGGER_RTT.c ****     };
 457:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 458:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 459:base/debug/RTT/SEGGER_RTT.c **** #else
 460:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 461:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 462:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 463:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 464:base/debug/RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 465:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 466:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 467:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 468:base/debug/RTT/SEGGER_RTT.c **** #endif
 469:base/debug/RTT/SEGGER_RTT.c ****   }
 470:base/debug/RTT/SEGGER_RTT.c **** }
 471:base/debug/RTT/SEGGER_RTT.c **** 
 472:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 473:base/debug/RTT/SEGGER_RTT.c **** *
 474:base/debug/RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 475:base/debug/RTT/SEGGER_RTT.c **** *
 476:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 477:base/debug/RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 478:base/debug/RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 479:base/debug/RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 480:base/debug/RTT/SEGGER_RTT.c **** *
 481:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 482:base/debug/RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 483:base/debug/RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 484:base/debug/RTT/SEGGER_RTT.c **** */
 485:base/debug/RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 486:base/debug/RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 487:base/debug/RTT/SEGGER_RTT.c **** 
 488:base/debug/RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
ARM GAS  /tmp/ccycMeWv.s 			page 10


 489:base/debug/RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 490:base/debug/RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 491:base/debug/RTT/SEGGER_RTT.c **** }
 492:base/debug/RTT/SEGGER_RTT.c **** 
 493:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 494:base/debug/RTT/SEGGER_RTT.c **** *
 495:base/debug/RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 496:base/debug/RTT/SEGGER_RTT.c **** *
 497:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 498:base/debug/RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 499:base/debug/RTT/SEGGER_RTT.c **** *    buffer without blocking.
 500:base/debug/RTT/SEGGER_RTT.c **** *
 501:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 502:base/debug/RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 503:base/debug/RTT/SEGGER_RTT.c **** *
 504:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 505:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 506:base/debug/RTT/SEGGER_RTT.c **** */
 507:base/debug/RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  27              		.loc 1 507 66 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 508:base/debug/RTT/SEGGER_RTT.c ****   unsigned RdOff;
  32              		.loc 1 508 3 view .LVU1
 509:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
  33              		.loc 1 509 3 view .LVU2
 510:base/debug/RTT/SEGGER_RTT.c ****   unsigned r;
  34              		.loc 1 510 3 view .LVU3
 511:base/debug/RTT/SEGGER_RTT.c ****   //
 512:base/debug/RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 513:base/debug/RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 514:base/debug/RTT/SEGGER_RTT.c ****   //
 515:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  35              		.loc 1 515 3 view .LVU4
  36              		.loc 1 515 9 is_stmt 0 view .LVU5
  37 0000 0369     		ldr	r3, [r0, #16]
  38              	.LVL1:
 516:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  39              		.loc 1 516 3 is_stmt 1 view .LVU6
  40              		.loc 1 516 9 is_stmt 0 view .LVU7
  41 0002 C268     		ldr	r2, [r0, #12]
  42              	.LVL2:
 517:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  43              		.loc 1 517 3 is_stmt 1 view .LVU8
  44              		.loc 1 517 6 is_stmt 0 view .LVU9
  45 0004 9342     		cmp	r3, r2
  46 0006 04D8     		bhi	.L2
 518:base/debug/RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  47              		.loc 1 518 5 is_stmt 1 view .LVU10
  48              		.loc 1 518 14 is_stmt 0 view .LVU11
  49 0008 8168     		ldr	r1, [r0, #8]
  50              		.loc 1 518 34 view .LVU12
  51 000a 8A1A     		subs	r2, r1, r2
  52              	.LVL3:
  53              		.loc 1 518 42 view .LVU13
ARM GAS  /tmp/ccycMeWv.s 			page 11


  54 000c 1344     		add	r3, r3, r2
  55              	.LVL4:
  56              		.loc 1 518 7 view .LVU14
  57 000e 581E     		subs	r0, r3, #1
  58              	.LVL5:
  59              		.loc 1 518 7 view .LVU15
  60 0010 7047     		bx	lr
  61              	.LVL6:
  62              	.L2:
 519:base/debug/RTT/SEGGER_RTT.c ****   } else {
 520:base/debug/RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  63              		.loc 1 520 5 is_stmt 1 view .LVU16
  64              		.loc 1 520 15 is_stmt 0 view .LVU17
  65 0012 981A     		subs	r0, r3, r2
  66              	.LVL7:
  67              		.loc 1 520 7 view .LVU18
  68 0014 0138     		subs	r0, r0, #1
  69              	.LVL8:
 521:base/debug/RTT/SEGGER_RTT.c ****   }
 522:base/debug/RTT/SEGGER_RTT.c ****   return r;
  70              		.loc 1 522 3 is_stmt 1 view .LVU19
 523:base/debug/RTT/SEGGER_RTT.c **** }
  71              		.loc 1 523 1 is_stmt 0 view .LVU20
  72 0016 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE4:
  76              		.section	.text._WriteNoCheck,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  83              	_WriteNoCheck:
  84              	.LVL9:
  85              	.LFB2:
 417:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  86              		.loc 1 417 94 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
 417:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  90              		.loc 1 417 94 is_stmt 0 view .LVU22
  91 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 32
  94              		.cfi_offset 3, -32
  95              		.cfi_offset 4, -28
  96              		.cfi_offset 5, -24
  97              		.cfi_offset 6, -20
  98              		.cfi_offset 7, -16
  99              		.cfi_offset 8, -12
 100              		.cfi_offset 9, -8
 101              		.cfi_offset 14, -4
 102 0004 0446     		mov	r4, r0
 103 0006 8846     		mov	r8, r1
 104 0008 1646     		mov	r6, r2
 418:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
ARM GAS  /tmp/ccycMeWv.s 			page 12


 105              		.loc 1 418 3 is_stmt 1 view .LVU23
 419:base/debug/RTT/SEGGER_RTT.c ****   unsigned Rem;
 106              		.loc 1 419 3 view .LVU24
 420:base/debug/RTT/SEGGER_RTT.c ****   volatile char* pDst;
 107              		.loc 1 420 3 view .LVU25
 421:base/debug/RTT/SEGGER_RTT.c **** 
 108              		.loc 1 421 3 view .LVU26
 423:base/debug/RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 423 3 view .LVU27
 423:base/debug/RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 423 9 is_stmt 0 view .LVU28
 111 000a C568     		ldr	r5, [r0, #12]
 112              	.LVL10:
 424:base/debug/RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 424 3 is_stmt 1 view .LVU29
 424:base/debug/RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 424 14 is_stmt 0 view .LVU30
 115 000c 8768     		ldr	r7, [r0, #8]
 424:base/debug/RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 116              		.loc 1 424 7 view .LVU31
 117 000e A7EB0509 		sub	r9, r7, r5
 118              	.LVL11:
 425:base/debug/RTT/SEGGER_RTT.c ****     //
 119              		.loc 1 425 3 is_stmt 1 view .LVU32
 425:base/debug/RTT/SEGGER_RTT.c ****     //
 120              		.loc 1 425 6 is_stmt 0 view .LVU33
 121 0012 9145     		cmp	r9, r2
 122 0014 07D9     		bls	.L5
 429:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 123              		.loc 1 429 5 is_stmt 1 view .LVU34
 429:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 124              		.loc 1 429 18 is_stmt 0 view .LVU35
 125 0016 4068     		ldr	r0, [r0, #4]
 126              	.LVL12:
 438:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 127              		.loc 1 438 5 is_stmt 1 view .LVU36
 128 0018 2844     		add	r0, r0, r5
 129              	.LVL13:
 438:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 130              		.loc 1 438 5 is_stmt 0 view .LVU37
 131 001a FFF7FEFF 		bl	memcpy
 132              	.LVL14:
 439:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 133              		.loc 1 439 15 is_stmt 1 view .LVU38
 440:base/debug/RTT/SEGGER_RTT.c **** #endif
 134              		.loc 1 440 5 view .LVU39
 440:base/debug/RTT/SEGGER_RTT.c **** #endif
 135              		.loc 1 440 26 is_stmt 0 view .LVU40
 136 001e 3544     		add	r5, r5, r6
 137              	.LVL15:
 440:base/debug/RTT/SEGGER_RTT.c **** #endif
 138              		.loc 1 440 18 view .LVU41
 139 0020 E560     		str	r5, [r4, #12]
 140              	.L4:
 470:base/debug/RTT/SEGGER_RTT.c **** 
 141              		.loc 1 470 1 view .LVU42
 142 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccycMeWv.s 			page 13


 143              	.LVL16:
 144              	.L5:
 460:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 145              		.loc 1 460 5 is_stmt 1 view .LVU43
 461:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 146              		.loc 1 461 5 view .LVU44
 461:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 147              		.loc 1 461 18 is_stmt 0 view .LVU45
 148 0026 4068     		ldr	r0, [r0, #4]
 149              	.LVL17:
 462:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 150              		.loc 1 462 5 is_stmt 1 view .LVU46
 151 0028 4A46     		mov	r2, r9
 152              	.LVL18:
 462:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 153              		.loc 1 462 5 is_stmt 0 view .LVU47
 154 002a 2844     		add	r0, r0, r5
 155              	.LVL19:
 462:base/debug/RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 156              		.loc 1 462 5 view .LVU48
 157 002c FFF7FEFF 		bl	memcpy
 158              	.LVL20:
 463:base/debug/RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 159              		.loc 1 463 5 is_stmt 1 view .LVU49
 463:base/debug/RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 160              		.loc 1 463 20 is_stmt 0 view .LVU50
 161 0030 ED1B     		subs	r5, r5, r7
 162              	.LVL21:
 463:base/debug/RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 163              		.loc 1 463 20 view .LVU51
 164 0032 3544     		add	r5, r5, r6
 165              	.LVL22:
 464:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 166              		.loc 1 464 5 is_stmt 1 view .LVU52
 465:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 167              		.loc 1 465 5 view .LVU53
 168 0034 2A46     		mov	r2, r5
 169 0036 08EB0901 		add	r1, r8, r9
 170 003a 6068     		ldr	r0, [r4, #4]
 171 003c FFF7FEFF 		bl	memcpy
 172              	.LVL23:
 466:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 173              		.loc 1 466 15 view .LVU54
 467:base/debug/RTT/SEGGER_RTT.c **** #endif
 174              		.loc 1 467 5 view .LVU55
 467:base/debug/RTT/SEGGER_RTT.c **** #endif
 175              		.loc 1 467 18 is_stmt 0 view .LVU56
 176 0040 E560     		str	r5, [r4, #12]
 470:base/debug/RTT/SEGGER_RTT.c **** 
 177              		.loc 1 470 1 view .LVU57
 178 0042 EEE7     		b	.L4
 179              		.cfi_endproc
 180              	.LFE2:
 182              		.section	.text._WriteBlocking,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
ARM GAS  /tmp/ccycMeWv.s 			page 14


 186              		.thumb_func
 187              		.fpu softvfp
 189              	_WriteBlocking:
 190              	.LVL24:
 191              	.LFB1:
 355:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 192              		.loc 1 355 101 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 355:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 196              		.loc 1 355 101 is_stmt 0 view .LVU59
 197 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 32
 200              		.cfi_offset 3, -32
 201              		.cfi_offset 4, -28
 202              		.cfi_offset 5, -24
 203              		.cfi_offset 6, -20
 204              		.cfi_offset 7, -16
 205              		.cfi_offset 8, -12
 206              		.cfi_offset 9, -8
 207              		.cfi_offset 14, -4
 208 0004 0646     		mov	r6, r0
 209 0006 8846     		mov	r8, r1
 210 0008 1746     		mov	r7, r2
 356:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 211              		.loc 1 356 3 is_stmt 1 view .LVU60
 357:base/debug/RTT/SEGGER_RTT.c ****   unsigned RdOff;
 212              		.loc 1 357 3 view .LVU61
 358:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
 213              		.loc 1 358 3 view .LVU62
 359:base/debug/RTT/SEGGER_RTT.c ****   volatile char* pDst;
 214              		.loc 1 359 3 view .LVU63
 360:base/debug/RTT/SEGGER_RTT.c ****   //
 215              		.loc 1 360 3 view .LVU64
 364:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 216              		.loc 1 364 3 view .LVU65
 217              	.LVL25:
 365:base/debug/RTT/SEGGER_RTT.c ****   do {
 218              		.loc 1 365 3 view .LVU66
 365:base/debug/RTT/SEGGER_RTT.c ****   do {
 219              		.loc 1 365 9 is_stmt 0 view .LVU67
 220 000a C568     		ldr	r5, [r0, #12]
 221              	.LVL26:
 364:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 222              		.loc 1 364 19 view .LVU68
 223 000c 4FF00009 		mov	r9, #0
 224 0010 18E0     		b	.L12
 225              	.LVL27:
 226              	.L17:
 369:base/debug/RTT/SEGGER_RTT.c ****     } else {
 227              		.loc 1 369 7 is_stmt 1 view .LVU69
 369:base/debug/RTT/SEGGER_RTT.c ****     } else {
 228              		.loc 1 369 31 is_stmt 0 view .LVU70
 229 0012 5B1B     		subs	r3, r3, r5
 230              	.LVL28:
ARM GAS  /tmp/ccycMeWv.s 			page 15


 369:base/debug/RTT/SEGGER_RTT.c ****     } else {
 231              		.loc 1 369 23 view .LVU71
 232 0014 5A1E     		subs	r2, r3, #1
 233              	.LVL29:
 234              	.L10:
 373:base/debug/RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 235              		.loc 1 373 5 is_stmt 1 view .LVU72
 373:base/debug/RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 236              		.loc 1 373 23 is_stmt 0 view .LVU73
 237 0016 B368     		ldr	r3, [r6, #8]
 238 0018 5C1B     		subs	r4, r3, r5
 373:base/debug/RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 239              		.loc 1 373 21 view .LVU74
 240 001a 9442     		cmp	r4, r2
 241 001c 28BF     		it	cs
 242 001e 1446     		movcs	r4, r2
 243              	.LVL30:
 374:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 244              		.loc 1 374 5 is_stmt 1 view .LVU75
 374:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 245              		.loc 1 374 21 is_stmt 0 view .LVU76
 246 0020 BC42     		cmp	r4, r7
 247 0022 28BF     		it	cs
 248 0024 3C46     		movcs	r4, r7
 249              	.LVL31:
 375:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 250              		.loc 1 375 5 is_stmt 1 view .LVU77
 375:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 251              		.loc 1 375 18 is_stmt 0 view .LVU78
 252 0026 7068     		ldr	r0, [r6, #4]
 253              	.LVL32:
 384:base/debug/RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 254              		.loc 1 384 5 is_stmt 1 view .LVU79
 255 0028 2246     		mov	r2, r4
 256 002a 4146     		mov	r1, r8
 257 002c 2844     		add	r0, r0, r5
 258              	.LVL33:
 384:base/debug/RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 259              		.loc 1 384 5 is_stmt 0 view .LVU80
 260 002e FFF7FEFF 		bl	memcpy
 261              	.LVL34:
 385:base/debug/RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 262              		.loc 1 385 5 is_stmt 1 view .LVU81
 385:base/debug/RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 263              		.loc 1 385 21 is_stmt 0 view .LVU82
 264 0032 A144     		add	r9, r9, r4
 265              	.LVL35:
 386:base/debug/RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 266              		.loc 1 386 5 is_stmt 1 view .LVU83
 386:base/debug/RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 267              		.loc 1 386 21 is_stmt 0 view .LVU84
 268 0034 A044     		add	r8, r8, r4
 269              	.LVL36:
 387:base/debug/RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 270              		.loc 1 387 5 is_stmt 1 view .LVU85
 387:base/debug/RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 271              		.loc 1 387 21 is_stmt 0 view .LVU86
ARM GAS  /tmp/ccycMeWv.s 			page 16


 272 0036 3F1B     		subs	r7, r7, r4
 273              	.LVL37:
 388:base/debug/RTT/SEGGER_RTT.c **** #endif
 274              		.loc 1 388 5 is_stmt 1 view .LVU87
 388:base/debug/RTT/SEGGER_RTT.c **** #endif
 275              		.loc 1 388 21 is_stmt 0 view .LVU88
 276 0038 2544     		add	r5, r5, r4
 277              	.LVL38:
 390:base/debug/RTT/SEGGER_RTT.c ****       WrOff = 0u;
 278              		.loc 1 390 5 is_stmt 1 view .LVU89
 390:base/debug/RTT/SEGGER_RTT.c ****       WrOff = 0u;
 279              		.loc 1 390 23 is_stmt 0 view .LVU90
 280 003a B368     		ldr	r3, [r6, #8]
 390:base/debug/RTT/SEGGER_RTT.c ****       WrOff = 0u;
 281              		.loc 1 390 8 view .LVU91
 282 003c AB42     		cmp	r3, r5
 283 003e 09D0     		beq	.L15
 284              	.LVL39:
 285              	.L11:
 393:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 286              		.loc 1 393 15 is_stmt 1 view .LVU92
 394:base/debug/RTT/SEGGER_RTT.c ****   } while (NumBytes);
 287              		.loc 1 394 5 view .LVU93
 394:base/debug/RTT/SEGGER_RTT.c ****   } while (NumBytes);
 288              		.loc 1 394 18 is_stmt 0 view .LVU94
 289 0040 F560     		str	r5, [r6, #12]
 395:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 290              		.loc 1 395 12 is_stmt 1 view .LVU95
 291 0042 4FB1     		cbz	r7, .L16
 292              	.LVL40:
 293              	.L12:
 366:base/debug/RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 294              		.loc 1 366 3 view .LVU96
 367:base/debug/RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 295              		.loc 1 367 5 view .LVU97
 367:base/debug/RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 296              		.loc 1 367 11 is_stmt 0 view .LVU98
 297 0044 3369     		ldr	r3, [r6, #16]
 298              	.LVL41:
 368:base/debug/RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 299              		.loc 1 368 5 is_stmt 1 view .LVU99
 368:base/debug/RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 300              		.loc 1 368 8 is_stmt 0 view .LVU100
 301 0046 9D42     		cmp	r5, r3
 302 0048 E3D3     		bcc	.L17
 371:base/debug/RTT/SEGGER_RTT.c ****     }
 303              		.loc 1 371 7 is_stmt 1 view .LVU101
 371:base/debug/RTT/SEGGER_RTT.c ****     }
 304              		.loc 1 371 30 is_stmt 0 view .LVU102
 305 004a B268     		ldr	r2, [r6, #8]
 371:base/debug/RTT/SEGGER_RTT.c ****     }
 306              		.loc 1 371 62 view .LVU103
 307 004c 5B1B     		subs	r3, r3, r5
 308              	.LVL42:
 371:base/debug/RTT/SEGGER_RTT.c ****     }
 309              		.loc 1 371 45 view .LVU104
 310 004e 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccycMeWv.s 			page 17


 371:base/debug/RTT/SEGGER_RTT.c ****     }
 311              		.loc 1 371 23 view .LVU105
 312 0050 013A     		subs	r2, r2, #1
 313              	.LVL43:
 371:base/debug/RTT/SEGGER_RTT.c ****     }
 314              		.loc 1 371 23 view .LVU106
 315 0052 E0E7     		b	.L10
 316              	.LVL44:
 317              	.L15:
 391:base/debug/RTT/SEGGER_RTT.c ****     }
 318              		.loc 1 391 13 view .LVU107
 319 0054 0025     		movs	r5, #0
 320              	.LVL45:
 391:base/debug/RTT/SEGGER_RTT.c ****     }
 321              		.loc 1 391 13 view .LVU108
 322 0056 F3E7     		b	.L11
 323              	.LVL46:
 324              	.L16:
 396:base/debug/RTT/SEGGER_RTT.c **** }
 325              		.loc 1 396 3 is_stmt 1 view .LVU109
 397:base/debug/RTT/SEGGER_RTT.c **** 
 326              		.loc 1 397 1 is_stmt 0 view .LVU110
 327 0058 4846     		mov	r0, r9
 328 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 397:base/debug/RTT/SEGGER_RTT.c **** 
 329              		.loc 1 397 1 view .LVU111
 330              		.cfi_endproc
 331              	.LFE1:
 333              		.section	.text._PostTerminalSwitch,"ax",%progbits
 334              		.align	1
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu softvfp
 340              	_PostTerminalSwitch:
 341              	.LVL47:
 342              	.LFB3:
 485:base/debug/RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 343              		.loc 1 485 88 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 485:base/debug/RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 347              		.loc 1 485 88 is_stmt 0 view .LVU113
 348 0000 00B5     		push	{lr}
 349              	.LCFI2:
 350              		.cfi_def_cfa_offset 4
 351              		.cfi_offset 14, -4
 352 0002 83B0     		sub	sp, sp, #12
 353              	.LCFI3:
 354              		.cfi_def_cfa_offset 16
 486:base/debug/RTT/SEGGER_RTT.c **** 
 355              		.loc 1 486 3 is_stmt 1 view .LVU114
 488:base/debug/RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 356              		.loc 1 488 3 view .LVU115
 488:base/debug/RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 357              		.loc 1 488 9 is_stmt 0 view .LVU116
ARM GAS  /tmp/ccycMeWv.s 			page 18


 358 0004 FF23     		movs	r3, #255
 359 0006 8DF80430 		strb	r3, [sp, #4]
 489:base/debug/RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 360              		.loc 1 489 3 is_stmt 1 view .LVU117
 489:base/debug/RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 361              		.loc 1 489 23 is_stmt 0 view .LVU118
 362 000a 054B     		ldr	r3, .L20
 363 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 489:base/debug/RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 364              		.loc 1 489 9 view .LVU119
 365 000e 8DF80530 		strb	r3, [sp, #5]
 490:base/debug/RTT/SEGGER_RTT.c **** }
 366              		.loc 1 490 3 is_stmt 1 view .LVU120
 367 0012 0222     		movs	r2, #2
 368 0014 01A9     		add	r1, sp, #4
 369              	.LVL48:
 490:base/debug/RTT/SEGGER_RTT.c **** }
 370              		.loc 1 490 3 is_stmt 0 view .LVU121
 371 0016 FFF7FEFF 		bl	_WriteBlocking
 372              	.LVL49:
 491:base/debug/RTT/SEGGER_RTT.c **** 
 373              		.loc 1 491 1 view .LVU122
 374 001a 03B0     		add	sp, sp, #12
 375              	.LCFI4:
 376              		.cfi_def_cfa_offset 4
 377              		@ sp needed
 378 001c 5DF804FB 		ldr	pc, [sp], #4
 379              	.L21:
 380              		.align	2
 381              	.L20:
 382 0020 00000000 		.word	.LANCHOR0
 383              		.cfi_endproc
 384              	.LFE3:
 386              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 387              		.align	2
 388              	.LC0:
 389 0000 5465726D 		.ascii	"Terminal\000"
 389      696E616C 
 389      00
 390 0009 000000   		.align	2
 391              	.LC1:
 392 000c 52545400 		.ascii	"RTT\000"
 393              		.align	2
 394              	.LC2:
 395 0010 53454747 		.ascii	"SEGGER\000"
 395      455200
 396              		.section	.text._DoInit,"ax",%progbits
 397              		.align	1
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu softvfp
 403              	_DoInit:
 404              	.LFB0:
 297:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 405              		.loc 1 297 27 is_stmt 1 view -0
 406              		.cfi_startproc
ARM GAS  /tmp/ccycMeWv.s 			page 19


 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 298:base/debug/RTT/SEGGER_RTT.c ****   //
 410              		.loc 1 298 3 view .LVU124
 302:base/debug/RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 411              		.loc 1 302 3 view .LVU125
 412              	.LVL50:
 303:base/debug/RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 413              		.loc 1 303 3 view .LVU126
 303:base/debug/RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 414              		.loc 1 303 25 is_stmt 0 view .LVU127
 415 0000 124B     		ldr	r3, .L23
 416 0002 0322     		movs	r2, #3
 417 0004 1A61     		str	r2, [r3, #16]
 304:base/debug/RTT/SEGGER_RTT.c ****   //
 418              		.loc 1 304 3 is_stmt 1 view .LVU128
 304:base/debug/RTT/SEGGER_RTT.c ****   //
 419              		.loc 1 304 25 is_stmt 0 view .LVU129
 420 0006 5A61     		str	r2, [r3, #20]
 308:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 421              		.loc 1 308 3 is_stmt 1 view .LVU130
 308:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 422              		.loc 1 308 27 is_stmt 0 view .LVU131
 423 0008 1149     		ldr	r1, .L23+4
 424 000a 9961     		str	r1, [r3, #24]
 309:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 425              		.loc 1 309 3 is_stmt 1 view .LVU132
 309:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 426              		.loc 1 309 27 is_stmt 0 view .LVU133
 427 000c 114A     		ldr	r2, .L23+8
 428 000e DA61     		str	r2, [r3, #28]
 310:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 429              		.loc 1 310 3 is_stmt 1 view .LVU134
 310:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 430              		.loc 1 310 27 is_stmt 0 view .LVU135
 431 0010 4FF48062 		mov	r2, #1024
 432 0014 1A62     		str	r2, [r3, #32]
 311:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 433              		.loc 1 311 3 is_stmt 1 view .LVU136
 311:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 434              		.loc 1 311 27 is_stmt 0 view .LVU137
 435 0016 0022     		movs	r2, #0
 436 0018 9A62     		str	r2, [r3, #40]
 312:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 437              		.loc 1 312 3 is_stmt 1 view .LVU138
 312:base/debug/RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 438              		.loc 1 312 27 is_stmt 0 view .LVU139
 439 001a 5A62     		str	r2, [r3, #36]
 313:base/debug/RTT/SEGGER_RTT.c ****   //
 440              		.loc 1 313 3 is_stmt 1 view .LVU140
 313:base/debug/RTT/SEGGER_RTT.c ****   //
 441              		.loc 1 313 27 is_stmt 0 view .LVU141
 442 001c DA62     		str	r2, [r3, #44]
 317:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 443              		.loc 1 317 3 is_stmt 1 view .LVU142
 317:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
ARM GAS  /tmp/ccycMeWv.s 			page 20


 444              		.loc 1 317 29 is_stmt 0 view .LVU143
 445 001e 1966     		str	r1, [r3, #96]
 318:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 446              		.loc 1 318 3 is_stmt 1 view .LVU144
 318:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 447              		.loc 1 318 29 is_stmt 0 view .LVU145
 448 0020 0D49     		ldr	r1, .L23+12
 449 0022 5966     		str	r1, [r3, #100]
 319:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 450              		.loc 1 319 3 is_stmt 1 view .LVU146
 319:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 451              		.loc 1 319 29 is_stmt 0 view .LVU147
 452 0024 1021     		movs	r1, #16
 453 0026 9966     		str	r1, [r3, #104]
 320:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 454              		.loc 1 320 3 is_stmt 1 view .LVU148
 320:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 455              		.loc 1 320 29 is_stmt 0 view .LVU149
 456 0028 1A67     		str	r2, [r3, #112]
 321:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 457              		.loc 1 321 3 is_stmt 1 view .LVU150
 321:base/debug/RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 458              		.loc 1 321 29 is_stmt 0 view .LVU151
 459 002a DA66     		str	r2, [r3, #108]
 322:base/debug/RTT/SEGGER_RTT.c ****   //
 460              		.loc 1 322 3 is_stmt 1 view .LVU152
 322:base/debug/RTT/SEGGER_RTT.c ****   //
 461              		.loc 1 322 29 is_stmt 0 view .LVU153
 462 002c 5A67     		str	r2, [r3, #116]
 328:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 463              		.loc 1 328 3 is_stmt 1 view .LVU154
 464 002e 0B4A     		ldr	r2, .L23+16
 465 0030 1068     		ldr	r0, [r2]
 466 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 329:base/debug/RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[0], "SEGGER");
 467              		.loc 1 329 13 view .LVU155
 330:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 468              		.loc 1 330 3 view .LVU156
 469 0036 0A4A     		ldr	r2, .L23+20
 470 0038 92E80300 		ldm	r2, {r0, r1}
 471 003c 1860     		str	r0, [r3]
 472 003e 9980     		strh	r1, [r3, #4]	@ movhi
 473 0040 090C     		lsrs	r1, r1, #16
 474 0042 9971     		strb	r1, [r3, #6]
 331:base/debug/RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 475              		.loc 1 331 13 view .LVU157
 332:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 476              		.loc 1 332 3 view .LVU158
 332:base/debug/RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 477              		.loc 1 332 14 is_stmt 0 view .LVU159
 478 0044 2022     		movs	r2, #32
 479 0046 9A71     		strb	r2, [r3, #6]
 333:base/debug/RTT/SEGGER_RTT.c **** }
 480              		.loc 1 333 13 is_stmt 1 view .LVU160
 334:base/debug/RTT/SEGGER_RTT.c **** 
 481              		.loc 1 334 1 is_stmt 0 view .LVU161
 482 0048 7047     		bx	lr
ARM GAS  /tmp/ccycMeWv.s 			page 21


 483              	.L24:
 484 004a 00BF     		.align	2
 485              	.L23:
 486 004c 00000000 		.word	.LANCHOR1
 487 0050 00000000 		.word	.LC0
 488 0054 00000000 		.word	.LANCHOR2
 489 0058 00000000 		.word	.LANCHOR3
 490 005c 0C000000 		.word	.LC1
 491 0060 10000000 		.word	.LC2
 492              		.cfi_endproc
 493              	.LFE0:
 495              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 496              		.align	1
 497              		.global	SEGGER_RTT_ReadUpBufferNoLock
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu softvfp
 503              	SEGGER_RTT_ReadUpBufferNoLock:
 504              	.LVL51:
 505              	.LFB5:
 524:base/debug/RTT/SEGGER_RTT.c **** 
 525:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 526:base/debug/RTT/SEGGER_RTT.c **** *
 527:base/debug/RTT/SEGGER_RTT.c **** *       Public code
 528:base/debug/RTT/SEGGER_RTT.c **** *
 529:base/debug/RTT/SEGGER_RTT.c **** **********************************************************************
 530:base/debug/RTT/SEGGER_RTT.c **** */
 531:base/debug/RTT/SEGGER_RTT.c **** 
 532:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 533:base/debug/RTT/SEGGER_RTT.c **** *
 534:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 535:base/debug/RTT/SEGGER_RTT.c **** *
 536:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 537:base/debug/RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 538:base/debug/RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 539:base/debug/RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 540:base/debug/RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 541:base/debug/RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 542:base/debug/RTT/SEGGER_RTT.c **** *
 543:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 544:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 545:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 546:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 547:base/debug/RTT/SEGGER_RTT.c **** *
 548:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 549:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 550:base/debug/RTT/SEGGER_RTT.c **** *
 551:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
 552:base/debug/RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 553:base/debug/RTT/SEGGER_RTT.c **** */
 554:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 506              		.loc 1 554 96 is_stmt 1 view -0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		.loc 1 554 96 is_stmt 0 view .LVU163
ARM GAS  /tmp/ccycMeWv.s 			page 22


 511 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 512              	.LCFI5:
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 4, -32
 515              		.cfi_offset 5, -28
 516              		.cfi_offset 6, -24
 517              		.cfi_offset 7, -20
 518              		.cfi_offset 8, -16
 519              		.cfi_offset 9, -12
 520              		.cfi_offset 10, -8
 521              		.cfi_offset 14, -4
 522 0004 0446     		mov	r4, r0
 523 0006 8846     		mov	r8, r1
 524 0008 9146     		mov	r9, r2
 555:base/debug/RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 525              		.loc 1 555 3 is_stmt 1 view .LVU164
 556:base/debug/RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 526              		.loc 1 556 3 view .LVU165
 557:base/debug/RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 527              		.loc 1 557 3 view .LVU166
 558:base/debug/RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 528              		.loc 1 558 3 view .LVU167
 559:base/debug/RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 529              		.loc 1 559 3 view .LVU168
 560:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 530              		.loc 1 560 3 view .LVU169
 561:base/debug/RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
 531              		.loc 1 561 3 view .LVU170
 532              	.LBB2:
 562:base/debug/RTT/SEGGER_RTT.c **** 
 563:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 533              		.loc 1 563 3 view .LVU171
 534              		.loc 1 563 3 view .LVU172
 535              	.LVL52:
 536              		.loc 1 563 3 view .LVU173
 537              		.loc 1 563 3 view .LVU174
 538 000a 264B     		ldr	r3, .L36
 539 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540 000e C3B1     		cbz	r3, .L33
 541              	.LVL53:
 542              	.L26:
 543              		.loc 1 563 3 discriminator 3 view .LVU175
 544              	.LBE2:
 545              		.loc 1 563 9 discriminator 3 view .LVU176
 564:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 546              		.loc 1 564 3 discriminator 3 view .LVU177
 565:base/debug/RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 547              		.loc 1 565 3 discriminator 3 view .LVU178
 566:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 548              		.loc 1 566 3 discriminator 3 view .LVU179
 549              		.loc 1 566 9 is_stmt 0 discriminator 3 view .LVU180
 550 0010 04EB4402 		add	r2, r4, r4, lsl #1
 551 0014 234B     		ldr	r3, .L36
 552 0016 03EBC203 		add	r3, r3, r2, lsl #3
 553 001a 9F6A     		ldr	r7, [r3, #40]
 554              	.LVL54:
 567:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
ARM GAS  /tmp/ccycMeWv.s 			page 23


 555              		.loc 1 567 3 is_stmt 1 discriminator 3 view .LVU181
 556              		.loc 1 567 9 is_stmt 0 discriminator 3 view .LVU182
 557 001c 5D6A     		ldr	r5, [r3, #36]
 558              	.LVL55:
 568:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 559              		.loc 1 568 3 is_stmt 1 discriminator 3 view .LVU183
 569:base/debug/RTT/SEGGER_RTT.c ****   //
 570:base/debug/RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 571:base/debug/RTT/SEGGER_RTT.c ****   //
 572:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 560              		.loc 1 572 3 discriminator 3 view .LVU184
 561              		.loc 1 572 6 is_stmt 0 discriminator 3 view .LVU185
 562 001e AF42     		cmp	r7, r5
 563 0020 12D8     		bhi	.L34
 568:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 564              		.loc 1 568 16 view .LVU186
 565 0022 0026     		movs	r6, #0
 566              	.LVL56:
 567              	.L27:
 573:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 574:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 575:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 576:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 577:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 578:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 579:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 580:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 581:base/debug/RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 582:base/debug/RTT/SEGGER_RTT.c ****     };
 583:base/debug/RTT/SEGGER_RTT.c **** #else
 584:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 585:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 586:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 587:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 588:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 589:base/debug/RTT/SEGGER_RTT.c **** #endif
 590:base/debug/RTT/SEGGER_RTT.c ****     //
 591:base/debug/RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 592:base/debug/RTT/SEGGER_RTT.c ****     //
 593:base/debug/RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 594:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 595:base/debug/RTT/SEGGER_RTT.c ****     }
 596:base/debug/RTT/SEGGER_RTT.c ****   }
 597:base/debug/RTT/SEGGER_RTT.c ****   //
 598:base/debug/RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 599:base/debug/RTT/SEGGER_RTT.c ****   //
 600:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 568              		.loc 1 600 3 is_stmt 1 view .LVU187
 569              		.loc 1 600 15 is_stmt 0 view .LVU188
 570 0024 ED1B     		subs	r5, r5, r7
 571              	.LVL57:
 601:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 572              		.loc 1 601 3 is_stmt 1 view .LVU189
 573              		.loc 1 601 15 is_stmt 0 view .LVU190
 574 0026 4D45     		cmp	r5, r9
 575 0028 28BF     		it	cs
 576 002a 4D46     		movcs	r5, r9
ARM GAS  /tmp/ccycMeWv.s 			page 24


 577              	.LVL58:
 602:base/debug/RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 578              		.loc 1 602 3 is_stmt 1 view .LVU191
 579              		.loc 1 602 6 is_stmt 0 view .LVU192
 580 002c 55BB     		cbnz	r5, .L35
 581              	.LVL59:
 582              	.L28:
 603:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 604:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 605:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 606:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 609:base/debug/RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 610:base/debug/RTT/SEGGER_RTT.c ****     };
 611:base/debug/RTT/SEGGER_RTT.c **** #else
 612:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 613:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 614:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 615:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 616:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 617:base/debug/RTT/SEGGER_RTT.c **** #endif
 618:base/debug/RTT/SEGGER_RTT.c ****   }
 619:base/debug/RTT/SEGGER_RTT.c ****   //
 620:base/debug/RTT/SEGGER_RTT.c ****   // Update read offset of buffer
 621:base/debug/RTT/SEGGER_RTT.c ****   //
 622:base/debug/RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 583              		.loc 1 622 3 is_stmt 1 view .LVU193
 584              		.loc 1 622 6 is_stmt 0 view .LVU194
 585 002e 2EB1     		cbz	r6, .L25
 623:base/debug/RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 586              		.loc 1 623 5 is_stmt 1 view .LVU195
 587              		.loc 1 623 18 is_stmt 0 view .LVU196
 588 0030 04EB4404 		add	r4, r4, r4, lsl #1
 589              	.LVL60:
 590              		.loc 1 623 18 view .LVU197
 591 0034 1B4B     		ldr	r3, .L36
 592 0036 03EBC403 		add	r3, r3, r4, lsl #3
 593 003a 9F62     		str	r7, [r3, #40]
 624:base/debug/RTT/SEGGER_RTT.c ****   }
 625:base/debug/RTT/SEGGER_RTT.c ****   //
 626:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesRead;
 594              		.loc 1 626 3 is_stmt 1 view .LVU198
 595              	.L25:
 627:base/debug/RTT/SEGGER_RTT.c **** }
 596              		.loc 1 627 1 is_stmt 0 view .LVU199
 597 003c 3046     		mov	r0, r6
 598 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 599              	.LVL61:
 600              	.L33:
 601              	.LBB3:
 563:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 602              		.loc 1 563 3 is_stmt 1 discriminator 1 view .LVU200
 603 0042 FFF7FEFF 		bl	_DoInit
 604              	.LVL62:
 563:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 605              		.loc 1 563 3 is_stmt 0 discriminator 1 view .LVU201
ARM GAS  /tmp/ccycMeWv.s 			page 25


 606 0046 E3E7     		b	.L26
 607              	.LVL63:
 608              	.L34:
 563:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 609              		.loc 1 563 3 discriminator 1 view .LVU202
 610              	.LBE3:
 573:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 611              		.loc 1 573 5 is_stmt 1 view .LVU203
 573:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 612              		.loc 1 573 24 is_stmt 0 view .LVU204
 613 0048 164B     		ldr	r3, .L36
 614 004a 03EBC20A 		add	r10, r3, r2, lsl #3
 615 004e DAF82060 		ldr	r6, [r10, #32]
 573:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 616              		.loc 1 573 17 view .LVU205
 617 0052 F61B     		subs	r6, r6, r7
 618              	.LVL64:
 574:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 619              		.loc 1 574 5 is_stmt 1 view .LVU206
 574:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 620              		.loc 1 574 17 is_stmt 0 view .LVU207
 621 0054 4E45     		cmp	r6, r9
 622 0056 28BF     		it	cs
 623 0058 4E46     		movcs	r6, r9
 624              	.LVL65:
 575:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 625              		.loc 1 575 5 is_stmt 1 view .LVU208
 575:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 626              		.loc 1 575 18 is_stmt 0 view .LVU209
 627 005a 621C     		adds	r2, r4, #1
 628 005c 02EB4202 		add	r2, r2, r2, lsl #1
 629 0060 03EBC203 		add	r3, r3, r2, lsl #3
 630 0064 5968     		ldr	r1, [r3, #4]
 631              	.LVL66:
 584:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 632              		.loc 1 584 5 is_stmt 1 view .LVU210
 633 0066 3246     		mov	r2, r6
 634 0068 3944     		add	r1, r1, r7
 635              	.LVL67:
 584:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 636              		.loc 1 584 5 is_stmt 0 view .LVU211
 637 006a 4046     		mov	r0, r8
 638 006c FFF7FEFF 		bl	memcpy
 639              	.LVL68:
 585:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 640              		.loc 1 585 5 is_stmt 1 view .LVU212
 586:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 641              		.loc 1 586 5 view .LVU213
 586:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 642              		.loc 1 586 18 is_stmt 0 view .LVU214
 643 0070 B044     		add	r8, r8, r6
 644              	.LVL69:
 587:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 645              		.loc 1 587 5 is_stmt 1 view .LVU215
 587:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 646              		.loc 1 587 18 is_stmt 0 view .LVU216
 647 0072 A9EB0609 		sub	r9, r9, r6
ARM GAS  /tmp/ccycMeWv.s 			page 26


 648              	.LVL70:
 588:base/debug/RTT/SEGGER_RTT.c **** #endif
 649              		.loc 1 588 5 is_stmt 1 view .LVU217
 588:base/debug/RTT/SEGGER_RTT.c **** #endif
 650              		.loc 1 588 18 is_stmt 0 view .LVU218
 651 0076 3744     		add	r7, r7, r6
 652              	.LVL71:
 593:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 653              		.loc 1 593 5 is_stmt 1 view .LVU219
 593:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 654              		.loc 1 593 23 is_stmt 0 view .LVU220
 655 0078 DAF82030 		ldr	r3, [r10, #32]
 593:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 656              		.loc 1 593 8 view .LVU221
 657 007c BB42     		cmp	r3, r7
 658 007e D1D1     		bne	.L27
 594:base/debug/RTT/SEGGER_RTT.c ****     }
 659              		.loc 1 594 13 view .LVU222
 660 0080 0027     		movs	r7, #0
 661              	.LVL72:
 594:base/debug/RTT/SEGGER_RTT.c ****     }
 662              		.loc 1 594 13 view .LVU223
 663 0082 CFE7     		b	.L27
 664              	.LVL73:
 665              	.L35:
 603:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 666              		.loc 1 603 5 is_stmt 1 view .LVU224
 603:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 667              		.loc 1 603 18 is_stmt 0 view .LVU225
 668 0084 631C     		adds	r3, r4, #1
 669 0086 03EB4303 		add	r3, r3, r3, lsl #1
 670 008a 064A     		ldr	r2, .L36
 671 008c 02EBC303 		add	r3, r2, r3, lsl #3
 672 0090 5968     		ldr	r1, [r3, #4]
 673              	.LVL74:
 612:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 674              		.loc 1 612 5 is_stmt 1 view .LVU226
 675 0092 2A46     		mov	r2, r5
 676 0094 3944     		add	r1, r1, r7
 677              	.LVL75:
 612:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 678              		.loc 1 612 5 is_stmt 0 view .LVU227
 679 0096 4046     		mov	r0, r8
 680 0098 FFF7FEFF 		bl	memcpy
 681              	.LVL76:
 613:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 682              		.loc 1 613 5 is_stmt 1 view .LVU228
 613:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 683              		.loc 1 613 18 is_stmt 0 view .LVU229
 684 009c 2E44     		add	r6, r6, r5
 685              	.LVL77:
 614:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 686              		.loc 1 614 5 is_stmt 1 view .LVU230
 615:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 687              		.loc 1 615 5 view .LVU231
 616:base/debug/RTT/SEGGER_RTT.c **** #endif
 688              		.loc 1 616 5 view .LVU232
ARM GAS  /tmp/ccycMeWv.s 			page 27


 616:base/debug/RTT/SEGGER_RTT.c **** #endif
 689              		.loc 1 616 18 is_stmt 0 view .LVU233
 690 009e 2F44     		add	r7, r7, r5
 691              	.LVL78:
 616:base/debug/RTT/SEGGER_RTT.c **** #endif
 692              		.loc 1 616 18 view .LVU234
 693 00a0 C5E7     		b	.L28
 694              	.L37:
 695 00a2 00BF     		.align	2
 696              	.L36:
 697 00a4 00000000 		.word	.LANCHOR1
 698              		.cfi_endproc
 699              	.LFE5:
 701              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 702              		.align	1
 703              		.global	SEGGER_RTT_ReadNoLock
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 707              		.fpu softvfp
 709              	SEGGER_RTT_ReadNoLock:
 710              	.LVL79:
 711              	.LFB6:
 628:base/debug/RTT/SEGGER_RTT.c **** 
 629:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 630:base/debug/RTT/SEGGER_RTT.c **** *
 631:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 632:base/debug/RTT/SEGGER_RTT.c **** *
 633:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 634:base/debug/RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 635:base/debug/RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 636:base/debug/RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 637:base/debug/RTT/SEGGER_RTT.c **** *
 638:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 639:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 640:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 641:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 642:base/debug/RTT/SEGGER_RTT.c **** *
 643:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 644:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 645:base/debug/RTT/SEGGER_RTT.c **** */
 646:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 712              		.loc 1 646 88 is_stmt 1 view -0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		.loc 1 646 88 is_stmt 0 view .LVU236
 717 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 718              	.LCFI6:
 719              		.cfi_def_cfa_offset 32
 720              		.cfi_offset 4, -32
 721              		.cfi_offset 5, -28
 722              		.cfi_offset 6, -24
 723              		.cfi_offset 7, -20
 724              		.cfi_offset 8, -16
 725              		.cfi_offset 9, -12
 726              		.cfi_offset 10, -8
ARM GAS  /tmp/ccycMeWv.s 			page 28


 727              		.cfi_offset 14, -4
 728 0004 0446     		mov	r4, r0
 729 0006 8846     		mov	r8, r1
 730 0008 9146     		mov	r9, r2
 647:base/debug/RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 731              		.loc 1 647 3 is_stmt 1 view .LVU237
 648:base/debug/RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 732              		.loc 1 648 3 view .LVU238
 649:base/debug/RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 733              		.loc 1 649 3 view .LVU239
 650:base/debug/RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 734              		.loc 1 650 3 view .LVU240
 651:base/debug/RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 735              		.loc 1 651 3 view .LVU241
 652:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 736              		.loc 1 652 3 view .LVU242
 653:base/debug/RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
 737              		.loc 1 653 3 view .LVU243
 738              	.LBB4:
 654:base/debug/RTT/SEGGER_RTT.c ****   //
 655:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 739              		.loc 1 655 3 view .LVU244
 740              		.loc 1 655 3 view .LVU245
 741              	.LVL80:
 742              		.loc 1 655 3 view .LVU246
 743              		.loc 1 655 3 view .LVU247
 744 000a 244B     		ldr	r3, .L49
 745 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 746 000e C3B1     		cbz	r3, .L46
 747              	.LVL81:
 748              	.L39:
 749              		.loc 1 655 3 discriminator 3 view .LVU248
 750              	.LBE4:
 751              		.loc 1 655 9 discriminator 3 view .LVU249
 656:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 752              		.loc 1 656 3 discriminator 3 view .LVU250
 657:base/debug/RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 753              		.loc 1 657 3 discriminator 3 view .LVU251
 658:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 754              		.loc 1 658 3 discriminator 3 view .LVU252
 755              		.loc 1 658 9 is_stmt 0 discriminator 3 view .LVU253
 756 0010 04EB4402 		add	r2, r4, r4, lsl #1
 757 0014 214B     		ldr	r3, .L49
 758 0016 03EBC203 		add	r3, r3, r2, lsl #3
 759 001a 1F6F     		ldr	r7, [r3, #112]
 760              	.LVL82:
 659:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 761              		.loc 1 659 3 is_stmt 1 discriminator 3 view .LVU254
 762              		.loc 1 659 9 is_stmt 0 discriminator 3 view .LVU255
 763 001c DD6E     		ldr	r5, [r3, #108]
 764              	.LVL83:
 660:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 765              		.loc 1 660 3 is_stmt 1 discriminator 3 view .LVU256
 661:base/debug/RTT/SEGGER_RTT.c ****   //
 662:base/debug/RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 663:base/debug/RTT/SEGGER_RTT.c ****   //
 664:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
ARM GAS  /tmp/ccycMeWv.s 			page 29


 766              		.loc 1 664 3 discriminator 3 view .LVU257
 767              		.loc 1 664 6 is_stmt 0 discriminator 3 view .LVU258
 768 001e AF42     		cmp	r7, r5
 769 0020 12D8     		bhi	.L47
 660:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 770              		.loc 1 660 16 view .LVU259
 771 0022 0026     		movs	r6, #0
 772              	.LVL84:
 773              	.L40:
 665:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 666:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 667:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 668:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 669:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 670:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 671:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 672:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 673:base/debug/RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 674:base/debug/RTT/SEGGER_RTT.c ****     };
 675:base/debug/RTT/SEGGER_RTT.c **** #else
 676:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 677:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 678:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 679:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 680:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 681:base/debug/RTT/SEGGER_RTT.c **** #endif
 682:base/debug/RTT/SEGGER_RTT.c ****     //
 683:base/debug/RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 684:base/debug/RTT/SEGGER_RTT.c ****     //
 685:base/debug/RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 686:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 687:base/debug/RTT/SEGGER_RTT.c ****     }
 688:base/debug/RTT/SEGGER_RTT.c ****   }
 689:base/debug/RTT/SEGGER_RTT.c ****   //
 690:base/debug/RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 691:base/debug/RTT/SEGGER_RTT.c ****   //
 692:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 774              		.loc 1 692 3 is_stmt 1 view .LVU260
 775              		.loc 1 692 15 is_stmt 0 view .LVU261
 776 0024 ED1B     		subs	r5, r5, r7
 777              	.LVL85:
 693:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 778              		.loc 1 693 3 is_stmt 1 view .LVU262
 779              		.loc 1 693 15 is_stmt 0 view .LVU263
 780 0026 4D45     		cmp	r5, r9
 781 0028 28BF     		it	cs
 782 002a 4D46     		movcs	r5, r9
 783              	.LVL86:
 694:base/debug/RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 784              		.loc 1 694 3 is_stmt 1 view .LVU264
 785              		.loc 1 694 6 is_stmt 0 view .LVU265
 786 002c 3DBB     		cbnz	r5, .L48
 787              	.LVL87:
 788              	.L41:
 695:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 696:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 697:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
ARM GAS  /tmp/ccycMeWv.s 			page 30


 698:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:base/debug/RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 701:base/debug/RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 702:base/debug/RTT/SEGGER_RTT.c ****     };
 703:base/debug/RTT/SEGGER_RTT.c **** #else
 704:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 705:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 706:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 707:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 708:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 709:base/debug/RTT/SEGGER_RTT.c **** #endif
 710:base/debug/RTT/SEGGER_RTT.c ****   }
 711:base/debug/RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 789              		.loc 1 711 3 is_stmt 1 view .LVU266
 790              		.loc 1 711 6 is_stmt 0 view .LVU267
 791 002e 2EB1     		cbz	r6, .L38
 712:base/debug/RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 792              		.loc 1 712 5 is_stmt 1 view .LVU268
 793              		.loc 1 712 18 is_stmt 0 view .LVU269
 794 0030 04EB4404 		add	r4, r4, r4, lsl #1
 795              	.LVL88:
 796              		.loc 1 712 18 view .LVU270
 797 0034 194B     		ldr	r3, .L49
 798 0036 03EBC403 		add	r3, r3, r4, lsl #3
 799 003a 1F67     		str	r7, [r3, #112]
 713:base/debug/RTT/SEGGER_RTT.c ****   }
 714:base/debug/RTT/SEGGER_RTT.c ****   //
 715:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesRead;
 800              		.loc 1 715 3 is_stmt 1 view .LVU271
 801              	.L38:
 716:base/debug/RTT/SEGGER_RTT.c **** }
 802              		.loc 1 716 1 is_stmt 0 view .LVU272
 803 003c 3046     		mov	r0, r6
 804 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 805              	.LVL89:
 806              	.L46:
 807              	.LBB5:
 655:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 808              		.loc 1 655 3 is_stmt 1 discriminator 1 view .LVU273
 809 0042 FFF7FEFF 		bl	_DoInit
 810              	.LVL90:
 655:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 811              		.loc 1 655 3 is_stmt 0 discriminator 1 view .LVU274
 812 0046 E3E7     		b	.L39
 813              	.LVL91:
 814              	.L47:
 655:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 815              		.loc 1 655 3 discriminator 1 view .LVU275
 816              	.LBE5:
 665:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 817              		.loc 1 665 5 is_stmt 1 view .LVU276
 665:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 818              		.loc 1 665 24 is_stmt 0 view .LVU277
 819 0048 1346     		mov	r3, r2
 820 004a 144A     		ldr	r2, .L49
 821 004c 02EBC30A 		add	r10, r2, r3, lsl #3
ARM GAS  /tmp/ccycMeWv.s 			page 31


 822 0050 DAF86860 		ldr	r6, [r10, #104]
 665:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 823              		.loc 1 665 17 view .LVU278
 824 0054 F61B     		subs	r6, r6, r7
 825              	.LVL92:
 666:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 826              		.loc 1 666 5 is_stmt 1 view .LVU279
 666:base/debug/RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 827              		.loc 1 666 17 is_stmt 0 view .LVU280
 828 0056 4E45     		cmp	r6, r9
 829 0058 28BF     		it	cs
 830 005a 4E46     		movcs	r6, r9
 831              	.LVL93:
 667:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 832              		.loc 1 667 5 is_stmt 1 view .LVU281
 667:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 833              		.loc 1 667 18 is_stmt 0 view .LVU282
 834 005c DAF86410 		ldr	r1, [r10, #100]
 835              	.LVL94:
 676:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 836              		.loc 1 676 5 is_stmt 1 view .LVU283
 837 0060 3246     		mov	r2, r6
 838 0062 3944     		add	r1, r1, r7
 839              	.LVL95:
 676:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 840              		.loc 1 676 5 is_stmt 0 view .LVU284
 841 0064 4046     		mov	r0, r8
 842 0066 FFF7FEFF 		bl	memcpy
 843              	.LVL96:
 677:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 844              		.loc 1 677 5 is_stmt 1 view .LVU285
 678:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 845              		.loc 1 678 5 view .LVU286
 678:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 846              		.loc 1 678 18 is_stmt 0 view .LVU287
 847 006a B044     		add	r8, r8, r6
 848              	.LVL97:
 679:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 849              		.loc 1 679 5 is_stmt 1 view .LVU288
 679:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 850              		.loc 1 679 18 is_stmt 0 view .LVU289
 851 006c A9EB0609 		sub	r9, r9, r6
 852              	.LVL98:
 680:base/debug/RTT/SEGGER_RTT.c **** #endif
 853              		.loc 1 680 5 is_stmt 1 view .LVU290
 680:base/debug/RTT/SEGGER_RTT.c **** #endif
 854              		.loc 1 680 18 is_stmt 0 view .LVU291
 855 0070 3744     		add	r7, r7, r6
 856              	.LVL99:
 685:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 857              		.loc 1 685 5 is_stmt 1 view .LVU292
 685:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 858              		.loc 1 685 23 is_stmt 0 view .LVU293
 859 0072 DAF86830 		ldr	r3, [r10, #104]
 685:base/debug/RTT/SEGGER_RTT.c ****       RdOff = 0u;
 860              		.loc 1 685 8 view .LVU294
 861 0076 BB42     		cmp	r3, r7
ARM GAS  /tmp/ccycMeWv.s 			page 32


 862 0078 D4D1     		bne	.L40
 686:base/debug/RTT/SEGGER_RTT.c ****     }
 863              		.loc 1 686 13 view .LVU295
 864 007a 0027     		movs	r7, #0
 865              	.LVL100:
 686:base/debug/RTT/SEGGER_RTT.c ****     }
 866              		.loc 1 686 13 view .LVU296
 867 007c D2E7     		b	.L40
 868              	.LVL101:
 869              	.L48:
 695:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870              		.loc 1 695 5 is_stmt 1 view .LVU297
 695:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 871              		.loc 1 695 18 is_stmt 0 view .LVU298
 872 007e 04EB4402 		add	r2, r4, r4, lsl #1
 873 0082 064B     		ldr	r3, .L49
 874 0084 03EBC203 		add	r3, r3, r2, lsl #3
 875 0088 596E     		ldr	r1, [r3, #100]
 876              	.LVL102:
 704:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 877              		.loc 1 704 5 is_stmt 1 view .LVU299
 878 008a 2A46     		mov	r2, r5
 879 008c 3944     		add	r1, r1, r7
 880              	.LVL103:
 704:base/debug/RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 881              		.loc 1 704 5 is_stmt 0 view .LVU300
 882 008e 4046     		mov	r0, r8
 883 0090 FFF7FEFF 		bl	memcpy
 884              	.LVL104:
 705:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 885              		.loc 1 705 5 is_stmt 1 view .LVU301
 705:base/debug/RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 886              		.loc 1 705 18 is_stmt 0 view .LVU302
 887 0094 2E44     		add	r6, r6, r5
 888              	.LVL105:
 706:base/debug/RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 889              		.loc 1 706 5 is_stmt 1 view .LVU303
 707:base/debug/RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 890              		.loc 1 707 5 view .LVU304
 708:base/debug/RTT/SEGGER_RTT.c **** #endif
 891              		.loc 1 708 5 view .LVU305
 708:base/debug/RTT/SEGGER_RTT.c **** #endif
 892              		.loc 1 708 18 is_stmt 0 view .LVU306
 893 0096 2F44     		add	r7, r7, r5
 894              	.LVL106:
 708:base/debug/RTT/SEGGER_RTT.c **** #endif
 895              		.loc 1 708 18 view .LVU307
 896 0098 C9E7     		b	.L41
 897              	.L50:
 898 009a 00BF     		.align	2
 899              	.L49:
 900 009c 00000000 		.word	.LANCHOR1
 901              		.cfi_endproc
 902              	.LFE6:
 904              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 905              		.align	1
 906              		.global	SEGGER_RTT_ReadUpBuffer
ARM GAS  /tmp/ccycMeWv.s 			page 33


 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu softvfp
 912              	SEGGER_RTT_ReadUpBuffer:
 913              	.LVL107:
 914              	.LFB7:
 717:base/debug/RTT/SEGGER_RTT.c **** 
 718:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 719:base/debug/RTT/SEGGER_RTT.c **** *
 720:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 721:base/debug/RTT/SEGGER_RTT.c **** *
 722:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 723:base/debug/RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 724:base/debug/RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 725:base/debug/RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 726:base/debug/RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 727:base/debug/RTT/SEGGER_RTT.c **** *
 728:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 729:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 730:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 731:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 732:base/debug/RTT/SEGGER_RTT.c **** *
 733:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 734:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 735:base/debug/RTT/SEGGER_RTT.c **** *
 736:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
 737:base/debug/RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 738:base/debug/RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 739:base/debug/RTT/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 740:base/debug/RTT/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 741:base/debug/RTT/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 742:base/debug/RTT/SEGGER_RTT.c **** */
 743:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 915              		.loc 1 743 92 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		.loc 1 743 92 is_stmt 0 view .LVU309
 920 0000 10B5     		push	{r4, lr}
 921              	.LCFI7:
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 4, -8
 924              		.cfi_offset 14, -4
 925 0002 0B46     		mov	r3, r1
 744:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 926              		.loc 1 744 3 is_stmt 1 view .LVU310
 927              	.LBB6:
 745:base/debug/RTT/SEGGER_RTT.c **** 
 746:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 928              		.loc 1 746 3 view .LVU311
 929              		.loc 1 746 3 view .LVU312
 930              		.syntax unified
 931              	@ 746 "base/debug/RTT/SEGGER_RTT.c" 1
 932 0004 EFF31184 		mrs   r4, basepri  
 933 0008 4FF02001 		mov   r1, #32       
 934 000c 81F31188 		msr   basepri, r1  
ARM GAS  /tmp/ccycMeWv.s 			page 34


 935              		
 936              	@ 0 "" 2
 937              	.LVL108:
 938              		.loc 1 746 20 view .LVU313
 747:base/debug/RTT/SEGGER_RTT.c ****   //
 748:base/debug/RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 749:base/debug/RTT/SEGGER_RTT.c ****   //
 750:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 939              		.loc 1 750 3 view .LVU314
 940              		.loc 1 750 18 is_stmt 0 view .LVU315
 941              		.thumb
 942              		.syntax unified
 943 0010 1946     		mov	r1, r3
 944 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 945              	.LVL109:
 751:base/debug/RTT/SEGGER_RTT.c ****   //
 752:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
 753:base/debug/RTT/SEGGER_RTT.c ****   //
 754:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 946              		.loc 1 754 3 is_stmt 1 view .LVU316
 947              		.syntax unified
 948              	@ 754 "base/debug/RTT/SEGGER_RTT.c" 1
 949 0016 84F31188 		msr   basepri, r4  
 950              		
 951              	@ 0 "" 2
 952              		.thumb
 953              		.syntax unified
 954              	.LBE6:
 955              		.loc 1 754 22 view .LVU317
 755:base/debug/RTT/SEGGER_RTT.c ****   //
 756:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesRead;
 956              		.loc 1 756 3 view .LVU318
 757:base/debug/RTT/SEGGER_RTT.c **** }
 957              		.loc 1 757 1 is_stmt 0 view .LVU319
 958 001a 10BD     		pop	{r4, pc}
 959              		.loc 1 757 1 view .LVU320
 960              		.cfi_endproc
 961              	.LFE7:
 963              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 964              		.align	1
 965              		.global	SEGGER_RTT_Read
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu softvfp
 971              	SEGGER_RTT_Read:
 972              	.LVL110:
 973              	.LFB8:
 758:base/debug/RTT/SEGGER_RTT.c **** 
 759:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 760:base/debug/RTT/SEGGER_RTT.c **** *
 761:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 762:base/debug/RTT/SEGGER_RTT.c **** *
 763:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 764:base/debug/RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 765:base/debug/RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 766:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 35


 767:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 768:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 769:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 770:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 771:base/debug/RTT/SEGGER_RTT.c **** *
 772:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 773:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 774:base/debug/RTT/SEGGER_RTT.c **** */
 775:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 974              		.loc 1 775 84 is_stmt 1 view -0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 978              		.loc 1 775 84 is_stmt 0 view .LVU322
 979 0000 10B5     		push	{r4, lr}
 980              	.LCFI8:
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 4, -8
 983              		.cfi_offset 14, -4
 984 0002 0B46     		mov	r3, r1
 776:base/debug/RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 985              		.loc 1 776 3 is_stmt 1 view .LVU323
 986              	.LBB7:
 777:base/debug/RTT/SEGGER_RTT.c **** 
 778:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 987              		.loc 1 778 3 view .LVU324
 988              		.loc 1 778 3 view .LVU325
 989              		.syntax unified
 990              	@ 778 "base/debug/RTT/SEGGER_RTT.c" 1
 991 0004 EFF31184 		mrs   r4, basepri  
 992 0008 4FF02001 		mov   r1, #32       
 993 000c 81F31188 		msr   basepri, r1  
 994              		
 995              	@ 0 "" 2
 996              	.LVL111:
 997              		.loc 1 778 20 view .LVU326
 779:base/debug/RTT/SEGGER_RTT.c ****   //
 780:base/debug/RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 781:base/debug/RTT/SEGGER_RTT.c ****   //
 782:base/debug/RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 998              		.loc 1 782 3 view .LVU327
 999              		.loc 1 782 18 is_stmt 0 view .LVU328
 1000              		.thumb
 1001              		.syntax unified
 1002 0010 1946     		mov	r1, r3
 1003 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1004              	.LVL112:
 783:base/debug/RTT/SEGGER_RTT.c ****   //
 784:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
 785:base/debug/RTT/SEGGER_RTT.c ****   //
 786:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1005              		.loc 1 786 3 is_stmt 1 view .LVU329
 1006              		.syntax unified
 1007              	@ 786 "base/debug/RTT/SEGGER_RTT.c" 1
 1008 0016 84F31188 		msr   basepri, r4  
 1009              		
 1010              	@ 0 "" 2
ARM GAS  /tmp/ccycMeWv.s 			page 36


 1011              		.thumb
 1012              		.syntax unified
 1013              	.LBE7:
 1014              		.loc 1 786 22 view .LVU330
 787:base/debug/RTT/SEGGER_RTT.c ****   //
 788:base/debug/RTT/SEGGER_RTT.c ****   return NumBytesRead;
 1015              		.loc 1 788 3 view .LVU331
 789:base/debug/RTT/SEGGER_RTT.c **** }
 1016              		.loc 1 789 1 is_stmt 0 view .LVU332
 1017 001a 10BD     		pop	{r4, pc}
 1018              		.loc 1 789 1 view .LVU333
 1019              		.cfi_endproc
 1020              	.LFE8:
 1022              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1023              		.align	1
 1024              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1028              		.fpu softvfp
 1030              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1031              	.LVL113:
 1032              	.LFB9:
 790:base/debug/RTT/SEGGER_RTT.c **** 
 791:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 792:base/debug/RTT/SEGGER_RTT.c **** *
 793:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 794:base/debug/RTT/SEGGER_RTT.c **** *
 795:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 796:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 797:base/debug/RTT/SEGGER_RTT.c **** *    control block.
 798:base/debug/RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 799:base/debug/RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 800:base/debug/RTT/SEGGER_RTT.c **** *
 801:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 802:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 803:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 804:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 805:base/debug/RTT/SEGGER_RTT.c **** *
 806:base/debug/RTT/SEGGER_RTT.c **** *  Notes
 807:base/debug/RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 808:base/debug/RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 809:base/debug/RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 810:base/debug/RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 811:base/debug/RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 812:base/debug/RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 813:base/debug/RTT/SEGGER_RTT.c **** */
 814:base/debug/RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1033              		.loc 1 814 104 is_stmt 1 view -0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 0
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 1037              		.loc 1 814 104 is_stmt 0 view .LVU335
 1038 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1039              	.LCFI9:
 1040              		.cfi_def_cfa_offset 32
 1041              		.cfi_offset 3, -32
ARM GAS  /tmp/ccycMeWv.s 			page 37


 1042              		.cfi_offset 4, -28
 1043              		.cfi_offset 5, -24
 1044              		.cfi_offset 6, -20
 1045              		.cfi_offset 7, -16
 1046              		.cfi_offset 8, -12
 1047              		.cfi_offset 9, -8
 1048              		.cfi_offset 14, -4
 1049 0004 0646     		mov	r6, r0
 1050 0006 8846     		mov	r8, r1
 1051 0008 1746     		mov	r7, r2
 815:base/debug/RTT/SEGGER_RTT.c ****   const char*           pData;
 1052              		.loc 1 815 3 is_stmt 1 view .LVU336
 816:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1053              		.loc 1 816 3 view .LVU337
 817:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1054              		.loc 1 817 3 view .LVU338
 818:base/debug/RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1055              		.loc 1 818 3 view .LVU339
 819:base/debug/RTT/SEGGER_RTT.c ****   //
 820:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 821:base/debug/RTT/SEGGER_RTT.c ****   //
 822:base/debug/RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1056              		.loc 1 822 3 view .LVU340
 1057              	.LVL114:
 823:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1058              		.loc 1 823 3 view .LVU341
 824:base/debug/RTT/SEGGER_RTT.c ****   //
 825:base/debug/RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 826:base/debug/RTT/SEGGER_RTT.c ****   //
 827:base/debug/RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1059              		.loc 1 827 3 view .LVU342
 1060              		.loc 1 827 12 is_stmt 0 view .LVU343
 1061 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1062              	.LVL115:
 1063              		.loc 1 827 12 view .LVU344
 1064 000e 3E4B     		ldr	r3, .L68
 1065 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1066 0014 596A     		ldr	r1, [r3, #36]
 1067              	.LVL116:
 1068              		.loc 1 827 28 view .LVU345
 1069 0016 9B6A     		ldr	r3, [r3, #40]
 1070              		.loc 1 827 6 view .LVU346
 1071 0018 9942     		cmp	r1, r3
 1072 001a 0ED0     		beq	.L66
 828:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 829:base/debug/RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1073              		.loc 1 829 10 is_stmt 1 view .LVU347
 1074              		.loc 1 829 35 is_stmt 0 view .LVU348
 1075 001c 00EB4002 		add	r2, r0, r0, lsl #1
 1076 0020 394B     		ldr	r3, .L68
 1077 0022 03EBC203 		add	r3, r3, r2, lsl #3
 1078 0026 9B6A     		ldr	r3, [r3, #40]
 1079              		.loc 1 829 13 view .LVU349
 1080 0028 9942     		cmp	r1, r3
 1081 002a 17D2     		bcs	.L58
 830:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1082              		.loc 1 830 5 is_stmt 1 view .LVU350
ARM GAS  /tmp/ccycMeWv.s 			page 38


 1083              		.loc 1 830 18 is_stmt 0 view .LVU351
 1084 002c 364B     		ldr	r3, .L68
 1085 002e 03EBC203 		add	r3, r3, r2, lsl #3
 1086 0032 9B6A     		ldr	r3, [r3, #40]
 1087              		.loc 1 830 26 view .LVU352
 1088 0034 5B1A     		subs	r3, r3, r1
 1089              		.loc 1 830 11 view .LVU353
 1090 0036 013B     		subs	r3, r3, #1
 1091              	.LVL117:
 1092              		.loc 1 830 11 view .LVU354
 1093 0038 04E0     		b	.L57
 1094              	.LVL118:
 1095              	.L66:
 828:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1096              		.loc 1 828 5 is_stmt 1 view .LVU355
 828:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1097              		.loc 1 828 18 is_stmt 0 view .LVU356
 1098 003a 334B     		ldr	r3, .L68
 1099 003c 03EBC203 		add	r3, r3, r2, lsl #3
 1100 0040 1B6A     		ldr	r3, [r3, #32]
 828:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1101              		.loc 1 828 11 view .LVU357
 1102 0042 013B     		subs	r3, r3, #1
 1103              	.LVL119:
 1104              	.L57:
 831:base/debug/RTT/SEGGER_RTT.c ****   } else {
 832:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 833:base/debug/RTT/SEGGER_RTT.c ****   }
 834:base/debug/RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1105              		.loc 1 834 3 is_stmt 1 view .LVU358
 1106              		.loc 1 834 6 is_stmt 0 view .LVU359
 1107 0044 BB42     		cmp	r3, r7
 1108 0046 25D2     		bcs	.L59
 835:base/debug/RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1109              		.loc 1 835 5 is_stmt 1 view .LVU360
 1110              		.loc 1 835 18 is_stmt 0 view .LVU361
 1111 0048 06EB4600 		add	r0, r6, r6, lsl #1
 1112              	.LVL120:
 1113              		.loc 1 835 18 view .LVU362
 1114 004c 2E4A     		ldr	r2, .L68
 1115 004e 02EBC002 		add	r2, r2, r0, lsl #3
 1116 0052 906A     		ldr	r0, [r2, #40]
 1117              		.loc 1 835 31 view .LVU363
 1118 0054 FB1A     		subs	r3, r7, r3
 1119              	.LVL121:
 1120              		.loc 1 835 18 view .LVU364
 1121 0056 0344     		add	r3, r3, r0
 1122 0058 9362     		str	r3, [r2, #40]
 836:base/debug/RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1123              		.loc 1 836 5 is_stmt 1 view .LVU365
 1124              		.loc 1 836 11 is_stmt 0 view .LVU366
 1125 005a 12E0     		b	.L60
 1126              	.LVL122:
 1127              	.L58:
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1128              		.loc 1 832 5 is_stmt 1 view .LVU367
 832:base/debug/RTT/SEGGER_RTT.c ****   }
ARM GAS  /tmp/ccycMeWv.s 			page 39


 1129              		.loc 1 832 18 is_stmt 0 view .LVU368
 1130 005c 00EB4003 		add	r3, r0, r0, lsl #1
 1131 0060 294A     		ldr	r2, .L68
 1132 0062 02EBC302 		add	r2, r2, r3, lsl #3
 1133 0066 936A     		ldr	r3, [r2, #40]
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1134              		.loc 1 832 26 view .LVU369
 1135 0068 5B1A     		subs	r3, r3, r1
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1136              		.loc 1 832 53 view .LVU370
 1137 006a 126A     		ldr	r2, [r2, #32]
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1138              		.loc 1 832 46 view .LVU371
 1139 006c 1344     		add	r3, r3, r2
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1140              		.loc 1 832 11 view .LVU372
 1141 006e 013B     		subs	r3, r3, #1
 1142              	.LVL123:
 832:base/debug/RTT/SEGGER_RTT.c ****   }
 1143              		.loc 1 832 11 view .LVU373
 1144 0070 E8E7     		b	.L57
 1145              	.LVL124:
 1146              	.L61:
 837:base/debug/RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1147              		.loc 1 837 7 is_stmt 1 view .LVU374
 1148              		.loc 1 837 20 is_stmt 0 view .LVU375
 1149 0072 06EB4602 		add	r2, r6, r6, lsl #1
 1150 0076 244B     		ldr	r3, .L68
 1151 0078 03EBC203 		add	r3, r3, r2, lsl #3
 1152 007c 9A6A     		ldr	r2, [r3, #40]
 1153 007e 121A     		subs	r2, r2, r0
 1154 0080 9A62     		str	r2, [r3, #40]
 1155              	.L60:
 836:base/debug/RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1156              		.loc 1 836 25 is_stmt 1 view .LVU376
 836:base/debug/RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1157              		.loc 1 836 17 is_stmt 0 view .LVU377
 1158 0082 06EB4602 		add	r2, r6, r6, lsl #1
 1159 0086 204B     		ldr	r3, .L68
 1160 0088 03EBC203 		add	r3, r3, r2, lsl #3
 1161 008c 9A6A     		ldr	r2, [r3, #40]
 836:base/debug/RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1162              		.loc 1 836 33 view .LVU378
 1163 008e 186A     		ldr	r0, [r3, #32]
 836:base/debug/RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1164              		.loc 1 836 25 view .LVU379
 1165 0090 8242     		cmp	r2, r0
 1166 0092 EED2     		bcs	.L61
 1167              	.L59:
 838:base/debug/RTT/SEGGER_RTT.c ****     }
 839:base/debug/RTT/SEGGER_RTT.c ****   }
 840:base/debug/RTT/SEGGER_RTT.c ****   //
 841:base/debug/RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 842:base/debug/RTT/SEGGER_RTT.c ****   //
 843:base/debug/RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1168              		.loc 1 843 3 is_stmt 1 view .LVU380
 1169              		.loc 1 843 16 is_stmt 0 view .LVU381
ARM GAS  /tmp/ccycMeWv.s 			page 40


 1170 0094 06EB4602 		add	r2, r6, r6, lsl #1
 1171 0098 1B4B     		ldr	r3, .L68
 1172 009a 03EBC203 		add	r3, r3, r2, lsl #3
 1173 009e 1C6A     		ldr	r4, [r3, #32]
 1174              		.loc 1 843 9 view .LVU382
 1175 00a0 641A     		subs	r4, r4, r1
 1176              	.LVL125:
 1177              	.L64:
 844:base/debug/RTT/SEGGER_RTT.c ****   do {
 1178              		.loc 1 844 3 is_stmt 1 view .LVU383
 845:base/debug/RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1179              		.loc 1 845 5 view .LVU384
 1180              		.loc 1 845 8 is_stmt 0 view .LVU385
 1181 00a2 A742     		cmp	r7, r4
 1182 00a4 19D3     		bcc	.L67
 846:base/debug/RTT/SEGGER_RTT.c ****       //
 847:base/debug/RTT/SEGGER_RTT.c ****       // Last round
 848:base/debug/RTT/SEGGER_RTT.c ****       //
 849:base/debug/RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 850:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 851:base/debug/RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 852:base/debug/RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 853:base/debug/RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 854:base/debug/RTT/SEGGER_RTT.c ****       };
 855:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 856:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 857:base/debug/RTT/SEGGER_RTT.c **** #else
 858:base/debug/RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 859:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 860:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 861:base/debug/RTT/SEGGER_RTT.c **** #endif
 862:base/debug/RTT/SEGGER_RTT.c ****       break;
 863:base/debug/RTT/SEGGER_RTT.c ****     } else {
 864:base/debug/RTT/SEGGER_RTT.c ****       //
 865:base/debug/RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 866:base/debug/RTT/SEGGER_RTT.c ****       //
 867:base/debug/RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1183              		.loc 1 867 7 is_stmt 1 view .LVU386
 1184              		.loc 1 867 20 is_stmt 0 view .LVU387
 1185 00a6 184D     		ldr	r5, .L68
 1186 00a8 731C     		adds	r3, r6, #1
 1187 00aa 03EB4303 		add	r3, r3, r3, lsl #1
 1188 00ae 05EBC303 		add	r3, r5, r3, lsl #3
 1189 00b2 5868     		ldr	r0, [r3, #4]
 1190              		.loc 1 867 37 view .LVU388
 1191 00b4 06EB4603 		add	r3, r6, r6, lsl #1
 1192 00b8 05EBC305 		add	r5, r5, r3, lsl #3
 1193 00bc 6B6A     		ldr	r3, [r5, #36]
 1194              	.LVL126:
 868:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 869:base/debug/RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 870:base/debug/RTT/SEGGER_RTT.c ****       while (Avail--) {
 871:base/debug/RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 872:base/debug/RTT/SEGGER_RTT.c ****       };
 873:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 874:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 875:base/debug/RTT/SEGGER_RTT.c **** #else
ARM GAS  /tmp/ccycMeWv.s 			page 41


 876:base/debug/RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1195              		.loc 1 876 7 is_stmt 1 view .LVU389
 1196 00be 2246     		mov	r2, r4
 1197 00c0 4146     		mov	r1, r8
 1198 00c2 1844     		add	r0, r0, r3
 1199              	.LVL127:
 1200              		.loc 1 876 7 is_stmt 0 view .LVU390
 1201 00c4 FFF7FEFF 		bl	memcpy
 1202              	.LVL128:
 877:base/debug/RTT/SEGGER_RTT.c ****       pData += Avail;
 1203              		.loc 1 877 7 is_stmt 1 view .LVU391
 1204              		.loc 1 877 13 is_stmt 0 view .LVU392
 1205 00c8 A044     		add	r8, r8, r4
 1206              	.LVL129:
 878:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1207              		.loc 1 878 17 is_stmt 1 view .LVU393
 879:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1208              		.loc 1 879 7 view .LVU394
 1209              		.loc 1 879 20 is_stmt 0 view .LVU395
 1210 00ca 0023     		movs	r3, #0
 1211 00cc 6B62     		str	r3, [r5, #36]
 880:base/debug/RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 1212              		.loc 1 880 7 is_stmt 1 view .LVU396
 1213              		.loc 1 880 16 is_stmt 0 view .LVU397
 1214 00ce 3F1B     		subs	r7, r7, r4
 1215              	.LVL130:
 881:base/debug/RTT/SEGGER_RTT.c **** #endif
 882:base/debug/RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1216              		.loc 1 882 7 is_stmt 1 view .LVU398
 1217              		.loc 1 882 21 is_stmt 0 view .LVU399
 1218 00d0 2C6A     		ldr	r4, [r5, #32]
 1219              	.LVL131:
 1220              		.loc 1 882 13 view .LVU400
 1221 00d2 013C     		subs	r4, r4, #1
 1222              	.LVL132:
 883:base/debug/RTT/SEGGER_RTT.c ****     }
 884:base/debug/RTT/SEGGER_RTT.c ****   } while (NumBytes);
 1223              		.loc 1 884 12 is_stmt 1 view .LVU401
 1224 00d4 002F     		cmp	r7, #0
 1225 00d6 E4D1     		bne	.L64
 1226 00d8 13E0     		b	.L55
 1227              	.L67:
 849:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1228              		.loc 1 849 7 view .LVU402
 849:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1229              		.loc 1 849 20 is_stmt 0 view .LVU403
 1230 00da 0B4C     		ldr	r4, .L68
 1231              	.LVL133:
 849:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1232              		.loc 1 849 20 view .LVU404
 1233 00dc 731C     		adds	r3, r6, #1
 1234 00de 03EB4303 		add	r3, r3, r3, lsl #1
 1235 00e2 04EBC303 		add	r3, r4, r3, lsl #3
 1236 00e6 5868     		ldr	r0, [r3, #4]
 849:base/debug/RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1237              		.loc 1 849 37 view .LVU405
 1238 00e8 06EB4605 		add	r5, r6, r6, lsl #1
ARM GAS  /tmp/ccycMeWv.s 			page 42


 1239 00ec 04EBC505 		add	r5, r4, r5, lsl #3
 1240 00f0 6B6A     		ldr	r3, [r5, #36]
 1241              	.LVL134:
 858:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1242              		.loc 1 858 7 is_stmt 1 view .LVU406
 1243 00f2 3A46     		mov	r2, r7
 1244 00f4 4146     		mov	r1, r8
 1245 00f6 1844     		add	r0, r0, r3
 1246              	.LVL135:
 858:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1247              		.loc 1 858 7 is_stmt 0 view .LVU407
 1248 00f8 FFF7FEFF 		bl	memcpy
 1249              	.LVL136:
 859:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1250              		.loc 1 859 17 is_stmt 1 view .LVU408
 860:base/debug/RTT/SEGGER_RTT.c **** #endif
 1251              		.loc 1 860 7 view .LVU409
 860:base/debug/RTT/SEGGER_RTT.c **** #endif
 1252              		.loc 1 860 20 is_stmt 0 view .LVU410
 1253 00fc 6B6A     		ldr	r3, [r5, #36]
 1254 00fe 3B44     		add	r3, r3, r7
 1255 0100 6B62     		str	r3, [r5, #36]
 862:base/debug/RTT/SEGGER_RTT.c ****     } else {
 1256              		.loc 1 862 7 is_stmt 1 view .LVU411
 1257              	.L55:
 885:base/debug/RTT/SEGGER_RTT.c **** }
 1258              		.loc 1 885 1 is_stmt 0 view .LVU412
 1259 0102 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1260              	.LVL137:
 1261              	.L69:
 1262              		.loc 1 885 1 view .LVU413
 1263 0106 00BF     		.align	2
 1264              	.L68:
 1265 0108 00000000 		.word	.LANCHOR1
 1266              		.cfi_endproc
 1267              	.LFE9:
 1269              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1270              		.align	1
 1271              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1275              		.fpu softvfp
 1277              	SEGGER_RTT_WriteDownBufferNoLock:
 1278              	.LVL138:
 1279              	.LFB10:
 886:base/debug/RTT/SEGGER_RTT.c **** 
 887:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 888:base/debug/RTT/SEGGER_RTT.c **** *
 889:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 890:base/debug/RTT/SEGGER_RTT.c **** *
 891:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 892:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 893:base/debug/RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 894:base/debug/RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 895:base/debug/RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 896:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 43


 897:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 898:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 899:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 900:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 901:base/debug/RTT/SEGGER_RTT.c **** *                 MUST be > 0!!!
 902:base/debug/RTT/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 903:base/debug/RTT/SEGGER_RTT.c **** *
 904:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 905:base/debug/RTT/SEGGER_RTT.c **** *    1: Data has been copied
 906:base/debug/RTT/SEGGER_RTT.c **** *    0: No space, data has not been copied
 907:base/debug/RTT/SEGGER_RTT.c **** *
 908:base/debug/RTT/SEGGER_RTT.c **** *  Notes
 909:base/debug/RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 910:base/debug/RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 911:base/debug/RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 912:base/debug/RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 913:base/debug/RTT/SEGGER_RTT.c **** */
 914:base/debug/RTT/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 915:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 916:base/debug/RTT/SEGGER_RTT.c ****   const char*           pData;
 917:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 918:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Avail;
 919:base/debug/RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 920:base/debug/RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 921:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Rem;
 922:base/debug/RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 923:base/debug/RTT/SEGGER_RTT.c ****   //
 924:base/debug/RTT/SEGGER_RTT.c ****   // Cases:
 925:base/debug/RTT/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 926:base/debug/RTT/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 927:base/debug/RTT/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 928:base/debug/RTT/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 929:base/debug/RTT/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 930:base/debug/RTT/SEGGER_RTT.c ****   //
 931:base/debug/RTT/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 932:base/debug/RTT/SEGGER_RTT.c ****   //
 933:base/debug/RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 934:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 935:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 936:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 937:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 938:base/debug/RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 939:base/debug/RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 940:base/debug/RTT/SEGGER_RTT.c **** CopyStraight:
 941:base/debug/RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 942:base/debug/RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 943:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 944:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 945:base/debug/RTT/SEGGER_RTT.c ****       return 1;
 946:base/debug/RTT/SEGGER_RTT.c ****     }
 947:base/debug/RTT/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 948:base/debug/RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 949:base/debug/RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 950:base/debug/RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 951:base/debug/RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 952:base/debug/RTT/SEGGER_RTT.c ****       NumBytes -= Rem;
 953:base/debug/RTT/SEGGER_RTT.c ****       //
ARM GAS  /tmp/ccycMeWv.s 			page 44


 954:base/debug/RTT/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 955:base/debug/RTT/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 956:base/debug/RTT/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 957:base/debug/RTT/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 958:base/debug/RTT/SEGGER_RTT.c ****       //
 959:base/debug/RTT/SEGGER_RTT.c ****       if (NumBytes) {
 960:base/debug/RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 961:base/debug/RTT/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 962:base/debug/RTT/SEGGER_RTT.c ****       }
 963:base/debug/RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 964:base/debug/RTT/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 965:base/debug/RTT/SEGGER_RTT.c ****       return 1;
 966:base/debug/RTT/SEGGER_RTT.c ****     }
 967:base/debug/RTT/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 968:base/debug/RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 969:base/debug/RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 970:base/debug/RTT/SEGGER_RTT.c ****       goto CopyStraight;
 971:base/debug/RTT/SEGGER_RTT.c ****     }
 972:base/debug/RTT/SEGGER_RTT.c ****   }
 973:base/debug/RTT/SEGGER_RTT.c ****   return 0;     // No space in buffer
 974:base/debug/RTT/SEGGER_RTT.c **** }
 975:base/debug/RTT/SEGGER_RTT.c **** #endif
 976:base/debug/RTT/SEGGER_RTT.c **** 
 977:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
 978:base/debug/RTT/SEGGER_RTT.c **** *
 979:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 980:base/debug/RTT/SEGGER_RTT.c **** *
 981:base/debug/RTT/SEGGER_RTT.c **** *  Function description
 982:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 983:base/debug/RTT/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 984:base/debug/RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
 985:base/debug/RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 986:base/debug/RTT/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
 987:base/debug/RTT/SEGGER_RTT.c **** *
 988:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
 989:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
 990:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 991:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 992:base/debug/RTT/SEGGER_RTT.c **** *
 993:base/debug/RTT/SEGGER_RTT.c **** *  Return value
 994:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
 995:base/debug/RTT/SEGGER_RTT.c **** *
 996:base/debug/RTT/SEGGER_RTT.c **** *  Notes
 997:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 998:base/debug/RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 999:base/debug/RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1000:base/debug/RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1001:base/debug/RTT/SEGGER_RTT.c **** *
1002:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
1003:base/debug/RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1004:base/debug/RTT/SEGGER_RTT.c **** */
1005:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1280              		.loc 1 1005 105 is_stmt 1 view -0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284              		.loc 1 1005 105 is_stmt 0 view .LVU415
ARM GAS  /tmp/ccycMeWv.s 			page 45


 1285 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1286              	.LCFI10:
 1287              		.cfi_def_cfa_offset 24
 1288              		.cfi_offset 3, -24
 1289              		.cfi_offset 4, -20
 1290              		.cfi_offset 5, -16
 1291              		.cfi_offset 6, -12
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 1294 0002 0E46     		mov	r6, r1
 1295 0004 1546     		mov	r5, r2
1006:base/debug/RTT/SEGGER_RTT.c ****   unsigned                Status;
 1296              		.loc 1 1006 3 is_stmt 1 view .LVU416
1007:base/debug/RTT/SEGGER_RTT.c ****   unsigned                Avail;
 1297              		.loc 1 1007 3 view .LVU417
1008:base/debug/RTT/SEGGER_RTT.c ****   const char*             pData;
 1298              		.loc 1 1008 3 view .LVU418
1009:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1299              		.loc 1 1009 3 view .LVU419
1010:base/debug/RTT/SEGGER_RTT.c ****   //
1011:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1012:base/debug/RTT/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1013:base/debug/RTT/SEGGER_RTT.c ****   //
1014:base/debug/RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1300              		.loc 1 1014 3 view .LVU420
 1301              	.LVL139:
1015:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1302              		.loc 1 1015 3 view .LVU421
 1303              		.loc 1 1015 9 is_stmt 0 view .LVU422
 1304 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1305              	.LVL140:
 1306              		.loc 1 1015 9 view .LVU423
 1307 000a C000     		lsls	r0, r0, #3
 1308 000c 6030     		adds	r0, r0, #96
 1309 000e 144F     		ldr	r7, .L77
 1310 0010 0744     		add	r7, r7, r0
 1311              	.LVL141:
1016:base/debug/RTT/SEGGER_RTT.c ****   //
1017:base/debug/RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1018:base/debug/RTT/SEGGER_RTT.c ****   //
1019:base/debug/RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1312              		.loc 1 1019 3 is_stmt 1 view .LVU424
 1313              		.loc 1 1019 16 is_stmt 0 view .LVU425
 1314 0012 7C69     		ldr	r4, [r7, #20]
 1315              		.loc 1 1019 3 view .LVU426
 1316 0014 012C     		cmp	r4, #1
 1317 0016 11D0     		beq	.L71
 1318 0018 022C     		cmp	r4, #2
 1319 001a 1CD0     		beq	.L72
 1320 001c 14B1     		cbz	r4, .L76
 1321 001e 0024     		movs	r4, #0
 1322              	.LVL142:
1020:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1021:base/debug/RTT/SEGGER_RTT.c ****     //
1022:base/debug/RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1023:base/debug/RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1024:base/debug/RTT/SEGGER_RTT.c ****     //
ARM GAS  /tmp/ccycMeWv.s 			page 46


1025:base/debug/RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1026:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1027:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
1028:base/debug/RTT/SEGGER_RTT.c ****     } else {
1029:base/debug/RTT/SEGGER_RTT.c ****       Status = NumBytes;
1030:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1031:base/debug/RTT/SEGGER_RTT.c ****     }
1032:base/debug/RTT/SEGGER_RTT.c ****     break;
1033:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1034:base/debug/RTT/SEGGER_RTT.c ****     //
1035:base/debug/RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1036:base/debug/RTT/SEGGER_RTT.c ****     //
1037:base/debug/RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1038:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1039:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1040:base/debug/RTT/SEGGER_RTT.c ****     break;
1041:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1042:base/debug/RTT/SEGGER_RTT.c ****     //
1043:base/debug/RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1044:base/debug/RTT/SEGGER_RTT.c ****     //
1045:base/debug/RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1046:base/debug/RTT/SEGGER_RTT.c ****     break;
1047:base/debug/RTT/SEGGER_RTT.c ****   default:
1048:base/debug/RTT/SEGGER_RTT.c ****     Status = 0u;
1049:base/debug/RTT/SEGGER_RTT.c ****     break;
1050:base/debug/RTT/SEGGER_RTT.c ****   }
1051:base/debug/RTT/SEGGER_RTT.c ****   //
1052:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
1053:base/debug/RTT/SEGGER_RTT.c ****   //
1054:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 1323              		.loc 1 1054 3 is_stmt 1 view .LVU427
 1324              	.L70:
1055:base/debug/RTT/SEGGER_RTT.c **** }
 1325              		.loc 1 1055 1 is_stmt 0 view .LVU428
 1326 0020 2046     		mov	r0, r4
 1327 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1328              	.LVL143:
 1329              	.L76:
1025:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1330              		.loc 1 1025 5 is_stmt 1 view .LVU429
1025:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1331              		.loc 1 1025 13 is_stmt 0 view .LVU430
 1332 0024 3846     		mov	r0, r7
 1333 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1334              	.LVL144:
1026:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
 1335              		.loc 1 1026 5 is_stmt 1 view .LVU431
1026:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
 1336              		.loc 1 1026 8 is_stmt 0 view .LVU432
 1337 002a 8542     		cmp	r5, r0
 1338 002c F8D8     		bhi	.L70
1029:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1339              		.loc 1 1029 7 is_stmt 1 view .LVU433
 1340              	.LVL145:
1030:base/debug/RTT/SEGGER_RTT.c ****     }
 1341              		.loc 1 1030 7 view .LVU434
 1342 002e 2A46     		mov	r2, r5
ARM GAS  /tmp/ccycMeWv.s 			page 47


 1343 0030 3146     		mov	r1, r6
 1344 0032 3846     		mov	r0, r7
 1345              	.LVL146:
1030:base/debug/RTT/SEGGER_RTT.c ****     }
 1346              		.loc 1 1030 7 is_stmt 0 view .LVU435
 1347 0034 FFF7FEFF 		bl	_WriteNoCheck
 1348              	.LVL147:
1029:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1349              		.loc 1 1029 14 view .LVU436
 1350 0038 2C46     		mov	r4, r5
 1351 003a F1E7     		b	.L70
 1352              	.LVL148:
 1353              	.L71:
1037:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1354              		.loc 1 1037 5 is_stmt 1 view .LVU437
1037:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1355              		.loc 1 1037 13 is_stmt 0 view .LVU438
 1356 003c 3846     		mov	r0, r7
 1357 003e FFF7FEFF 		bl	_GetAvailWriteSpace
 1358              	.LVL149:
1038:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1359              		.loc 1 1038 5 is_stmt 1 view .LVU439
1038:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1360              		.loc 1 1038 12 is_stmt 0 view .LVU440
 1361 0042 2C46     		mov	r4, r5
 1362 0044 8542     		cmp	r5, r0
 1363 0046 28BF     		it	cs
 1364 0048 0446     		movcs	r4, r0
 1365              	.LVL150:
1039:base/debug/RTT/SEGGER_RTT.c ****     break;
 1366              		.loc 1 1039 5 is_stmt 1 view .LVU441
 1367 004a 2246     		mov	r2, r4
 1368 004c 3146     		mov	r1, r6
 1369 004e 3846     		mov	r0, r7
 1370              	.LVL151:
1039:base/debug/RTT/SEGGER_RTT.c ****     break;
 1371              		.loc 1 1039 5 is_stmt 0 view .LVU442
 1372 0050 FFF7FEFF 		bl	_WriteNoCheck
 1373              	.LVL152:
1040:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1374              		.loc 1 1040 5 is_stmt 1 view .LVU443
 1375 0054 E4E7     		b	.L70
 1376              	.LVL153:
 1377              	.L72:
1045:base/debug/RTT/SEGGER_RTT.c ****     break;
 1378              		.loc 1 1045 5 view .LVU444
1045:base/debug/RTT/SEGGER_RTT.c ****     break;
 1379              		.loc 1 1045 14 is_stmt 0 view .LVU445
 1380 0056 3846     		mov	r0, r7
 1381 0058 FFF7FEFF 		bl	_WriteBlocking
 1382              	.LVL154:
1045:base/debug/RTT/SEGGER_RTT.c ****     break;
 1383              		.loc 1 1045 14 view .LVU446
 1384 005c 0446     		mov	r4, r0
 1385              	.LVL155:
1046:base/debug/RTT/SEGGER_RTT.c ****   default:
 1386              		.loc 1 1046 5 is_stmt 1 view .LVU447
ARM GAS  /tmp/ccycMeWv.s 			page 48


 1387 005e DFE7     		b	.L70
 1388              	.L78:
 1389              		.align	2
 1390              	.L77:
 1391 0060 00000000 		.word	.LANCHOR1
 1392              		.cfi_endproc
 1393              	.LFE10:
 1395              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1396              		.align	1
 1397              		.global	SEGGER_RTT_WriteNoLock
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu softvfp
 1403              	SEGGER_RTT_WriteNoLock:
 1404              	.LVL156:
 1405              	.LFB11:
1056:base/debug/RTT/SEGGER_RTT.c **** 
1057:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1058:base/debug/RTT/SEGGER_RTT.c **** *
1059:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1060:base/debug/RTT/SEGGER_RTT.c **** *
1061:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1062:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1063:base/debug/RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1064:base/debug/RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1065:base/debug/RTT/SEGGER_RTT.c **** *
1066:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1067:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1068:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1069:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1070:base/debug/RTT/SEGGER_RTT.c **** *
1071:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1072:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1073:base/debug/RTT/SEGGER_RTT.c **** *
1074:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1075:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1076:base/debug/RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1077:base/debug/RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1078:base/debug/RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1079:base/debug/RTT/SEGGER_RTT.c **** */
1080:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1406              		.loc 1 1080 95 view -0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 1410              		.loc 1 1080 95 is_stmt 0 view .LVU449
 1411 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1412              	.LCFI11:
 1413              		.cfi_def_cfa_offset 24
 1414              		.cfi_offset 3, -24
 1415              		.cfi_offset 4, -20
 1416              		.cfi_offset 5, -16
 1417              		.cfi_offset 6, -12
 1418              		.cfi_offset 7, -8
 1419              		.cfi_offset 14, -4
 1420 0002 0F46     		mov	r7, r1
ARM GAS  /tmp/ccycMeWv.s 			page 49


 1421 0004 1646     		mov	r6, r2
1081:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Status;
 1422              		.loc 1 1081 3 is_stmt 1 view .LVU450
1082:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1423              		.loc 1 1082 3 view .LVU451
1083:base/debug/RTT/SEGGER_RTT.c ****   const char*           pData;
 1424              		.loc 1 1083 3 view .LVU452
1084:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1425              		.loc 1 1084 3 view .LVU453
1085:base/debug/RTT/SEGGER_RTT.c ****   //
1086:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1087:base/debug/RTT/SEGGER_RTT.c ****   //
1088:base/debug/RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1426              		.loc 1 1088 3 view .LVU454
 1427              	.LVL157:
1089:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1428              		.loc 1 1089 3 view .LVU455
 1429              		.loc 1 1089 9 is_stmt 0 view .LVU456
 1430 0006 184B     		ldr	r3, .L86
 1431 0008 451C     		adds	r5, r0, #1
 1432 000a 05EB4505 		add	r5, r5, r5, lsl #1
 1433 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1434              	.LVL158:
1090:base/debug/RTT/SEGGER_RTT.c ****   //
1091:base/debug/RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1092:base/debug/RTT/SEGGER_RTT.c ****   //
1093:base/debug/RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1435              		.loc 1 1093 3 is_stmt 1 view .LVU457
 1436              		.loc 1 1093 16 is_stmt 0 view .LVU458
 1437 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1438              	.LVL159:
 1439              		.loc 1 1093 16 view .LVU459
 1440 0016 03EBC003 		add	r3, r3, r0, lsl #3
 1441 001a DC6A     		ldr	r4, [r3, #44]
 1442              		.loc 1 1093 3 view .LVU460
 1443 001c 012C     		cmp	r4, #1
 1444 001e 11D0     		beq	.L80
 1445 0020 022C     		cmp	r4, #2
 1446 0022 1CD0     		beq	.L81
 1447 0024 14B1     		cbz	r4, .L85
 1448 0026 0024     		movs	r4, #0
 1449              	.LVL160:
1094:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1095:base/debug/RTT/SEGGER_RTT.c ****     //
1096:base/debug/RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1097:base/debug/RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1098:base/debug/RTT/SEGGER_RTT.c ****     //
1099:base/debug/RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1100:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1101:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
1102:base/debug/RTT/SEGGER_RTT.c ****     } else {
1103:base/debug/RTT/SEGGER_RTT.c ****       Status = NumBytes;
1104:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1105:base/debug/RTT/SEGGER_RTT.c ****     }
1106:base/debug/RTT/SEGGER_RTT.c ****     break;
1107:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1108:base/debug/RTT/SEGGER_RTT.c ****     //
ARM GAS  /tmp/ccycMeWv.s 			page 50


1109:base/debug/RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1110:base/debug/RTT/SEGGER_RTT.c ****     //
1111:base/debug/RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1112:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1113:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1114:base/debug/RTT/SEGGER_RTT.c ****     break;
1115:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1116:base/debug/RTT/SEGGER_RTT.c ****     //
1117:base/debug/RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1118:base/debug/RTT/SEGGER_RTT.c ****     //
1119:base/debug/RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1120:base/debug/RTT/SEGGER_RTT.c ****     break;
1121:base/debug/RTT/SEGGER_RTT.c ****   default:
1122:base/debug/RTT/SEGGER_RTT.c ****     Status = 0u;
1123:base/debug/RTT/SEGGER_RTT.c ****     break;
1124:base/debug/RTT/SEGGER_RTT.c ****   }
1125:base/debug/RTT/SEGGER_RTT.c ****   //
1126:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
1127:base/debug/RTT/SEGGER_RTT.c ****   //
1128:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 1450              		.loc 1 1128 3 is_stmt 1 view .LVU461
 1451              	.L79:
1129:base/debug/RTT/SEGGER_RTT.c **** }
 1452              		.loc 1 1129 1 is_stmt 0 view .LVU462
 1453 0028 2046     		mov	r0, r4
 1454 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1455              	.LVL161:
 1456              	.L85:
1099:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1457              		.loc 1 1099 5 is_stmt 1 view .LVU463
1099:base/debug/RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1458              		.loc 1 1099 13 is_stmt 0 view .LVU464
 1459 002c 2846     		mov	r0, r5
 1460 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1461              	.LVL162:
1100:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
 1462              		.loc 1 1100 5 is_stmt 1 view .LVU465
1100:base/debug/RTT/SEGGER_RTT.c ****       Status = 0u;
 1463              		.loc 1 1100 8 is_stmt 0 view .LVU466
 1464 0032 8642     		cmp	r6, r0
 1465 0034 F8D8     		bhi	.L79
1103:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1466              		.loc 1 1103 7 is_stmt 1 view .LVU467
 1467              	.LVL163:
1104:base/debug/RTT/SEGGER_RTT.c ****     }
 1468              		.loc 1 1104 7 view .LVU468
 1469 0036 3246     		mov	r2, r6
 1470 0038 3946     		mov	r1, r7
 1471 003a 2846     		mov	r0, r5
 1472              	.LVL164:
1104:base/debug/RTT/SEGGER_RTT.c ****     }
 1473              		.loc 1 1104 7 is_stmt 0 view .LVU469
 1474 003c FFF7FEFF 		bl	_WriteNoCheck
 1475              	.LVL165:
1103:base/debug/RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1476              		.loc 1 1103 14 view .LVU470
 1477 0040 3446     		mov	r4, r6
ARM GAS  /tmp/ccycMeWv.s 			page 51


 1478 0042 F1E7     		b	.L79
 1479              	.LVL166:
 1480              	.L80:
1111:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1481              		.loc 1 1111 5 is_stmt 1 view .LVU471
1111:base/debug/RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1482              		.loc 1 1111 13 is_stmt 0 view .LVU472
 1483 0044 2846     		mov	r0, r5
 1484 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1485              	.LVL167:
1112:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1486              		.loc 1 1112 5 is_stmt 1 view .LVU473
1112:base/debug/RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1487              		.loc 1 1112 12 is_stmt 0 view .LVU474
 1488 004a 3446     		mov	r4, r6
 1489 004c 8642     		cmp	r6, r0
 1490 004e 28BF     		it	cs
 1491 0050 0446     		movcs	r4, r0
 1492              	.LVL168:
1113:base/debug/RTT/SEGGER_RTT.c ****     break;
 1493              		.loc 1 1113 5 is_stmt 1 view .LVU475
 1494 0052 2246     		mov	r2, r4
 1495 0054 3946     		mov	r1, r7
 1496 0056 2846     		mov	r0, r5
 1497              	.LVL169:
1113:base/debug/RTT/SEGGER_RTT.c ****     break;
 1498              		.loc 1 1113 5 is_stmt 0 view .LVU476
 1499 0058 FFF7FEFF 		bl	_WriteNoCheck
 1500              	.LVL170:
1114:base/debug/RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1501              		.loc 1 1114 5 is_stmt 1 view .LVU477
 1502 005c E4E7     		b	.L79
 1503              	.LVL171:
 1504              	.L81:
1119:base/debug/RTT/SEGGER_RTT.c ****     break;
 1505              		.loc 1 1119 5 view .LVU478
1119:base/debug/RTT/SEGGER_RTT.c ****     break;
 1506              		.loc 1 1119 14 is_stmt 0 view .LVU479
 1507 005e 2846     		mov	r0, r5
 1508 0060 FFF7FEFF 		bl	_WriteBlocking
 1509              	.LVL172:
1119:base/debug/RTT/SEGGER_RTT.c ****     break;
 1510              		.loc 1 1119 14 view .LVU480
 1511 0064 0446     		mov	r4, r0
 1512              	.LVL173:
1120:base/debug/RTT/SEGGER_RTT.c ****   default:
 1513              		.loc 1 1120 5 is_stmt 1 view .LVU481
 1514 0066 DFE7     		b	.L79
 1515              	.L87:
 1516              		.align	2
 1517              	.L86:
 1518 0068 00000000 		.word	.LANCHOR1
 1519              		.cfi_endproc
 1520              	.LFE11:
 1522              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1523              		.align	1
 1524              		.global	SEGGER_RTT_WriteDownBuffer
ARM GAS  /tmp/ccycMeWv.s 			page 52


 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu softvfp
 1530              	SEGGER_RTT_WriteDownBuffer:
 1531              	.LVL174:
 1532              	.LFB12:
1130:base/debug/RTT/SEGGER_RTT.c **** 
1131:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1132:base/debug/RTT/SEGGER_RTT.c **** *
1133:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1134:base/debug/RTT/SEGGER_RTT.c **** *
1135:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1136:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1137:base/debug/RTT/SEGGER_RTT.c **** *
1138:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1139:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1140:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1141:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1142:base/debug/RTT/SEGGER_RTT.c **** *
1143:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1144:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1145:base/debug/RTT/SEGGER_RTT.c **** *
1146:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1147:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1148:base/debug/RTT/SEGGER_RTT.c **** *
1149:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
1150:base/debug/RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1151:base/debug/RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1152:base/debug/RTT/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1153:base/debug/RTT/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1154:base/debug/RTT/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1155:base/debug/RTT/SEGGER_RTT.c **** */
1156:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1533              		.loc 1 1156 99 view -0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		.loc 1 1156 99 is_stmt 0 view .LVU483
 1538 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1539              	.LCFI12:
 1540              		.cfi_def_cfa_offset 24
 1541              		.cfi_offset 3, -24
 1542              		.cfi_offset 4, -20
 1543              		.cfi_offset 5, -16
 1544              		.cfi_offset 6, -12
 1545              		.cfi_offset 7, -8
 1546              		.cfi_offset 14, -4
 1547 0002 0446     		mov	r4, r0
 1548 0004 0D46     		mov	r5, r1
 1549 0006 1646     		mov	r6, r2
1157:base/debug/RTT/SEGGER_RTT.c ****   unsigned Status;
 1550              		.loc 1 1157 3 is_stmt 1 view .LVU484
 1551              	.LBB8:
1158:base/debug/RTT/SEGGER_RTT.c **** 
1159:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 1552              		.loc 1 1159 3 view .LVU485
ARM GAS  /tmp/ccycMeWv.s 			page 53


 1553              		.loc 1 1159 3 view .LVU486
 1554              	.LVL175:
 1555              		.loc 1 1159 3 view .LVU487
 1556              		.loc 1 1159 3 view .LVU488
 1557 0008 094B     		ldr	r3, .L92
 1558 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1559 000c 6BB1     		cbz	r3, .L91
 1560              	.LVL176:
 1561              	.L89:
 1562              		.loc 1 1159 3 discriminator 3 view .LVU489
 1563              	.LBE8:
 1564              		.loc 1 1159 9 discriminator 3 view .LVU490
 1565              	.LBB9:
1160:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1566              		.loc 1 1160 3 discriminator 3 view .LVU491
 1567              		.loc 1 1160 3 discriminator 3 view .LVU492
 1568              		.syntax unified
 1569              	@ 1160 "base/debug/RTT/SEGGER_RTT.c" 1
 1570 000e EFF31187 		mrs   r7, basepri  
 1571 0012 4FF02001 		mov   r1, #32       
 1572 0016 81F31188 		msr   basepri, r1  
 1573              		
 1574              	@ 0 "" 2
 1575              	.LVL177:
 1576              		.loc 1 1160 20 discriminator 3 view .LVU493
1161:base/debug/RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1577              		.loc 1 1161 3 discriminator 3 view .LVU494
 1578              		.loc 1 1161 12 is_stmt 0 discriminator 3 view .LVU495
 1579              		.thumb
 1580              		.syntax unified
 1581 001a 3246     		mov	r2, r6
 1582 001c 2946     		mov	r1, r5
 1583 001e 2046     		mov	r0, r4
 1584 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1585              	.LVL178:
1162:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1586              		.loc 1 1162 3 is_stmt 1 discriminator 3 view .LVU496
 1587              		.syntax unified
 1588              	@ 1162 "base/debug/RTT/SEGGER_RTT.c" 1
 1589 0024 87F31188 		msr   basepri, r7  
 1590              		
 1591              	@ 0 "" 2
 1592              		.thumb
 1593              		.syntax unified
 1594              	.LBE9:
 1595              		.loc 1 1162 22 discriminator 3 view .LVU497
1163:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 1596              		.loc 1 1163 3 discriminator 3 view .LVU498
1164:base/debug/RTT/SEGGER_RTT.c **** }
 1597              		.loc 1 1164 1 is_stmt 0 discriminator 3 view .LVU499
 1598 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1599              	.LVL179:
 1600              	.L91:
 1601              	.LBB10:
1159:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1602              		.loc 1 1159 3 is_stmt 1 discriminator 1 view .LVU500
 1603 002a FFF7FEFF 		bl	_DoInit
ARM GAS  /tmp/ccycMeWv.s 			page 54


 1604              	.LVL180:
1159:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1605              		.loc 1 1159 3 is_stmt 0 discriminator 1 view .LVU501
 1606 002e EEE7     		b	.L89
 1607              	.L93:
 1608              		.align	2
 1609              	.L92:
 1610 0030 00000000 		.word	.LANCHOR1
 1611              	.LBE10:
 1612              		.cfi_endproc
 1613              	.LFE12:
 1615              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1616              		.align	1
 1617              		.global	SEGGER_RTT_Write
 1618              		.syntax unified
 1619              		.thumb
 1620              		.thumb_func
 1621              		.fpu softvfp
 1623              	SEGGER_RTT_Write:
 1624              	.LVL181:
 1625              	.LFB13:
1165:base/debug/RTT/SEGGER_RTT.c **** 
1166:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1167:base/debug/RTT/SEGGER_RTT.c **** *
1168:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1169:base/debug/RTT/SEGGER_RTT.c **** *
1170:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1171:base/debug/RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1172:base/debug/RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1173:base/debug/RTT/SEGGER_RTT.c **** *
1174:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1175:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1176:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1177:base/debug/RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1178:base/debug/RTT/SEGGER_RTT.c **** *
1179:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1180:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1181:base/debug/RTT/SEGGER_RTT.c **** *
1182:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1183:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1184:base/debug/RTT/SEGGER_RTT.c **** */
1185:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1626              		.loc 1 1185 89 is_stmt 1 view -0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 0
 1629              		@ frame_needed = 0, uses_anonymous_args = 0
 1630              		.loc 1 1185 89 is_stmt 0 view .LVU503
 1631 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1632              	.LCFI13:
 1633              		.cfi_def_cfa_offset 24
 1634              		.cfi_offset 3, -24
 1635              		.cfi_offset 4, -20
 1636              		.cfi_offset 5, -16
 1637              		.cfi_offset 6, -12
 1638              		.cfi_offset 7, -8
 1639              		.cfi_offset 14, -4
 1640 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccycMeWv.s 			page 55


 1641 0004 0D46     		mov	r5, r1
 1642 0006 1646     		mov	r6, r2
1186:base/debug/RTT/SEGGER_RTT.c ****   unsigned Status;
 1643              		.loc 1 1186 3 is_stmt 1 view .LVU504
 1644              	.LBB11:
1187:base/debug/RTT/SEGGER_RTT.c **** 
1188:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 1645              		.loc 1 1188 3 view .LVU505
 1646              		.loc 1 1188 3 view .LVU506
 1647              	.LVL182:
 1648              		.loc 1 1188 3 view .LVU507
 1649              		.loc 1 1188 3 view .LVU508
 1650 0008 094B     		ldr	r3, .L98
 1651 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1652 000c 6BB1     		cbz	r3, .L97
 1653              	.LVL183:
 1654              	.L95:
 1655              		.loc 1 1188 3 discriminator 3 view .LVU509
 1656              	.LBE11:
 1657              		.loc 1 1188 9 discriminator 3 view .LVU510
 1658              	.LBB12:
1189:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1659              		.loc 1 1189 3 discriminator 3 view .LVU511
 1660              		.loc 1 1189 3 discriminator 3 view .LVU512
 1661              		.syntax unified
 1662              	@ 1189 "base/debug/RTT/SEGGER_RTT.c" 1
 1663 000e EFF31187 		mrs   r7, basepri  
 1664 0012 4FF02001 		mov   r1, #32       
 1665 0016 81F31188 		msr   basepri, r1  
 1666              		
 1667              	@ 0 "" 2
 1668              	.LVL184:
 1669              		.loc 1 1189 20 discriminator 3 view .LVU513
1190:base/debug/RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1670              		.loc 1 1190 3 discriminator 3 view .LVU514
 1671              		.loc 1 1190 12 is_stmt 0 discriminator 3 view .LVU515
 1672              		.thumb
 1673              		.syntax unified
 1674 001a 3246     		mov	r2, r6
 1675 001c 2946     		mov	r1, r5
 1676 001e 2046     		mov	r0, r4
 1677 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1678              	.LVL185:
1191:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1679              		.loc 1 1191 3 is_stmt 1 discriminator 3 view .LVU516
 1680              		.syntax unified
 1681              	@ 1191 "base/debug/RTT/SEGGER_RTT.c" 1
 1682 0024 87F31188 		msr   basepri, r7  
 1683              		
 1684              	@ 0 "" 2
 1685              		.thumb
 1686              		.syntax unified
 1687              	.LBE12:
 1688              		.loc 1 1191 22 discriminator 3 view .LVU517
1192:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 1689              		.loc 1 1192 3 discriminator 3 view .LVU518
1193:base/debug/RTT/SEGGER_RTT.c **** }
ARM GAS  /tmp/ccycMeWv.s 			page 56


 1690              		.loc 1 1193 1 is_stmt 0 discriminator 3 view .LVU519
 1691 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1692              	.LVL186:
 1693              	.L97:
 1694              	.LBB13:
1188:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1695              		.loc 1 1188 3 is_stmt 1 discriminator 1 view .LVU520
 1696 002a FFF7FEFF 		bl	_DoInit
 1697              	.LVL187:
1188:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1698              		.loc 1 1188 3 is_stmt 0 discriminator 1 view .LVU521
 1699 002e EEE7     		b	.L95
 1700              	.L99:
 1701              		.align	2
 1702              	.L98:
 1703 0030 00000000 		.word	.LANCHOR1
 1704              	.LBE13:
 1705              		.cfi_endproc
 1706              	.LFE13:
 1708              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1709              		.align	1
 1710              		.global	SEGGER_RTT_WriteString
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1716              	SEGGER_RTT_WriteString:
 1717              	.LVL188:
 1718              	.LFB14:
1194:base/debug/RTT/SEGGER_RTT.c **** 
1195:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1196:base/debug/RTT/SEGGER_RTT.c **** *
1197:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1198:base/debug/RTT/SEGGER_RTT.c **** *
1199:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1200:base/debug/RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1201:base/debug/RTT/SEGGER_RTT.c **** *    This data is read by the host.
1202:base/debug/RTT/SEGGER_RTT.c **** *
1203:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1204:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1205:base/debug/RTT/SEGGER_RTT.c **** *    s            Pointer to string.
1206:base/debug/RTT/SEGGER_RTT.c **** *
1207:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1208:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1209:base/debug/RTT/SEGGER_RTT.c **** *
1210:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1211:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1212:base/debug/RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1213:base/debug/RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1214:base/debug/RTT/SEGGER_RTT.c **** */
1215:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1719              		.loc 1 1215 70 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723              		.loc 1 1215 70 is_stmt 0 view .LVU523
 1724 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccycMeWv.s 			page 57


 1725              	.LCFI14:
 1726              		.cfi_def_cfa_offset 16
 1727              		.cfi_offset 3, -16
 1728              		.cfi_offset 4, -12
 1729              		.cfi_offset 5, -8
 1730              		.cfi_offset 14, -4
 1731 0002 0546     		mov	r5, r0
 1732 0004 0C46     		mov	r4, r1
1216:base/debug/RTT/SEGGER_RTT.c ****   unsigned Len;
 1733              		.loc 1 1216 3 is_stmt 1 view .LVU524
1217:base/debug/RTT/SEGGER_RTT.c **** 
1218:base/debug/RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1734              		.loc 1 1218 3 view .LVU525
 1735              		.loc 1 1218 9 is_stmt 0 view .LVU526
 1736 0006 0846     		mov	r0, r1
 1737              	.LVL189:
 1738              		.loc 1 1218 9 view .LVU527
 1739 0008 FFF7FEFF 		bl	strlen
 1740              	.LVL190:
 1741              		.loc 1 1218 9 view .LVU528
 1742 000c 0246     		mov	r2, r0
 1743              	.LVL191:
1219:base/debug/RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1744              		.loc 1 1219 3 is_stmt 1 view .LVU529
 1745              		.loc 1 1219 10 is_stmt 0 view .LVU530
 1746 000e 2146     		mov	r1, r4
 1747 0010 2846     		mov	r0, r5
 1748              	.LVL192:
 1749              		.loc 1 1219 10 view .LVU531
 1750 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1751              	.LVL193:
1220:base/debug/RTT/SEGGER_RTT.c **** }
 1752              		.loc 1 1220 1 view .LVU532
 1753 0016 38BD     		pop	{r3, r4, r5, pc}
 1754              		.loc 1 1220 1 view .LVU533
 1755              		.cfi_endproc
 1756              	.LFE14:
 1758              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1759              		.align	1
 1760              		.global	SEGGER_RTT_PutCharSkipNoLock
 1761              		.syntax unified
 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu softvfp
 1766              	SEGGER_RTT_PutCharSkipNoLock:
 1767              	.LVL194:
 1768              	.LFB15:
1221:base/debug/RTT/SEGGER_RTT.c **** 
1222:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1223:base/debug/RTT/SEGGER_RTT.c **** *
1224:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1225:base/debug/RTT/SEGGER_RTT.c **** *
1226:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1227:base/debug/RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1228:base/debug/RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1229:base/debug/RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1230:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 58


1231:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1232:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1233:base/debug/RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1234:base/debug/RTT/SEGGER_RTT.c **** *
1235:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1236:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1237:base/debug/RTT/SEGGER_RTT.c **** *
1238:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1239:base/debug/RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1240:base/debug/RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1241:base/debug/RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1242:base/debug/RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1243:base/debug/RTT/SEGGER_RTT.c **** */
1244:base/debug/RTT/SEGGER_RTT.c **** 
1245:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1769              		.loc 1 1245 69 is_stmt 1 view -0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              		@ link register save eliminated.
 1774              		.loc 1 1245 69 is_stmt 0 view .LVU535
 1775 0000 30B4     		push	{r4, r5}
 1776              	.LCFI15:
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 4, -8
 1779              		.cfi_offset 5, -4
1246:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1780              		.loc 1 1246 3 is_stmt 1 view .LVU536
1247:base/debug/RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1781              		.loc 1 1247 3 view .LVU537
1248:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Status;
 1782              		.loc 1 1248 3 view .LVU538
1249:base/debug/RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1783              		.loc 1 1249 3 view .LVU539
1250:base/debug/RTT/SEGGER_RTT.c ****   //
1251:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1252:base/debug/RTT/SEGGER_RTT.c ****   //
1253:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1784              		.loc 1 1253 3 view .LVU540
 1785              	.LVL195:
1254:base/debug/RTT/SEGGER_RTT.c ****   //
1255:base/debug/RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1256:base/debug/RTT/SEGGER_RTT.c ****   //
1257:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1786              		.loc 1 1257 3 view .LVU541
 1787              		.loc 1 1257 16 is_stmt 0 view .LVU542
 1788 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1789 0006 114B     		ldr	r3, .L109
 1790 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1791 000c 5D6A     		ldr	r5, [r3, #36]
 1792              		.loc 1 1257 9 view .LVU543
 1793 000e 6A1C     		adds	r2, r5, #1
 1794              	.LVL196:
1258:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1795              		.loc 1 1258 3 is_stmt 1 view .LVU544
 1796              		.loc 1 1258 21 is_stmt 0 view .LVU545
 1797 0010 1B6A     		ldr	r3, [r3, #32]
ARM GAS  /tmp/ccycMeWv.s 			page 59


 1798              		.loc 1 1258 6 view .LVU546
 1799 0012 9342     		cmp	r3, r2
 1800 0014 15D0     		beq	.L108
 1801              	.LVL197:
 1802              	.L103:
1259:base/debug/RTT/SEGGER_RTT.c ****     WrOff = 0;
1260:base/debug/RTT/SEGGER_RTT.c ****   }
1261:base/debug/RTT/SEGGER_RTT.c ****   //
1262:base/debug/RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1263:base/debug/RTT/SEGGER_RTT.c ****   //
1264:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1803              		.loc 1 1264 3 is_stmt 1 view .LVU547
 1804              		.loc 1 1264 21 is_stmt 0 view .LVU548
 1805 0016 00EB400C 		add	ip, r0, r0, lsl #1
 1806 001a 0C4B     		ldr	r3, .L109
 1807 001c 03EBCC03 		add	r3, r3, ip, lsl #3
 1808 0020 9B6A     		ldr	r3, [r3, #40]
 1809              		.loc 1 1264 6 view .LVU549
 1810 0022 9342     		cmp	r3, r2
 1811 0024 0FD0     		beq	.L106
1265:base/debug/RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1812              		.loc 1 1265 5 is_stmt 1 view .LVU550
 1813              		.loc 1 1265 18 is_stmt 0 view .LVU551
 1814 0026 094C     		ldr	r4, .L109
 1815 0028 431C     		adds	r3, r0, #1
 1816 002a 03EB4303 		add	r3, r3, r3, lsl #1
 1817 002e 04EBC303 		add	r3, r4, r3, lsl #3
 1818 0032 5B68     		ldr	r3, [r3, #4]
 1819              	.LVL198:
1266:base/debug/RTT/SEGGER_RTT.c ****     *pDst = c;
 1820              		.loc 1 1266 5 is_stmt 1 view .LVU552
 1821              		.loc 1 1266 11 is_stmt 0 view .LVU553
 1822 0034 5955     		strb	r1, [r3, r5]
1267:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1823              		.loc 1 1267 15 is_stmt 1 view .LVU554
1268:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1824              		.loc 1 1268 5 view .LVU555
 1825              		.loc 1 1268 18 is_stmt 0 view .LVU556
 1826 0036 04EBCC04 		add	r4, r4, ip, lsl #3
 1827 003a 6262     		str	r2, [r4, #36]
1269:base/debug/RTT/SEGGER_RTT.c ****     Status = 1;
 1828              		.loc 1 1269 5 is_stmt 1 view .LVU557
 1829              	.LVL199:
 1830              		.loc 1 1269 12 is_stmt 0 view .LVU558
 1831 003c 0120     		movs	r0, #1
 1832              	.LVL200:
 1833              	.L102:
1270:base/debug/RTT/SEGGER_RTT.c ****   } else {
1271:base/debug/RTT/SEGGER_RTT.c ****     Status = 0;
1272:base/debug/RTT/SEGGER_RTT.c ****   }
1273:base/debug/RTT/SEGGER_RTT.c ****   //
1274:base/debug/RTT/SEGGER_RTT.c ****   return Status;
1275:base/debug/RTT/SEGGER_RTT.c **** }
 1834              		.loc 1 1275 1 view .LVU559
 1835 003e 30BC     		pop	{r4, r5}
 1836              	.LCFI16:
 1837              		.cfi_remember_state
ARM GAS  /tmp/ccycMeWv.s 			page 60


 1838              		.cfi_restore 5
 1839              		.cfi_restore 4
 1840              		.cfi_def_cfa_offset 0
 1841 0040 7047     		bx	lr
 1842              	.LVL201:
 1843              	.L108:
 1844              	.LCFI17:
 1845              		.cfi_restore_state
1259:base/debug/RTT/SEGGER_RTT.c ****   }
 1846              		.loc 1 1259 11 view .LVU560
 1847 0042 0022     		movs	r2, #0
 1848              	.LVL202:
1259:base/debug/RTT/SEGGER_RTT.c ****   }
 1849              		.loc 1 1259 11 view .LVU561
 1850 0044 E7E7     		b	.L103
 1851              	.LVL203:
 1852              	.L106:
1271:base/debug/RTT/SEGGER_RTT.c ****   }
 1853              		.loc 1 1271 12 view .LVU562
 1854 0046 0020     		movs	r0, #0
 1855              	.LVL204:
1274:base/debug/RTT/SEGGER_RTT.c **** }
 1856              		.loc 1 1274 3 is_stmt 1 view .LVU563
1274:base/debug/RTT/SEGGER_RTT.c **** }
 1857              		.loc 1 1274 10 is_stmt 0 view .LVU564
 1858 0048 F9E7     		b	.L102
 1859              	.L110:
 1860 004a 00BF     		.align	2
 1861              	.L109:
 1862 004c 00000000 		.word	.LANCHOR1
 1863              		.cfi_endproc
 1864              	.LFE15:
 1866              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1867              		.align	1
 1868              		.global	SEGGER_RTT_PutCharSkip
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu softvfp
 1874              	SEGGER_RTT_PutCharSkip:
 1875              	.LVL205:
 1876              	.LFB16:
1276:base/debug/RTT/SEGGER_RTT.c **** 
1277:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1278:base/debug/RTT/SEGGER_RTT.c **** *
1279:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1280:base/debug/RTT/SEGGER_RTT.c **** *
1281:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1282:base/debug/RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1283:base/debug/RTT/SEGGER_RTT.c **** *
1284:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1285:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1286:base/debug/RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1287:base/debug/RTT/SEGGER_RTT.c **** *
1288:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1289:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1290:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 61


1291:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1292:base/debug/RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1293:base/debug/RTT/SEGGER_RTT.c **** */
1294:base/debug/RTT/SEGGER_RTT.c **** 
1295:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1877              		.loc 1 1295 63 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 1881              		.loc 1 1295 63 is_stmt 0 view .LVU566
 1882 0000 70B5     		push	{r4, r5, r6, lr}
 1883              	.LCFI18:
 1884              		.cfi_def_cfa_offset 16
 1885              		.cfi_offset 4, -16
 1886              		.cfi_offset 5, -12
 1887              		.cfi_offset 6, -8
 1888              		.cfi_offset 14, -4
 1889 0002 0446     		mov	r4, r0
 1890 0004 0D46     		mov	r5, r1
1296:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1891              		.loc 1 1296 3 is_stmt 1 view .LVU567
1297:base/debug/RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1892              		.loc 1 1297 3 view .LVU568
1298:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Status;
 1893              		.loc 1 1298 3 view .LVU569
1299:base/debug/RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1894              		.loc 1 1299 3 view .LVU570
 1895              	.LBB14:
1300:base/debug/RTT/SEGGER_RTT.c ****   //
1301:base/debug/RTT/SEGGER_RTT.c ****   // Prepare
1302:base/debug/RTT/SEGGER_RTT.c ****   //
1303:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 1896              		.loc 1 1303 3 view .LVU571
 1897              		.loc 1 1303 3 view .LVU572
 1898              	.LVL206:
 1899              		.loc 1 1303 3 view .LVU573
 1900              		.loc 1 1303 3 view .LVU574
 1901 0006 194B     		ldr	r3, .L120
 1902 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1903 000a 43B3     		cbz	r3, .L118
 1904              	.LVL207:
 1905              	.L112:
 1906              		.loc 1 1303 3 discriminator 3 view .LVU575
 1907              	.LBE14:
 1908              		.loc 1 1303 9 discriminator 3 view .LVU576
 1909              	.LBB15:
1304:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1910              		.loc 1 1304 3 discriminator 3 view .LVU577
 1911              		.loc 1 1304 3 discriminator 3 view .LVU578
 1912              		.syntax unified
 1913              	@ 1304 "base/debug/RTT/SEGGER_RTT.c" 1
 1914 000c EFF31182 		mrs   r2, basepri  
 1915 0010 4FF02001 		mov   r1, #32       
 1916 0014 81F31188 		msr   basepri, r1  
 1917              		
 1918              	@ 0 "" 2
 1919              	.LVL208:
ARM GAS  /tmp/ccycMeWv.s 			page 62


 1920              		.loc 1 1304 20 discriminator 3 view .LVU579
1305:base/debug/RTT/SEGGER_RTT.c ****   //
1306:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1307:base/debug/RTT/SEGGER_RTT.c ****   //
1308:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1921              		.loc 1 1308 3 discriminator 3 view .LVU580
1309:base/debug/RTT/SEGGER_RTT.c ****   //
1310:base/debug/RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1311:base/debug/RTT/SEGGER_RTT.c ****   //
1312:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1922              		.loc 1 1312 3 discriminator 3 view .LVU581
 1923              		.loc 1 1312 16 is_stmt 0 discriminator 3 view .LVU582
 1924              		.thumb
 1925              		.syntax unified
 1926 0018 04EB4401 		add	r1, r4, r4, lsl #1
 1927 001c 134B     		ldr	r3, .L120
 1928 001e 03EBC103 		add	r3, r3, r1, lsl #3
 1929 0022 5E6A     		ldr	r6, [r3, #36]
 1930              		.loc 1 1312 9 discriminator 3 view .LVU583
 1931 0024 711C     		adds	r1, r6, #1
 1932              	.LVL209:
1313:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1933              		.loc 1 1313 3 is_stmt 1 discriminator 3 view .LVU584
 1934              		.loc 1 1313 21 is_stmt 0 discriminator 3 view .LVU585
 1935 0026 1B6A     		ldr	r3, [r3, #32]
 1936              		.loc 1 1313 6 discriminator 3 view .LVU586
 1937 0028 8B42     		cmp	r3, r1
 1938 002a 1BD0     		beq	.L119
 1939              	.LVL210:
 1940              	.L113:
1314:base/debug/RTT/SEGGER_RTT.c ****     WrOff = 0;
1315:base/debug/RTT/SEGGER_RTT.c ****   }
1316:base/debug/RTT/SEGGER_RTT.c ****   //
1317:base/debug/RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1318:base/debug/RTT/SEGGER_RTT.c ****   //
1319:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1941              		.loc 1 1319 3 is_stmt 1 view .LVU587
 1942              		.loc 1 1319 21 is_stmt 0 view .LVU588
 1943 002c 04EB4400 		add	r0, r4, r4, lsl #1
 1944 0030 0E4B     		ldr	r3, .L120
 1945 0032 03EBC003 		add	r3, r3, r0, lsl #3
 1946 0036 9B6A     		ldr	r3, [r3, #40]
 1947              		.loc 1 1319 6 view .LVU589
 1948 0038 8B42     		cmp	r3, r1
 1949 003a 15D0     		beq	.L116
1320:base/debug/RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1950              		.loc 1 1320 5 is_stmt 1 view .LVU590
 1951              		.loc 1 1320 19 is_stmt 0 view .LVU591
 1952 003c 0B48     		ldr	r0, .L120
 1953 003e 631C     		adds	r3, r4, #1
 1954 0040 03EB4303 		add	r3, r3, r3, lsl #1
 1955 0044 00EBC303 		add	r3, r0, r3, lsl #3
 1956 0048 5B68     		ldr	r3, [r3, #4]
 1957              	.LVL211:
1321:base/debug/RTT/SEGGER_RTT.c ****     *pDst = c;
 1958              		.loc 1 1321 5 is_stmt 1 view .LVU592
 1959              		.loc 1 1321 11 is_stmt 0 view .LVU593
ARM GAS  /tmp/ccycMeWv.s 			page 63


 1960 004a 9D55     		strb	r5, [r3, r6]
1322:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1961              		.loc 1 1322 15 is_stmt 1 view .LVU594
1323:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1962              		.loc 1 1323 5 view .LVU595
 1963              		.loc 1 1323 18 is_stmt 0 view .LVU596
 1964 004c 04EB4404 		add	r4, r4, r4, lsl #1
 1965              	.LVL212:
 1966              		.loc 1 1323 18 view .LVU597
 1967 0050 00EBC400 		add	r0, r0, r4, lsl #3
 1968 0054 4162     		str	r1, [r0, #36]
1324:base/debug/RTT/SEGGER_RTT.c ****     Status = 1;
 1969              		.loc 1 1324 5 is_stmt 1 view .LVU598
 1970              	.LVL213:
 1971              		.loc 1 1324 12 is_stmt 0 view .LVU599
 1972 0056 0120     		movs	r0, #1
 1973              	.LVL214:
 1974              	.L114:
1325:base/debug/RTT/SEGGER_RTT.c ****   } else {
1326:base/debug/RTT/SEGGER_RTT.c ****     Status = 0;
1327:base/debug/RTT/SEGGER_RTT.c ****   }
1328:base/debug/RTT/SEGGER_RTT.c ****   //
1329:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
1330:base/debug/RTT/SEGGER_RTT.c ****   //
1331:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1975              		.loc 1 1331 3 is_stmt 1 view .LVU600
 1976              		.syntax unified
 1977              	@ 1331 "base/debug/RTT/SEGGER_RTT.c" 1
 1978 0058 82F31188 		msr   basepri, r2  
 1979              		
 1980              	@ 0 "" 2
 1981              		.thumb
 1982              		.syntax unified
 1983              	.LBE15:
 1984              		.loc 1 1331 22 view .LVU601
1332:base/debug/RTT/SEGGER_RTT.c ****   //
1333:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 1985              		.loc 1 1333 3 view .LVU602
1334:base/debug/RTT/SEGGER_RTT.c **** }
 1986              		.loc 1 1334 1 is_stmt 0 view .LVU603
 1987 005c 70BD     		pop	{r4, r5, r6, pc}
 1988              	.LVL215:
 1989              	.L118:
 1990              	.LBB16:
1303:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1991              		.loc 1 1303 3 is_stmt 1 discriminator 1 view .LVU604
 1992 005e FFF7FEFF 		bl	_DoInit
 1993              	.LVL216:
1303:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1994              		.loc 1 1303 3 is_stmt 0 discriminator 1 view .LVU605
 1995 0062 D3E7     		b	.L112
 1996              	.LVL217:
 1997              	.L119:
1303:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1998              		.loc 1 1303 3 discriminator 1 view .LVU606
 1999              	.LBE16:
 2000              	.LBB17:
ARM GAS  /tmp/ccycMeWv.s 			page 64


1314:base/debug/RTT/SEGGER_RTT.c ****   }
 2001              		.loc 1 1314 11 view .LVU607
 2002 0064 0021     		movs	r1, #0
 2003              	.LVL218:
1314:base/debug/RTT/SEGGER_RTT.c ****   }
 2004              		.loc 1 1314 11 view .LVU608
 2005 0066 E1E7     		b	.L113
 2006              	.LVL219:
 2007              	.L116:
1326:base/debug/RTT/SEGGER_RTT.c ****   }
 2008              		.loc 1 1326 12 view .LVU609
 2009 0068 0020     		movs	r0, #0
 2010 006a F5E7     		b	.L114
 2011              	.L121:
 2012              		.align	2
 2013              	.L120:
 2014 006c 00000000 		.word	.LANCHOR1
 2015              	.LBE17:
 2016              		.cfi_endproc
 2017              	.LFE16:
 2019              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2020              		.align	1
 2021              		.global	SEGGER_RTT_PutChar
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu softvfp
 2027              	SEGGER_RTT_PutChar:
 2028              	.LVL220:
 2029              	.LFB17:
1335:base/debug/RTT/SEGGER_RTT.c **** 
1336:base/debug/RTT/SEGGER_RTT.c ****  /*********************************************************************
1337:base/debug/RTT/SEGGER_RTT.c **** *
1338:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1339:base/debug/RTT/SEGGER_RTT.c **** *
1340:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1341:base/debug/RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1342:base/debug/RTT/SEGGER_RTT.c **** *
1343:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1344:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1345:base/debug/RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1346:base/debug/RTT/SEGGER_RTT.c **** *
1347:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1348:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1349:base/debug/RTT/SEGGER_RTT.c **** *
1350:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1351:base/debug/RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1352:base/debug/RTT/SEGGER_RTT.c **** */
1353:base/debug/RTT/SEGGER_RTT.c **** 
1354:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2030              		.loc 1 1354 59 is_stmt 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 0
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		.loc 1 1354 59 is_stmt 0 view .LVU611
 2035 0000 70B5     		push	{r4, r5, r6, lr}
 2036              	.LCFI19:
ARM GAS  /tmp/ccycMeWv.s 			page 65


 2037              		.cfi_def_cfa_offset 16
 2038              		.cfi_offset 4, -16
 2039              		.cfi_offset 5, -12
 2040              		.cfi_offset 6, -8
 2041              		.cfi_offset 14, -4
 2042 0002 0446     		mov	r4, r0
 2043 0004 0D46     		mov	r5, r1
1355:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2044              		.loc 1 1355 3 is_stmt 1 view .LVU612
1356:base/debug/RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 2045              		.loc 1 1356 3 view .LVU613
1357:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Status;
 2046              		.loc 1 1357 3 view .LVU614
1358:base/debug/RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 2047              		.loc 1 1358 3 view .LVU615
 2048              	.LBB18:
1359:base/debug/RTT/SEGGER_RTT.c ****   //
1360:base/debug/RTT/SEGGER_RTT.c ****   // Prepare
1361:base/debug/RTT/SEGGER_RTT.c ****   //
1362:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2049              		.loc 1 1362 3 view .LVU616
 2050              		.loc 1 1362 3 view .LVU617
 2051              	.LVL221:
 2052              		.loc 1 1362 3 view .LVU618
 2053              		.loc 1 1362 3 view .LVU619
 2054 0006 224B     		ldr	r3, .L133
 2055 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2056 000a 8BB3     		cbz	r3, .L131
 2057              	.LVL222:
 2058              	.L123:
 2059              		.loc 1 1362 3 discriminator 3 view .LVU620
 2060              	.LBE18:
 2061              		.loc 1 1362 9 discriminator 3 view .LVU621
 2062              	.LBB19:
1363:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2063              		.loc 1 1363 3 discriminator 3 view .LVU622
 2064              		.loc 1 1363 3 discriminator 3 view .LVU623
 2065              		.syntax unified
 2066              	@ 1363 "base/debug/RTT/SEGGER_RTT.c" 1
 2067 000c EFF31183 		mrs   r3, basepri  
 2068 0010 4FF02001 		mov   r1, #32       
 2069 0014 81F31188 		msr   basepri, r1  
 2070              		
 2071              	@ 0 "" 2
 2072              		.thumb
 2073              		.syntax unified
 2074 0018 1946     		mov	r1, r3
 2075              	.LVL223:
 2076              		.loc 1 1363 20 discriminator 3 view .LVU624
1364:base/debug/RTT/SEGGER_RTT.c ****   //
1365:base/debug/RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1366:base/debug/RTT/SEGGER_RTT.c ****   //
1367:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2077              		.loc 1 1367 3 discriminator 3 view .LVU625
1368:base/debug/RTT/SEGGER_RTT.c ****   //
1369:base/debug/RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1370:base/debug/RTT/SEGGER_RTT.c ****   //
ARM GAS  /tmp/ccycMeWv.s 			page 66


1371:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2078              		.loc 1 1371 3 discriminator 3 view .LVU626
 2079              		.loc 1 1371 16 is_stmt 0 discriminator 3 view .LVU627
 2080 001a 04EB4402 		add	r2, r4, r4, lsl #1
 2081 001e 1C4B     		ldr	r3, .L133
 2082 0020 03EBC203 		add	r3, r3, r2, lsl #3
 2083 0024 5E6A     		ldr	r6, [r3, #36]
 2084              		.loc 1 1371 9 discriminator 3 view .LVU628
 2085 0026 701C     		adds	r0, r6, #1
 2086              	.LVL224:
1372:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2087              		.loc 1 1372 3 is_stmt 1 discriminator 3 view .LVU629
 2088              		.loc 1 1372 21 is_stmt 0 discriminator 3 view .LVU630
 2089 0028 1B6A     		ldr	r3, [r3, #32]
 2090              		.loc 1 1372 6 discriminator 3 view .LVU631
 2091 002a 8342     		cmp	r3, r0
 2092 002c 23D0     		beq	.L132
 2093              	.LVL225:
 2094              	.L124:
1373:base/debug/RTT/SEGGER_RTT.c ****     WrOff = 0;
1374:base/debug/RTT/SEGGER_RTT.c ****   }
1375:base/debug/RTT/SEGGER_RTT.c ****   //
1376:base/debug/RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1377:base/debug/RTT/SEGGER_RTT.c ****   //
1378:base/debug/RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2095              		.loc 1 1378 3 is_stmt 1 view .LVU632
 2096              		.loc 1 1378 12 is_stmt 0 view .LVU633
 2097 002e 04EB4402 		add	r2, r4, r4, lsl #1
 2098 0032 174B     		ldr	r3, .L133
 2099 0034 03EBC203 		add	r3, r3, r2, lsl #3
 2100 0038 DB6A     		ldr	r3, [r3, #44]
 2101              		.loc 1 1378 6 view .LVU634
 2102 003a 022B     		cmp	r3, #2
 2103 003c 1DD0     		beq	.L126
 2104              	.L125:
1379:base/debug/RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1380:base/debug/RTT/SEGGER_RTT.c ****       ;
1381:base/debug/RTT/SEGGER_RTT.c ****     }
1382:base/debug/RTT/SEGGER_RTT.c ****   }
1383:base/debug/RTT/SEGGER_RTT.c ****   //
1384:base/debug/RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1385:base/debug/RTT/SEGGER_RTT.c ****   //
1386:base/debug/RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2105              		.loc 1 1386 3 is_stmt 1 view .LVU635
 2106              		.loc 1 1386 21 is_stmt 0 view .LVU636
 2107 003e 04EB4402 		add	r2, r4, r4, lsl #1
 2108 0042 134B     		ldr	r3, .L133
 2109 0044 03EBC203 		add	r3, r3, r2, lsl #3
 2110 0048 9B6A     		ldr	r3, [r3, #40]
 2111              		.loc 1 1386 6 view .LVU637
 2112 004a 8342     		cmp	r3, r0
 2113 004c 1ED0     		beq	.L129
1387:base/debug/RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2114              		.loc 1 1387 5 is_stmt 1 view .LVU638
 2115              		.loc 1 1387 19 is_stmt 0 view .LVU639
 2116 004e 104A     		ldr	r2, .L133
 2117 0050 631C     		adds	r3, r4, #1
ARM GAS  /tmp/ccycMeWv.s 			page 67


 2118 0052 03EB4303 		add	r3, r3, r3, lsl #1
 2119 0056 02EBC303 		add	r3, r2, r3, lsl #3
 2120 005a 5B68     		ldr	r3, [r3, #4]
 2121              	.LVL226:
1388:base/debug/RTT/SEGGER_RTT.c ****     *pDst = c;
 2122              		.loc 1 1388 5 is_stmt 1 view .LVU640
 2123              		.loc 1 1388 11 is_stmt 0 view .LVU641
 2124 005c 9D55     		strb	r5, [r3, r6]
1389:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2125              		.loc 1 1389 15 is_stmt 1 view .LVU642
1390:base/debug/RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2126              		.loc 1 1390 5 view .LVU643
 2127              		.loc 1 1390 18 is_stmt 0 view .LVU644
 2128 005e 04EB4404 		add	r4, r4, r4, lsl #1
 2129              	.LVL227:
 2130              		.loc 1 1390 18 view .LVU645
 2131 0062 02EBC402 		add	r2, r2, r4, lsl #3
 2132 0066 5062     		str	r0, [r2, #36]
1391:base/debug/RTT/SEGGER_RTT.c ****     Status = 1;
 2133              		.loc 1 1391 5 is_stmt 1 view .LVU646
 2134              	.LVL228:
 2135              		.loc 1 1391 12 is_stmt 0 view .LVU647
 2136 0068 0120     		movs	r0, #1
 2137              	.LVL229:
 2138              	.L127:
1392:base/debug/RTT/SEGGER_RTT.c ****   } else {
1393:base/debug/RTT/SEGGER_RTT.c ****     Status = 0;
1394:base/debug/RTT/SEGGER_RTT.c ****   }
1395:base/debug/RTT/SEGGER_RTT.c ****   //
1396:base/debug/RTT/SEGGER_RTT.c ****   // Finish up.
1397:base/debug/RTT/SEGGER_RTT.c ****   //
1398:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2139              		.loc 1 1398 3 is_stmt 1 view .LVU648
 2140              		.syntax unified
 2141              	@ 1398 "base/debug/RTT/SEGGER_RTT.c" 1
 2142 006a 81F31188 		msr   basepri, r1  
 2143              		
 2144              	@ 0 "" 2
 2145              		.thumb
 2146              		.syntax unified
 2147              	.LBE19:
 2148              		.loc 1 1398 22 view .LVU649
1399:base/debug/RTT/SEGGER_RTT.c ****   return Status;
 2149              		.loc 1 1399 3 view .LVU650
1400:base/debug/RTT/SEGGER_RTT.c **** }
 2150              		.loc 1 1400 1 is_stmt 0 view .LVU651
 2151 006e 70BD     		pop	{r4, r5, r6, pc}
 2152              	.LVL230:
 2153              	.L131:
 2154              	.LBB20:
1362:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2155              		.loc 1 1362 3 is_stmt 1 discriminator 1 view .LVU652
 2156 0070 FFF7FEFF 		bl	_DoInit
 2157              	.LVL231:
1362:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2158              		.loc 1 1362 3 is_stmt 0 discriminator 1 view .LVU653
 2159 0074 CAE7     		b	.L123
ARM GAS  /tmp/ccycMeWv.s 			page 68


 2160              	.LVL232:
 2161              	.L132:
1362:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2162              		.loc 1 1362 3 discriminator 1 view .LVU654
 2163              	.LBE20:
 2164              	.LBB21:
1373:base/debug/RTT/SEGGER_RTT.c ****   }
 2165              		.loc 1 1373 11 view .LVU655
 2166 0076 0020     		movs	r0, #0
 2167              	.LVL233:
1373:base/debug/RTT/SEGGER_RTT.c ****   }
 2168              		.loc 1 1373 11 view .LVU656
 2169 0078 D9E7     		b	.L124
 2170              	.LVL234:
 2171              	.L126:
1380:base/debug/RTT/SEGGER_RTT.c ****     }
 2172              		.loc 1 1380 7 is_stmt 1 discriminator 1 view .LVU657
1379:base/debug/RTT/SEGGER_RTT.c ****       ;
 2173              		.loc 1 1379 18 discriminator 1 view .LVU658
1379:base/debug/RTT/SEGGER_RTT.c ****       ;
 2174              		.loc 1 1379 26 is_stmt 0 discriminator 1 view .LVU659
 2175 007a 04EB4402 		add	r2, r4, r4, lsl #1
 2176 007e 044B     		ldr	r3, .L133
 2177 0080 03EBC203 		add	r3, r3, r2, lsl #3
 2178 0084 9B6A     		ldr	r3, [r3, #40]
1379:base/debug/RTT/SEGGER_RTT.c ****       ;
 2179              		.loc 1 1379 18 discriminator 1 view .LVU660
 2180 0086 8342     		cmp	r3, r0
 2181 0088 F7D0     		beq	.L126
 2182 008a D8E7     		b	.L125
 2183              	.L129:
1393:base/debug/RTT/SEGGER_RTT.c ****   }
 2184              		.loc 1 1393 12 view .LVU661
 2185 008c 0020     		movs	r0, #0
 2186              	.LVL235:
1393:base/debug/RTT/SEGGER_RTT.c ****   }
 2187              		.loc 1 1393 12 view .LVU662
 2188 008e ECE7     		b	.L127
 2189              	.L134:
 2190              		.align	2
 2191              	.L133:
 2192 0090 00000000 		.word	.LANCHOR1
 2193              	.LBE21:
 2194              		.cfi_endproc
 2195              	.LFE17:
 2197              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2198              		.align	1
 2199              		.global	SEGGER_RTT_GetKey
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2203              		.fpu softvfp
 2205              	SEGGER_RTT_GetKey:
 2206              	.LFB18:
1401:base/debug/RTT/SEGGER_RTT.c **** 
1402:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1403:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 69


1404:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1405:base/debug/RTT/SEGGER_RTT.c **** *
1406:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1407:base/debug/RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1408:base/debug/RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
1409:base/debug/RTT/SEGGER_RTT.c **** *
1410:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1411:base/debug/RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1412:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1413:base/debug/RTT/SEGGER_RTT.c **** *
1414:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1415:base/debug/RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1416:base/debug/RTT/SEGGER_RTT.c **** */
1417:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2207              		.loc 1 1417 29 is_stmt 1 view -0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 8
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211 0000 00B5     		push	{lr}
 2212              	.LCFI20:
 2213              		.cfi_def_cfa_offset 4
 2214              		.cfi_offset 14, -4
 2215 0002 83B0     		sub	sp, sp, #12
 2216              	.LCFI21:
 2217              		.cfi_def_cfa_offset 16
1418:base/debug/RTT/SEGGER_RTT.c ****   char c;
 2218              		.loc 1 1418 3 view .LVU664
1419:base/debug/RTT/SEGGER_RTT.c ****   int r;
 2219              		.loc 1 1419 3 view .LVU665
1420:base/debug/RTT/SEGGER_RTT.c **** 
1421:base/debug/RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2220              		.loc 1 1421 3 view .LVU666
 2221              		.loc 1 1421 12 is_stmt 0 view .LVU667
 2222 0004 0122     		movs	r2, #1
 2223 0006 0DF10701 		add	r1, sp, #7
 2224 000a 0020     		movs	r0, #0
 2225 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2226              	.LVL236:
1422:base/debug/RTT/SEGGER_RTT.c ****   if (r == 1) {
 2227              		.loc 1 1422 3 is_stmt 1 view .LVU668
 2228              		.loc 1 1422 6 is_stmt 0 view .LVU669
 2229 0010 0128     		cmp	r0, #1
 2230 0012 04D1     		bne	.L137
1423:base/debug/RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2231              		.loc 1 1423 5 is_stmt 1 view .LVU670
 2232              		.loc 1 1423 9 is_stmt 0 view .LVU671
 2233 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2234              	.LVL237:
 2235              	.L135:
1424:base/debug/RTT/SEGGER_RTT.c ****   } else {
1425:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1426:base/debug/RTT/SEGGER_RTT.c ****   }
1427:base/debug/RTT/SEGGER_RTT.c ****   return r;
1428:base/debug/RTT/SEGGER_RTT.c **** }
 2236              		.loc 1 1428 1 view .LVU672
 2237 0018 03B0     		add	sp, sp, #12
 2238              	.LCFI22:
ARM GAS  /tmp/ccycMeWv.s 			page 70


 2239              		.cfi_remember_state
 2240              		.cfi_def_cfa_offset 4
 2241              		@ sp needed
 2242 001a 5DF804FB 		ldr	pc, [sp], #4
 2243              	.LVL238:
 2244              	.L137:
 2245              	.LCFI23:
 2246              		.cfi_restore_state
1425:base/debug/RTT/SEGGER_RTT.c ****   }
 2247              		.loc 1 1425 7 view .LVU673
 2248 001e 4FF0FF30 		mov	r0, #-1
 2249              	.LVL239:
1427:base/debug/RTT/SEGGER_RTT.c **** }
 2250              		.loc 1 1427 3 is_stmt 1 view .LVU674
1427:base/debug/RTT/SEGGER_RTT.c **** }
 2251              		.loc 1 1427 10 is_stmt 0 view .LVU675
 2252 0022 F9E7     		b	.L135
 2253              		.cfi_endproc
 2254              	.LFE18:
 2256              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2257              		.align	1
 2258              		.global	SEGGER_RTT_WaitKey
 2259              		.syntax unified
 2260              		.thumb
 2261              		.thumb_func
 2262              		.fpu softvfp
 2264              	SEGGER_RTT_WaitKey:
 2265              	.LFB19:
1429:base/debug/RTT/SEGGER_RTT.c **** 
1430:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1431:base/debug/RTT/SEGGER_RTT.c **** *
1432:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1433:base/debug/RTT/SEGGER_RTT.c **** *
1434:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1435:base/debug/RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1436:base/debug/RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1437:base/debug/RTT/SEGGER_RTT.c **** *
1438:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1439:base/debug/RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1440:base/debug/RTT/SEGGER_RTT.c **** *
1441:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1442:base/debug/RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1443:base/debug/RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1444:base/debug/RTT/SEGGER_RTT.c **** */
1445:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2266              		.loc 1 1445 30 is_stmt 1 view -0
 2267              		.cfi_startproc
 2268              		@ args = 0, pretend = 0, frame = 0
 2269              		@ frame_needed = 0, uses_anonymous_args = 0
 2270 0000 08B5     		push	{r3, lr}
 2271              	.LCFI24:
 2272              		.cfi_def_cfa_offset 8
 2273              		.cfi_offset 3, -8
 2274              		.cfi_offset 14, -4
 2275              	.L140:
1446:base/debug/RTT/SEGGER_RTT.c ****   int r;
 2276              		.loc 1 1446 3 discriminator 1 view .LVU677
ARM GAS  /tmp/ccycMeWv.s 			page 71


1447:base/debug/RTT/SEGGER_RTT.c **** 
1448:base/debug/RTT/SEGGER_RTT.c ****   do {
 2277              		.loc 1 1448 3 discriminator 1 view .LVU678
1449:base/debug/RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2278              		.loc 1 1449 5 discriminator 1 view .LVU679
 2279              		.loc 1 1449 9 is_stmt 0 discriminator 1 view .LVU680
 2280 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2281              	.LVL240:
1450:base/debug/RTT/SEGGER_RTT.c ****   } while (r < 0);
 2282              		.loc 1 1450 14 is_stmt 1 discriminator 1 view .LVU681
 2283 0006 0028     		cmp	r0, #0
 2284              		.loc 1 1450 14 is_stmt 0 discriminator 1 view .LVU682
 2285 0008 FBDB     		blt	.L140
1451:base/debug/RTT/SEGGER_RTT.c ****   return r;
 2286              		.loc 1 1451 3 is_stmt 1 view .LVU683
1452:base/debug/RTT/SEGGER_RTT.c **** }
 2287              		.loc 1 1452 1 is_stmt 0 view .LVU684
 2288 000a 08BD     		pop	{r3, pc}
 2289              		.cfi_endproc
 2290              	.LFE19:
 2292              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2293              		.align	1
 2294              		.global	SEGGER_RTT_HasKey
 2295              		.syntax unified
 2296              		.thumb
 2297              		.thumb_func
 2298              		.fpu softvfp
 2300              	SEGGER_RTT_HasKey:
 2301              	.LFB20:
1453:base/debug/RTT/SEGGER_RTT.c **** 
1454:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1455:base/debug/RTT/SEGGER_RTT.c **** *
1456:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1457:base/debug/RTT/SEGGER_RTT.c **** *
1458:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1459:base/debug/RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1460:base/debug/RTT/SEGGER_RTT.c **** *
1461:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1462:base/debug/RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1463:base/debug/RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1464:base/debug/RTT/SEGGER_RTT.c **** *
1465:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1466:base/debug/RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1467:base/debug/RTT/SEGGER_RTT.c **** */
1468:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2302              		.loc 1 1468 29 is_stmt 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306 0000 08B5     		push	{r3, lr}
 2307              	.LCFI25:
 2308              		.cfi_def_cfa_offset 8
 2309              		.cfi_offset 3, -8
 2310              		.cfi_offset 14, -4
1469:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2311              		.loc 1 1469 3 view .LVU686
1470:base/debug/RTT/SEGGER_RTT.c ****   unsigned RdOff;
ARM GAS  /tmp/ccycMeWv.s 			page 72


 2312              		.loc 1 1470 3 view .LVU687
1471:base/debug/RTT/SEGGER_RTT.c ****   int r;
 2313              		.loc 1 1471 3 view .LVU688
 2314              	.LBB22:
1472:base/debug/RTT/SEGGER_RTT.c **** 
1473:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2315              		.loc 1 1473 3 view .LVU689
 2316              		.loc 1 1473 3 view .LVU690
 2317              	.LVL241:
 2318              		.loc 1 1473 3 view .LVU691
 2319              		.loc 1 1473 3 view .LVU692
 2320 0002 074B     		ldr	r3, .L148
 2321 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2322 0006 33B1     		cbz	r3, .L147
 2323              	.L143:
 2324              		.loc 1 1473 3 discriminator 3 view .LVU693
 2325              	.LBE22:
 2326              		.loc 1 1473 9 discriminator 3 view .LVU694
1474:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2327              		.loc 1 1474 3 discriminator 3 view .LVU695
 2328              	.LVL242:
1475:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2329              		.loc 1 1475 3 discriminator 3 view .LVU696
 2330              		.loc 1 1475 9 is_stmt 0 discriminator 3 view .LVU697
 2331 0008 054B     		ldr	r3, .L148
 2332 000a 1A6F     		ldr	r2, [r3, #112]
 2333              	.LVL243:
1476:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2334              		.loc 1 1476 3 is_stmt 1 discriminator 3 view .LVU698
 2335              		.loc 1 1476 21 is_stmt 0 discriminator 3 view .LVU699
 2336 000c DB6E     		ldr	r3, [r3, #108]
 2337              		.loc 1 1476 6 discriminator 3 view .LVU700
 2338 000e 9342     		cmp	r3, r2
 2339 0010 04D0     		beq	.L145
1477:base/debug/RTT/SEGGER_RTT.c ****     r = 1;
 2340              		.loc 1 1477 7 view .LVU701
 2341 0012 0120     		movs	r0, #1
 2342              	.L142:
1478:base/debug/RTT/SEGGER_RTT.c ****   } else {
1479:base/debug/RTT/SEGGER_RTT.c ****     r = 0;
1480:base/debug/RTT/SEGGER_RTT.c ****   }
1481:base/debug/RTT/SEGGER_RTT.c ****   return r;
1482:base/debug/RTT/SEGGER_RTT.c **** }
 2343              		.loc 1 1482 1 view .LVU702
 2344 0014 08BD     		pop	{r3, pc}
 2345              	.LVL244:
 2346              	.L147:
 2347              	.LBB23:
1473:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2348              		.loc 1 1473 3 is_stmt 1 discriminator 1 view .LVU703
 2349 0016 FFF7FEFF 		bl	_DoInit
 2350              	.LVL245:
 2351 001a F5E7     		b	.L143
 2352              	.LVL246:
 2353              	.L145:
1473:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2354              		.loc 1 1473 3 is_stmt 0 discriminator 1 view .LVU704
ARM GAS  /tmp/ccycMeWv.s 			page 73


 2355              	.LBE23:
1479:base/debug/RTT/SEGGER_RTT.c ****   }
 2356              		.loc 1 1479 7 view .LVU705
 2357 001c 0020     		movs	r0, #0
 2358              	.LVL247:
1481:base/debug/RTT/SEGGER_RTT.c **** }
 2359              		.loc 1 1481 3 is_stmt 1 view .LVU706
1481:base/debug/RTT/SEGGER_RTT.c **** }
 2360              		.loc 1 1481 10 is_stmt 0 view .LVU707
 2361 001e F9E7     		b	.L142
 2362              	.L149:
 2363              		.align	2
 2364              	.L148:
 2365 0020 00000000 		.word	.LANCHOR1
 2366              		.cfi_endproc
 2367              	.LFE20:
 2369              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2370              		.align	1
 2371              		.global	SEGGER_RTT_HasData
 2372              		.syntax unified
 2373              		.thumb
 2374              		.thumb_func
 2375              		.fpu softvfp
 2377              	SEGGER_RTT_HasData:
 2378              	.LVL248:
 2379              	.LFB21:
1483:base/debug/RTT/SEGGER_RTT.c **** 
1484:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1485:base/debug/RTT/SEGGER_RTT.c **** *
1486:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1487:base/debug/RTT/SEGGER_RTT.c **** *
1488:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1489:base/debug/RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1490:base/debug/RTT/SEGGER_RTT.c **** *
1491:base/debug/RTT/SEGGER_RTT.c **** *  Return value:
1492:base/debug/RTT/SEGGER_RTT.c **** *  ==0:  No data
1493:base/debug/RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1494:base/debug/RTT/SEGGER_RTT.c **** *
1495:base/debug/RTT/SEGGER_RTT.c **** */
1496:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2380              		.loc 1 1496 51 is_stmt 1 view -0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
1497:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2385              		.loc 1 1497 3 view .LVU709
1498:base/debug/RTT/SEGGER_RTT.c ****   unsigned                v;
 2386              		.loc 1 1498 3 view .LVU710
1499:base/debug/RTT/SEGGER_RTT.c **** 
1500:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2387              		.loc 1 1500 3 view .LVU711
1501:base/debug/RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 2388              		.loc 1 1501 3 view .LVU712
 2389              		.loc 1 1501 5 is_stmt 0 view .LVU713
 2390 0000 064B     		ldr	r3, .L151
 2391 0002 00EB4002 		add	r2, r0, r0, lsl #1
ARM GAS  /tmp/ccycMeWv.s 			page 74


 2392 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2393 000a D26E     		ldr	r2, [r2, #108]
 2394              	.LVL249:
1502:base/debug/RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2395              		.loc 1 1502 3 is_stmt 1 view .LVU714
 2396              		.loc 1 1502 19 is_stmt 0 view .LVU715
 2397 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2398              	.LVL250:
 2399              		.loc 1 1502 19 view .LVU716
 2400 0010 03EBC003 		add	r3, r3, r0, lsl #3
 2401 0014 186F     		ldr	r0, [r3, #112]
1503:base/debug/RTT/SEGGER_RTT.c **** }
 2402              		.loc 1 1503 1 view .LVU717
 2403 0016 101A     		subs	r0, r2, r0
 2404 0018 7047     		bx	lr
 2405              	.L152:
 2406 001a 00BF     		.align	2
 2407              	.L151:
 2408 001c 00000000 		.word	.LANCHOR1
 2409              		.cfi_endproc
 2410              	.LFE21:
 2412              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2413              		.align	1
 2414              		.global	SEGGER_RTT_HasDataUp
 2415              		.syntax unified
 2416              		.thumb
 2417              		.thumb_func
 2418              		.fpu softvfp
 2420              	SEGGER_RTT_HasDataUp:
 2421              	.LVL251:
 2422              	.LFB22:
1504:base/debug/RTT/SEGGER_RTT.c **** 
1505:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1506:base/debug/RTT/SEGGER_RTT.c **** *
1507:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1508:base/debug/RTT/SEGGER_RTT.c **** *
1509:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1510:base/debug/RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1511:base/debug/RTT/SEGGER_RTT.c **** *
1512:base/debug/RTT/SEGGER_RTT.c **** *  Return value:
1513:base/debug/RTT/SEGGER_RTT.c **** *  ==0:  No data
1514:base/debug/RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1515:base/debug/RTT/SEGGER_RTT.c **** *
1516:base/debug/RTT/SEGGER_RTT.c **** */
1517:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2423              		.loc 1 1517 53 is_stmt 1 view -0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427              		@ link register save eliminated.
1518:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2428              		.loc 1 1518 3 view .LVU719
1519:base/debug/RTT/SEGGER_RTT.c ****   unsigned                v;
 2429              		.loc 1 1519 3 view .LVU720
1520:base/debug/RTT/SEGGER_RTT.c **** 
1521:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2430              		.loc 1 1521 3 view .LVU721
ARM GAS  /tmp/ccycMeWv.s 			page 75


1522:base/debug/RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 2431              		.loc 1 1522 3 view .LVU722
 2432              		.loc 1 1522 5 is_stmt 0 view .LVU723
 2433 0000 064B     		ldr	r3, .L154
 2434 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2435 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2436 000a 926A     		ldr	r2, [r2, #40]
 2437              	.LVL252:
1523:base/debug/RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2438              		.loc 1 1523 3 is_stmt 1 view .LVU724
 2439              		.loc 1 1523 15 is_stmt 0 view .LVU725
 2440 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2441              	.LVL253:
 2442              		.loc 1 1523 15 view .LVU726
 2443 0010 03EBC003 		add	r3, r3, r0, lsl #3
 2444 0014 586A     		ldr	r0, [r3, #36]
1524:base/debug/RTT/SEGGER_RTT.c **** }
 2445              		.loc 1 1524 1 view .LVU727
 2446 0016 801A     		subs	r0, r0, r2
 2447 0018 7047     		bx	lr
 2448              	.L155:
 2449 001a 00BF     		.align	2
 2450              	.L154:
 2451 001c 00000000 		.word	.LANCHOR1
 2452              		.cfi_endproc
 2453              	.LFE22:
 2455              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2456              		.align	1
 2457              		.global	SEGGER_RTT_AllocDownBuffer
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2461              		.fpu softvfp
 2463              	SEGGER_RTT_AllocDownBuffer:
 2464              	.LVL254:
 2465              	.LFB23:
1525:base/debug/RTT/SEGGER_RTT.c **** 
1526:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1527:base/debug/RTT/SEGGER_RTT.c **** *
1528:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1529:base/debug/RTT/SEGGER_RTT.c **** *
1530:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1531:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1532:base/debug/RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1533:base/debug/RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1534:base/debug/RTT/SEGGER_RTT.c **** *
1535:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1536:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1537:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1538:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1539:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1540:base/debug/RTT/SEGGER_RTT.c **** *
1541:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1542:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1543:base/debug/RTT/SEGGER_RTT.c **** *     < 0 - Error
1544:base/debug/RTT/SEGGER_RTT.c **** */
1545:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
ARM GAS  /tmp/ccycMeWv.s 			page 76


 2466              		.loc 1 1545 103 is_stmt 1 view -0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              		.loc 1 1545 103 is_stmt 0 view .LVU729
 2471 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2472              	.LCFI26:
 2473              		.cfi_def_cfa_offset 24
 2474              		.cfi_offset 4, -24
 2475              		.cfi_offset 5, -20
 2476              		.cfi_offset 6, -16
 2477              		.cfi_offset 7, -12
 2478              		.cfi_offset 8, -8
 2479              		.cfi_offset 14, -4
 2480 0004 8046     		mov	r8, r0
 2481 0006 0F46     		mov	r7, r1
 2482 0008 1646     		mov	r6, r2
 2483 000a 1D46     		mov	r5, r3
1546:base/debug/RTT/SEGGER_RTT.c ****   int BufferIndex;
 2484              		.loc 1 1546 3 is_stmt 1 view .LVU730
1547:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2485              		.loc 1 1547 3 view .LVU731
 2486              	.LBB24:
1548:base/debug/RTT/SEGGER_RTT.c **** 
1549:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2487              		.loc 1 1549 3 view .LVU732
 2488              		.loc 1 1549 3 view .LVU733
 2489              	.LVL255:
 2490              		.loc 1 1549 3 view .LVU734
 2491              		.loc 1 1549 3 view .LVU735
 2492 000c 184B     		ldr	r3, .L164
 2493              	.LVL256:
 2494              		.loc 1 1549 3 is_stmt 0 view .LVU736
 2495 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2496 0010 3BB3     		cbz	r3, .L163
 2497              	.LVL257:
 2498              	.L157:
 2499              		.loc 1 1549 3 is_stmt 1 discriminator 3 view .LVU737
 2500              	.LBE24:
 2501              		.loc 1 1549 9 discriminator 3 view .LVU738
 2502              	.LBB25:
1550:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2503              		.loc 1 1550 3 discriminator 3 view .LVU739
 2504              		.loc 1 1550 3 discriminator 3 view .LVU740
 2505              		.syntax unified
 2506              	@ 1550 "base/debug/RTT/SEGGER_RTT.c" 1
 2507 0012 EFF31182 		mrs   r2, basepri  
 2508 0016 4FF02001 		mov   r1, #32       
 2509 001a 81F31188 		msr   basepri, r1  
 2510              		
 2511              	@ 0 "" 2
 2512              	.LVL258:
 2513              		.loc 1 1550 20 discriminator 3 view .LVU741
1551:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2514              		.loc 1 1551 3 discriminator 3 view .LVU742
1552:base/debug/RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2515              		.loc 1 1552 3 discriminator 3 view .LVU743
ARM GAS  /tmp/ccycMeWv.s 			page 77


 2516              		.loc 1 1552 15 is_stmt 0 discriminator 3 view .LVU744
 2517              		.thumb
 2518              		.syntax unified
 2519 001e 0020     		movs	r0, #0
 2520              	.LVL259:
 2521              	.L159:
1553:base/debug/RTT/SEGGER_RTT.c ****   do {
 2522              		.loc 1 1553 3 is_stmt 1 view .LVU745
1554:base/debug/RTT/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2523              		.loc 1 1554 5 view .LVU746
 2524              		.loc 1 1554 35 is_stmt 0 view .LVU747
 2525 0020 00EB400C 		add	ip, r0, r0, lsl #1
 2526 0024 124C     		ldr	r4, .L164
 2527 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
 2528 002a DCF86430 		ldr	r3, [ip, #100]
 2529              		.loc 1 1554 8 view .LVU748
 2530 002e 1BB1     		cbz	r3, .L158
1555:base/debug/RTT/SEGGER_RTT.c ****       break;
1556:base/debug/RTT/SEGGER_RTT.c ****     }
1557:base/debug/RTT/SEGGER_RTT.c ****     BufferIndex++;
 2531              		.loc 1 1557 5 is_stmt 1 view .LVU749
 2532              		.loc 1 1557 16 is_stmt 0 view .LVU750
 2533 0030 0130     		adds	r0, r0, #1
 2534              	.LVL260:
1558:base/debug/RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2535              		.loc 1 1558 24 is_stmt 1 view .LVU751
 2536              		.loc 1 1558 32 is_stmt 0 view .LVU752
 2537 0032 6369     		ldr	r3, [r4, #20]
 2538              		.loc 1 1558 24 view .LVU753
 2539 0034 8342     		cmp	r3, r0
 2540 0036 F3DC     		bgt	.L159
 2541              	.L158:
1559:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2542              		.loc 1 1559 3 is_stmt 1 view .LVU754
 2543              		.loc 1 1559 27 is_stmt 0 view .LVU755
 2544 0038 0D4B     		ldr	r3, .L164
 2545 003a 5B69     		ldr	r3, [r3, #20]
 2546              		.loc 1 1559 6 view .LVU756
 2547 003c 8342     		cmp	r3, r0
 2548 003e 13DD     		ble	.L161
1560:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2549              		.loc 1 1560 5 is_stmt 1 view .LVU757
 2550              		.loc 1 1560 45 is_stmt 0 view .LVU758
 2551 0040 00EB4001 		add	r1, r0, r0, lsl #1
 2552 0044 0A4B     		ldr	r3, .L164
 2553 0046 03EBC103 		add	r3, r3, r1, lsl #3
 2554 004a C3F86080 		str	r8, [r3, #96]
1561:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2555              		.loc 1 1561 5 is_stmt 1 view .LVU759
 2556              		.loc 1 1561 45 is_stmt 0 view .LVU760
 2557 004e 5F66     		str	r7, [r3, #100]
1562:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2558              		.loc 1 1562 5 is_stmt 1 view .LVU761
 2559              		.loc 1 1562 45 is_stmt 0 view .LVU762
 2560 0050 9E66     		str	r6, [r3, #104]
1563:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2561              		.loc 1 1563 5 is_stmt 1 view .LVU763
ARM GAS  /tmp/ccycMeWv.s 			page 78


 2562              		.loc 1 1563 45 is_stmt 0 view .LVU764
 2563 0052 0021     		movs	r1, #0
 2564 0054 1967     		str	r1, [r3, #112]
1564:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2565              		.loc 1 1564 5 is_stmt 1 view .LVU765
 2566              		.loc 1 1564 45 is_stmt 0 view .LVU766
 2567 0056 D966     		str	r1, [r3, #108]
1565:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2568              		.loc 1 1565 5 is_stmt 1 view .LVU767
 2569              		.loc 1 1565 45 is_stmt 0 view .LVU768
 2570 0058 5D67     		str	r5, [r3, #116]
1566:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2571              		.loc 1 1566 15 is_stmt 1 view .LVU769
 2572              	.LVL261:
 2573              	.L160:
1567:base/debug/RTT/SEGGER_RTT.c ****   } else {
1568:base/debug/RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1569:base/debug/RTT/SEGGER_RTT.c ****   }
1570:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2574              		.loc 1 1570 3 view .LVU770
 2575              		.syntax unified
 2576              	@ 1570 "base/debug/RTT/SEGGER_RTT.c" 1
 2577 005a 82F31188 		msr   basepri, r2  
 2578              		
 2579              	@ 0 "" 2
 2580              		.thumb
 2581              		.syntax unified
 2582              	.LBE25:
 2583              		.loc 1 1570 22 view .LVU771
1571:base/debug/RTT/SEGGER_RTT.c ****   return BufferIndex;
 2584              		.loc 1 1571 3 view .LVU772
1572:base/debug/RTT/SEGGER_RTT.c **** }
 2585              		.loc 1 1572 1 is_stmt 0 view .LVU773
 2586 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2587              	.LVL262:
 2588              	.L163:
 2589              	.LBB26:
1549:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2590              		.loc 1 1549 3 is_stmt 1 discriminator 1 view .LVU774
 2591 0062 FFF7FEFF 		bl	_DoInit
 2592              	.LVL263:
1549:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2593              		.loc 1 1549 3 is_stmt 0 discriminator 1 view .LVU775
 2594 0066 D4E7     		b	.L157
 2595              	.LVL264:
 2596              	.L161:
1549:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2597              		.loc 1 1549 3 discriminator 1 view .LVU776
 2598              	.LBE26:
 2599              	.LBB27:
1568:base/debug/RTT/SEGGER_RTT.c ****   }
 2600              		.loc 1 1568 17 view .LVU777
 2601 0068 4FF0FF30 		mov	r0, #-1
 2602              	.LVL265:
1568:base/debug/RTT/SEGGER_RTT.c ****   }
 2603              		.loc 1 1568 17 view .LVU778
 2604 006c F5E7     		b	.L160
ARM GAS  /tmp/ccycMeWv.s 			page 79


 2605              	.L165:
 2606 006e 00BF     		.align	2
 2607              	.L164:
 2608 0070 00000000 		.word	.LANCHOR1
 2609              	.LBE27:
 2610              		.cfi_endproc
 2611              	.LFE23:
 2613              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2614              		.align	1
 2615              		.global	SEGGER_RTT_AllocUpBuffer
 2616              		.syntax unified
 2617              		.thumb
 2618              		.thumb_func
 2619              		.fpu softvfp
 2621              	SEGGER_RTT_AllocUpBuffer:
 2622              	.LVL266:
 2623              	.LFB24:
1573:base/debug/RTT/SEGGER_RTT.c **** 
1574:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1575:base/debug/RTT/SEGGER_RTT.c **** *
1576:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1577:base/debug/RTT/SEGGER_RTT.c **** *
1578:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1579:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1580:base/debug/RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1581:base/debug/RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1582:base/debug/RTT/SEGGER_RTT.c **** *
1583:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1584:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1585:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1586:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1587:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1588:base/debug/RTT/SEGGER_RTT.c **** *
1589:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1590:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1591:base/debug/RTT/SEGGER_RTT.c **** *     < 0 - Error
1592:base/debug/RTT/SEGGER_RTT.c **** */
1593:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2624              		.loc 1 1593 101 is_stmt 1 view -0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 0
 2627              		@ frame_needed = 0, uses_anonymous_args = 0
 2628              		.loc 1 1593 101 is_stmt 0 view .LVU780
 2629 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2630              	.LCFI27:
 2631              		.cfi_def_cfa_offset 24
 2632              		.cfi_offset 3, -24
 2633              		.cfi_offset 4, -20
 2634              		.cfi_offset 5, -16
 2635              		.cfi_offset 6, -12
 2636              		.cfi_offset 7, -8
 2637              		.cfi_offset 14, -4
 2638 0002 0746     		mov	r7, r0
 2639 0004 0E46     		mov	r6, r1
 2640 0006 1546     		mov	r5, r2
 2641 0008 1C46     		mov	r4, r3
1594:base/debug/RTT/SEGGER_RTT.c ****   int BufferIndex;
ARM GAS  /tmp/ccycMeWv.s 			page 80


 2642              		.loc 1 1594 3 is_stmt 1 view .LVU781
1595:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2643              		.loc 1 1595 3 view .LVU782
 2644              	.LBB28:
1596:base/debug/RTT/SEGGER_RTT.c **** 
1597:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2645              		.loc 1 1597 3 view .LVU783
 2646              		.loc 1 1597 3 view .LVU784
 2647              	.LVL267:
 2648              		.loc 1 1597 3 view .LVU785
 2649              		.loc 1 1597 3 view .LVU786
 2650 000a 1E4B     		ldr	r3, .L174
 2651              	.LVL268:
 2652              		.loc 1 1597 3 is_stmt 0 view .LVU787
 2653 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2654 000e 002B     		cmp	r3, #0
 2655 0010 32D0     		beq	.L173
 2656              	.LVL269:
 2657              	.L167:
 2658              		.loc 1 1597 3 is_stmt 1 discriminator 3 view .LVU788
 2659              	.LBE28:
 2660              		.loc 1 1597 9 discriminator 3 view .LVU789
 2661              	.LBB29:
1598:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2662              		.loc 1 1598 3 discriminator 3 view .LVU790
 2663              		.loc 1 1598 3 discriminator 3 view .LVU791
 2664              		.syntax unified
 2665              	@ 1598 "base/debug/RTT/SEGGER_RTT.c" 1
 2666 0012 EFF31182 		mrs   r2, basepri  
 2667 0016 4FF02001 		mov   r1, #32       
 2668 001a 81F31188 		msr   basepri, r1  
 2669              		
 2670              	@ 0 "" 2
 2671              	.LVL270:
 2672              		.loc 1 1598 20 discriminator 3 view .LVU792
1599:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2673              		.loc 1 1599 3 discriminator 3 view .LVU793
1600:base/debug/RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2674              		.loc 1 1600 3 discriminator 3 view .LVU794
 2675              		.loc 1 1600 15 is_stmt 0 discriminator 3 view .LVU795
 2676              		.thumb
 2677              		.syntax unified
 2678 001e 0020     		movs	r0, #0
 2679              	.LVL271:
 2680              	.L169:
1601:base/debug/RTT/SEGGER_RTT.c ****   do {
 2681              		.loc 1 1601 3 is_stmt 1 view .LVU796
1602:base/debug/RTT/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2682              		.loc 1 1602 5 view .LVU797
 2683              		.loc 1 1602 33 is_stmt 0 view .LVU798
 2684 0020 00F1010C 		add	ip, r0, #1
 2685 0024 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2686 0028 164B     		ldr	r3, .L174
 2687 002a 03EBCC0C 		add	ip, r3, ip, lsl #3
 2688 002e DCF80430 		ldr	r3, [ip, #4]
 2689              		.loc 1 1602 8 view .LVU799
 2690 0032 23B1     		cbz	r3, .L168
ARM GAS  /tmp/ccycMeWv.s 			page 81


1603:base/debug/RTT/SEGGER_RTT.c ****       break;
1604:base/debug/RTT/SEGGER_RTT.c ****     }
1605:base/debug/RTT/SEGGER_RTT.c ****     BufferIndex++;
 2691              		.loc 1 1605 5 is_stmt 1 view .LVU800
 2692              		.loc 1 1605 16 is_stmt 0 view .LVU801
 2693 0034 0130     		adds	r0, r0, #1
 2694              	.LVL272:
1606:base/debug/RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2695              		.loc 1 1606 24 is_stmt 1 view .LVU802
 2696              		.loc 1 1606 32 is_stmt 0 view .LVU803
 2697 0036 134B     		ldr	r3, .L174
 2698 0038 1B69     		ldr	r3, [r3, #16]
 2699              		.loc 1 1606 24 view .LVU804
 2700 003a 8342     		cmp	r3, r0
 2701 003c F0DC     		bgt	.L169
 2702              	.L168:
1607:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2703              		.loc 1 1607 3 is_stmt 1 view .LVU805
 2704              		.loc 1 1607 27 is_stmt 0 view .LVU806
 2705 003e 114B     		ldr	r3, .L174
 2706 0040 1B69     		ldr	r3, [r3, #16]
 2707              		.loc 1 1607 6 view .LVU807
 2708 0042 8342     		cmp	r3, r0
 2709 0044 1BDD     		ble	.L171
1608:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2710              		.loc 1 1608 5 is_stmt 1 view .LVU808
 2711              		.loc 1 1608 43 is_stmt 0 view .LVU809
 2712 0046 0F4B     		ldr	r3, .L174
 2713 0048 411C     		adds	r1, r0, #1
 2714 004a 01EB410C 		add	ip, r1, r1, lsl #1
 2715 004e 4FEACC0C 		lsl	ip, ip, #3
 2716 0052 43F80C70 		str	r7, [r3, ip]
1609:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2717              		.loc 1 1609 5 is_stmt 1 view .LVU810
 2718              		.loc 1 1609 43 is_stmt 0 view .LVU811
 2719 0056 01EB4101 		add	r1, r1, r1, lsl #1
 2720 005a 03EBC101 		add	r1, r3, r1, lsl #3
 2721 005e 4E60     		str	r6, [r1, #4]
1610:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2722              		.loc 1 1610 5 is_stmt 1 view .LVU812
 2723              		.loc 1 1610 43 is_stmt 0 view .LVU813
 2724 0060 00EB4001 		add	r1, r0, r0, lsl #1
 2725 0064 03EBC103 		add	r3, r3, r1, lsl #3
 2726 0068 1D62     		str	r5, [r3, #32]
1611:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2727              		.loc 1 1611 5 is_stmt 1 view .LVU814
 2728              		.loc 1 1611 43 is_stmt 0 view .LVU815
 2729 006a 0021     		movs	r1, #0
 2730 006c 9962     		str	r1, [r3, #40]
1612:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2731              		.loc 1 1612 5 is_stmt 1 view .LVU816
 2732              		.loc 1 1612 43 is_stmt 0 view .LVU817
 2733 006e 5962     		str	r1, [r3, #36]
1613:base/debug/RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2734              		.loc 1 1613 5 is_stmt 1 view .LVU818
 2735              		.loc 1 1613 43 is_stmt 0 view .LVU819
 2736 0070 DC62     		str	r4, [r3, #44]
ARM GAS  /tmp/ccycMeWv.s 			page 82


1614:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2737              		.loc 1 1614 15 is_stmt 1 view .LVU820
 2738              	.LVL273:
 2739              	.L170:
1615:base/debug/RTT/SEGGER_RTT.c ****   } else {
1616:base/debug/RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1617:base/debug/RTT/SEGGER_RTT.c ****   }
1618:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2740              		.loc 1 1618 3 view .LVU821
 2741              		.syntax unified
 2742              	@ 1618 "base/debug/RTT/SEGGER_RTT.c" 1
 2743 0072 82F31188 		msr   basepri, r2  
 2744              		
 2745              	@ 0 "" 2
 2746              		.thumb
 2747              		.syntax unified
 2748              	.LBE29:
 2749              		.loc 1 1618 22 view .LVU822
1619:base/debug/RTT/SEGGER_RTT.c ****   return BufferIndex;
 2750              		.loc 1 1619 3 view .LVU823
1620:base/debug/RTT/SEGGER_RTT.c **** }
 2751              		.loc 1 1620 1 is_stmt 0 view .LVU824
 2752 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2753              	.LVL274:
 2754              	.L173:
 2755              	.LBB30:
1597:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2756              		.loc 1 1597 3 is_stmt 1 discriminator 1 view .LVU825
 2757 0078 FFF7FEFF 		bl	_DoInit
 2758              	.LVL275:
1597:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2759              		.loc 1 1597 3 is_stmt 0 discriminator 1 view .LVU826
 2760 007c C9E7     		b	.L167
 2761              	.LVL276:
 2762              	.L171:
1597:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2763              		.loc 1 1597 3 discriminator 1 view .LVU827
 2764              	.LBE30:
 2765              	.LBB31:
1616:base/debug/RTT/SEGGER_RTT.c ****   }
 2766              		.loc 1 1616 17 view .LVU828
 2767 007e 4FF0FF30 		mov	r0, #-1
 2768              	.LVL277:
1616:base/debug/RTT/SEGGER_RTT.c ****   }
 2769              		.loc 1 1616 17 view .LVU829
 2770 0082 F6E7     		b	.L170
 2771              	.L175:
 2772              		.align	2
 2773              	.L174:
 2774 0084 00000000 		.word	.LANCHOR1
 2775              	.LBE31:
 2776              		.cfi_endproc
 2777              	.LFE24:
 2779              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2780              		.align	1
 2781              		.global	SEGGER_RTT_ConfigUpBuffer
 2782              		.syntax unified
ARM GAS  /tmp/ccycMeWv.s 			page 83


 2783              		.thumb
 2784              		.thumb_func
 2785              		.fpu softvfp
 2787              	SEGGER_RTT_ConfigUpBuffer:
 2788              	.LVL278:
 2789              	.LFB25:
1621:base/debug/RTT/SEGGER_RTT.c **** 
1622:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1623:base/debug/RTT/SEGGER_RTT.c **** *
1624:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1625:base/debug/RTT/SEGGER_RTT.c **** *
1626:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1627:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1628:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1629:base/debug/RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1630:base/debug/RTT/SEGGER_RTT.c **** *
1631:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1632:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1633:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1634:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1635:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1636:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1637:base/debug/RTT/SEGGER_RTT.c **** *
1638:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1639:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1640:base/debug/RTT/SEGGER_RTT.c **** *     < 0 - Error
1641:base/debug/RTT/SEGGER_RTT.c **** *
1642:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
1643:base/debug/RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1644:base/debug/RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1645:base/debug/RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1646:base/debug/RTT/SEGGER_RTT.c **** */
1647:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2790              		.loc 1 1647 124 is_stmt 1 view -0
 2791              		.cfi_startproc
 2792              		@ args = 4, pretend = 0, frame = 0
 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 2794              		.loc 1 1647 124 is_stmt 0 view .LVU831
 2795 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2796              	.LCFI28:
 2797              		.cfi_def_cfa_offset 24
 2798              		.cfi_offset 3, -24
 2799              		.cfi_offset 4, -20
 2800              		.cfi_offset 5, -16
 2801              		.cfi_offset 6, -12
 2802              		.cfi_offset 7, -8
 2803              		.cfi_offset 14, -4
 2804 0002 0446     		mov	r4, r0
 2805 0004 0D46     		mov	r5, r1
 2806 0006 1746     		mov	r7, r2
 2807 0008 1E46     		mov	r6, r3
1648:base/debug/RTT/SEGGER_RTT.c ****   int r;
 2808              		.loc 1 1648 3 is_stmt 1 view .LVU832
1649:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2809              		.loc 1 1649 3 view .LVU833
1650:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2810              		.loc 1 1650 3 view .LVU834
ARM GAS  /tmp/ccycMeWv.s 			page 84


 2811              	.LBB32:
1651:base/debug/RTT/SEGGER_RTT.c **** 
1652:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2812              		.loc 1 1652 3 view .LVU835
 2813              		.loc 1 1652 3 view .LVU836
 2814              	.LVL279:
 2815              		.loc 1 1652 3 view .LVU837
 2816              		.loc 1 1652 3 view .LVU838
 2817 000a 184B     		ldr	r3, .L183
 2818              	.LVL280:
 2819              		.loc 1 1652 3 is_stmt 0 view .LVU839
 2820 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2821 000e 33B3     		cbz	r3, .L182
 2822              	.LVL281:
 2823              	.L177:
 2824              		.loc 1 1652 3 is_stmt 1 discriminator 3 view .LVU840
 2825              	.LBE32:
 2826              		.loc 1 1652 9 discriminator 3 view .LVU841
1653:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2827              		.loc 1 1653 3 discriminator 3 view .LVU842
1654:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2828              		.loc 1 1654 3 discriminator 3 view .LVU843
 2829              		.loc 1 1654 6 is_stmt 0 discriminator 3 view .LVU844
 2830 0010 022C     		cmp	r4, #2
 2831 0012 27D8     		bhi	.L180
 2832              	.LBB33:
1655:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2833              		.loc 1 1655 5 is_stmt 1 view .LVU845
 2834              		.loc 1 1655 5 view .LVU846
 2835              		.syntax unified
 2836              	@ 1655 "base/debug/RTT/SEGGER_RTT.c" 1
 2837 0014 EFF3118C 		mrs   ip, basepri  
 2838 0018 4FF02001 		mov   r1, #32       
 2839 001c 81F31188 		msr   basepri, r1  
 2840              		
 2841              	@ 0 "" 2
 2842              	.LVL282:
 2843              		.loc 1 1655 22 view .LVU847
1656:base/debug/RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2844              		.loc 1 1656 5 view .LVU848
1657:base/debug/RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 2845              		.loc 1 1657 5 view .LVU849
 2846              		.loc 1 1657 8 is_stmt 0 view .LVU850
 2847              		.thumb
 2848              		.syntax unified
 2849 0020 94B1     		cbz	r4, .L179
1658:base/debug/RTT/SEGGER_RTT.c ****       pUp->sName        = sName;
 2850              		.loc 1 1658 7 is_stmt 1 view .LVU851
 2851              		.loc 1 1658 25 is_stmt 0 view .LVU852
 2852 0022 124A     		ldr	r2, .L183
 2853 0024 601C     		adds	r0, r4, #1
 2854 0026 00EB4003 		add	r3, r0, r0, lsl #1
 2855 002a DB00     		lsls	r3, r3, #3
 2856 002c D550     		str	r5, [r2, r3]
1659:base/debug/RTT/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2857              		.loc 1 1659 7 is_stmt 1 view .LVU853
 2858              		.loc 1 1659 25 is_stmt 0 view .LVU854
ARM GAS  /tmp/ccycMeWv.s 			page 85


 2859 002e 00EB4000 		add	r0, r0, r0, lsl #1
 2860 0032 02EBC000 		add	r0, r2, r0, lsl #3
 2861 0036 4760     		str	r7, [r0, #4]
1660:base/debug/RTT/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2862              		.loc 1 1660 7 is_stmt 1 view .LVU855
 2863              		.loc 1 1660 25 is_stmt 0 view .LVU856
 2864 0038 04EB4403 		add	r3, r4, r4, lsl #1
 2865 003c 02EBC302 		add	r2, r2, r3, lsl #3
 2866 0040 1662     		str	r6, [r2, #32]
1661:base/debug/RTT/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2867              		.loc 1 1661 7 is_stmt 1 view .LVU857
 2868              		.loc 1 1661 25 is_stmt 0 view .LVU858
 2869 0042 0023     		movs	r3, #0
 2870 0044 9362     		str	r3, [r2, #40]
1662:base/debug/RTT/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2871              		.loc 1 1662 7 is_stmt 1 view .LVU859
 2872              		.loc 1 1662 25 is_stmt 0 view .LVU860
 2873 0046 5362     		str	r3, [r2, #36]
 2874              	.L179:
1663:base/debug/RTT/SEGGER_RTT.c ****     }
1664:base/debug/RTT/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2875              		.loc 1 1664 5 is_stmt 1 view .LVU861
 2876              		.loc 1 1664 25 is_stmt 0 view .LVU862
 2877 0048 04EB4404 		add	r4, r4, r4, lsl #1
 2878              	.LVL283:
 2879              		.loc 1 1664 25 view .LVU863
 2880 004c 074B     		ldr	r3, .L183
 2881 004e 03EBC403 		add	r3, r3, r4, lsl #3
 2882 0052 069A     		ldr	r2, [sp, #24]
 2883 0054 DA62     		str	r2, [r3, #44]
1665:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2884              		.loc 1 1665 5 is_stmt 1 view .LVU864
 2885              		.syntax unified
 2886              	@ 1665 "base/debug/RTT/SEGGER_RTT.c" 1
 2887 0056 8CF31188 		msr   basepri, ip  
 2888              		
 2889              	@ 0 "" 2
 2890              		.thumb
 2891              		.syntax unified
 2892              	.LBE33:
 2893              		.loc 1 1665 24 view .LVU865
1666:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 2894              		.loc 1 1666 5 view .LVU866
 2895              	.LVL284:
 2896              		.loc 1 1666 7 is_stmt 0 view .LVU867
 2897 005a 0020     		movs	r0, #0
 2898              	.LVL285:
 2899              	.L176:
1667:base/debug/RTT/SEGGER_RTT.c ****   } else {
1668:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1669:base/debug/RTT/SEGGER_RTT.c ****   }
1670:base/debug/RTT/SEGGER_RTT.c ****   return r;
1671:base/debug/RTT/SEGGER_RTT.c **** }
 2900              		.loc 1 1671 1 view .LVU868
 2901 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2902              	.LVL286:
 2903              	.L182:
ARM GAS  /tmp/ccycMeWv.s 			page 86


 2904              	.LBB34:
1652:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2905              		.loc 1 1652 3 is_stmt 1 discriminator 1 view .LVU869
 2906 005e FFF7FEFF 		bl	_DoInit
 2907              	.LVL287:
1652:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2908              		.loc 1 1652 3 is_stmt 0 discriminator 1 view .LVU870
 2909 0062 D5E7     		b	.L177
 2910              	.LVL288:
 2911              	.L180:
1652:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2912              		.loc 1 1652 3 discriminator 1 view .LVU871
 2913              	.LBE34:
1668:base/debug/RTT/SEGGER_RTT.c ****   }
 2914              		.loc 1 1668 7 view .LVU872
 2915 0064 4FF0FF30 		mov	r0, #-1
 2916              	.LVL289:
1670:base/debug/RTT/SEGGER_RTT.c **** }
 2917              		.loc 1 1670 3 is_stmt 1 view .LVU873
1670:base/debug/RTT/SEGGER_RTT.c **** }
 2918              		.loc 1 1670 10 is_stmt 0 view .LVU874
 2919 0068 F8E7     		b	.L176
 2920              	.L184:
 2921 006a 00BF     		.align	2
 2922              	.L183:
 2923 006c 00000000 		.word	.LANCHOR1
 2924              		.cfi_endproc
 2925              	.LFE25:
 2927              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2928              		.align	1
 2929              		.global	SEGGER_RTT_ConfigDownBuffer
 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2933              		.fpu softvfp
 2935              	SEGGER_RTT_ConfigDownBuffer:
 2936              	.LVL290:
 2937              	.LFB26:
1672:base/debug/RTT/SEGGER_RTT.c **** 
1673:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1674:base/debug/RTT/SEGGER_RTT.c **** *
1675:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1676:base/debug/RTT/SEGGER_RTT.c **** *
1677:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1678:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1679:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1680:base/debug/RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1681:base/debug/RTT/SEGGER_RTT.c **** *
1682:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1683:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1684:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1685:base/debug/RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1686:base/debug/RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1687:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1688:base/debug/RTT/SEGGER_RTT.c **** *
1689:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1690:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
ARM GAS  /tmp/ccycMeWv.s 			page 87


1691:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error
1692:base/debug/RTT/SEGGER_RTT.c **** *
1693:base/debug/RTT/SEGGER_RTT.c **** *  Additional information
1694:base/debug/RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1695:base/debug/RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1696:base/debug/RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1697:base/debug/RTT/SEGGER_RTT.c **** */
1698:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2938              		.loc 1 1698 126 is_stmt 1 view -0
 2939              		.cfi_startproc
 2940              		@ args = 4, pretend = 0, frame = 0
 2941              		@ frame_needed = 0, uses_anonymous_args = 0
 2942              		.loc 1 1698 126 is_stmt 0 view .LVU876
 2943 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2944              	.LCFI29:
 2945              		.cfi_def_cfa_offset 24
 2946              		.cfi_offset 4, -24
 2947              		.cfi_offset 5, -20
 2948              		.cfi_offset 6, -16
 2949              		.cfi_offset 7, -12
 2950              		.cfi_offset 8, -8
 2951              		.cfi_offset 14, -4
 2952 0004 0446     		mov	r4, r0
 2953 0006 8846     		mov	r8, r1
 2954 0008 1746     		mov	r7, r2
 2955 000a 1E46     		mov	r6, r3
1699:base/debug/RTT/SEGGER_RTT.c ****   int r;
 2956              		.loc 1 1699 3 is_stmt 1 view .LVU877
1700:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2957              		.loc 1 1700 3 view .LVU878
1701:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 2958              		.loc 1 1701 3 view .LVU879
 2959              	.LBB35:
1702:base/debug/RTT/SEGGER_RTT.c **** 
1703:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 2960              		.loc 1 1703 3 view .LVU880
 2961              		.loc 1 1703 3 view .LVU881
 2962              	.LVL291:
 2963              		.loc 1 1703 3 view .LVU882
 2964              		.loc 1 1703 3 view .LVU883
 2965 000c 164B     		ldr	r3, .L192
 2966              	.LVL292:
 2967              		.loc 1 1703 3 is_stmt 0 view .LVU884
 2968 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2969 0010 23B3     		cbz	r3, .L191
 2970              	.LVL293:
 2971              	.L186:
 2972              		.loc 1 1703 3 is_stmt 1 discriminator 3 view .LVU885
 2973              	.LBE35:
 2974              		.loc 1 1703 9 discriminator 3 view .LVU886
1704:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2975              		.loc 1 1704 3 discriminator 3 view .LVU887
1705:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 2976              		.loc 1 1705 3 discriminator 3 view .LVU888
 2977              		.loc 1 1705 6 is_stmt 0 discriminator 3 view .LVU889
 2978 0012 022C     		cmp	r4, #2
 2979 0014 25D8     		bhi	.L189
ARM GAS  /tmp/ccycMeWv.s 			page 88


 2980              	.LBB36:
1706:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2981              		.loc 1 1706 5 is_stmt 1 view .LVU890
 2982              		.loc 1 1706 5 view .LVU891
 2983              		.syntax unified
 2984              	@ 1706 "base/debug/RTT/SEGGER_RTT.c" 1
 2985 0016 EFF31180 		mrs   r0, basepri  
 2986 001a 4FF02001 		mov   r1, #32       
 2987 001e 81F31188 		msr   basepri, r1  
 2988              		
 2989              	@ 0 "" 2
 2990              	.LVL294:
 2991              		.loc 1 1706 22 view .LVU892
1707:base/debug/RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 2992              		.loc 1 1707 5 view .LVU893
1708:base/debug/RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 2993              		.loc 1 1708 5 view .LVU894
 2994              		.loc 1 1708 8 is_stmt 0 view .LVU895
 2995              		.thumb
 2996              		.syntax unified
 2997 0022 7CB1     		cbz	r4, .L188
1709:base/debug/RTT/SEGGER_RTT.c ****       pDown->sName        = sName;
 2998              		.loc 1 1709 7 is_stmt 1 view .LVU896
 2999              		.loc 1 1709 27 is_stmt 0 view .LVU897
 3000 0024 04EB4403 		add	r3, r4, r4, lsl #1
 3001 0028 0F4D     		ldr	r5, .L192
 3002 002a 05EBC30C 		add	ip, r5, r3, lsl #3
 3003 002e CCF86080 		str	r8, [ip, #96]
1710:base/debug/RTT/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3004              		.loc 1 1710 7 is_stmt 1 view .LVU898
 3005              		.loc 1 1710 27 is_stmt 0 view .LVU899
 3006 0032 CCF86470 		str	r7, [ip, #100]
1711:base/debug/RTT/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3007              		.loc 1 1711 7 is_stmt 1 view .LVU900
 3008              		.loc 1 1711 27 is_stmt 0 view .LVU901
 3009 0036 CCF86860 		str	r6, [ip, #104]
1712:base/debug/RTT/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3010              		.loc 1 1712 7 is_stmt 1 view .LVU902
 3011              		.loc 1 1712 27 is_stmt 0 view .LVU903
 3012 003a 0023     		movs	r3, #0
 3013 003c CCF87030 		str	r3, [ip, #112]
1713:base/debug/RTT/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3014              		.loc 1 1713 7 is_stmt 1 view .LVU904
 3015              		.loc 1 1713 27 is_stmt 0 view .LVU905
 3016 0040 CCF86C30 		str	r3, [ip, #108]
 3017              	.L188:
1714:base/debug/RTT/SEGGER_RTT.c ****     }
1715:base/debug/RTT/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3018              		.loc 1 1715 5 is_stmt 1 view .LVU906
 3019              		.loc 1 1715 27 is_stmt 0 view .LVU907
 3020 0044 04EB4404 		add	r4, r4, r4, lsl #1
 3021              	.LVL295:
 3022              		.loc 1 1715 27 view .LVU908
 3023 0048 074B     		ldr	r3, .L192
 3024 004a 03EBC403 		add	r3, r3, r4, lsl #3
 3025 004e 069A     		ldr	r2, [sp, #24]
 3026 0050 5A67     		str	r2, [r3, #116]
ARM GAS  /tmp/ccycMeWv.s 			page 89


1716:base/debug/RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3027              		.loc 1 1716 15 is_stmt 1 view .LVU909
1717:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3028              		.loc 1 1717 5 view .LVU910
 3029              		.syntax unified
 3030              	@ 1717 "base/debug/RTT/SEGGER_RTT.c" 1
 3031 0052 80F31188 		msr   basepri, r0  
 3032              		
 3033              	@ 0 "" 2
 3034              		.thumb
 3035              		.syntax unified
 3036              	.LBE36:
 3037              		.loc 1 1717 24 view .LVU911
1718:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 3038              		.loc 1 1718 5 view .LVU912
 3039              	.LVL296:
 3040              		.loc 1 1718 7 is_stmt 0 view .LVU913
 3041 0056 0020     		movs	r0, #0
 3042              	.LVL297:
 3043              	.L185:
1719:base/debug/RTT/SEGGER_RTT.c ****   } else {
1720:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1721:base/debug/RTT/SEGGER_RTT.c ****   }
1722:base/debug/RTT/SEGGER_RTT.c ****   return r;
1723:base/debug/RTT/SEGGER_RTT.c **** }
 3044              		.loc 1 1723 1 view .LVU914
 3045 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3046              	.LVL298:
 3047              	.L191:
 3048              	.LBB37:
1703:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3049              		.loc 1 1703 3 is_stmt 1 discriminator 1 view .LVU915
 3050 005c FFF7FEFF 		bl	_DoInit
 3051              	.LVL299:
1703:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3052              		.loc 1 1703 3 is_stmt 0 discriminator 1 view .LVU916
 3053 0060 D7E7     		b	.L186
 3054              	.LVL300:
 3055              	.L189:
1703:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3056              		.loc 1 1703 3 discriminator 1 view .LVU917
 3057              	.LBE37:
1720:base/debug/RTT/SEGGER_RTT.c ****   }
 3058              		.loc 1 1720 7 view .LVU918
 3059 0062 4FF0FF30 		mov	r0, #-1
 3060              	.LVL301:
1722:base/debug/RTT/SEGGER_RTT.c **** }
 3061              		.loc 1 1722 3 is_stmt 1 view .LVU919
1722:base/debug/RTT/SEGGER_RTT.c **** }
 3062              		.loc 1 1722 10 is_stmt 0 view .LVU920
 3063 0066 F7E7     		b	.L185
 3064              	.L193:
 3065              		.align	2
 3066              	.L192:
 3067 0068 00000000 		.word	.LANCHOR1
 3068              		.cfi_endproc
 3069              	.LFE26:
ARM GAS  /tmp/ccycMeWv.s 			page 90


 3071              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3072              		.align	1
 3073              		.global	SEGGER_RTT_SetNameUpBuffer
 3074              		.syntax unified
 3075              		.thumb
 3076              		.thumb_func
 3077              		.fpu softvfp
 3079              	SEGGER_RTT_SetNameUpBuffer:
 3080              	.LVL302:
 3081              	.LFB27:
1724:base/debug/RTT/SEGGER_RTT.c **** 
1725:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1726:base/debug/RTT/SEGGER_RTT.c **** *
1727:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1728:base/debug/RTT/SEGGER_RTT.c **** *
1729:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1730:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1731:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1732:base/debug/RTT/SEGGER_RTT.c **** *
1733:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1734:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1735:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1736:base/debug/RTT/SEGGER_RTT.c **** *
1737:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1738:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1739:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error
1740:base/debug/RTT/SEGGER_RTT.c **** */
1741:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3082              		.loc 1 1741 73 is_stmt 1 view -0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 3086              		.loc 1 1741 73 is_stmt 0 view .LVU922
 3087 0000 38B5     		push	{r3, r4, r5, lr}
 3088              	.LCFI30:
 3089              		.cfi_def_cfa_offset 16
 3090              		.cfi_offset 3, -16
 3091              		.cfi_offset 4, -12
 3092              		.cfi_offset 5, -8
 3093              		.cfi_offset 14, -4
 3094 0002 0446     		mov	r4, r0
 3095 0004 0D46     		mov	r5, r1
1742:base/debug/RTT/SEGGER_RTT.c ****   int r;
 3096              		.loc 1 1742 3 is_stmt 1 view .LVU923
1743:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3097              		.loc 1 1743 3 view .LVU924
1744:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3098              		.loc 1 1744 3 view .LVU925
 3099              	.LBB38:
1745:base/debug/RTT/SEGGER_RTT.c **** 
1746:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3100              		.loc 1 1746 3 view .LVU926
 3101              		.loc 1 1746 3 view .LVU927
 3102              	.LVL303:
 3103              		.loc 1 1746 3 view .LVU928
 3104              		.loc 1 1746 3 view .LVU929
 3105 0006 0D4B     		ldr	r3, .L200
ARM GAS  /tmp/ccycMeWv.s 			page 91


 3106 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3107 000a 8BB1     		cbz	r3, .L199
 3108              	.LVL304:
 3109              	.L195:
 3110              		.loc 1 1746 3 discriminator 3 view .LVU930
 3111              	.LBE38:
 3112              		.loc 1 1746 9 discriminator 3 view .LVU931
1747:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3113              		.loc 1 1747 3 discriminator 3 view .LVU932
1748:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3114              		.loc 1 1748 3 discriminator 3 view .LVU933
 3115              		.loc 1 1748 6 is_stmt 0 discriminator 3 view .LVU934
 3116 000c 022C     		cmp	r4, #2
 3117 000e 12D8     		bhi	.L197
 3118              	.LBB39:
1749:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3119              		.loc 1 1749 5 is_stmt 1 view .LVU935
 3120              		.loc 1 1749 5 view .LVU936
 3121              		.syntax unified
 3122              	@ 1749 "base/debug/RTT/SEGGER_RTT.c" 1
 3123 0010 EFF31183 		mrs   r3, basepri  
 3124 0014 4FF02001 		mov   r1, #32       
 3125 0018 81F31188 		msr   basepri, r1  
 3126              		
 3127              	@ 0 "" 2
 3128              	.LVL305:
 3129              		.loc 1 1749 22 view .LVU937
1750:base/debug/RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3130              		.loc 1 1750 5 view .LVU938
1751:base/debug/RTT/SEGGER_RTT.c ****     pUp->sName = sName;
 3131              		.loc 1 1751 5 view .LVU939
 3132              		.loc 1 1751 16 is_stmt 0 view .LVU940
 3133              		.thumb
 3134              		.syntax unified
 3135 001c 0134     		adds	r4, r4, #1
 3136              	.LVL306:
 3137              		.loc 1 1751 16 view .LVU941
 3138 001e 04EB4404 		add	r4, r4, r4, lsl #1
 3139              	.LVL307:
 3140              		.loc 1 1751 16 view .LVU942
 3141 0022 E400     		lsls	r4, r4, #3
 3142 0024 054A     		ldr	r2, .L200
 3143 0026 1551     		str	r5, [r2, r4]
1752:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3144              		.loc 1 1752 5 is_stmt 1 view .LVU943
 3145              		.syntax unified
 3146              	@ 1752 "base/debug/RTT/SEGGER_RTT.c" 1
 3147 0028 83F31188 		msr   basepri, r3  
 3148              		
 3149              	@ 0 "" 2
 3150              		.thumb
 3151              		.syntax unified
 3152              	.LBE39:
 3153              		.loc 1 1752 24 view .LVU944
1753:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 3154              		.loc 1 1753 5 view .LVU945
 3155              	.LVL308:
ARM GAS  /tmp/ccycMeWv.s 			page 92


 3156              		.loc 1 1753 7 is_stmt 0 view .LVU946
 3157 002c 0020     		movs	r0, #0
 3158              	.LVL309:
 3159              	.L194:
1754:base/debug/RTT/SEGGER_RTT.c ****   } else {
1755:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1756:base/debug/RTT/SEGGER_RTT.c ****   }
1757:base/debug/RTT/SEGGER_RTT.c ****   return r;
1758:base/debug/RTT/SEGGER_RTT.c **** }
 3160              		.loc 1 1758 1 view .LVU947
 3161 002e 38BD     		pop	{r3, r4, r5, pc}
 3162              	.LVL310:
 3163              	.L199:
 3164              	.LBB40:
1746:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3165              		.loc 1 1746 3 is_stmt 1 discriminator 1 view .LVU948
 3166 0030 FFF7FEFF 		bl	_DoInit
 3167              	.LVL311:
1746:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3168              		.loc 1 1746 3 is_stmt 0 discriminator 1 view .LVU949
 3169 0034 EAE7     		b	.L195
 3170              	.LVL312:
 3171              	.L197:
1746:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3172              		.loc 1 1746 3 discriminator 1 view .LVU950
 3173              	.LBE40:
1755:base/debug/RTT/SEGGER_RTT.c ****   }
 3174              		.loc 1 1755 7 view .LVU951
 3175 0036 4FF0FF30 		mov	r0, #-1
 3176              	.LVL313:
1757:base/debug/RTT/SEGGER_RTT.c **** }
 3177              		.loc 1 1757 3 is_stmt 1 view .LVU952
1757:base/debug/RTT/SEGGER_RTT.c **** }
 3178              		.loc 1 1757 10 is_stmt 0 view .LVU953
 3179 003a F8E7     		b	.L194
 3180              	.L201:
 3181              		.align	2
 3182              	.L200:
 3183 003c 00000000 		.word	.LANCHOR1
 3184              		.cfi_endproc
 3185              	.LFE27:
 3187              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3188              		.align	1
 3189              		.global	SEGGER_RTT_SetNameDownBuffer
 3190              		.syntax unified
 3191              		.thumb
 3192              		.thumb_func
 3193              		.fpu softvfp
 3195              	SEGGER_RTT_SetNameDownBuffer:
 3196              	.LVL314:
 3197              	.LFB28:
1759:base/debug/RTT/SEGGER_RTT.c **** 
1760:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1761:base/debug/RTT/SEGGER_RTT.c **** *
1762:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1763:base/debug/RTT/SEGGER_RTT.c **** *
1764:base/debug/RTT/SEGGER_RTT.c **** *  Function description
ARM GAS  /tmp/ccycMeWv.s 			page 93


1765:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1766:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1767:base/debug/RTT/SEGGER_RTT.c **** *
1768:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1769:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1770:base/debug/RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1771:base/debug/RTT/SEGGER_RTT.c **** *
1772:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1773:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1774:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error
1775:base/debug/RTT/SEGGER_RTT.c **** */
1776:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3198              		.loc 1 1776 75 is_stmt 1 view -0
 3199              		.cfi_startproc
 3200              		@ args = 0, pretend = 0, frame = 0
 3201              		@ frame_needed = 0, uses_anonymous_args = 0
 3202              		.loc 1 1776 75 is_stmt 0 view .LVU955
 3203 0000 38B5     		push	{r3, r4, r5, lr}
 3204              	.LCFI31:
 3205              		.cfi_def_cfa_offset 16
 3206              		.cfi_offset 3, -16
 3207              		.cfi_offset 4, -12
 3208              		.cfi_offset 5, -8
 3209              		.cfi_offset 14, -4
 3210 0002 0446     		mov	r4, r0
 3211 0004 0D46     		mov	r5, r1
1777:base/debug/RTT/SEGGER_RTT.c ****   int r;
 3212              		.loc 1 1777 3 is_stmt 1 view .LVU956
1778:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3213              		.loc 1 1778 3 view .LVU957
1779:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3214              		.loc 1 1779 3 view .LVU958
 3215              	.LBB41:
1780:base/debug/RTT/SEGGER_RTT.c **** 
1781:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3216              		.loc 1 1781 3 view .LVU959
 3217              		.loc 1 1781 3 view .LVU960
 3218              	.LVL315:
 3219              		.loc 1 1781 3 view .LVU961
 3220              		.loc 1 1781 3 view .LVU962
 3221 0006 0D4B     		ldr	r3, .L208
 3222 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3223 000a 8BB1     		cbz	r3, .L207
 3224              	.LVL316:
 3225              	.L203:
 3226              		.loc 1 1781 3 discriminator 3 view .LVU963
 3227              	.LBE41:
 3228              		.loc 1 1781 9 discriminator 3 view .LVU964
1782:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3229              		.loc 1 1782 3 discriminator 3 view .LVU965
1783:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3230              		.loc 1 1783 3 discriminator 3 view .LVU966
 3231              		.loc 1 1783 6 is_stmt 0 discriminator 3 view .LVU967
 3232 000c 022C     		cmp	r4, #2
 3233 000e 12D8     		bhi	.L205
 3234              	.LBB42:
1784:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
ARM GAS  /tmp/ccycMeWv.s 			page 94


 3235              		.loc 1 1784 5 is_stmt 1 view .LVU968
 3236              		.loc 1 1784 5 view .LVU969
 3237              		.syntax unified
 3238              	@ 1784 "base/debug/RTT/SEGGER_RTT.c" 1
 3239 0010 EFF31182 		mrs   r2, basepri  
 3240 0014 4FF02001 		mov   r1, #32       
 3241 0018 81F31188 		msr   basepri, r1  
 3242              		
 3243              	@ 0 "" 2
 3244              	.LVL317:
 3245              		.loc 1 1784 22 view .LVU970
1785:base/debug/RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3246              		.loc 1 1785 5 view .LVU971
1786:base/debug/RTT/SEGGER_RTT.c ****     pDown->sName = sName;
 3247              		.loc 1 1786 5 view .LVU972
 3248              		.loc 1 1786 18 is_stmt 0 view .LVU973
 3249              		.thumb
 3250              		.syntax unified
 3251 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3252              	.LVL318:
 3253              		.loc 1 1786 18 view .LVU974
 3254 0020 064B     		ldr	r3, .L208
 3255 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3256 0026 1D66     		str	r5, [r3, #96]
1787:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3257              		.loc 1 1787 5 is_stmt 1 view .LVU975
 3258              		.syntax unified
 3259              	@ 1787 "base/debug/RTT/SEGGER_RTT.c" 1
 3260 0028 82F31188 		msr   basepri, r2  
 3261              		
 3262              	@ 0 "" 2
 3263              		.thumb
 3264              		.syntax unified
 3265              	.LBE42:
 3266              		.loc 1 1787 24 view .LVU976
1788:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 3267              		.loc 1 1788 5 view .LVU977
 3268              	.LVL319:
 3269              		.loc 1 1788 7 is_stmt 0 view .LVU978
 3270 002c 0020     		movs	r0, #0
 3271              	.LVL320:
 3272              	.L202:
1789:base/debug/RTT/SEGGER_RTT.c ****   } else {
1790:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1791:base/debug/RTT/SEGGER_RTT.c ****   }
1792:base/debug/RTT/SEGGER_RTT.c ****   return r;
1793:base/debug/RTT/SEGGER_RTT.c **** }
 3273              		.loc 1 1793 1 view .LVU979
 3274 002e 38BD     		pop	{r3, r4, r5, pc}
 3275              	.LVL321:
 3276              	.L207:
 3277              	.LBB43:
1781:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3278              		.loc 1 1781 3 is_stmt 1 discriminator 1 view .LVU980
 3279 0030 FFF7FEFF 		bl	_DoInit
 3280              	.LVL322:
1781:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
ARM GAS  /tmp/ccycMeWv.s 			page 95


 3281              		.loc 1 1781 3 is_stmt 0 discriminator 1 view .LVU981
 3282 0034 EAE7     		b	.L203
 3283              	.LVL323:
 3284              	.L205:
1781:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3285              		.loc 1 1781 3 discriminator 1 view .LVU982
 3286              	.LBE43:
1790:base/debug/RTT/SEGGER_RTT.c ****   }
 3287              		.loc 1 1790 7 view .LVU983
 3288 0036 4FF0FF30 		mov	r0, #-1
 3289              	.LVL324:
1792:base/debug/RTT/SEGGER_RTT.c **** }
 3290              		.loc 1 1792 3 is_stmt 1 view .LVU984
1792:base/debug/RTT/SEGGER_RTT.c **** }
 3291              		.loc 1 1792 10 is_stmt 0 view .LVU985
 3292 003a F8E7     		b	.L202
 3293              	.L209:
 3294              		.align	2
 3295              	.L208:
 3296 003c 00000000 		.word	.LANCHOR1
 3297              		.cfi_endproc
 3298              	.LFE28:
 3300              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3301              		.align	1
 3302              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3303              		.syntax unified
 3304              		.thumb
 3305              		.thumb_func
 3306              		.fpu softvfp
 3308              	SEGGER_RTT_SetFlagsUpBuffer:
 3309              	.LVL325:
 3310              	.LFB29:
1794:base/debug/RTT/SEGGER_RTT.c **** 
1795:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1796:base/debug/RTT/SEGGER_RTT.c **** *
1797:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1798:base/debug/RTT/SEGGER_RTT.c **** *
1799:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1800:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1801:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1802:base/debug/RTT/SEGGER_RTT.c **** *
1803:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1804:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1805:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1806:base/debug/RTT/SEGGER_RTT.c **** *
1807:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1808:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1809:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error
1810:base/debug/RTT/SEGGER_RTT.c **** */
1811:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3311              		.loc 1 1811 71 is_stmt 1 view -0
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 0
 3314              		@ frame_needed = 0, uses_anonymous_args = 0
 3315              		.loc 1 1811 71 is_stmt 0 view .LVU987
 3316 0000 38B5     		push	{r3, r4, r5, lr}
 3317              	.LCFI32:
ARM GAS  /tmp/ccycMeWv.s 			page 96


 3318              		.cfi_def_cfa_offset 16
 3319              		.cfi_offset 3, -16
 3320              		.cfi_offset 4, -12
 3321              		.cfi_offset 5, -8
 3322              		.cfi_offset 14, -4
 3323 0002 0446     		mov	r4, r0
 3324 0004 0D46     		mov	r5, r1
1812:base/debug/RTT/SEGGER_RTT.c ****   int r;
 3325              		.loc 1 1812 3 is_stmt 1 view .LVU988
1813:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3326              		.loc 1 1813 3 view .LVU989
1814:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3327              		.loc 1 1814 3 view .LVU990
 3328              	.LBB44:
1815:base/debug/RTT/SEGGER_RTT.c **** 
1816:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3329              		.loc 1 1816 3 view .LVU991
 3330              		.loc 1 1816 3 view .LVU992
 3331              	.LVL326:
 3332              		.loc 1 1816 3 view .LVU993
 3333              		.loc 1 1816 3 view .LVU994
 3334 0006 0D4B     		ldr	r3, .L216
 3335 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3336 000a 8BB1     		cbz	r3, .L215
 3337              	.LVL327:
 3338              	.L211:
 3339              		.loc 1 1816 3 discriminator 3 view .LVU995
 3340              	.LBE44:
 3341              		.loc 1 1816 9 discriminator 3 view .LVU996
1817:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3342              		.loc 1 1817 3 discriminator 3 view .LVU997
1818:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3343              		.loc 1 1818 3 discriminator 3 view .LVU998
 3344              		.loc 1 1818 6 is_stmt 0 discriminator 3 view .LVU999
 3345 000c 022C     		cmp	r4, #2
 3346 000e 12D8     		bhi	.L213
 3347              	.LBB45:
1819:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3348              		.loc 1 1819 5 is_stmt 1 view .LVU1000
 3349              		.loc 1 1819 5 view .LVU1001
 3350              		.syntax unified
 3351              	@ 1819 "base/debug/RTT/SEGGER_RTT.c" 1
 3352 0010 EFF31182 		mrs   r2, basepri  
 3353 0014 4FF02001 		mov   r1, #32       
 3354 0018 81F31188 		msr   basepri, r1  
 3355              		
 3356              	@ 0 "" 2
 3357              	.LVL328:
 3358              		.loc 1 1819 22 view .LVU1002
1820:base/debug/RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3359              		.loc 1 1820 5 view .LVU1003
1821:base/debug/RTT/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3360              		.loc 1 1821 5 view .LVU1004
 3361              		.loc 1 1821 16 is_stmt 0 view .LVU1005
 3362              		.thumb
 3363              		.syntax unified
 3364 001c 04EB4404 		add	r4, r4, r4, lsl #1
ARM GAS  /tmp/ccycMeWv.s 			page 97


 3365              	.LVL329:
 3366              		.loc 1 1821 16 view .LVU1006
 3367 0020 064B     		ldr	r3, .L216
 3368 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3369 0026 DD62     		str	r5, [r3, #44]
1822:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3370              		.loc 1 1822 5 is_stmt 1 view .LVU1007
 3371              		.syntax unified
 3372              	@ 1822 "base/debug/RTT/SEGGER_RTT.c" 1
 3373 0028 82F31188 		msr   basepri, r2  
 3374              		
 3375              	@ 0 "" 2
 3376              		.thumb
 3377              		.syntax unified
 3378              	.LBE45:
 3379              		.loc 1 1822 24 view .LVU1008
1823:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 3380              		.loc 1 1823 5 view .LVU1009
 3381              	.LVL330:
 3382              		.loc 1 1823 7 is_stmt 0 view .LVU1010
 3383 002c 0020     		movs	r0, #0
 3384              	.LVL331:
 3385              	.L210:
1824:base/debug/RTT/SEGGER_RTT.c ****   } else {
1825:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1826:base/debug/RTT/SEGGER_RTT.c ****   }
1827:base/debug/RTT/SEGGER_RTT.c ****   return r;
1828:base/debug/RTT/SEGGER_RTT.c **** }
 3386              		.loc 1 1828 1 view .LVU1011
 3387 002e 38BD     		pop	{r3, r4, r5, pc}
 3388              	.LVL332:
 3389              	.L215:
 3390              	.LBB46:
1816:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3391              		.loc 1 1816 3 is_stmt 1 discriminator 1 view .LVU1012
 3392 0030 FFF7FEFF 		bl	_DoInit
 3393              	.LVL333:
1816:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3394              		.loc 1 1816 3 is_stmt 0 discriminator 1 view .LVU1013
 3395 0034 EAE7     		b	.L211
 3396              	.LVL334:
 3397              	.L213:
1816:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3398              		.loc 1 1816 3 discriminator 1 view .LVU1014
 3399              	.LBE46:
1825:base/debug/RTT/SEGGER_RTT.c ****   }
 3400              		.loc 1 1825 7 view .LVU1015
 3401 0036 4FF0FF30 		mov	r0, #-1
 3402              	.LVL335:
1827:base/debug/RTT/SEGGER_RTT.c **** }
 3403              		.loc 1 1827 3 is_stmt 1 view .LVU1016
1827:base/debug/RTT/SEGGER_RTT.c **** }
 3404              		.loc 1 1827 10 is_stmt 0 view .LVU1017
 3405 003a F8E7     		b	.L210
 3406              	.L217:
 3407              		.align	2
 3408              	.L216:
ARM GAS  /tmp/ccycMeWv.s 			page 98


 3409 003c 00000000 		.word	.LANCHOR1
 3410              		.cfi_endproc
 3411              	.LFE29:
 3413              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3414              		.align	1
 3415              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3416              		.syntax unified
 3417              		.thumb
 3418              		.thumb_func
 3419              		.fpu softvfp
 3421              	SEGGER_RTT_SetFlagsDownBuffer:
 3422              	.LVL336:
 3423              	.LFB30:
1829:base/debug/RTT/SEGGER_RTT.c **** 
1830:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1831:base/debug/RTT/SEGGER_RTT.c **** *
1832:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1833:base/debug/RTT/SEGGER_RTT.c **** *
1834:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1835:base/debug/RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1836:base/debug/RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1837:base/debug/RTT/SEGGER_RTT.c **** *
1838:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1839:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1840:base/debug/RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1841:base/debug/RTT/SEGGER_RTT.c **** *
1842:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1843:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1844:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error
1845:base/debug/RTT/SEGGER_RTT.c **** */
1846:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3424              		.loc 1 1846 73 is_stmt 1 view -0
 3425              		.cfi_startproc
 3426              		@ args = 0, pretend = 0, frame = 0
 3427              		@ frame_needed = 0, uses_anonymous_args = 0
 3428              		.loc 1 1846 73 is_stmt 0 view .LVU1019
 3429 0000 38B5     		push	{r3, r4, r5, lr}
 3430              	.LCFI33:
 3431              		.cfi_def_cfa_offset 16
 3432              		.cfi_offset 3, -16
 3433              		.cfi_offset 4, -12
 3434              		.cfi_offset 5, -8
 3435              		.cfi_offset 14, -4
 3436 0002 0446     		mov	r4, r0
 3437 0004 0D46     		mov	r5, r1
1847:base/debug/RTT/SEGGER_RTT.c ****   int r;
 3438              		.loc 1 1847 3 is_stmt 1 view .LVU1020
1848:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3439              		.loc 1 1848 3 view .LVU1021
1849:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3440              		.loc 1 1849 3 view .LVU1022
 3441              	.LBB47:
1850:base/debug/RTT/SEGGER_RTT.c **** 
1851:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3442              		.loc 1 1851 3 view .LVU1023
 3443              		.loc 1 1851 3 view .LVU1024
 3444              	.LVL337:
ARM GAS  /tmp/ccycMeWv.s 			page 99


 3445              		.loc 1 1851 3 view .LVU1025
 3446              		.loc 1 1851 3 view .LVU1026
 3447 0006 0D4B     		ldr	r3, .L224
 3448 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3449 000a 8BB1     		cbz	r3, .L223
 3450              	.LVL338:
 3451              	.L219:
 3452              		.loc 1 1851 3 discriminator 3 view .LVU1027
 3453              	.LBE47:
 3454              		.loc 1 1851 9 discriminator 3 view .LVU1028
1852:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3455              		.loc 1 1852 3 discriminator 3 view .LVU1029
1853:base/debug/RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3456              		.loc 1 1853 3 discriminator 3 view .LVU1030
 3457              		.loc 1 1853 6 is_stmt 0 discriminator 3 view .LVU1031
 3458 000c 022C     		cmp	r4, #2
 3459 000e 12D8     		bhi	.L221
 3460              	.LBB48:
1854:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3461              		.loc 1 1854 5 is_stmt 1 view .LVU1032
 3462              		.loc 1 1854 5 view .LVU1033
 3463              		.syntax unified
 3464              	@ 1854 "base/debug/RTT/SEGGER_RTT.c" 1
 3465 0010 EFF31182 		mrs   r2, basepri  
 3466 0014 4FF02001 		mov   r1, #32       
 3467 0018 81F31188 		msr   basepri, r1  
 3468              		
 3469              	@ 0 "" 2
 3470              	.LVL339:
 3471              		.loc 1 1854 22 view .LVU1034
1855:base/debug/RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3472              		.loc 1 1855 5 view .LVU1035
1856:base/debug/RTT/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3473              		.loc 1 1856 5 view .LVU1036
 3474              		.loc 1 1856 18 is_stmt 0 view .LVU1037
 3475              		.thumb
 3476              		.syntax unified
 3477 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3478              	.LVL340:
 3479              		.loc 1 1856 18 view .LVU1038
 3480 0020 064B     		ldr	r3, .L224
 3481 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3482 0026 5D67     		str	r5, [r3, #116]
1857:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3483              		.loc 1 1857 5 is_stmt 1 view .LVU1039
 3484              		.syntax unified
 3485              	@ 1857 "base/debug/RTT/SEGGER_RTT.c" 1
 3486 0028 82F31188 		msr   basepri, r2  
 3487              		
 3488              	@ 0 "" 2
 3489              		.thumb
 3490              		.syntax unified
 3491              	.LBE48:
 3492              		.loc 1 1857 24 view .LVU1040
1858:base/debug/RTT/SEGGER_RTT.c ****     r =  0;
 3493              		.loc 1 1858 5 view .LVU1041
 3494              	.LVL341:
ARM GAS  /tmp/ccycMeWv.s 			page 100


 3495              		.loc 1 1858 7 is_stmt 0 view .LVU1042
 3496 002c 0020     		movs	r0, #0
 3497              	.LVL342:
 3498              	.L218:
1859:base/debug/RTT/SEGGER_RTT.c ****   } else {
1860:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1861:base/debug/RTT/SEGGER_RTT.c ****   }
1862:base/debug/RTT/SEGGER_RTT.c ****   return r;
1863:base/debug/RTT/SEGGER_RTT.c **** }
 3499              		.loc 1 1863 1 view .LVU1043
 3500 002e 38BD     		pop	{r3, r4, r5, pc}
 3501              	.LVL343:
 3502              	.L223:
 3503              	.LBB49:
1851:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3504              		.loc 1 1851 3 is_stmt 1 discriminator 1 view .LVU1044
 3505 0030 FFF7FEFF 		bl	_DoInit
 3506              	.LVL344:
1851:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3507              		.loc 1 1851 3 is_stmt 0 discriminator 1 view .LVU1045
 3508 0034 EAE7     		b	.L219
 3509              	.LVL345:
 3510              	.L221:
1851:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3511              		.loc 1 1851 3 discriminator 1 view .LVU1046
 3512              	.LBE49:
1860:base/debug/RTT/SEGGER_RTT.c ****   }
 3513              		.loc 1 1860 7 view .LVU1047
 3514 0036 4FF0FF30 		mov	r0, #-1
 3515              	.LVL346:
1862:base/debug/RTT/SEGGER_RTT.c **** }
 3516              		.loc 1 1862 3 is_stmt 1 view .LVU1048
1862:base/debug/RTT/SEGGER_RTT.c **** }
 3517              		.loc 1 1862 10 is_stmt 0 view .LVU1049
 3518 003a F8E7     		b	.L218
 3519              	.L225:
 3520              		.align	2
 3521              	.L224:
 3522 003c 00000000 		.word	.LANCHOR1
 3523              		.cfi_endproc
 3524              	.LFE30:
 3526              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3527              		.align	1
 3528              		.global	SEGGER_RTT_Init
 3529              		.syntax unified
 3530              		.thumb
 3531              		.thumb_func
 3532              		.fpu softvfp
 3534              	SEGGER_RTT_Init:
 3535              	.LFB31:
1864:base/debug/RTT/SEGGER_RTT.c **** 
1865:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1866:base/debug/RTT/SEGGER_RTT.c **** *
1867:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1868:base/debug/RTT/SEGGER_RTT.c **** *
1869:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1870:base/debug/RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
ARM GAS  /tmp/ccycMeWv.s 			page 101


1871:base/debug/RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1872:base/debug/RTT/SEGGER_RTT.c **** *
1873:base/debug/RTT/SEGGER_RTT.c **** */
1874:base/debug/RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3536              		.loc 1 1874 29 is_stmt 1 view -0
 3537              		.cfi_startproc
 3538              		@ args = 0, pretend = 0, frame = 0
 3539              		@ frame_needed = 0, uses_anonymous_args = 0
 3540 0000 08B5     		push	{r3, lr}
 3541              	.LCFI34:
 3542              		.cfi_def_cfa_offset 8
 3543              		.cfi_offset 3, -8
 3544              		.cfi_offset 14, -4
1875:base/debug/RTT/SEGGER_RTT.c ****   _DoInit();
 3545              		.loc 1 1875 3 view .LVU1051
 3546 0002 FFF7FEFF 		bl	_DoInit
 3547              	.LVL347:
1876:base/debug/RTT/SEGGER_RTT.c **** }
 3548              		.loc 1 1876 1 is_stmt 0 view .LVU1052
 3549 0006 08BD     		pop	{r3, pc}
 3550              		.cfi_endproc
 3551              	.LFE31:
 3553              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3554              		.align	1
 3555              		.global	SEGGER_RTT_SetTerminal
 3556              		.syntax unified
 3557              		.thumb
 3558              		.thumb_func
 3559              		.fpu softvfp
 3561              	SEGGER_RTT_SetTerminal:
 3562              	.LVL348:
 3563              	.LFB32:
1877:base/debug/RTT/SEGGER_RTT.c **** 
1878:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1879:base/debug/RTT/SEGGER_RTT.c **** *
1880:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1881:base/debug/RTT/SEGGER_RTT.c **** *
1882:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1883:base/debug/RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1884:base/debug/RTT/SEGGER_RTT.c **** *
1885:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1886:base/debug/RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1887:base/debug/RTT/SEGGER_RTT.c **** *
1888:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1889:base/debug/RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1890:base/debug/RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1891:base/debug/RTT/SEGGER_RTT.c **** *
1892:base/debug/RTT/SEGGER_RTT.c **** *  Notes
1893:base/debug/RTT/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1894:base/debug/RTT/SEGGER_RTT.c **** */
1895:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3564              		.loc 1 1895 55 is_stmt 1 view -0
 3565              		.cfi_startproc
 3566              		@ args = 0, pretend = 0, frame = 8
 3567              		@ frame_needed = 0, uses_anonymous_args = 0
 3568              		.loc 1 1895 55 is_stmt 0 view .LVU1054
 3569 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccycMeWv.s 			page 102


 3570              	.LCFI35:
 3571              		.cfi_def_cfa_offset 12
 3572              		.cfi_offset 4, -12
 3573              		.cfi_offset 5, -8
 3574              		.cfi_offset 14, -4
 3575 0002 83B0     		sub	sp, sp, #12
 3576              	.LCFI36:
 3577              		.cfi_def_cfa_offset 24
 3578 0004 0446     		mov	r4, r0
1896:base/debug/RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 3579              		.loc 1 1896 3 is_stmt 1 view .LVU1055
1897:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3580              		.loc 1 1897 3 view .LVU1056
1898:base/debug/RTT/SEGGER_RTT.c ****   unsigned Avail;
 3581              		.loc 1 1898 3 view .LVU1057
1899:base/debug/RTT/SEGGER_RTT.c ****   int r;
 3582              		.loc 1 1899 3 view .LVU1058
 3583              	.LBB50:
1900:base/debug/RTT/SEGGER_RTT.c **** 
1901:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3584              		.loc 1 1901 3 view .LVU1059
 3585              		.loc 1 1901 3 view .LVU1060
 3586              	.LVL349:
 3587              		.loc 1 1901 3 view .LVU1061
 3588              		.loc 1 1901 3 view .LVU1062
 3589 0006 1D4B     		ldr	r3, .L239
 3590 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3591 000a FBB1     		cbz	r3, .L236
 3592              	.LVL350:
 3593              	.L229:
 3594              		.loc 1 1901 3 discriminator 3 view .LVU1063
 3595              	.LBE50:
 3596              		.loc 1 1901 9 discriminator 3 view .LVU1064
1902:base/debug/RTT/SEGGER_RTT.c ****   r = 0;
 3597              		.loc 1 1902 3 discriminator 3 view .LVU1065
1903:base/debug/RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3598              		.loc 1 1903 3 discriminator 3 view .LVU1066
 3599              		.loc 1 1903 9 is_stmt 0 discriminator 3 view .LVU1067
 3600 000c FF23     		movs	r3, #255
 3601 000e 8DF80430 		strb	r3, [sp, #4]
1904:base/debug/RTT/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3602              		.loc 1 1904 3 is_stmt 1 discriminator 3 view .LVU1068
 3603              		.loc 1 1904 6 is_stmt 0 discriminator 3 view .LVU1069
 3604 0012 0F2C     		cmp	r4, #15
 3605 0014 2FD8     		bhi	.L233
1905:base/debug/RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3606              		.loc 1 1905 5 is_stmt 1 view .LVU1070
 3607              		.loc 1 1905 25 is_stmt 0 view .LVU1071
 3608 0016 1A4B     		ldr	r3, .L239+4
 3609 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3610              		.loc 1 1905 11 view .LVU1072
 3611 001a 8DF80530 		strb	r3, [sp, #5]
1906:base/debug/RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3612              		.loc 1 1906 5 is_stmt 1 view .LVU1073
 3613              	.LVL351:
 3614              	.LBB51:
1907:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
ARM GAS  /tmp/ccycMeWv.s 			page 103


 3615              		.loc 1 1907 5 view .LVU1074
 3616              		.loc 1 1907 5 view .LVU1075
 3617              		.syntax unified
 3618              	@ 1907 "base/debug/RTT/SEGGER_RTT.c" 1
 3619 001e EFF31185 		mrs   r5, basepri  
 3620 0022 4FF02001 		mov   r1, #32       
 3621 0026 81F31188 		msr   basepri, r1  
 3622              		
 3623              	@ 0 "" 2
 3624              	.LVL352:
 3625              		.loc 1 1907 22 view .LVU1076
1908:base/debug/RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3626              		.loc 1 1908 5 view .LVU1077
 3627              		.loc 1 1908 15 is_stmt 0 view .LVU1078
 3628              		.thumb
 3629              		.syntax unified
 3630 002a 144B     		ldr	r3, .L239
 3631 002c DB6A     		ldr	r3, [r3, #44]
 3632              		.loc 1 1908 23 view .LVU1079
 3633 002e 03F00303 		and	r3, r3, #3
 3634              		.loc 1 1908 8 view .LVU1080
 3635 0032 022B     		cmp	r3, #2
 3636 0034 0DD0     		beq	.L237
1909:base/debug/RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1910:base/debug/RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1911:base/debug/RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1912:base/debug/RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3637              		.loc 1 1912 7 is_stmt 1 view .LVU1081
 3638              		.loc 1 1912 15 is_stmt 0 view .LVU1082
 3639 0036 1348     		ldr	r0, .L239+8
 3640 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3641              	.LVL353:
1913:base/debug/RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 3642              		.loc 1 1913 7 is_stmt 1 view .LVU1083
 3643              		.loc 1 1913 10 is_stmt 0 view .LVU1084
 3644 003c 0128     		cmp	r0, #1
 3645 003e 11D8     		bhi	.L238
1914:base/debug/RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1915:base/debug/RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1916:base/debug/RTT/SEGGER_RTT.c ****       } else {
1917:base/debug/RTT/SEGGER_RTT.c ****         r = -1;
 3646              		.loc 1 1917 11 view .LVU1085
 3647 0040 4FF0FF30 		mov	r0, #-1
 3648              	.LVL354:
 3649              	.L232:
1918:base/debug/RTT/SEGGER_RTT.c ****       }
1919:base/debug/RTT/SEGGER_RTT.c ****     }
1920:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3650              		.loc 1 1920 5 is_stmt 1 view .LVU1086
 3651              		.syntax unified
 3652              	@ 1920 "base/debug/RTT/SEGGER_RTT.c" 1
 3653 0044 85F31188 		msr   basepri, r5  
 3654              		
 3655              	@ 0 "" 2
 3656              		.thumb
 3657              		.syntax unified
 3658              	.LBE51:
ARM GAS  /tmp/ccycMeWv.s 			page 104


 3659              		.loc 1 1920 24 view .LVU1087
 3660              	.LVL355:
 3661              	.L228:
1921:base/debug/RTT/SEGGER_RTT.c ****   } else {
1922:base/debug/RTT/SEGGER_RTT.c ****     r = -1;
1923:base/debug/RTT/SEGGER_RTT.c ****   }
1924:base/debug/RTT/SEGGER_RTT.c ****   return r;
1925:base/debug/RTT/SEGGER_RTT.c **** }
 3662              		.loc 1 1925 1 is_stmt 0 view .LVU1088
 3663 0048 03B0     		add	sp, sp, #12
 3664              	.LCFI37:
 3665              		.cfi_remember_state
 3666              		.cfi_def_cfa_offset 12
 3667              		@ sp needed
 3668 004a 30BD     		pop	{r4, r5, pc}
 3669              	.LVL356:
 3670              	.L236:
 3671              	.LCFI38:
 3672              		.cfi_restore_state
 3673              	.LBB52:
1901:base/debug/RTT/SEGGER_RTT.c ****   r = 0;
 3674              		.loc 1 1901 3 is_stmt 1 discriminator 1 view .LVU1089
 3675 004c FFF7FEFF 		bl	_DoInit
 3676              	.LVL357:
1901:base/debug/RTT/SEGGER_RTT.c ****   r = 0;
 3677              		.loc 1 1901 3 is_stmt 0 discriminator 1 view .LVU1090
 3678 0050 DCE7     		b	.L229
 3679              	.LVL358:
 3680              	.L237:
1901:base/debug/RTT/SEGGER_RTT.c ****   r = 0;
 3681              		.loc 1 1901 3 discriminator 1 view .LVU1091
 3682              	.LBE52:
 3683              	.LBB53:
1909:base/debug/RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3684              		.loc 1 1909 7 is_stmt 1 view .LVU1092
1909:base/debug/RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3685              		.loc 1 1909 23 is_stmt 0 view .LVU1093
 3686 0052 0D4B     		ldr	r3, .L239+12
 3687 0054 1C70     		strb	r4, [r3]
1910:base/debug/RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3688              		.loc 1 1910 7 is_stmt 1 view .LVU1094
 3689 0056 0222     		movs	r2, #2
 3690 0058 01A9     		add	r1, sp, #4
 3691 005a 0A48     		ldr	r0, .L239+8
 3692 005c FFF7FEFF 		bl	_WriteBlocking
 3693              	.LVL359:
 3694              	.LBE53:
1902:base/debug/RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3695              		.loc 1 1902 5 is_stmt 0 view .LVU1095
 3696 0060 0020     		movs	r0, #0
 3697              	.LBB54:
 3698 0062 EFE7     		b	.L232
 3699              	.LVL360:
 3700              	.L238:
1914:base/debug/RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3701              		.loc 1 1914 9 is_stmt 1 view .LVU1096
1914:base/debug/RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
ARM GAS  /tmp/ccycMeWv.s 			page 105


 3702              		.loc 1 1914 25 is_stmt 0 view .LVU1097
 3703 0064 084B     		ldr	r3, .L239+12
 3704 0066 1C70     		strb	r4, [r3]
1915:base/debug/RTT/SEGGER_RTT.c ****       } else {
 3705              		.loc 1 1915 9 is_stmt 1 view .LVU1098
 3706 0068 0222     		movs	r2, #2
 3707 006a 01A9     		add	r1, sp, #4
 3708 006c 0548     		ldr	r0, .L239+8
 3709              	.LVL361:
1915:base/debug/RTT/SEGGER_RTT.c ****       } else {
 3710              		.loc 1 1915 9 is_stmt 0 view .LVU1099
 3711 006e FFF7FEFF 		bl	_WriteNoCheck
 3712              	.LVL362:
 3713              	.LBE54:
1902:base/debug/RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3714              		.loc 1 1902 5 view .LVU1100
 3715 0072 0020     		movs	r0, #0
 3716              	.LBB55:
 3717 0074 E6E7     		b	.L232
 3718              	.LVL363:
 3719              	.L233:
1902:base/debug/RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3720              		.loc 1 1902 5 view .LVU1101
 3721              	.LBE55:
1922:base/debug/RTT/SEGGER_RTT.c ****   }
 3722              		.loc 1 1922 7 view .LVU1102
 3723 0076 4FF0FF30 		mov	r0, #-1
 3724              	.LVL364:
1924:base/debug/RTT/SEGGER_RTT.c **** }
 3725              		.loc 1 1924 3 is_stmt 1 view .LVU1103
1924:base/debug/RTT/SEGGER_RTT.c **** }
 3726              		.loc 1 1924 10 is_stmt 0 view .LVU1104
 3727 007a E5E7     		b	.L228
 3728              	.L240:
 3729              		.align	2
 3730              	.L239:
 3731 007c 00000000 		.word	.LANCHOR1
 3732 0080 00000000 		.word	.LANCHOR0
 3733 0084 18000000 		.word	.LANCHOR1+24
 3734 0088 00000000 		.word	.LANCHOR4
 3735              		.cfi_endproc
 3736              	.LFE32:
 3738              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3739              		.align	1
 3740              		.global	SEGGER_RTT_TerminalOut
 3741              		.syntax unified
 3742              		.thumb
 3743              		.thumb_func
 3744              		.fpu softvfp
 3746              	SEGGER_RTT_TerminalOut:
 3747              	.LVL365:
 3748              	.LFB33:
1926:base/debug/RTT/SEGGER_RTT.c **** 
1927:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
1928:base/debug/RTT/SEGGER_RTT.c **** *
1929:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1930:base/debug/RTT/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccycMeWv.s 			page 106


1931:base/debug/RTT/SEGGER_RTT.c **** *  Function description
1932:base/debug/RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1933:base/debug/RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1934:base/debug/RTT/SEGGER_RTT.c **** *
1935:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
1936:base/debug/RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1937:base/debug/RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1938:base/debug/RTT/SEGGER_RTT.c **** *
1939:base/debug/RTT/SEGGER_RTT.c **** *  Return value
1940:base/debug/RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1941:base/debug/RTT/SEGGER_RTT.c **** *     < 0 - Error.
1942:base/debug/RTT/SEGGER_RTT.c **** *
1943:base/debug/RTT/SEGGER_RTT.c **** */
1944:base/debug/RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3749              		.loc 1 1944 70 is_stmt 1 view -0
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 0
 3752              		@ frame_needed = 0, uses_anonymous_args = 0
 3753              		.loc 1 1944 70 is_stmt 0 view .LVU1106
 3754 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3755              	.LCFI39:
 3756              		.cfi_def_cfa_offset 32
 3757              		.cfi_offset 3, -32
 3758              		.cfi_offset 4, -28
 3759              		.cfi_offset 5, -24
 3760              		.cfi_offset 6, -20
 3761              		.cfi_offset 7, -16
 3762              		.cfi_offset 8, -12
 3763              		.cfi_offset 9, -8
 3764              		.cfi_offset 14, -4
 3765 0004 0446     		mov	r4, r0
 3766 0006 0D46     		mov	r5, r1
1945:base/debug/RTT/SEGGER_RTT.c ****   int                   Status;
 3767              		.loc 1 1945 3 is_stmt 1 view .LVU1107
1946:base/debug/RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3768              		.loc 1 1946 3 view .LVU1108
1947:base/debug/RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3769              		.loc 1 1947 3 view .LVU1109
1948:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3770              		.loc 1 1948 3 view .LVU1110
 3771              	.LBB56:
1949:base/debug/RTT/SEGGER_RTT.c ****   //
1950:base/debug/RTT/SEGGER_RTT.c ****   INIT();
 3772              		.loc 1 1950 3 view .LVU1111
 3773              		.loc 1 1950 3 view .LVU1112
 3774              	.LVL366:
 3775              		.loc 1 1950 3 view .LVU1113
 3776              		.loc 1 1950 3 view .LVU1114
 3777 0008 354B     		ldr	r3, .L256
 3778 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3779 000c 03B3     		cbz	r3, .L252
 3780              	.LVL367:
 3781              	.L242:
 3782              		.loc 1 1950 3 discriminator 3 view .LVU1115
 3783              	.LBE56:
 3784              		.loc 1 1950 9 discriminator 3 view .LVU1116
1951:base/debug/RTT/SEGGER_RTT.c ****   //
ARM GAS  /tmp/ccycMeWv.s 			page 107


1952:base/debug/RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1953:base/debug/RTT/SEGGER_RTT.c ****   //
1954:base/debug/RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3785              		.loc 1 1954 3 discriminator 3 view .LVU1117
 3786              		.loc 1 1954 6 is_stmt 0 discriminator 3 view .LVU1118
 3787 000e 0F2C     		cmp	r4, #15
 3788 0010 63D8     		bhi	.L247
1955:base/debug/RTT/SEGGER_RTT.c ****     //
1956:base/debug/RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1957:base/debug/RTT/SEGGER_RTT.c ****     //
1958:base/debug/RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3789              		.loc 1 1958 5 is_stmt 1 view .LVU1119
 3790              	.LVL368:
1959:base/debug/RTT/SEGGER_RTT.c ****     //
1960:base/debug/RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1961:base/debug/RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1962:base/debug/RTT/SEGGER_RTT.c ****     //
1963:base/debug/RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3791              		.loc 1 1963 5 view .LVU1120
 3792              		.loc 1 1963 15 is_stmt 0 view .LVU1121
 3793 0012 2846     		mov	r0, r5
 3794 0014 FFF7FEFF 		bl	strlen
 3795              	.LVL369:
 3796 0018 8046     		mov	r8, r0
 3797              	.LVL370:
 3798              	.LBB57:
1964:base/debug/RTT/SEGGER_RTT.c ****     //
1965:base/debug/RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1966:base/debug/RTT/SEGGER_RTT.c ****     //
1967:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3799              		.loc 1 1967 5 is_stmt 1 view .LVU1122
 3800              		.loc 1 1967 5 view .LVU1123
 3801              		.syntax unified
 3802              	@ 1967 "base/debug/RTT/SEGGER_RTT.c" 1
 3803 001a EFF31186 		mrs   r6, basepri  
 3804 001e 4FF02001 		mov   r1, #32       
 3805 0022 81F31188 		msr   basepri, r1  
 3806              		
 3807              	@ 0 "" 2
 3808              	.LVL371:
 3809              		.loc 1 1967 22 view .LVU1124
1968:base/debug/RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3810              		.loc 1 1968 5 view .LVU1125
 3811              		.loc 1 1968 13 is_stmt 0 view .LVU1126
 3812              		.thumb
 3813              		.syntax unified
 3814 0026 2E4F     		ldr	r7, .L256
 3815 0028 07F11800 		add	r0, r7, #24
 3816              	.LVL372:
 3817              		.loc 1 1968 13 view .LVU1127
 3818 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3819              	.LVL373:
 3820 0030 8146     		mov	r9, r0
 3821              	.LVL374:
1969:base/debug/RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3822              		.loc 1 1969 5 is_stmt 1 view .LVU1128
 3823              		.loc 1 1969 18 is_stmt 0 view .LVU1129
ARM GAS  /tmp/ccycMeWv.s 			page 108


 3824 0032 FB6A     		ldr	r3, [r7, #44]
 3825              		.loc 1 1969 26 view .LVU1130
 3826 0034 03F00303 		and	r3, r3, #3
 3827              		.loc 1 1969 5 view .LVU1131
 3828 0038 012B     		cmp	r3, #1
 3829 003a 23D0     		beq	.L244
 3830 003c 022B     		cmp	r3, #2
 3831 003e 3BD0     		beq	.L245
 3832 0040 4BB1     		cbz	r3, .L253
 3833 0042 4FF0FF34 		mov	r4, #-1
 3834              	.LVL375:
 3835              	.L246:
1970:base/debug/RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1971:base/debug/RTT/SEGGER_RTT.c ****       //
1972:base/debug/RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1973:base/debug/RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1974:base/debug/RTT/SEGGER_RTT.c ****       //
1975:base/debug/RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1976:base/debug/RTT/SEGGER_RTT.c ****         Status = 0;
1977:base/debug/RTT/SEGGER_RTT.c ****       } else {
1978:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1979:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1980:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1981:base/debug/RTT/SEGGER_RTT.c ****       }
1982:base/debug/RTT/SEGGER_RTT.c ****       break;
1983:base/debug/RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1984:base/debug/RTT/SEGGER_RTT.c ****       //
1985:base/debug/RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1986:base/debug/RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1987:base/debug/RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1988:base/debug/RTT/SEGGER_RTT.c ****       //
1989:base/debug/RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1990:base/debug/RTT/SEGGER_RTT.c ****         Status = -1;
1991:base/debug/RTT/SEGGER_RTT.c ****       } else {
1992:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1993:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1994:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1995:base/debug/RTT/SEGGER_RTT.c ****       }
1996:base/debug/RTT/SEGGER_RTT.c ****       break;
1997:base/debug/RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1998:base/debug/RTT/SEGGER_RTT.c ****       //
1999:base/debug/RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2000:base/debug/RTT/SEGGER_RTT.c ****       //
2001:base/debug/RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
2002:base/debug/RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
2003:base/debug/RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2004:base/debug/RTT/SEGGER_RTT.c ****       break;
2005:base/debug/RTT/SEGGER_RTT.c ****     default:
2006:base/debug/RTT/SEGGER_RTT.c ****       Status = -1;
2007:base/debug/RTT/SEGGER_RTT.c ****       break;
2008:base/debug/RTT/SEGGER_RTT.c ****     }
2009:base/debug/RTT/SEGGER_RTT.c ****     //
2010:base/debug/RTT/SEGGER_RTT.c ****     // Finish up.
2011:base/debug/RTT/SEGGER_RTT.c ****     //
2012:base/debug/RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3836              		.loc 1 2012 5 is_stmt 1 view .LVU1132
 3837              		.syntax unified
ARM GAS  /tmp/ccycMeWv.s 			page 109


 3838              	@ 2012 "base/debug/RTT/SEGGER_RTT.c" 1
 3839 0046 86F31188 		msr   basepri, r6  
 3840              		
 3841              	@ 0 "" 2
 3842              		.thumb
 3843              		.syntax unified
 3844              	.LBE57:
 3845              		.loc 1 2012 24 view .LVU1133
 3846              	.LVL376:
 3847              	.L241:
2013:base/debug/RTT/SEGGER_RTT.c ****   } else {
2014:base/debug/RTT/SEGGER_RTT.c ****     Status = -1;
2015:base/debug/RTT/SEGGER_RTT.c ****   }
2016:base/debug/RTT/SEGGER_RTT.c ****   return Status;
2017:base/debug/RTT/SEGGER_RTT.c **** }
 3848              		.loc 1 2017 1 is_stmt 0 view .LVU1134
 3849 004a 2046     		mov	r0, r4
 3850 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3851              	.LVL377:
 3852              	.L252:
 3853              	.LBB58:
1950:base/debug/RTT/SEGGER_RTT.c ****   //
 3854              		.loc 1 1950 3 is_stmt 1 discriminator 1 view .LVU1135
 3855 0050 FFF7FEFF 		bl	_DoInit
 3856              	.LVL378:
1950:base/debug/RTT/SEGGER_RTT.c ****   //
 3857              		.loc 1 1950 3 is_stmt 0 discriminator 1 view .LVU1136
 3858 0054 DBE7     		b	.L242
 3859              	.LVL379:
 3860              	.L253:
1950:base/debug/RTT/SEGGER_RTT.c ****   //
 3861              		.loc 1 1950 3 discriminator 1 view .LVU1137
 3862              	.LBE58:
 3863              	.LBB59:
1975:base/debug/RTT/SEGGER_RTT.c ****         Status = 0;
 3864              		.loc 1 1975 7 is_stmt 1 view .LVU1138
1975:base/debug/RTT/SEGGER_RTT.c ****         Status = 0;
 3865              		.loc 1 1975 28 is_stmt 0 view .LVU1139
 3866 0056 08F10403 		add	r3, r8, #4
1975:base/debug/RTT/SEGGER_RTT.c ****         Status = 0;
 3867              		.loc 1 1975 10 view .LVU1140
 3868 005a 8342     		cmp	r3, r0
 3869 005c 01D9     		bls	.L254
1976:base/debug/RTT/SEGGER_RTT.c ****       } else {
 3870              		.loc 1 1976 16 view .LVU1141
 3871 005e 0024     		movs	r4, #0
 3872 0060 F1E7     		b	.L246
 3873              	.L254:
1978:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3874              		.loc 1 1978 9 is_stmt 1 view .LVU1142
 3875 0062 1837     		adds	r7, r7, #24
 3876 0064 2146     		mov	r1, r4
 3877 0066 3846     		mov	r0, r7
 3878              	.LVL380:
1978:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3879              		.loc 1 1978 9 is_stmt 0 view .LVU1143
 3880 0068 FFF7FEFF 		bl	_PostTerminalSwitch
ARM GAS  /tmp/ccycMeWv.s 			page 110


 3881              	.LVL381:
1979:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3882              		.loc 1 1979 9 is_stmt 1 view .LVU1144
1979:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3883              		.loc 1 1979 23 is_stmt 0 view .LVU1145
 3884 006c 4246     		mov	r2, r8
 3885 006e 2946     		mov	r1, r5
 3886 0070 3846     		mov	r0, r7
 3887 0072 FFF7FEFF 		bl	_WriteBlocking
 3888              	.LVL382:
 3889 0076 0446     		mov	r4, r0
 3890              	.LVL383:
1980:base/debug/RTT/SEGGER_RTT.c ****       }
 3891              		.loc 1 1980 9 is_stmt 1 view .LVU1146
 3892 0078 1A4B     		ldr	r3, .L256+4
 3893 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3894 007c 3846     		mov	r0, r7
 3895              	.LVL384:
1980:base/debug/RTT/SEGGER_RTT.c ****       }
 3896              		.loc 1 1980 9 is_stmt 0 view .LVU1147
 3897 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3898              	.LVL385:
 3899 0082 E0E7     		b	.L246
 3900              	.LVL386:
 3901              	.L244:
1989:base/debug/RTT/SEGGER_RTT.c ****         Status = -1;
 3902              		.loc 1 1989 7 is_stmt 1 view .LVU1148
1989:base/debug/RTT/SEGGER_RTT.c ****         Status = -1;
 3903              		.loc 1 1989 10 is_stmt 0 view .LVU1149
 3904 0084 0328     		cmp	r0, #3
 3905 0086 02D8     		bhi	.L255
1990:base/debug/RTT/SEGGER_RTT.c ****       } else {
 3906              		.loc 1 1990 16 view .LVU1150
 3907 0088 4FF0FF34 		mov	r4, #-1
 3908 008c DBE7     		b	.L246
 3909              	.L255:
1992:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3910              		.loc 1 1992 9 is_stmt 1 view .LVU1151
 3911 008e 164F     		ldr	r7, .L256+8
 3912 0090 2146     		mov	r1, r4
 3913 0092 3846     		mov	r0, r7
 3914              	.LVL387:
1992:base/debug/RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3915              		.loc 1 1992 9 is_stmt 0 view .LVU1152
 3916 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3917              	.LVL388:
1993:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3918              		.loc 1 1993 9 is_stmt 1 view .LVU1153
1993:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3919              		.loc 1 1993 66 is_stmt 0 view .LVU1154
 3920 0098 A9F10402 		sub	r2, r9, #4
1993:base/debug/RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3921              		.loc 1 1993 23 view .LVU1155
 3922 009c 4245     		cmp	r2, r8
 3923 009e 28BF     		it	cs
 3924 00a0 4246     		movcs	r2, r8
 3925 00a2 2946     		mov	r1, r5
ARM GAS  /tmp/ccycMeWv.s 			page 111


 3926 00a4 3846     		mov	r0, r7
 3927 00a6 FFF7FEFF 		bl	_WriteBlocking
 3928              	.LVL389:
 3929 00aa 0446     		mov	r4, r0
 3930              	.LVL390:
1994:base/debug/RTT/SEGGER_RTT.c ****       }
 3931              		.loc 1 1994 9 is_stmt 1 view .LVU1156
 3932 00ac 0D4B     		ldr	r3, .L256+4
 3933 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3934 00b0 3846     		mov	r0, r7
 3935              	.LVL391:
1994:base/debug/RTT/SEGGER_RTT.c ****       }
 3936              		.loc 1 1994 9 is_stmt 0 view .LVU1157
 3937 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3938              	.LVL392:
 3939 00b6 C6E7     		b	.L246
 3940              	.LVL393:
 3941              	.L245:
2001:base/debug/RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3942              		.loc 1 2001 7 is_stmt 1 view .LVU1158
 3943 00b8 0B4F     		ldr	r7, .L256+8
 3944 00ba 2146     		mov	r1, r4
 3945 00bc 3846     		mov	r0, r7
 3946              	.LVL394:
2001:base/debug/RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3947              		.loc 1 2001 7 is_stmt 0 view .LVU1159
 3948 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3949              	.LVL395:
2002:base/debug/RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3950              		.loc 1 2002 7 is_stmt 1 view .LVU1160
2002:base/debug/RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3951              		.loc 1 2002 21 is_stmt 0 view .LVU1161
 3952 00c2 4246     		mov	r2, r8
 3953 00c4 2946     		mov	r1, r5
 3954 00c6 3846     		mov	r0, r7
 3955 00c8 FFF7FEFF 		bl	_WriteBlocking
 3956              	.LVL396:
 3957 00cc 0446     		mov	r4, r0
 3958              	.LVL397:
2003:base/debug/RTT/SEGGER_RTT.c ****       break;
 3959              		.loc 1 2003 7 is_stmt 1 view .LVU1162
 3960 00ce 054B     		ldr	r3, .L256+4
 3961 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3962 00d2 3846     		mov	r0, r7
 3963              	.LVL398:
2003:base/debug/RTT/SEGGER_RTT.c ****       break;
 3964              		.loc 1 2003 7 is_stmt 0 view .LVU1163
 3965 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
 3966              	.LVL399:
2004:base/debug/RTT/SEGGER_RTT.c ****     default:
 3967              		.loc 1 2004 7 is_stmt 1 view .LVU1164
 3968 00d8 B5E7     		b	.L246
 3969              	.LVL400:
 3970              	.L247:
2004:base/debug/RTT/SEGGER_RTT.c ****     default:
 3971              		.loc 1 2004 7 is_stmt 0 view .LVU1165
 3972              	.LBE59:
ARM GAS  /tmp/ccycMeWv.s 			page 112


2014:base/debug/RTT/SEGGER_RTT.c ****   }
 3973              		.loc 1 2014 12 view .LVU1166
 3974 00da 4FF0FF34 		mov	r4, #-1
 3975              	.LVL401:
2016:base/debug/RTT/SEGGER_RTT.c **** }
 3976              		.loc 1 2016 3 is_stmt 1 view .LVU1167
2016:base/debug/RTT/SEGGER_RTT.c **** }
 3977              		.loc 1 2016 10 is_stmt 0 view .LVU1168
 3978 00de B4E7     		b	.L241
 3979              	.L257:
 3980              		.align	2
 3981              	.L256:
 3982 00e0 00000000 		.word	.LANCHOR1
 3983 00e4 00000000 		.word	.LANCHOR4
 3984 00e8 18000000 		.word	.LANCHOR1+24
 3985              		.cfi_endproc
 3986              	.LFE33:
 3988              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3989              		.align	1
 3990              		.global	SEGGER_RTT_GetAvailWriteSpace
 3991              		.syntax unified
 3992              		.thumb
 3993              		.thumb_func
 3994              		.fpu softvfp
 3996              	SEGGER_RTT_GetAvailWriteSpace:
 3997              	.LVL402:
 3998              	.LFB34:
2018:base/debug/RTT/SEGGER_RTT.c **** 
2019:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
2020:base/debug/RTT/SEGGER_RTT.c **** *
2021:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2022:base/debug/RTT/SEGGER_RTT.c **** *
2023:base/debug/RTT/SEGGER_RTT.c **** *  Function description
2024:base/debug/RTT/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2025:base/debug/RTT/SEGGER_RTT.c **** *
2026:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
2027:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2028:base/debug/RTT/SEGGER_RTT.c **** *
2029:base/debug/RTT/SEGGER_RTT.c **** *  Return value
2030:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2031:base/debug/RTT/SEGGER_RTT.c **** */
2032:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 3999              		.loc 1 2032 63 is_stmt 1 view -0
 4000              		.cfi_startproc
 4001              		@ args = 0, pretend = 0, frame = 0
 4002              		@ frame_needed = 0, uses_anonymous_args = 0
 4003              		.loc 1 2032 63 is_stmt 0 view .LVU1170
 4004 0000 08B5     		push	{r3, lr}
 4005              	.LCFI40:
 4006              		.cfi_def_cfa_offset 8
 4007              		.cfi_offset 3, -8
 4008              		.cfi_offset 14, -4
2033:base/debug/RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4009              		.loc 1 2033 3 is_stmt 1 view .LVU1171
2034:base/debug/RTT/SEGGER_RTT.c **** 
2035:base/debug/RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4010              		.loc 1 2035 3 view .LVU1172
ARM GAS  /tmp/ccycMeWv.s 			page 113


 4011              		.loc 1 2035 9 is_stmt 0 view .LVU1173
 4012 0002 0130     		adds	r0, r0, #1
 4013              	.LVL403:
 4014              		.loc 1 2035 9 view .LVU1174
 4015 0004 00EB4000 		add	r0, r0, r0, lsl #1
 4016              	.LVL404:
2036:base/debug/RTT/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4017              		.loc 1 2036 3 is_stmt 1 view .LVU1175
 4018              		.loc 1 2036 10 is_stmt 0 view .LVU1176
 4019 0008 024B     		ldr	r3, .L260
 4020 000a 03EBC000 		add	r0, r3, r0, lsl #3
 4021              	.LVL405:
 4022              		.loc 1 2036 10 view .LVU1177
 4023 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 4024              	.LVL406:
2037:base/debug/RTT/SEGGER_RTT.c **** }
 4025              		.loc 1 2037 1 view .LVU1178
 4026 0012 08BD     		pop	{r3, pc}
 4027              	.L261:
 4028              		.align	2
 4029              	.L260:
 4030 0014 00000000 		.word	.LANCHOR1
 4031              		.cfi_endproc
 4032              	.LFE34:
 4034              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4035              		.align	1
 4036              		.global	SEGGER_RTT_GetBytesInBuffer
 4037              		.syntax unified
 4038              		.thumb
 4039              		.thumb_func
 4040              		.fpu softvfp
 4042              	SEGGER_RTT_GetBytesInBuffer:
 4043              	.LVL407:
 4044              	.LFB35:
2038:base/debug/RTT/SEGGER_RTT.c **** 
2039:base/debug/RTT/SEGGER_RTT.c **** 
2040:base/debug/RTT/SEGGER_RTT.c **** /*********************************************************************
2041:base/debug/RTT/SEGGER_RTT.c **** *
2042:base/debug/RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2043:base/debug/RTT/SEGGER_RTT.c **** *
2044:base/debug/RTT/SEGGER_RTT.c **** *  Function description
2045:base/debug/RTT/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2046:base/debug/RTT/SEGGER_RTT.c **** *
2047:base/debug/RTT/SEGGER_RTT.c **** *  Parameters
2048:base/debug/RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2049:base/debug/RTT/SEGGER_RTT.c **** *
2050:base/debug/RTT/SEGGER_RTT.c **** *  Return value
2051:base/debug/RTT/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2052:base/debug/RTT/SEGGER_RTT.c **** */
2053:base/debug/RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4045              		.loc 1 2053 60 is_stmt 1 view -0
 4046              		.cfi_startproc
 4047              		@ args = 0, pretend = 0, frame = 0
 4048              		@ frame_needed = 0, uses_anonymous_args = 0
 4049              		@ link register save eliminated.
2054:base/debug/RTT/SEGGER_RTT.c ****   unsigned RdOff;
 4050              		.loc 1 2054 3 view .LVU1180
ARM GAS  /tmp/ccycMeWv.s 			page 114


2055:base/debug/RTT/SEGGER_RTT.c ****   unsigned WrOff;
 4051              		.loc 1 2055 3 view .LVU1181
2056:base/debug/RTT/SEGGER_RTT.c ****   unsigned r;
 4052              		.loc 1 2056 3 view .LVU1182
2057:base/debug/RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4053              		.loc 1 2057 3 view .LVU1183
2058:base/debug/RTT/SEGGER_RTT.c ****   //
2059:base/debug/RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2060:base/debug/RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2061:base/debug/RTT/SEGGER_RTT.c ****   //
2062:base/debug/RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4054              		.loc 1 2062 3 view .LVU1184
2063:base/debug/RTT/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4055              		.loc 1 2063 3 view .LVU1185
 4056              		.loc 1 2063 9 is_stmt 0 view .LVU1186
 4057 0000 00EB4002 		add	r2, r0, r0, lsl #1
 4058 0004 084B     		ldr	r3, .L265
 4059 0006 03EBC203 		add	r3, r3, r2, lsl #3
 4060 000a 9A6A     		ldr	r2, [r3, #40]
 4061              	.LVL408:
2064:base/debug/RTT/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4062              		.loc 1 2064 3 is_stmt 1 view .LVU1187
 4063              		.loc 1 2064 9 is_stmt 0 view .LVU1188
 4064 000c 5B6A     		ldr	r3, [r3, #36]
 4065              	.LVL409:
2065:base/debug/RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4066              		.loc 1 2065 3 is_stmt 1 view .LVU1189
 4067              		.loc 1 2065 6 is_stmt 0 view .LVU1190
 4068 000e 9A42     		cmp	r2, r3
 4069 0010 01D8     		bhi	.L263
2066:base/debug/RTT/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4070              		.loc 1 2066 5 is_stmt 1 view .LVU1191
 4071              		.loc 1 2066 7 is_stmt 0 view .LVU1192
 4072 0012 981A     		subs	r0, r3, r2
 4073              	.LVL410:
 4074              		.loc 1 2066 7 view .LVU1193
 4075 0014 7047     		bx	lr
 4076              	.LVL411:
 4077              	.L263:
2067:base/debug/RTT/SEGGER_RTT.c ****   } else {
2068:base/debug/RTT/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4078              		.loc 1 2068 5 is_stmt 1 view .LVU1194
 4079              		.loc 1 2068 33 is_stmt 0 view .LVU1195
 4080 0016 00EB4000 		add	r0, r0, r0, lsl #1
 4081              	.LVL412:
 4082              		.loc 1 2068 33 view .LVU1196
 4083 001a 0349     		ldr	r1, .L265
 4084 001c 01EBC001 		add	r1, r1, r0, lsl #3
 4085 0020 086A     		ldr	r0, [r1, #32]
 4086              		.loc 1 2068 47 view .LVU1197
 4087 0022 D21A     		subs	r2, r2, r3
 4088              	.LVL413:
 4089              		.loc 1 2068 7 view .LVU1198
 4090 0024 1044     		add	r0, r0, r2
 4091              	.LVL414:
2069:base/debug/RTT/SEGGER_RTT.c ****   }
2070:base/debug/RTT/SEGGER_RTT.c ****   return r;
ARM GAS  /tmp/ccycMeWv.s 			page 115


 4092              		.loc 1 2070 3 is_stmt 1 view .LVU1199
2071:base/debug/RTT/SEGGER_RTT.c **** }
 4093              		.loc 1 2071 1 is_stmt 0 view .LVU1200
 4094 0026 7047     		bx	lr
 4095              	.L266:
 4096              		.align	2
 4097              	.L265:
 4098 0028 00000000 		.word	.LANCHOR1
 4099              		.cfi_endproc
 4100              	.LFE35:
 4102              		.global	_SEGGER_RTT
 4103              		.section	.bss._ActiveTerminal,"aw",%nobits
 4104              		.set	.LANCHOR4,. + 0
 4107              	_ActiveTerminal:
 4108 0000 00       		.space	1
 4109              		.section	.bss._SEGGER_RTT,"aw",%nobits
 4110              		.align	2
 4111              		.set	.LANCHOR1,. + 0
 4114              	_SEGGER_RTT:
 4115 0000 00000000 		.space	168
 4115      00000000 
 4115      00000000 
 4115      00000000 
 4115      00000000 
 4116              		.section	.bss._acDownBuffer,"aw",%nobits
 4117              		.align	2
 4118              		.set	.LANCHOR3,. + 0
 4121              	_acDownBuffer:
 4122 0000 00000000 		.space	16
 4122      00000000 
 4122      00000000 
 4122      00000000 
 4123              		.section	.bss._acUpBuffer,"aw",%nobits
 4124              		.align	2
 4125              		.set	.LANCHOR2,. + 0
 4128              	_acUpBuffer:
 4129 0000 00000000 		.space	1024
 4129      00000000 
 4129      00000000 
 4129      00000000 
 4129      00000000 
 4130              		.section	.rodata._aTerminalId,"a"
 4131              		.align	2
 4132              		.set	.LANCHOR0,. + 0
 4135              	_aTerminalId:
 4136 0000 30313233 		.ascii	"0123456789ABCDEF"
 4136      34353637 
 4136      38394142 
 4136      43444546 
 4137              		.text
 4138              	.Letext0:
 4139              		.file 2 "base/debug/RTT/SEGGER_RTT.h"
 4140              		.file 3 "/usr/lib/gcc/arm-none-eabi/11.1.0/include/stddef.h"
 4141              		.file 4 "/usr/arm-none-eabi/include/string.h"
 4142              		.file 5 "<built-in>"
ARM GAS  /tmp/ccycMeWv.s 			page 116


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
     /tmp/ccycMeWv.s:16     .text._GetAvailWriteSpace:0000000000000000 $t
     /tmp/ccycMeWv.s:23     .text._GetAvailWriteSpace:0000000000000000 _GetAvailWriteSpace
     /tmp/ccycMeWv.s:77     .text._WriteNoCheck:0000000000000000 $t
     /tmp/ccycMeWv.s:83     .text._WriteNoCheck:0000000000000000 _WriteNoCheck
     /tmp/ccycMeWv.s:183    .text._WriteBlocking:0000000000000000 $t
     /tmp/ccycMeWv.s:189    .text._WriteBlocking:0000000000000000 _WriteBlocking
     /tmp/ccycMeWv.s:334    .text._PostTerminalSwitch:0000000000000000 $t
     /tmp/ccycMeWv.s:340    .text._PostTerminalSwitch:0000000000000000 _PostTerminalSwitch
     /tmp/ccycMeWv.s:382    .text._PostTerminalSwitch:0000000000000020 $d
     /tmp/ccycMeWv.s:387    .rodata._DoInit.str1.4:0000000000000000 $d
     /tmp/ccycMeWv.s:397    .text._DoInit:0000000000000000 $t
     /tmp/ccycMeWv.s:403    .text._DoInit:0000000000000000 _DoInit
     /tmp/ccycMeWv.s:486    .text._DoInit:000000000000004c $d
     /tmp/ccycMeWv.s:496    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:503    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 SEGGER_RTT_ReadUpBufferNoLock
     /tmp/ccycMeWv.s:697    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000000000a4 $d
     /tmp/ccycMeWv.s:702    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:709    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
     /tmp/ccycMeWv.s:900    .text.SEGGER_RTT_ReadNoLock:000000000000009c $d
     /tmp/ccycMeWv.s:905    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:912    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 SEGGER_RTT_ReadUpBuffer
     /tmp/ccycMeWv.s:964    .text.SEGGER_RTT_Read:0000000000000000 $t
     /tmp/ccycMeWv.s:971    .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
     /tmp/ccycMeWv.s:1023   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:1030   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
     /tmp/ccycMeWv.s:1265   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000108 $d
     /tmp/ccycMeWv.s:1270   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:1277   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 SEGGER_RTT_WriteDownBufferNoLock
     /tmp/ccycMeWv.s:1391   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000060 $d
     /tmp/ccycMeWv.s:1396   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:1403   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
     /tmp/ccycMeWv.s:1518   .text.SEGGER_RTT_WriteNoLock:0000000000000068 $d
     /tmp/ccycMeWv.s:1523   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:1530   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 SEGGER_RTT_WriteDownBuffer
     /tmp/ccycMeWv.s:1610   .text.SEGGER_RTT_WriteDownBuffer:0000000000000030 $d
     /tmp/ccycMeWv.s:1616   .text.SEGGER_RTT_Write:0000000000000000 $t
     /tmp/ccycMeWv.s:1623   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
     /tmp/ccycMeWv.s:1703   .text.SEGGER_RTT_Write:0000000000000030 $d
     /tmp/ccycMeWv.s:1709   .text.SEGGER_RTT_WriteString:0000000000000000 $t
     /tmp/ccycMeWv.s:1716   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
     /tmp/ccycMeWv.s:1759   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 $t
     /tmp/ccycMeWv.s:1766   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 SEGGER_RTT_PutCharSkipNoLock
     /tmp/ccycMeWv.s:1862   .text.SEGGER_RTT_PutCharSkipNoLock:000000000000004c $d
     /tmp/ccycMeWv.s:1867   .text.SEGGER_RTT_PutCharSkip:0000000000000000 $t
     /tmp/ccycMeWv.s:1874   .text.SEGGER_RTT_PutCharSkip:0000000000000000 SEGGER_RTT_PutCharSkip
     /tmp/ccycMeWv.s:2014   .text.SEGGER_RTT_PutCharSkip:000000000000006c $d
     /tmp/ccycMeWv.s:2020   .text.SEGGER_RTT_PutChar:0000000000000000 $t
     /tmp/ccycMeWv.s:2027   .text.SEGGER_RTT_PutChar:0000000000000000 SEGGER_RTT_PutChar
     /tmp/ccycMeWv.s:2192   .text.SEGGER_RTT_PutChar:0000000000000090 $d
     /tmp/ccycMeWv.s:2198   .text.SEGGER_RTT_GetKey:0000000000000000 $t
     /tmp/ccycMeWv.s:2205   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
     /tmp/ccycMeWv.s:2257   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
     /tmp/ccycMeWv.s:2264   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
     /tmp/ccycMeWv.s:2293   .text.SEGGER_RTT_HasKey:0000000000000000 $t
     /tmp/ccycMeWv.s:2300   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
ARM GAS  /tmp/ccycMeWv.s 			page 117


     /tmp/ccycMeWv.s:2365   .text.SEGGER_RTT_HasKey:0000000000000020 $d
     /tmp/ccycMeWv.s:2370   .text.SEGGER_RTT_HasData:0000000000000000 $t
     /tmp/ccycMeWv.s:2377   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
     /tmp/ccycMeWv.s:2408   .text.SEGGER_RTT_HasData:000000000000001c $d
     /tmp/ccycMeWv.s:2413   .text.SEGGER_RTT_HasDataUp:0000000000000000 $t
     /tmp/ccycMeWv.s:2420   .text.SEGGER_RTT_HasDataUp:0000000000000000 SEGGER_RTT_HasDataUp
     /tmp/ccycMeWv.s:2451   .text.SEGGER_RTT_HasDataUp:000000000000001c $d
     /tmp/ccycMeWv.s:2456   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:2463   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
     /tmp/ccycMeWv.s:2608   .text.SEGGER_RTT_AllocDownBuffer:0000000000000070 $d
     /tmp/ccycMeWv.s:2614   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:2621   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
     /tmp/ccycMeWv.s:2774   .text.SEGGER_RTT_AllocUpBuffer:0000000000000084 $d
     /tmp/ccycMeWv.s:2780   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:2787   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
     /tmp/ccycMeWv.s:2923   .text.SEGGER_RTT_ConfigUpBuffer:000000000000006c $d
     /tmp/ccycMeWv.s:2928   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:2935   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
     /tmp/ccycMeWv.s:3067   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000068 $d
     /tmp/ccycMeWv.s:3072   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:3079   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
     /tmp/ccycMeWv.s:3183   .text.SEGGER_RTT_SetNameUpBuffer:000000000000003c $d
     /tmp/ccycMeWv.s:3188   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:3195   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
     /tmp/ccycMeWv.s:3296   .text.SEGGER_RTT_SetNameDownBuffer:000000000000003c $d
     /tmp/ccycMeWv.s:3301   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:3308   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
     /tmp/ccycMeWv.s:3409   .text.SEGGER_RTT_SetFlagsUpBuffer:000000000000003c $d
     /tmp/ccycMeWv.s:3414   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:3421   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
     /tmp/ccycMeWv.s:3522   .text.SEGGER_RTT_SetFlagsDownBuffer:000000000000003c $d
     /tmp/ccycMeWv.s:3527   .text.SEGGER_RTT_Init:0000000000000000 $t
     /tmp/ccycMeWv.s:3534   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
     /tmp/ccycMeWv.s:3554   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
     /tmp/ccycMeWv.s:3561   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
     /tmp/ccycMeWv.s:3731   .text.SEGGER_RTT_SetTerminal:000000000000007c $d
     /tmp/ccycMeWv.s:3739   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
     /tmp/ccycMeWv.s:3746   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
     /tmp/ccycMeWv.s:3982   .text.SEGGER_RTT_TerminalOut:00000000000000e0 $d
     /tmp/ccycMeWv.s:3989   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 $t
     /tmp/ccycMeWv.s:3996   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 SEGGER_RTT_GetAvailWriteSpace
     /tmp/ccycMeWv.s:4030   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000014 $d
     /tmp/ccycMeWv.s:4035   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 $t
     /tmp/ccycMeWv.s:4042   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 SEGGER_RTT_GetBytesInBuffer
     /tmp/ccycMeWv.s:4098   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000028 $d
     /tmp/ccycMeWv.s:4114   .bss._SEGGER_RTT:0000000000000000 _SEGGER_RTT
     /tmp/ccycMeWv.s:4107   .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
     /tmp/ccycMeWv.s:4108   .bss._ActiveTerminal:0000000000000000 $d
     /tmp/ccycMeWv.s:4110   .bss._SEGGER_RTT:0000000000000000 $d
     /tmp/ccycMeWv.s:4117   .bss._acDownBuffer:0000000000000000 $d
     /tmp/ccycMeWv.s:4121   .bss._acDownBuffer:0000000000000000 _acDownBuffer
     /tmp/ccycMeWv.s:4124   .bss._acUpBuffer:0000000000000000 $d
     /tmp/ccycMeWv.s:4128   .bss._acUpBuffer:0000000000000000 _acUpBuffer
     /tmp/ccycMeWv.s:4131   .rodata._aTerminalId:0000000000000000 $d
     /tmp/ccycMeWv.s:4135   .rodata._aTerminalId:0000000000000000 _aTerminalId

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccycMeWv.s 			page 118


memcpy
strlen
