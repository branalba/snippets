ARM GAS  /tmp/ccJvJKVn.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTestWaitCondition:
  24              	.LVL0:
  25              	.LFB15:
  26              		.file 1 "base/os/FreeRTOS/Source/event_groups.c"
   1:base/os/FreeRTOS/Source/event_groups.c **** /*
   2:base/os/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/event_groups.c ****  *
   5:base/os/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/event_groups.c ****  *
  12:base/os/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/event_groups.c ****  *
  15:base/os/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/event_groups.c ****  *
  22:base/os/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/event_groups.c ****  *
  25:base/os/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/event_groups.c ****  */
  27:base/os/FreeRTOS/Source/event_groups.c **** 
  28:base/os/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:base/os/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:base/os/FreeRTOS/Source/event_groups.c **** 
  31:base/os/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:base/os/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccJvJKVn.s 			page 2


  33:base/os/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:base/os/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:base/os/FreeRTOS/Source/event_groups.c **** 
  36:base/os/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:base/os/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:base/os/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:base/os/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:base/os/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:base/os/FreeRTOS/Source/event_groups.c **** 
  42:base/os/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:base/os/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:base/os/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:base/os/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:base/os/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:base/os/FreeRTOS/Source/event_groups.c **** 
  48:base/os/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:base/os/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:base/os/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:base/os/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:base/os/FreeRTOS/Source/event_groups.c **** #else
  57:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:base/os/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:base/os/FreeRTOS/Source/event_groups.c **** #endif
  62:base/os/FreeRTOS/Source/event_groups.c **** 
  63:base/os/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:base/os/FreeRTOS/Source/event_groups.c **** {
  65:base/os/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:base/os/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:base/os/FreeRTOS/Source/event_groups.c **** 
  68:base/os/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:base/os/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:base/os/FreeRTOS/Source/event_groups.c **** 	#endif
  71:base/os/FreeRTOS/Source/event_groups.c **** 
  72:base/os/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:base/os/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:base/os/FreeRTOS/Source/event_groups.c **** 	#endif
  75:base/os/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:base/os/FreeRTOS/Source/event_groups.c **** 
  77:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:base/os/FreeRTOS/Source/event_groups.c **** 
  79:base/os/FreeRTOS/Source/event_groups.c **** /*
  80:base/os/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:base/os/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:base/os/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:base/os/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:base/os/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:base/os/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:base/os/FreeRTOS/Source/event_groups.c ****  */
  87:base/os/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:base/os/FreeRTOS/Source/event_groups.c **** 
  89:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJvJKVn.s 			page 3


  90:base/os/FreeRTOS/Source/event_groups.c **** 
  91:base/os/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:base/os/FreeRTOS/Source/event_groups.c **** 
  93:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:base/os/FreeRTOS/Source/event_groups.c **** 	{
  95:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:base/os/FreeRTOS/Source/event_groups.c **** 
  97:base/os/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:base/os/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:base/os/FreeRTOS/Source/event_groups.c **** 
 100:base/os/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:base/os/FreeRTOS/Source/event_groups.c **** 		{
 102:base/os/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:base/os/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:base/os/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:base/os/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:base/os/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:base/os/FreeRTOS/Source/event_groups.c **** 		}
 108:base/os/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:base/os/FreeRTOS/Source/event_groups.c **** 
 110:base/os/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:base/os/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 112:base/os/FreeRTOS/Source/event_groups.c **** 
 113:base/os/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:base/os/FreeRTOS/Source/event_groups.c **** 		{
 115:base/os/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:base/os/FreeRTOS/Source/event_groups.c **** 
 118:base/os/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:base/os/FreeRTOS/Source/event_groups.c **** 			{
 120:base/os/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:base/os/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:base/os/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:base/os/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:base/os/FreeRTOS/Source/event_groups.c **** 			}
 125:base/os/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:base/os/FreeRTOS/Source/event_groups.c **** 
 127:base/os/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:base/os/FreeRTOS/Source/event_groups.c **** 		}
 129:base/os/FreeRTOS/Source/event_groups.c **** 		else
 130:base/os/FreeRTOS/Source/event_groups.c **** 		{
 131:base/os/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:base/os/FreeRTOS/Source/event_groups.c **** 		}
 133:base/os/FreeRTOS/Source/event_groups.c **** 
 134:base/os/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:base/os/FreeRTOS/Source/event_groups.c **** 	}
 136:base/os/FreeRTOS/Source/event_groups.c **** 
 137:base/os/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:base/os/FreeRTOS/Source/event_groups.c **** 
 140:base/os/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 141:base/os/FreeRTOS/Source/event_groups.c **** 
 142:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:base/os/FreeRTOS/Source/event_groups.c **** 	{
 144:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:base/os/FreeRTOS/Source/event_groups.c **** 
 146:base/os/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
ARM GAS  /tmp/ccJvJKVn.s 			page 4


 147:base/os/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 148:base/os/FreeRTOS/Source/event_groups.c **** 
 149:base/os/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 150:base/os/FreeRTOS/Source/event_groups.c **** 		{
 151:base/os/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 152:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 153:base/os/FreeRTOS/Source/event_groups.c **** 
 154:base/os/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:base/os/FreeRTOS/Source/event_groups.c **** 			{
 156:base/os/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:base/os/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:base/os/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:base/os/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 160:base/os/FreeRTOS/Source/event_groups.c **** 			}
 161:base/os/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:base/os/FreeRTOS/Source/event_groups.c **** 
 163:base/os/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:base/os/FreeRTOS/Source/event_groups.c **** 		}
 165:base/os/FreeRTOS/Source/event_groups.c **** 		else
 166:base/os/FreeRTOS/Source/event_groups.c **** 		{
 167:base/os/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:base/os/FreeRTOS/Source/event_groups.c **** 		}
 169:base/os/FreeRTOS/Source/event_groups.c **** 
 170:base/os/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:base/os/FreeRTOS/Source/event_groups.c **** 	}
 172:base/os/FreeRTOS/Source/event_groups.c **** 
 173:base/os/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:base/os/FreeRTOS/Source/event_groups.c **** 
 176:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:base/os/FreeRTOS/Source/event_groups.c **** {
 178:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:base/os/FreeRTOS/Source/event_groups.c **** 
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:base/os/FreeRTOS/Source/event_groups.c **** 	{
 187:base/os/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:base/os/FreeRTOS/Source/event_groups.c **** 	}
 189:base/os/FreeRTOS/Source/event_groups.c **** 	#endif
 190:base/os/FreeRTOS/Source/event_groups.c **** 
 191:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:base/os/FreeRTOS/Source/event_groups.c **** 	{
 193:base/os/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:base/os/FreeRTOS/Source/event_groups.c **** 
 195:base/os/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:base/os/FreeRTOS/Source/event_groups.c **** 
 197:base/os/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:base/os/FreeRTOS/Source/event_groups.c **** 		{
 199:base/os/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:base/os/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:base/os/FreeRTOS/Source/event_groups.c **** 
 202:base/os/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:base/os/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
ARM GAS  /tmp/ccJvJKVn.s 			page 5


 204:base/os/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:base/os/FreeRTOS/Source/event_groups.c **** 
 206:base/os/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:base/os/FreeRTOS/Source/event_groups.c **** 		}
 208:base/os/FreeRTOS/Source/event_groups.c **** 		else
 209:base/os/FreeRTOS/Source/event_groups.c **** 		{
 210:base/os/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:base/os/FreeRTOS/Source/event_groups.c **** 			{
 212:base/os/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 213:base/os/FreeRTOS/Source/event_groups.c **** 
 214:base/os/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:base/os/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:base/os/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:base/os/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:base/os/FreeRTOS/Source/event_groups.c **** 
 219:base/os/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:base/os/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:base/os/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:base/os/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:base/os/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:base/os/FreeRTOS/Source/event_groups.c **** 			}
 225:base/os/FreeRTOS/Source/event_groups.c **** 			else
 226:base/os/FreeRTOS/Source/event_groups.c **** 			{
 227:base/os/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:base/os/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:base/os/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:base/os/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:base/os/FreeRTOS/Source/event_groups.c **** 			}
 232:base/os/FreeRTOS/Source/event_groups.c **** 		}
 233:base/os/FreeRTOS/Source/event_groups.c **** 	}
 234:base/os/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:base/os/FreeRTOS/Source/event_groups.c **** 
 236:base/os/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:base/os/FreeRTOS/Source/event_groups.c **** 	{
 238:base/os/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:base/os/FreeRTOS/Source/event_groups.c **** 		{
 240:base/os/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:base/os/FreeRTOS/Source/event_groups.c **** 		}
 242:base/os/FreeRTOS/Source/event_groups.c **** 		else
 243:base/os/FreeRTOS/Source/event_groups.c **** 		{
 244:base/os/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:base/os/FreeRTOS/Source/event_groups.c **** 		}
 246:base/os/FreeRTOS/Source/event_groups.c **** 
 247:base/os/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:base/os/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:base/os/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:base/os/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:base/os/FreeRTOS/Source/event_groups.c **** 
 253:base/os/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:base/os/FreeRTOS/Source/event_groups.c **** 		{
 255:base/os/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:base/os/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:base/os/FreeRTOS/Source/event_groups.c **** 			{
 258:base/os/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:base/os/FreeRTOS/Source/event_groups.c **** 
 260:base/os/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
ARM GAS  /tmp/ccJvJKVn.s 			page 6


 261:base/os/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:base/os/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 263:base/os/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:base/os/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:base/os/FreeRTOS/Source/event_groups.c **** 				{
 266:base/os/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:base/os/FreeRTOS/Source/event_groups.c **** 				}
 268:base/os/FreeRTOS/Source/event_groups.c **** 				else
 269:base/os/FreeRTOS/Source/event_groups.c **** 				{
 270:base/os/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:base/os/FreeRTOS/Source/event_groups.c **** 				}
 272:base/os/FreeRTOS/Source/event_groups.c **** 			}
 273:base/os/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:base/os/FreeRTOS/Source/event_groups.c **** 
 275:base/os/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:base/os/FreeRTOS/Source/event_groups.c **** 		}
 277:base/os/FreeRTOS/Source/event_groups.c **** 		else
 278:base/os/FreeRTOS/Source/event_groups.c **** 		{
 279:base/os/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:base/os/FreeRTOS/Source/event_groups.c **** 		}
 281:base/os/FreeRTOS/Source/event_groups.c **** 
 282:base/os/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:base/os/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:base/os/FreeRTOS/Source/event_groups.c **** 	}
 286:base/os/FreeRTOS/Source/event_groups.c **** 
 287:base/os/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:base/os/FreeRTOS/Source/event_groups.c **** 
 289:base/os/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:base/os/FreeRTOS/Source/event_groups.c **** 
 292:base/os/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:base/os/FreeRTOS/Source/event_groups.c **** }
 294:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:base/os/FreeRTOS/Source/event_groups.c **** 
 296:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:base/os/FreeRTOS/Source/event_groups.c **** {
 298:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:base/os/FreeRTOS/Source/event_groups.c **** 
 303:base/os/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:base/os/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 307:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 308:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:base/os/FreeRTOS/Source/event_groups.c **** 	{
 310:base/os/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 311:base/os/FreeRTOS/Source/event_groups.c **** 	}
 312:base/os/FreeRTOS/Source/event_groups.c **** 	#endif
 313:base/os/FreeRTOS/Source/event_groups.c **** 
 314:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 315:base/os/FreeRTOS/Source/event_groups.c **** 	{
 316:base/os/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 317:base/os/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccJvJKVn.s 			page 7


 318:base/os/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:base/os/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 320:base/os/FreeRTOS/Source/event_groups.c **** 
 321:base/os/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:base/os/FreeRTOS/Source/event_groups.c **** 		{
 323:base/os/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:base/os/FreeRTOS/Source/event_groups.c **** 			block. */
 325:base/os/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:base/os/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:base/os/FreeRTOS/Source/event_groups.c **** 
 328:base/os/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:base/os/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:base/os/FreeRTOS/Source/event_groups.c **** 			{
 331:base/os/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:base/os/FreeRTOS/Source/event_groups.c **** 			}
 333:base/os/FreeRTOS/Source/event_groups.c **** 			else
 334:base/os/FreeRTOS/Source/event_groups.c **** 			{
 335:base/os/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:base/os/FreeRTOS/Source/event_groups.c **** 			}
 337:base/os/FreeRTOS/Source/event_groups.c **** 		}
 338:base/os/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:base/os/FreeRTOS/Source/event_groups.c **** 		{
 340:base/os/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:base/os/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:base/os/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:base/os/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:base/os/FreeRTOS/Source/event_groups.c **** 		}
 345:base/os/FreeRTOS/Source/event_groups.c **** 		else
 346:base/os/FreeRTOS/Source/event_groups.c **** 		{
 347:base/os/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:base/os/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:base/os/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:base/os/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:base/os/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:base/os/FreeRTOS/Source/event_groups.c **** 			{
 353:base/os/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:base/os/FreeRTOS/Source/event_groups.c **** 			}
 355:base/os/FreeRTOS/Source/event_groups.c **** 			else
 356:base/os/FreeRTOS/Source/event_groups.c **** 			{
 357:base/os/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:base/os/FreeRTOS/Source/event_groups.c **** 			}
 359:base/os/FreeRTOS/Source/event_groups.c **** 
 360:base/os/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:base/os/FreeRTOS/Source/event_groups.c **** 			{
 362:base/os/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:base/os/FreeRTOS/Source/event_groups.c **** 			}
 364:base/os/FreeRTOS/Source/event_groups.c **** 			else
 365:base/os/FreeRTOS/Source/event_groups.c **** 			{
 366:base/os/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:base/os/FreeRTOS/Source/event_groups.c **** 			}
 368:base/os/FreeRTOS/Source/event_groups.c **** 
 369:base/os/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:base/os/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:base/os/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:base/os/FreeRTOS/Source/event_groups.c **** 
 374:base/os/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
ARM GAS  /tmp/ccJvJKVn.s 			page 8


 375:base/os/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:base/os/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 377:base/os/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:base/os/FreeRTOS/Source/event_groups.c **** 
 379:base/os/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:base/os/FreeRTOS/Source/event_groups.c **** 		}
 381:base/os/FreeRTOS/Source/event_groups.c **** 	}
 382:base/os/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:base/os/FreeRTOS/Source/event_groups.c **** 
 384:base/os/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:base/os/FreeRTOS/Source/event_groups.c **** 	{
 386:base/os/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:base/os/FreeRTOS/Source/event_groups.c **** 		{
 388:base/os/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:base/os/FreeRTOS/Source/event_groups.c **** 		}
 390:base/os/FreeRTOS/Source/event_groups.c **** 		else
 391:base/os/FreeRTOS/Source/event_groups.c **** 		{
 392:base/os/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:base/os/FreeRTOS/Source/event_groups.c **** 		}
 394:base/os/FreeRTOS/Source/event_groups.c **** 
 395:base/os/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:base/os/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:base/os/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:base/os/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:base/os/FreeRTOS/Source/event_groups.c **** 
 401:base/os/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:base/os/FreeRTOS/Source/event_groups.c **** 		{
 403:base/os/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:base/os/FreeRTOS/Source/event_groups.c **** 			{
 405:base/os/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:base/os/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:base/os/FreeRTOS/Source/event_groups.c **** 
 408:base/os/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:base/os/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:base/os/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:base/os/FreeRTOS/Source/event_groups.c **** 				{
 412:base/os/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:base/os/FreeRTOS/Source/event_groups.c **** 					{
 414:base/os/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:base/os/FreeRTOS/Source/event_groups.c **** 					}
 416:base/os/FreeRTOS/Source/event_groups.c **** 					else
 417:base/os/FreeRTOS/Source/event_groups.c **** 					{
 418:base/os/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:base/os/FreeRTOS/Source/event_groups.c **** 					}
 420:base/os/FreeRTOS/Source/event_groups.c **** 				}
 421:base/os/FreeRTOS/Source/event_groups.c **** 				else
 422:base/os/FreeRTOS/Source/event_groups.c **** 				{
 423:base/os/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:base/os/FreeRTOS/Source/event_groups.c **** 				}
 425:base/os/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:base/os/FreeRTOS/Source/event_groups.c **** 			}
 427:base/os/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:base/os/FreeRTOS/Source/event_groups.c **** 		}
 429:base/os/FreeRTOS/Source/event_groups.c **** 		else
 430:base/os/FreeRTOS/Source/event_groups.c **** 		{
 431:base/os/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
ARM GAS  /tmp/ccJvJKVn.s 			page 9


 432:base/os/FreeRTOS/Source/event_groups.c **** 		}
 433:base/os/FreeRTOS/Source/event_groups.c **** 
 434:base/os/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:base/os/FreeRTOS/Source/event_groups.c **** 	}
 437:base/os/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:base/os/FreeRTOS/Source/event_groups.c **** 
 439:base/os/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:base/os/FreeRTOS/Source/event_groups.c **** 
 442:base/os/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:base/os/FreeRTOS/Source/event_groups.c **** }
 444:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:base/os/FreeRTOS/Source/event_groups.c **** 
 446:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:base/os/FreeRTOS/Source/event_groups.c **** {
 448:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:base/os/FreeRTOS/Source/event_groups.c **** 
 451:base/os/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:base/os/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:base/os/FreeRTOS/Source/event_groups.c **** 
 456:base/os/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:base/os/FreeRTOS/Source/event_groups.c **** 	{
 458:base/os/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:base/os/FreeRTOS/Source/event_groups.c **** 
 460:base/os/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:base/os/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:base/os/FreeRTOS/Source/event_groups.c **** 
 464:base/os/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:base/os/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:base/os/FreeRTOS/Source/event_groups.c **** 	}
 467:base/os/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:base/os/FreeRTOS/Source/event_groups.c **** 
 469:base/os/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:base/os/FreeRTOS/Source/event_groups.c **** }
 471:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:base/os/FreeRTOS/Source/event_groups.c **** 
 473:base/os/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:base/os/FreeRTOS/Source/event_groups.c **** 
 475:base/os/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:base/os/FreeRTOS/Source/event_groups.c **** 	{
 477:base/os/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:base/os/FreeRTOS/Source/event_groups.c **** 
 479:base/os/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:base/os/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:base/os/FreeRTOS/Source/event_groups.c **** 
 482:base/os/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:base/os/FreeRTOS/Source/event_groups.c **** 	}
 484:base/os/FreeRTOS/Source/event_groups.c **** 
 485:base/os/FreeRTOS/Source/event_groups.c **** #endif
 486:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:base/os/FreeRTOS/Source/event_groups.c **** 
 488:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
ARM GAS  /tmp/ccJvJKVn.s 			page 10


 489:base/os/FreeRTOS/Source/event_groups.c **** {
 490:base/os/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 491:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:base/os/FreeRTOS/Source/event_groups.c **** 
 494:base/os/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:base/os/FreeRTOS/Source/event_groups.c **** 	{
 496:base/os/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:base/os/FreeRTOS/Source/event_groups.c **** 	}
 498:base/os/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:base/os/FreeRTOS/Source/event_groups.c **** 
 500:base/os/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:base/os/FreeRTOS/Source/event_groups.c **** }
 502:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:base/os/FreeRTOS/Source/event_groups.c **** 
 504:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:base/os/FreeRTOS/Source/event_groups.c **** {
 506:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:base/os/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:base/os/FreeRTOS/Source/event_groups.c **** 
 513:base/os/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:base/os/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:base/os/FreeRTOS/Source/event_groups.c **** 
 518:base/os/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:base/os/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:base/os/FreeRTOS/Source/event_groups.c **** 	{
 522:base/os/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:base/os/FreeRTOS/Source/event_groups.c **** 
 524:base/os/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:base/os/FreeRTOS/Source/event_groups.c **** 
 526:base/os/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:base/os/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:base/os/FreeRTOS/Source/event_groups.c **** 
 529:base/os/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:base/os/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:base/os/FreeRTOS/Source/event_groups.c **** 		{
 532:base/os/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:base/os/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:base/os/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:base/os/FreeRTOS/Source/event_groups.c **** 
 536:base/os/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:base/os/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:base/os/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:base/os/FreeRTOS/Source/event_groups.c **** 
 540:base/os/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:base/os/FreeRTOS/Source/event_groups.c **** 			{
 542:base/os/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:base/os/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:base/os/FreeRTOS/Source/event_groups.c **** 				{
 545:base/os/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
ARM GAS  /tmp/ccJvJKVn.s 			page 11


 546:base/os/FreeRTOS/Source/event_groups.c **** 				}
 547:base/os/FreeRTOS/Source/event_groups.c **** 				else
 548:base/os/FreeRTOS/Source/event_groups.c **** 				{
 549:base/os/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:base/os/FreeRTOS/Source/event_groups.c **** 				}
 551:base/os/FreeRTOS/Source/event_groups.c **** 			}
 552:base/os/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:base/os/FreeRTOS/Source/event_groups.c **** 			{
 554:base/os/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:base/os/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:base/os/FreeRTOS/Source/event_groups.c **** 			}
 557:base/os/FreeRTOS/Source/event_groups.c **** 			else
 558:base/os/FreeRTOS/Source/event_groups.c **** 			{
 559:base/os/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:base/os/FreeRTOS/Source/event_groups.c **** 			}
 561:base/os/FreeRTOS/Source/event_groups.c **** 
 562:base/os/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:base/os/FreeRTOS/Source/event_groups.c **** 			{
 564:base/os/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:base/os/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:base/os/FreeRTOS/Source/event_groups.c **** 				{
 567:base/os/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:base/os/FreeRTOS/Source/event_groups.c **** 				}
 569:base/os/FreeRTOS/Source/event_groups.c **** 				else
 570:base/os/FreeRTOS/Source/event_groups.c **** 				{
 571:base/os/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:base/os/FreeRTOS/Source/event_groups.c **** 				}
 573:base/os/FreeRTOS/Source/event_groups.c **** 
 574:base/os/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:base/os/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:base/os/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:base/os/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:base/os/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:base/os/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:base/os/FreeRTOS/Source/event_groups.c **** 			}
 581:base/os/FreeRTOS/Source/event_groups.c **** 
 582:base/os/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:base/os/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:base/os/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:base/os/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:base/os/FreeRTOS/Source/event_groups.c **** 		}
 587:base/os/FreeRTOS/Source/event_groups.c **** 
 588:base/os/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:base/os/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:base/os/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:base/os/FreeRTOS/Source/event_groups.c **** 	}
 592:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:base/os/FreeRTOS/Source/event_groups.c **** 
 594:base/os/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:base/os/FreeRTOS/Source/event_groups.c **** }
 596:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:base/os/FreeRTOS/Source/event_groups.c **** 
 598:base/os/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:base/os/FreeRTOS/Source/event_groups.c **** {
 600:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:base/os/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:base/os/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccJvJKVn.s 			page 12


 603:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:base/os/FreeRTOS/Source/event_groups.c **** 	{
 605:base/os/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:base/os/FreeRTOS/Source/event_groups.c **** 
 607:base/os/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:base/os/FreeRTOS/Source/event_groups.c **** 		{
 609:base/os/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:base/os/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:base/os/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:base/os/FreeRTOS/Source/event_groups.c **** 		}
 614:base/os/FreeRTOS/Source/event_groups.c **** 
 615:base/os/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:base/os/FreeRTOS/Source/event_groups.c **** 		{
 617:base/os/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:base/os/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:base/os/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:base/os/FreeRTOS/Source/event_groups.c **** 		}
 621:base/os/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:base/os/FreeRTOS/Source/event_groups.c **** 		{
 623:base/os/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:base/os/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:base/os/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:base/os/FreeRTOS/Source/event_groups.c **** 			{
 627:base/os/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:base/os/FreeRTOS/Source/event_groups.c **** 			}
 629:base/os/FreeRTOS/Source/event_groups.c **** 			else
 630:base/os/FreeRTOS/Source/event_groups.c **** 			{
 631:base/os/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:base/os/FreeRTOS/Source/event_groups.c **** 			}
 633:base/os/FreeRTOS/Source/event_groups.c **** 		}
 634:base/os/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:base/os/FreeRTOS/Source/event_groups.c **** 	}
 636:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:base/os/FreeRTOS/Source/event_groups.c **** }
 638:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:base/os/FreeRTOS/Source/event_groups.c **** 
 640:base/os/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:base/os/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:base/os/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:base/os/FreeRTOS/Source/event_groups.c **** {
 644:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:base/os/FreeRTOS/Source/event_groups.c **** }
 646:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:base/os/FreeRTOS/Source/event_groups.c **** 
 648:base/os/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:base/os/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:base/os/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:base/os/FreeRTOS/Source/event_groups.c **** {
 652:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:base/os/FreeRTOS/Source/event_groups.c **** }
 654:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:base/os/FreeRTOS/Source/event_groups.c **** 
 656:base/os/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:base/os/FreeRTOS/Source/event_groups.c **** {
  27              		.loc 1 657 1 view -0
  28              		.cfi_startproc
ARM GAS  /tmp/ccJvJKVn.s 			page 13


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 658:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  32              		.loc 1 658 1 view .LVU1
 659:base/os/FreeRTOS/Source/event_groups.c **** 
 660:base/os/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 660 2 view .LVU2
  34              		.loc 1 660 4 is_stmt 0 view .LVU3
  35 0000 1AB9     		cbnz	r2, .L2
 661:base/os/FreeRTOS/Source/event_groups.c **** 	{
 662:base/os/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:base/os/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:base/os/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  36              		.loc 1 664 3 is_stmt 1 view .LVU4
  37              		.loc 1 664 5 is_stmt 0 view .LVU5
  38 0002 0842     		tst	r0, r1
  39 0004 05D1     		bne	.L4
 658:base/os/FreeRTOS/Source/event_groups.c **** 
  40              		.loc 1 658 12 view .LVU6
  41 0006 1046     		mov	r0, r2
  42              	.LVL1:
 658:base/os/FreeRTOS/Source/event_groups.c **** 
  43              		.loc 1 658 12 view .LVU7
  44 0008 7047     		bx	lr
  45              	.LVL2:
  46              	.L2:
 665:base/os/FreeRTOS/Source/event_groups.c **** 		{
 666:base/os/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:base/os/FreeRTOS/Source/event_groups.c **** 		}
 668:base/os/FreeRTOS/Source/event_groups.c **** 		else
 669:base/os/FreeRTOS/Source/event_groups.c **** 		{
 670:base/os/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:base/os/FreeRTOS/Source/event_groups.c **** 		}
 672:base/os/FreeRTOS/Source/event_groups.c **** 	}
 673:base/os/FreeRTOS/Source/event_groups.c **** 	else
 674:base/os/FreeRTOS/Source/event_groups.c **** 	{
 675:base/os/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:base/os/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:base/os/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  47              		.loc 1 677 3 is_stmt 1 view .LVU8
  48              		.loc 1 677 5 is_stmt 0 view .LVU9
  49 000a 8143     		bics	r1, r1, r0
  50              	.LVL3:
  51              		.loc 1 677 5 view .LVU10
  52 000c 03D0     		beq	.L5
 658:base/os/FreeRTOS/Source/event_groups.c **** 
  53              		.loc 1 658 12 view .LVU11
  54 000e 0020     		movs	r0, #0
  55              	.LVL4:
 658:base/os/FreeRTOS/Source/event_groups.c **** 
  56              		.loc 1 658 12 view .LVU12
  57 0010 7047     		bx	lr
  58              	.LVL5:
  59              	.L4:
 666:base/os/FreeRTOS/Source/event_groups.c **** 		}
  60              		.loc 1 666 22 view .LVU13
ARM GAS  /tmp/ccJvJKVn.s 			page 14


  61 0012 0120     		movs	r0, #1
  62              	.LVL6:
 666:base/os/FreeRTOS/Source/event_groups.c **** 		}
  63              		.loc 1 666 22 view .LVU14
  64 0014 7047     		bx	lr
  65              	.LVL7:
  66              	.L5:
 678:base/os/FreeRTOS/Source/event_groups.c **** 		{
 679:base/os/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  67              		.loc 1 679 22 view .LVU15
  68 0016 0120     		movs	r0, #1
  69              	.LVL8:
 680:base/os/FreeRTOS/Source/event_groups.c **** 		}
 681:base/os/FreeRTOS/Source/event_groups.c **** 		else
 682:base/os/FreeRTOS/Source/event_groups.c **** 		{
 683:base/os/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
  70              		.loc 1 683 28 is_stmt 1 view .LVU16
 684:base/os/FreeRTOS/Source/event_groups.c **** 		}
 685:base/os/FreeRTOS/Source/event_groups.c **** 	}
 686:base/os/FreeRTOS/Source/event_groups.c **** 
 687:base/os/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
  71              		.loc 1 687 2 view .LVU17
 688:base/os/FreeRTOS/Source/event_groups.c **** }
  72              		.loc 1 688 1 is_stmt 0 view .LVU18
  73 0018 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE15:
  77              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  78              		.align	1
  79              		.global	xEventGroupCreateStatic
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu softvfp
  85              	xEventGroupCreateStatic:
  86              	.LVL9:
  87              	.LFB4:
  94:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  88              		.loc 1 94 2 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 8
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  95:base/os/FreeRTOS/Source/event_groups.c **** 
  92              		.loc 1 95 2 view .LVU20
  98:base/os/FreeRTOS/Source/event_groups.c **** 
  93              		.loc 1 98 3 view .LVU21
  94 0000 80B1     		cbz	r0, .L13
  94:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  95              		.loc 1 94 2 is_stmt 0 discriminator 2 view .LVU22
  96 0002 10B5     		push	{r4, lr}
  97              	.LCFI0:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 4, -8
 100              		.cfi_offset 14, -4
 101 0004 82B0     		sub	sp, sp, #8
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccJvJKVn.s 			page 15


 104 0006 0446     		mov	r4, r0
  98:base/os/FreeRTOS/Source/event_groups.c **** 
 105              		.loc 1 98 37 is_stmt 1 discriminator 2 view .LVU23
 106              	.LBB36:
 105:base/os/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107              		.loc 1 105 4 discriminator 2 view .LVU24
 105:base/os/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 108              		.loc 1 105 20 is_stmt 0 discriminator 2 view .LVU25
 109 0008 2023     		movs	r3, #32
 110 000a 0193     		str	r3, [sp, #4]
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 111              		.loc 1 106 4 is_stmt 1 discriminator 2 view .LVU26
 112 000c 019B     		ldr	r3, [sp, #4]
 113 000e 202B     		cmp	r3, #32
 114 0010 11D0     		beq	.L9
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 115              		.loc 1 106 4 view .LVU27
 116              	.LBB37:
 117              	.LBI37:
 118              		.file 2 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
ARM GAS  /tmp/ccJvJKVn.s 			page 16


  38:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJvJKVn.s 			page 17


  95:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
ARM GAS  /tmp/ccJvJKVn.s 			page 18


 152:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 119              		.loc 2 191 30 view .LVU28
 120              	.LBB38:
 192:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 121              		.loc 2 193 1 view .LVU29
 194:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 122              		.loc 2 195 2 view .LVU30
 123              		.syntax unified
 124              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 125 0012 4FF05003 			mov r3, #80												
 126 0016 83F31188 		msr basepri, r3											
 127 001a BFF36F8F 		isb														
 128 001e BFF34F8F 		dsb														
 129              	
 130              	@ 0 "" 2
 131              	.LVL10:
ARM GAS  /tmp/ccJvJKVn.s 			page 19


 132              		.thumb
 133              		.syntax unified
 134              	.L10:
 135              		.loc 2 195 2 is_stmt 0 view .LVU31
 136              	.LBE38:
 137              	.LBE37:
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 138              		.loc 1 106 4 is_stmt 1 discriminator 2 view .LVU32
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 139              		.loc 1 106 4 discriminator 2 view .LVU33
 140 0022 FEE7     		b	.L10
 141              	.L13:
 142              	.LCFI2:
 143              		.cfi_def_cfa_offset 0
 144              		.cfi_restore 4
 145              		.cfi_restore 14
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 146              		.loc 1 106 4 is_stmt 0 discriminator 2 view .LVU34
 147              	.LBE36:
  98:base/os/FreeRTOS/Source/event_groups.c **** 
 148              		.loc 1 98 3 is_stmt 1 view .LVU35
 149              	.LBB39:
 150              	.LBI39:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 151              		.loc 2 191 30 view .LVU36
 152              	.LBB40:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153              		.loc 2 193 1 view .LVU37
 154              		.loc 2 195 2 view .LVU38
 155              		.syntax unified
 156              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 157 0024 4FF05003 			mov r3, #80												
 158 0028 83F31188 		msr basepri, r3											
 159 002c BFF36F8F 		isb														
 160 0030 BFF34F8F 		dsb														
 161              	
 162              	@ 0 "" 2
 163              	.LVL11:
 164              		.thumb
 165              		.syntax unified
 166              	.L8:
 167              		.loc 2 195 2 is_stmt 0 view .LVU39
 168              	.LBE40:
 169              	.LBE39:
  98:base/os/FreeRTOS/Source/event_groups.c **** 
 170              		.loc 1 98 3 is_stmt 1 discriminator 1 view .LVU40
  98:base/os/FreeRTOS/Source/event_groups.c **** 
 171              		.loc 1 98 3 discriminator 1 view .LVU41
 172 0034 FEE7     		b	.L8
 173              	.L9:
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 16
 176              		.cfi_offset 4, -8
 177              		.cfi_offset 14, -4
 178              	.LBB41:
 106:base/os/FreeRTOS/Source/event_groups.c **** 		}
 179              		.loc 1 106 51 view .LVU42
ARM GAS  /tmp/ccJvJKVn.s 			page 20


 180              	.LBE41:
 111:base/os/FreeRTOS/Source/event_groups.c **** 
 181              		.loc 1 111 3 view .LVU43
 182              	.LVL12:
 113:base/os/FreeRTOS/Source/event_groups.c **** 		{
 183              		.loc 1 113 3 view .LVU44
 115:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 184              		.loc 1 115 4 view .LVU45
 115:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185              		.loc 1 115 29 is_stmt 0 view .LVU46
 186 0036 0023     		movs	r3, #0
 187 0038 40F8043B 		str	r3, [r0], #4
 188              	.LVL13:
 116:base/os/FreeRTOS/Source/event_groups.c **** 
 189              		.loc 1 116 4 is_stmt 1 view .LVU47
 190 003c FFF7FEFF 		bl	vListInitialise
 191              	.LVL14:
 123:base/os/FreeRTOS/Source/event_groups.c **** 			}
 192              		.loc 1 123 5 view .LVU48
 123:base/os/FreeRTOS/Source/event_groups.c **** 			}
 193              		.loc 1 123 40 is_stmt 0 view .LVU49
 194 0040 0123     		movs	r3, #1
 195 0042 2377     		strb	r3, [r4, #28]
 127:base/os/FreeRTOS/Source/event_groups.c **** 		}
 196              		.loc 1 127 42 is_stmt 1 view .LVU50
 131:base/os/FreeRTOS/Source/event_groups.c **** 		}
 197              		.loc 1 131 36 view .LVU51
 134:base/os/FreeRTOS/Source/event_groups.c **** 	}
 198              		.loc 1 134 3 view .LVU52
 135:base/os/FreeRTOS/Source/event_groups.c **** 
 199              		.loc 1 135 2 is_stmt 0 view .LVU53
 200 0044 2046     		mov	r0, r4
 201 0046 02B0     		add	sp, sp, #8
 202              	.LCFI4:
 203              		.cfi_def_cfa_offset 8
 204              		@ sp needed
 205 0048 10BD     		pop	{r4, pc}
 135:base/os/FreeRTOS/Source/event_groups.c **** 
 206              		.loc 1 135 2 view .LVU54
 207              		.cfi_endproc
 208              	.LFE4:
 210              		.section	.text.xEventGroupCreate,"ax",%progbits
 211              		.align	1
 212              		.global	xEventGroupCreate
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu softvfp
 218              	xEventGroupCreate:
 219              	.LFB5:
 143:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 220              		.loc 1 143 2 is_stmt 1 view -0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 38B5     		push	{r3, r4, r5, lr}
 225              	.LCFI5:
ARM GAS  /tmp/ccJvJKVn.s 			page 21


 226              		.cfi_def_cfa_offset 16
 227              		.cfi_offset 3, -16
 228              		.cfi_offset 4, -12
 229              		.cfi_offset 5, -8
 230              		.cfi_offset 14, -4
 144:base/os/FreeRTOS/Source/event_groups.c **** 
 231              		.loc 1 144 2 view .LVU56
 147:base/os/FreeRTOS/Source/event_groups.c **** 
 232              		.loc 1 147 3 view .LVU57
 147:base/os/FreeRTOS/Source/event_groups.c **** 
 233              		.loc 1 147 36 is_stmt 0 view .LVU58
 234 0002 2020     		movs	r0, #32
 235 0004 FFF7FEFF 		bl	pvPortMalloc
 236              	.LVL15:
 149:base/os/FreeRTOS/Source/event_groups.c **** 		{
 237              		.loc 1 149 3 is_stmt 1 view .LVU59
 149:base/os/FreeRTOS/Source/event_groups.c **** 		{
 238              		.loc 1 149 5 is_stmt 0 view .LVU60
 239 0008 0446     		mov	r4, r0
 240 000a 28B1     		cbz	r0, .L14
 151:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 241              		.loc 1 151 4 is_stmt 1 view .LVU61
 151:base/os/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 242              		.loc 1 151 29 is_stmt 0 view .LVU62
 243 000c 0025     		movs	r5, #0
 244 000e 40F8045B 		str	r5, [r0], #4
 245              	.LVL16:
 152:base/os/FreeRTOS/Source/event_groups.c **** 
 246              		.loc 1 152 4 is_stmt 1 view .LVU63
 247 0012 FFF7FEFF 		bl	vListInitialise
 248              	.LVL17:
 159:base/os/FreeRTOS/Source/event_groups.c **** 			}
 249              		.loc 1 159 5 view .LVU64
 159:base/os/FreeRTOS/Source/event_groups.c **** 			}
 250              		.loc 1 159 40 is_stmt 0 view .LVU65
 251 0016 2577     		strb	r5, [r4, #28]
 163:base/os/FreeRTOS/Source/event_groups.c **** 		}
 252              		.loc 1 163 42 is_stmt 1 view .LVU66
 167:base/os/FreeRTOS/Source/event_groups.c **** 		}
 253              		.loc 1 167 36 view .LVU67
 170:base/os/FreeRTOS/Source/event_groups.c **** 	}
 254              		.loc 1 170 3 view .LVU68
 255              	.L14:
 171:base/os/FreeRTOS/Source/event_groups.c **** 
 256              		.loc 1 171 2 is_stmt 0 view .LVU69
 257 0018 2046     		mov	r0, r4
 258 001a 38BD     		pop	{r3, r4, r5, pc}
 171:base/os/FreeRTOS/Source/event_groups.c **** 
 259              		.loc 1 171 2 view .LVU70
 260              		.cfi_endproc
 261              	.LFE5:
 263              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 264              		.align	1
 265              		.global	xEventGroupWaitBits
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
ARM GAS  /tmp/ccJvJKVn.s 			page 22


 269              		.fpu softvfp
 271              	xEventGroupWaitBits:
 272              	.LVL18:
 273              	.LFB7:
 297:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 274              		.loc 1 297 1 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ args = 4, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 297:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 278              		.loc 1 297 1 is_stmt 0 view .LVU72
 279 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 280              	.LCFI6:
 281              		.cfi_def_cfa_offset 32
 282              		.cfi_offset 3, -32
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
 298:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 290              		.loc 1 298 1 is_stmt 1 view .LVU73
 291              	.LVL19:
 299:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 292              		.loc 1 299 1 view .LVU74
 300:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 293              		.loc 1 300 1 view .LVU75
 301:base/os/FreeRTOS/Source/event_groups.c **** 
 294              		.loc 1 301 1 view .LVU76
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 295              		.loc 1 305 2 view .LVU77
 296 0004 78B1     		cbz	r0, .L37
 297 0006 0C46     		mov	r4, r1
 298 0008 1646     		mov	r6, r2
 299 000a 1D46     		mov	r5, r3
 300 000c 0746     		mov	r7, r0
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 301              		.loc 1 305 29 discriminator 2 view .LVU78
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 302              		.loc 1 306 2 discriminator 2 view .LVU79
 303 000e 11F07F48 		ands	r8, r1, #-16777216
 304 0012 11D0     		beq	.L20
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 305              		.loc 1 306 2 view .LVU80
 306              	.LBB42:
 307              	.LBI42:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 308              		.loc 2 191 30 view .LVU81
 309              	.LBB43:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 310              		.loc 2 193 1 view .LVU82
 311              		.loc 2 195 2 view .LVU83
 312              		.syntax unified
 313              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 314 0014 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccJvJKVn.s 			page 23


 315 0018 83F31188 		msr basepri, r3											
 316 001c BFF36F8F 		isb														
 317 0020 BFF34F8F 		dsb														
 318              	
 319              	@ 0 "" 2
 320              	.LVL20:
 321              		.thumb
 322              		.syntax unified
 323              	.L21:
 324              		.loc 2 195 2 is_stmt 0 view .LVU84
 325              	.LBE43:
 326              	.LBE42:
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 327              		.loc 1 306 2 is_stmt 1 discriminator 2 view .LVU85
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 328              		.loc 1 306 2 discriminator 2 view .LVU86
 329 0024 FEE7     		b	.L21
 330              	.LVL21:
 331              	.L37:
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 332              		.loc 1 305 2 view .LVU87
 333              	.LBB44:
 334              	.LBI44:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 335              		.loc 2 191 30 view .LVU88
 336              	.LBB45:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 337              		.loc 2 193 1 view .LVU89
 338              		.loc 2 195 2 view .LVU90
 339              		.syntax unified
 340              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 341 0026 4FF05003 			mov r3, #80												
 342 002a 83F31188 		msr basepri, r3											
 343 002e BFF36F8F 		isb														
 344 0032 BFF34F8F 		dsb														
 345              	
 346              	@ 0 "" 2
 347              	.LVL22:
 348              		.thumb
 349              		.syntax unified
 350              	.L19:
 351              		.loc 2 195 2 is_stmt 0 view .LVU91
 352              	.LBE45:
 353              	.LBE44:
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 354              		.loc 1 305 2 is_stmt 1 discriminator 1 view .LVU92
 305:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 355              		.loc 1 305 2 discriminator 1 view .LVU93
 356 0036 FEE7     		b	.L19
 357              	.LVL23:
 358              	.L20:
 306:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 359              		.loc 1 306 74 discriminator 2 view .LVU94
 307:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 360              		.loc 1 307 2 discriminator 2 view .LVU95
 361 0038 41B9     		cbnz	r1, .L22
 307:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccJvJKVn.s 			page 24


 362              		.loc 1 307 2 view .LVU96
 363              	.LBB46:
 364              	.LBI46:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 365              		.loc 2 191 30 view .LVU97
 366              	.LBB47:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 367              		.loc 2 193 1 view .LVU98
 368              		.loc 2 195 2 view .LVU99
 369              		.syntax unified
 370              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 371 003a 4FF05003 			mov r3, #80												
 372 003e 83F31188 		msr basepri, r3											
 373 0042 BFF36F8F 		isb														
 374 0046 BFF34F8F 		dsb														
 375              	
 376              	@ 0 "" 2
 377              	.LVL24:
 378              		.thumb
 379              		.syntax unified
 380              	.L23:
 381              		.loc 2 195 2 is_stmt 0 view .LVU100
 382              	.LBE47:
 383              	.LBE46:
 307:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 384              		.loc 1 307 2 is_stmt 1 discriminator 3 view .LVU101
 307:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 385              		.loc 1 307 2 discriminator 3 view .LVU102
 386 004a FEE7     		b	.L23
 387              	.LVL25:
 388              	.L22:
 307:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 389              		.loc 1 307 38 discriminator 2 view .LVU103
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 390              		.loc 1 310 3 discriminator 2 view .LVU104
 391 004c FFF7FEFF 		bl	xTaskGetSchedulerState
 392              	.LVL26:
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 393              		.loc 1 310 3 is_stmt 0 discriminator 2 view .LVU105
 394 0050 50B9     		cbnz	r0, .L24
 395 0052 089B     		ldr	r3, [sp, #32]
 396 0054 43B1     		cbz	r3, .L24
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 397              		.loc 1 310 3 is_stmt 1 view .LVU106
 398              	.LBB48:
 399              	.LBI48:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 400              		.loc 2 191 30 view .LVU107
 401              	.LBB49:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 402              		.loc 2 193 1 view .LVU108
 403              		.loc 2 195 2 view .LVU109
 404              		.syntax unified
 405              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 406 0056 4FF05003 			mov r3, #80												
 407 005a 83F31188 		msr basepri, r3											
 408 005e BFF36F8F 		isb														
ARM GAS  /tmp/ccJvJKVn.s 			page 25


 409 0062 BFF34F8F 		dsb														
 410              	
 411              	@ 0 "" 2
 412              	.LVL27:
 413              		.thumb
 414              		.syntax unified
 415              	.L25:
 416              		.loc 2 195 2 is_stmt 0 view .LVU110
 417              	.LBE49:
 418              	.LBE48:
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 419              		.loc 1 310 3 is_stmt 1 discriminator 4 view .LVU111
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 420              		.loc 1 310 3 discriminator 4 view .LVU112
 421 0066 FEE7     		b	.L25
 422              	.L24:
 310:base/os/FreeRTOS/Source/event_groups.c **** 	}
 423              		.loc 1 310 104 discriminator 8 view .LVU113
 314:base/os/FreeRTOS/Source/event_groups.c **** 	{
 424              		.loc 1 314 2 discriminator 8 view .LVU114
 425 0068 FFF7FEFF 		bl	vTaskSuspendAll
 426              	.LVL28:
 427              	.LBB50:
 316:base/os/FreeRTOS/Source/event_groups.c **** 
 428              		.loc 1 316 3 discriminator 8 view .LVU115
 316:base/os/FreeRTOS/Source/event_groups.c **** 
 429              		.loc 1 316 21 is_stmt 0 discriminator 8 view .LVU116
 430 006c D7F80090 		ldr	r9, [r7]
 431              	.LVL29:
 319:base/os/FreeRTOS/Source/event_groups.c **** 
 432              		.loc 1 319 3 is_stmt 1 discriminator 8 view .LVU117
 319:base/os/FreeRTOS/Source/event_groups.c **** 
 433              		.loc 1 319 23 is_stmt 0 discriminator 8 view .LVU118
 434 0070 2A46     		mov	r2, r5
 435 0072 2146     		mov	r1, r4
 436 0074 4846     		mov	r0, r9
 437 0076 FFF7FEFF 		bl	prvTestWaitCondition
 438              	.LVL30:
 321:base/os/FreeRTOS/Source/event_groups.c **** 		{
 439              		.loc 1 321 3 is_stmt 1 discriminator 8 view .LVU119
 321:base/os/FreeRTOS/Source/event_groups.c **** 		{
 440              		.loc 1 321 5 is_stmt 0 discriminator 8 view .LVU120
 441 007a F0B1     		cbz	r0, .L26
 325:base/os/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 442              		.loc 1 325 4 is_stmt 1 view .LVU121
 443              	.LVL31:
 326:base/os/FreeRTOS/Source/event_groups.c **** 
 444              		.loc 1 326 4 view .LVU122
 329:base/os/FreeRTOS/Source/event_groups.c **** 			{
 445              		.loc 1 329 4 view .LVU123
 329:base/os/FreeRTOS/Source/event_groups.c **** 			{
 446              		.loc 1 329 6 is_stmt 0 view .LVU124
 447 007c 16B1     		cbz	r6, .L27
 331:base/os/FreeRTOS/Source/event_groups.c **** 			}
 448              		.loc 1 331 5 is_stmt 1 view .LVU125
 331:base/os/FreeRTOS/Source/event_groups.c **** 			}
 449              		.loc 1 331 30 is_stmt 0 view .LVU126
ARM GAS  /tmp/ccJvJKVn.s 			page 26


 450 007e 29EA0403 		bic	r3, r9, r4
 451 0082 3B60     		str	r3, [r7]
 452              	.LVL32:
 453              	.L27:
 379:base/os/FreeRTOS/Source/event_groups.c **** 		}
 454              		.loc 1 379 68 is_stmt 1 view .LVU127
 455              	.LBE50:
 382:base/os/FreeRTOS/Source/event_groups.c **** 
 456              		.loc 1 382 2 view .LVU128
 382:base/os/FreeRTOS/Source/event_groups.c **** 
 457              		.loc 1 382 20 is_stmt 0 view .LVU129
 458 0084 FFF7FEFF 		bl	xTaskResumeAll
 459              	.LVL33:
 384:base/os/FreeRTOS/Source/event_groups.c **** 	{
 460              		.loc 1 384 2 is_stmt 1 view .LVU130
 384:base/os/FreeRTOS/Source/event_groups.c **** 	{
 461              		.loc 1 384 4 is_stmt 0 view .LVU131
 462 0088 B8F1000F 		cmp	r8, #0
 463 008c 12D0     		beq	.L17
 386:base/os/FreeRTOS/Source/event_groups.c **** 		{
 464              		.loc 1 386 3 is_stmt 1 view .LVU132
 386:base/os/FreeRTOS/Source/event_groups.c **** 		{
 465              		.loc 1 386 5 is_stmt 0 view .LVU133
 466 008e 48B9     		cbnz	r0, .L31
 388:base/os/FreeRTOS/Source/event_groups.c **** 		}
 467              		.loc 1 388 4 is_stmt 1 view .LVU134
 468 0090 4FF0E023 		mov	r3, #-536813568
 469 0094 4FF08052 		mov	r2, #268435456
 470 0098 C3F8042D 		str	r2, [r3, #3332]
 388:base/os/FreeRTOS/Source/event_groups.c **** 		}
 471              		.loc 1 388 4 view .LVU135
 472              		.syntax unified
 473              	@ 388 "base/os/FreeRTOS/Source/event_groups.c" 1
 474 009c BFF34F8F 		dsb
 475              	@ 0 "" 2
 388:base/os/FreeRTOS/Source/event_groups.c **** 		}
 476              		.loc 1 388 4 view .LVU136
 477              	@ 388 "base/os/FreeRTOS/Source/event_groups.c" 1
 478 00a0 BFF36F8F 		isb
 479              	@ 0 "" 2
 388:base/os/FreeRTOS/Source/event_groups.c **** 		}
 480              		.loc 1 388 26 view .LVU137
 481              		.thumb
 482              		.syntax unified
 483              	.L31:
 392:base/os/FreeRTOS/Source/event_groups.c **** 		}
 484              		.loc 1 392 28 view .LVU138
 399:base/os/FreeRTOS/Source/event_groups.c **** 
 485              		.loc 1 399 3 view .LVU139
 399:base/os/FreeRTOS/Source/event_groups.c **** 
 486              		.loc 1 399 14 is_stmt 0 view .LVU140
 487 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 488              	.LVL34:
 399:base/os/FreeRTOS/Source/event_groups.c **** 
 489              		.loc 1 399 14 view .LVU141
 490 00a8 8146     		mov	r9, r0
 491              	.LVL35:
ARM GAS  /tmp/ccJvJKVn.s 			page 27


 401:base/os/FreeRTOS/Source/event_groups.c **** 		{
 492              		.loc 1 401 3 is_stmt 1 view .LVU142
 401:base/os/FreeRTOS/Source/event_groups.c **** 		{
 493              		.loc 1 401 5 is_stmt 0 view .LVU143
 494 00aa 10F0007F 		tst	r0, #33554432
 495 00ae 1AD0     		beq	.L38
 496              	.LVL36:
 497              	.L32:
 432:base/os/FreeRTOS/Source/event_groups.c **** 
 498              		.loc 1 432 3 is_stmt 1 view .LVU144
 435:base/os/FreeRTOS/Source/event_groups.c **** 	}
 499              		.loc 1 435 3 view .LVU145
 435:base/os/FreeRTOS/Source/event_groups.c **** 	}
 500              		.loc 1 435 12 is_stmt 0 view .LVU146
 501 00b0 29F07F49 		bic	r9, r9, #-16777216
 502              	.LVL37:
 437:base/os/FreeRTOS/Source/event_groups.c **** 
 503              		.loc 1 437 2 is_stmt 1 view .LVU147
 440:base/os/FreeRTOS/Source/event_groups.c **** 
 504              		.loc 1 440 2 view .LVU148
 442:base/os/FreeRTOS/Source/event_groups.c **** }
 505              		.loc 1 442 2 view .LVU149
 506              	.L17:
 443:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 507              		.loc 1 443 1 is_stmt 0 view .LVU150
 508 00b4 4846     		mov	r0, r9
 509 00b6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 510              	.LVL38:
 511              	.L26:
 512              	.LBB51:
 338:base/os/FreeRTOS/Source/event_groups.c **** 		{
 513              		.loc 1 338 8 is_stmt 1 view .LVU151
 338:base/os/FreeRTOS/Source/event_groups.c **** 		{
 514              		.loc 1 338 10 is_stmt 0 view .LVU152
 515 00ba 089B     		ldr	r3, [sp, #32]
 516 00bc 83B1     		cbz	r3, .L34
 351:base/os/FreeRTOS/Source/event_groups.c **** 			{
 517              		.loc 1 351 4 is_stmt 1 view .LVU153
 351:base/os/FreeRTOS/Source/event_groups.c **** 			{
 518              		.loc 1 351 6 is_stmt 0 view .LVU154
 519 00be 66B9     		cbnz	r6, .L35
 520              	.LBE51:
 299:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 521              		.loc 1 299 23 view .LVU155
 522 00c0 4146     		mov	r1, r8
 523              	.L28:
 524              	.LVL39:
 525              	.LBB52:
 357:base/os/FreeRTOS/Source/event_groups.c **** 			}
 526              		.loc 1 357 29 is_stmt 1 view .LVU156
 360:base/os/FreeRTOS/Source/event_groups.c **** 			{
 527              		.loc 1 360 4 view .LVU157
 360:base/os/FreeRTOS/Source/event_groups.c **** 			{
 528              		.loc 1 360 6 is_stmt 0 view .LVU158
 529 00c2 0DB1     		cbz	r5, .L29
 362:base/os/FreeRTOS/Source/event_groups.c **** 			}
 530              		.loc 1 362 5 is_stmt 1 view .LVU159
ARM GAS  /tmp/ccJvJKVn.s 			page 28


 362:base/os/FreeRTOS/Source/event_groups.c **** 			}
 531              		.loc 1 362 19 is_stmt 0 view .LVU160
 532 00c4 41F08061 		orr	r1, r1, #67108864
 533              	.LVL40:
 534              	.L29:
 366:base/os/FreeRTOS/Source/event_groups.c **** 			}
 535              		.loc 1 366 29 is_stmt 1 view .LVU161
 372:base/os/FreeRTOS/Source/event_groups.c **** 
 536              		.loc 1 372 4 view .LVU162
 537 00c8 089A     		ldr	r2, [sp, #32]
 538 00ca 2143     		orrs	r1, r1, r4
 539              	.LVL41:
 372:base/os/FreeRTOS/Source/event_groups.c **** 
 540              		.loc 1 372 4 is_stmt 0 view .LVU163
 541 00cc 381D     		adds	r0, r7, #4
 542              	.LVL42:
 372:base/os/FreeRTOS/Source/event_groups.c **** 
 543              		.loc 1 372 4 view .LVU164
 544 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 545              	.LVL43:
 377:base/os/FreeRTOS/Source/event_groups.c **** 
 546              		.loc 1 377 4 is_stmt 1 view .LVU165
 377:base/os/FreeRTOS/Source/event_groups.c **** 
 547              		.loc 1 377 13 is_stmt 0 view .LVU166
 548 00d2 C146     		mov	r9, r8
 549              	.LVL44:
 372:base/os/FreeRTOS/Source/event_groups.c **** 
 550              		.loc 1 372 4 view .LVU167
 551 00d4 DDF82080 		ldr	r8, [sp, #32]
 552 00d8 D4E7     		b	.L27
 553              	.LVL45:
 554              	.L35:
 353:base/os/FreeRTOS/Source/event_groups.c **** 			}
 555              		.loc 1 353 19 view .LVU168
 556 00da 4FF08071 		mov	r1, #16777216
 557 00de F0E7     		b	.L28
 558              	.L34:
 559 00e0 DDF82080 		ldr	r8, [sp, #32]
 560 00e4 CEE7     		b	.L27
 561              	.LVL46:
 562              	.L38:
 353:base/os/FreeRTOS/Source/event_groups.c **** 			}
 563              		.loc 1 353 19 view .LVU169
 564              	.LBE52:
 403:base/os/FreeRTOS/Source/event_groups.c **** 			{
 565              		.loc 1 403 4 is_stmt 1 view .LVU170
 566 00e6 FFF7FEFF 		bl	vPortEnterCritical
 567              	.LVL47:
 406:base/os/FreeRTOS/Source/event_groups.c **** 
 568              		.loc 1 406 5 view .LVU171
 406:base/os/FreeRTOS/Source/event_groups.c **** 
 569              		.loc 1 406 14 is_stmt 0 view .LVU172
 570 00ea D7F80090 		ldr	r9, [r7]
 571              	.LVL48:
 410:base/os/FreeRTOS/Source/event_groups.c **** 				{
 572              		.loc 1 410 5 is_stmt 1 view .LVU173
 410:base/os/FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccJvJKVn.s 			page 29


 573              		.loc 1 410 9 is_stmt 0 view .LVU174
 574 00ee 2A46     		mov	r2, r5
 575 00f0 2146     		mov	r1, r4
 576 00f2 4846     		mov	r0, r9
 577 00f4 FFF7FEFF 		bl	prvTestWaitCondition
 578              	.LVL49:
 410:base/os/FreeRTOS/Source/event_groups.c **** 				{
 579              		.loc 1 410 7 view .LVU175
 580 00f8 18B1     		cbz	r0, .L33
 412:base/os/FreeRTOS/Source/event_groups.c **** 					{
 581              		.loc 1 412 6 is_stmt 1 view .LVU176
 412:base/os/FreeRTOS/Source/event_groups.c **** 					{
 582              		.loc 1 412 8 is_stmt 0 view .LVU177
 583 00fa 16B1     		cbz	r6, .L33
 414:base/os/FreeRTOS/Source/event_groups.c **** 					}
 584              		.loc 1 414 7 is_stmt 1 view .LVU178
 414:base/os/FreeRTOS/Source/event_groups.c **** 					}
 585              		.loc 1 414 32 is_stmt 0 view .LVU179
 586 00fc 29EA0404 		bic	r4, r9, r4
 587              	.LVL50:
 414:base/os/FreeRTOS/Source/event_groups.c **** 					}
 588              		.loc 1 414 32 view .LVU180
 589 0100 3C60     		str	r4, [r7]
 590              	.L33:
 423:base/os/FreeRTOS/Source/event_groups.c **** 				}
 591              		.loc 1 423 30 is_stmt 1 view .LVU181
 425:base/os/FreeRTOS/Source/event_groups.c **** 			}
 592              		.loc 1 425 5 view .LVU182
 593              	.LVL51:
 427:base/os/FreeRTOS/Source/event_groups.c **** 		}
 594              		.loc 1 427 4 view .LVU183
 595 0102 FFF7FEFF 		bl	vPortExitCritical
 596              	.LVL52:
 597 0106 D3E7     		b	.L32
 598              		.cfi_endproc
 599              	.LFE7:
 601              		.section	.text.xEventGroupClearBits,"ax",%progbits
 602              		.align	1
 603              		.global	xEventGroupClearBits
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu softvfp
 609              	xEventGroupClearBits:
 610              	.LVL53:
 611              	.LFB8:
 447:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 612              		.loc 1 447 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 448:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 616              		.loc 1 448 1 view .LVU185
 449:base/os/FreeRTOS/Source/event_groups.c **** 
 617              		.loc 1 449 1 view .LVU186
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 618              		.loc 1 453 2 view .LVU187
ARM GAS  /tmp/ccJvJKVn.s 			page 30


 619 0000 70B1     		cbz	r0, .L46
 447:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 620              		.loc 1 447 1 is_stmt 0 discriminator 2 view .LVU188
 621 0002 70B5     		push	{r4, r5, r6, lr}
 622              	.LCFI7:
 623              		.cfi_def_cfa_offset 16
 624              		.cfi_offset 4, -16
 625              		.cfi_offset 5, -12
 626              		.cfi_offset 6, -8
 627              		.cfi_offset 14, -4
 628 0004 0C46     		mov	r4, r1
 629 0006 0546     		mov	r5, r0
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 630              		.loc 1 453 29 is_stmt 1 discriminator 2 view .LVU189
 454:base/os/FreeRTOS/Source/event_groups.c **** 
 631              		.loc 1 454 2 discriminator 2 view .LVU190
 632 0008 11F07F4F 		tst	r1, #-16777216
 633 000c 11D0     		beq	.L42
 454:base/os/FreeRTOS/Source/event_groups.c **** 
 634              		.loc 1 454 2 view .LVU191
 635              	.LBB53:
 636              	.LBI53:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 637              		.loc 2 191 30 view .LVU192
 638              	.LBB54:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 639              		.loc 2 193 1 view .LVU193
 640              		.loc 2 195 2 view .LVU194
 641              		.syntax unified
 642              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 643 000e 4FF05003 			mov r3, #80												
 644 0012 83F31188 		msr basepri, r3											
 645 0016 BFF36F8F 		isb														
 646 001a BFF34F8F 		dsb														
 647              	
 648              	@ 0 "" 2
 649              	.LVL54:
 650              		.thumb
 651              		.syntax unified
 652              	.L43:
 653              		.loc 2 195 2 is_stmt 0 view .LVU195
 654              	.LBE54:
 655              	.LBE53:
 454:base/os/FreeRTOS/Source/event_groups.c **** 
 656              		.loc 1 454 2 is_stmt 1 discriminator 2 view .LVU196
 454:base/os/FreeRTOS/Source/event_groups.c **** 
 657              		.loc 1 454 2 discriminator 2 view .LVU197
 658 001e FEE7     		b	.L43
 659              	.L46:
 660              	.LCFI8:
 661              		.cfi_def_cfa_offset 0
 662              		.cfi_restore 4
 663              		.cfi_restore 5
 664              		.cfi_restore 6
 665              		.cfi_restore 14
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 666              		.loc 1 453 2 view .LVU198
ARM GAS  /tmp/ccJvJKVn.s 			page 31


 667              	.LBB55:
 668              	.LBI55:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 669              		.loc 2 191 30 view .LVU199
 670              	.LBB56:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 671              		.loc 2 193 1 view .LVU200
 672              		.loc 2 195 2 view .LVU201
 673              		.syntax unified
 674              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 675 0020 4FF05003 			mov r3, #80												
 676 0024 83F31188 		msr basepri, r3											
 677 0028 BFF36F8F 		isb														
 678 002c BFF34F8F 		dsb														
 679              	
 680              	@ 0 "" 2
 681              	.LVL55:
 682              		.thumb
 683              		.syntax unified
 684              	.L41:
 685              		.loc 2 195 2 is_stmt 0 view .LVU202
 686              	.LBE56:
 687              	.LBE55:
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 688              		.loc 1 453 2 is_stmt 1 discriminator 1 view .LVU203
 453:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 689              		.loc 1 453 2 discriminator 1 view .LVU204
 690 0030 FEE7     		b	.L41
 691              	.L42:
 692              	.LCFI9:
 693              		.cfi_def_cfa_offset 16
 694              		.cfi_offset 4, -16
 695              		.cfi_offset 5, -12
 696              		.cfi_offset 6, -8
 697              		.cfi_offset 14, -4
 454:base/os/FreeRTOS/Source/event_groups.c **** 
 698              		.loc 1 454 72 discriminator 2 view .LVU205
 456:base/os/FreeRTOS/Source/event_groups.c **** 	{
 699              		.loc 1 456 2 discriminator 2 view .LVU206
 700 0032 FFF7FEFF 		bl	vPortEnterCritical
 701              	.LVL56:
 458:base/os/FreeRTOS/Source/event_groups.c **** 
 702              		.loc 1 458 60 discriminator 2 view .LVU207
 462:base/os/FreeRTOS/Source/event_groups.c **** 
 703              		.loc 1 462 3 discriminator 2 view .LVU208
 462:base/os/FreeRTOS/Source/event_groups.c **** 
 704              		.loc 1 462 12 is_stmt 0 discriminator 2 view .LVU209
 705 0036 2E68     		ldr	r6, [r5]
 706              	.LVL57:
 465:base/os/FreeRTOS/Source/event_groups.c **** 	}
 707              		.loc 1 465 3 is_stmt 1 discriminator 2 view .LVU210
 465:base/os/FreeRTOS/Source/event_groups.c **** 	}
 708              		.loc 1 465 28 is_stmt 0 discriminator 2 view .LVU211
 709 0038 26EA0404 		bic	r4, r6, r4
 710              	.LVL58:
 465:base/os/FreeRTOS/Source/event_groups.c **** 	}
 711              		.loc 1 465 28 discriminator 2 view .LVU212
ARM GAS  /tmp/ccJvJKVn.s 			page 32


 712 003c 2C60     		str	r4, [r5]
 467:base/os/FreeRTOS/Source/event_groups.c **** 
 713              		.loc 1 467 2 is_stmt 1 discriminator 2 view .LVU213
 714 003e FFF7FEFF 		bl	vPortExitCritical
 715              	.LVL59:
 469:base/os/FreeRTOS/Source/event_groups.c **** }
 716              		.loc 1 469 2 discriminator 2 view .LVU214
 470:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 717              		.loc 1 470 1 is_stmt 0 discriminator 2 view .LVU215
 718 0042 3046     		mov	r0, r6
 719 0044 70BD     		pop	{r4, r5, r6, pc}
 470:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 720              		.loc 1 470 1 discriminator 2 view .LVU216
 721              		.cfi_endproc
 722              	.LFE8:
 724              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 725              		.align	1
 726              		.global	vEventGroupClearBitsCallback
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu softvfp
 732              	vEventGroupClearBitsCallback:
 733              	.LVL60:
 734              	.LFB14:
 651:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 735              		.loc 1 651 1 is_stmt 1 view -0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 651:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 739              		.loc 1 651 1 is_stmt 0 view .LVU218
 740 0000 08B5     		push	{r3, lr}
 741              	.LCFI10:
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 3, -8
 744              		.cfi_offset 14, -4
 652:base/os/FreeRTOS/Source/event_groups.c **** }
 745              		.loc 1 652 2 is_stmt 1 view .LVU219
 652:base/os/FreeRTOS/Source/event_groups.c **** }
 746              		.loc 1 652 11 is_stmt 0 view .LVU220
 747 0002 FFF7FEFF 		bl	xEventGroupClearBits
 748              	.LVL61:
 653:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 749              		.loc 1 653 1 view .LVU221
 750 0006 08BD     		pop	{r3, pc}
 751              		.cfi_endproc
 752              	.LFE14:
 754              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 755              		.align	1
 756              		.global	xEventGroupClearBitsFromISR
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 760              		.fpu softvfp
 762              	xEventGroupClearBitsFromISR:
 763              	.LVL62:
ARM GAS  /tmp/ccJvJKVn.s 			page 33


 764              	.LFB9:
 476:base/os/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 765              		.loc 1 476 2 is_stmt 1 view -0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 476:base/os/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 769              		.loc 1 476 2 is_stmt 0 view .LVU223
 770 0000 08B5     		push	{r3, lr}
 771              	.LCFI11:
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 3, -8
 774              		.cfi_offset 14, -4
 775 0002 0A46     		mov	r2, r1
 477:base/os/FreeRTOS/Source/event_groups.c **** 
 776              		.loc 1 477 3 is_stmt 1 view .LVU224
 479:base/os/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 777              		.loc 1 479 69 view .LVU225
 480:base/os/FreeRTOS/Source/event_groups.c **** 
 778              		.loc 1 480 3 view .LVU226
 480:base/os/FreeRTOS/Source/event_groups.c **** 
 779              		.loc 1 480 13 is_stmt 0 view .LVU227
 780 0004 0023     		movs	r3, #0
 781 0006 0146     		mov	r1, r0
 782              	.LVL63:
 480:base/os/FreeRTOS/Source/event_groups.c **** 
 783              		.loc 1 480 13 view .LVU228
 784 0008 0148     		ldr	r0, .L51
 785              	.LVL64:
 480:base/os/FreeRTOS/Source/event_groups.c **** 
 786              		.loc 1 480 13 view .LVU229
 787 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 788              	.LVL65:
 482:base/os/FreeRTOS/Source/event_groups.c **** 	}
 789              		.loc 1 482 3 is_stmt 1 view .LVU230
 483:base/os/FreeRTOS/Source/event_groups.c **** 
 790              		.loc 1 483 2 is_stmt 0 view .LVU231
 791 000e 08BD     		pop	{r3, pc}
 792              	.L52:
 793              		.align	2
 794              	.L51:
 795 0010 00000000 		.word	vEventGroupClearBitsCallback
 796              		.cfi_endproc
 797              	.LFE9:
 799              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 800              		.align	1
 801              		.global	xEventGroupGetBitsFromISR
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu softvfp
 807              	xEventGroupGetBitsFromISR:
 808              	.LVL66:
 809              	.LFB10:
 489:base/os/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 810              		.loc 1 489 1 is_stmt 1 view -0
 811              		.cfi_startproc
ARM GAS  /tmp/ccJvJKVn.s 			page 34


 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 490:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 815              		.loc 1 490 1 view .LVU233
 491:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 816              		.loc 1 491 1 view .LVU234
 492:base/os/FreeRTOS/Source/event_groups.c **** 
 817              		.loc 1 492 1 view .LVU235
 494:base/os/FreeRTOS/Source/event_groups.c **** 	{
 818              		.loc 1 494 2 view .LVU236
 819              	.LBB57:
 820              	.LBI57:
 196:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 821              		.loc 2 207 34 view .LVU237
 822              	.LBB58:
 208:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 823              		.loc 2 209 1 view .LVU238
 210:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 824              		.loc 2 211 2 view .LVU239
 825              		.syntax unified
 826              	@ 211 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 827 0000 EFF31183 			mrs r3, basepri											
 828 0004 4FF05002 		mov r2, #80												
 829 0008 82F31188 		msr basepri, r2											
 830 000c BFF36F8F 		isb														
 831 0010 BFF34F8F 		dsb														
 832              	
 833              	@ 0 "" 2
 834              	.LVL67:
 212:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 835              		.loc 2 223 2 view .LVU240
 836              		.loc 2 223 2 is_stmt 0 view .LVU241
ARM GAS  /tmp/ccJvJKVn.s 			page 35


 837              		.thumb
 838              		.syntax unified
 839              	.LBE58:
 840              	.LBE57:
 496:base/os/FreeRTOS/Source/event_groups.c **** 	}
 841              		.loc 1 496 3 is_stmt 1 view .LVU242
 496:base/os/FreeRTOS/Source/event_groups.c **** 	}
 842              		.loc 1 496 12 is_stmt 0 view .LVU243
 843 0014 0068     		ldr	r0, [r0]
 844              	.LVL68:
 498:base/os/FreeRTOS/Source/event_groups.c **** 
 845              		.loc 1 498 2 is_stmt 1 view .LVU244
 846              	.LBB59:
 847              	.LBI59:
 224:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 848              		.loc 2 227 30 view .LVU245
 849              	.LBB60:
 228:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 850              		.loc 2 229 2 view .LVU246
 851              		.syntax unified
 852              	@ 229 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 853 0016 83F31188 			msr basepri, r3	
 854              	@ 0 "" 2
 855              	.LVL69:
 856              		.loc 2 229 2 is_stmt 0 view .LVU247
 857              		.thumb
 858              		.syntax unified
 859              	.LBE60:
 860              	.LBE59:
 500:base/os/FreeRTOS/Source/event_groups.c **** }
 861              		.loc 1 500 2 is_stmt 1 view .LVU248
 501:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 862              		.loc 1 501 1 is_stmt 0 view .LVU249
 863 001a 7047     		bx	lr
 864              		.cfi_endproc
 865              	.LFE10:
 867              		.section	.text.xEventGroupSetBits,"ax",%progbits
 868              		.align	1
 869              		.global	xEventGroupSetBits
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu softvfp
 875              	xEventGroupSetBits:
 876              	.LVL70:
 877              	.LFB11:
 505:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 878              		.loc 1 505 1 is_stmt 1 view -0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 505:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 882              		.loc 1 505 1 is_stmt 0 view .LVU251
ARM GAS  /tmp/ccJvJKVn.s 			page 36


 883 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 884              	.LCFI12:
 885              		.cfi_def_cfa_offset 24
 886              		.cfi_offset 3, -24
 887              		.cfi_offset 4, -20
 888              		.cfi_offset 5, -16
 889              		.cfi_offset 6, -12
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 506:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 892              		.loc 1 506 1 is_stmt 1 view .LVU252
 507:base/os/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 893              		.loc 1 507 1 view .LVU253
 508:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 894              		.loc 1 508 1 view .LVU254
 509:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 895              		.loc 1 509 1 view .LVU255
 896              	.LVL71:
 510:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 897              		.loc 1 510 1 view .LVU256
 511:base/os/FreeRTOS/Source/event_groups.c **** 
 898              		.loc 1 511 1 view .LVU257
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 899              		.loc 1 515 2 view .LVU258
 900 0002 68B1     		cbz	r0, .L66
 901 0004 0D46     		mov	r5, r1
 902 0006 0446     		mov	r4, r0
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 903              		.loc 1 515 29 discriminator 2 view .LVU259
 516:base/os/FreeRTOS/Source/event_groups.c **** 
 904              		.loc 1 516 2 discriminator 2 view .LVU260
 905 0008 11F07F47 		ands	r7, r1, #-16777216
 906 000c 11D0     		beq	.L57
 516:base/os/FreeRTOS/Source/event_groups.c **** 
 907              		.loc 1 516 2 view .LVU261
 908              	.LBB61:
 909              	.LBI61:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 910              		.loc 2 191 30 view .LVU262
 911              	.LBB62:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 912              		.loc 2 193 1 view .LVU263
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 913              		.loc 2 195 2 view .LVU264
 914              		.syntax unified
 915              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 916 000e 4FF05003 			mov r3, #80												
 917 0012 83F31188 		msr basepri, r3											
 918 0016 BFF36F8F 		isb														
 919 001a BFF34F8F 		dsb														
 920              	
 921              	@ 0 "" 2
 922              	.LVL72:
 923              		.thumb
 924              		.syntax unified
 925              	.L58:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/ccJvJKVn.s 			page 37


 926              		.loc 2 195 2 is_stmt 0 view .LVU265
 927              	.LBE62:
 928              	.LBE61:
 516:base/os/FreeRTOS/Source/event_groups.c **** 
 929              		.loc 1 516 2 is_stmt 1 discriminator 2 view .LVU266
 516:base/os/FreeRTOS/Source/event_groups.c **** 
 930              		.loc 1 516 2 discriminator 2 view .LVU267
 931 001e FEE7     		b	.L58
 932              	.L66:
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 933              		.loc 1 515 2 view .LVU268
 934              	.LBB63:
 935              	.LBI63:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 936              		.loc 2 191 30 view .LVU269
 937              	.LBB64:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 938              		.loc 2 193 1 view .LVU270
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 939              		.loc 2 195 2 view .LVU271
 940              		.syntax unified
 941              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 942 0020 4FF05003 			mov r3, #80												
 943 0024 83F31188 		msr basepri, r3											
 944 0028 BFF36F8F 		isb														
 945 002c BFF34F8F 		dsb														
 946              	
 947              	@ 0 "" 2
 948              	.LVL73:
 949              		.thumb
 950              		.syntax unified
 951              	.L56:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 952              		.loc 2 195 2 is_stmt 0 view .LVU272
 953              	.LBE64:
 954              	.LBE63:
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 955              		.loc 1 515 2 is_stmt 1 discriminator 1 view .LVU273
 515:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 956              		.loc 1 515 2 discriminator 1 view .LVU274
 957 0030 FEE7     		b	.L56
 958              	.L57:
 516:base/os/FreeRTOS/Source/event_groups.c **** 
 959              		.loc 1 516 70 discriminator 2 view .LVU275
 518:base/os/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 960              		.loc 1 518 2 discriminator 2 view .LVU276
 961              	.LVL74:
 519:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 962              		.loc 1 519 2 discriminator 2 view .LVU277
 519:base/os/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 963              		.loc 1 519 12 is_stmt 0 discriminator 2 view .LVU278
 964 0032 00F10C06 		add	r6, r0, #12
 965              	.LVL75:
 520:base/os/FreeRTOS/Source/event_groups.c **** 	{
 966              		.loc 1 520 2 is_stmt 1 discriminator 2 view .LVU279
 967 0036 FFF7FEFF 		bl	vTaskSuspendAll
 968              	.LVL76:
ARM GAS  /tmp/ccJvJKVn.s 			page 38


 522:base/os/FreeRTOS/Source/event_groups.c **** 
 969              		.loc 1 522 56 discriminator 2 view .LVU280
 524:base/os/FreeRTOS/Source/event_groups.c **** 
 970              		.loc 1 524 3 discriminator 2 view .LVU281
 524:base/os/FreeRTOS/Source/event_groups.c **** 
 971              		.loc 1 524 14 is_stmt 0 discriminator 2 view .LVU282
 972 003a 2069     		ldr	r0, [r4, #16]
 973              	.LVL77:
 527:base/os/FreeRTOS/Source/event_groups.c **** 
 974              		.loc 1 527 3 is_stmt 1 discriminator 2 view .LVU283
 527:base/os/FreeRTOS/Source/event_groups.c **** 
 975              		.loc 1 527 28 is_stmt 0 discriminator 2 view .LVU284
 976 003c 2368     		ldr	r3, [r4]
 977 003e 2B43     		orrs	r3, r3, r5
 978 0040 2360     		str	r3, [r4]
 530:base/os/FreeRTOS/Source/event_groups.c **** 		{
 979              		.loc 1 530 3 is_stmt 1 discriminator 2 view .LVU285
 530:base/os/FreeRTOS/Source/event_groups.c **** 		{
 980              		.loc 1 530 8 is_stmt 0 discriminator 2 view .LVU286
 981 0042 0AE0     		b	.L59
 982              	.LVL78:
 983              	.L60:
 552:base/os/FreeRTOS/Source/event_groups.c **** 			{
 984              		.loc 1 552 9 is_stmt 1 view .LVU287
 552:base/os/FreeRTOS/Source/event_groups.c **** 			{
 985              		.loc 1 552 44 is_stmt 0 view .LVU288
 986 0044 2168     		ldr	r1, [r4]
 552:base/os/FreeRTOS/Source/event_groups.c **** 			{
 987              		.loc 1 552 11 view .LVU289
 988 0046 32EA0101 		bics	r1, r2, r1
 989 004a 05D1     		bne	.L62
 552:base/os/FreeRTOS/Source/event_groups.c **** 			{
 990              		.loc 1 552 11 view .LVU290
 991 004c 11E0     		b	.L61
 992              	.LVL79:
 993              	.L63:
 571:base/os/FreeRTOS/Source/event_groups.c **** 				}
 994              		.loc 1 571 30 is_stmt 1 view .LVU291
 579:base/os/FreeRTOS/Source/event_groups.c **** 			}
 995              		.loc 1 579 5 view .LVU292
 579:base/os/FreeRTOS/Source/event_groups.c **** 			}
 996              		.loc 1 579 63 is_stmt 0 view .LVU293
 997 004e 2168     		ldr	r1, [r4]
 579:base/os/FreeRTOS/Source/event_groups.c **** 			}
 998              		.loc 1 579 5 view .LVU294
 999 0050 41F00071 		orr	r1, r1, #33554432
 1000 0054 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1001              	.LVL80:
 1002              	.L62:
 505:base/os/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 1003              		.loc 1 505 1 view .LVU295
 1004 0058 2846     		mov	r0, r5
 1005              	.LVL81:
 1006              	.L59:
 530:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1007              		.loc 1 530 21 is_stmt 1 view .LVU296
 1008 005a B042     		cmp	r0, r6
ARM GAS  /tmp/ccJvJKVn.s 			page 39


 1009 005c 0ED0     		beq	.L67
 532:base/os/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1010              		.loc 1 532 4 view .LVU297
 532:base/os/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1011              		.loc 1 532 11 is_stmt 0 view .LVU298
 1012 005e 4568     		ldr	r5, [r0, #4]
 1013              	.LVL82:
 533:base/os/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 1014              		.loc 1 533 4 is_stmt 1 view .LVU299
 533:base/os/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 1015              		.loc 1 533 20 is_stmt 0 view .LVU300
 1016 0060 0368     		ldr	r3, [r0]
 1017              	.LVL83:
 534:base/os/FreeRTOS/Source/event_groups.c **** 
 1018              		.loc 1 534 4 is_stmt 1 view .LVU301
 537:base/os/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 1019              		.loc 1 537 4 view .LVU302
 538:base/os/FreeRTOS/Source/event_groups.c **** 
 1020              		.loc 1 538 4 view .LVU303
 538:base/os/FreeRTOS/Source/event_groups.c **** 
 1021              		.loc 1 538 20 is_stmt 0 view .LVU304
 1022 0062 23F07F42 		bic	r2, r3, #-16777216
 1023              	.LVL84:
 540:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1024              		.loc 1 540 4 is_stmt 1 view .LVU305
 540:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1025              		.loc 1 540 6 is_stmt 0 view .LVU306
 1026 0066 13F0806F 		tst	r3, #67108864
 1027 006a EBD1     		bne	.L60
 543:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1028              		.loc 1 543 5 is_stmt 1 view .LVU307
 543:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1029              		.loc 1 543 40 is_stmt 0 view .LVU308
 1030 006c 2168     		ldr	r1, [r4]
 543:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1031              		.loc 1 543 7 view .LVU309
 1032 006e 1142     		tst	r1, r2
 1033 0070 F2D0     		beq	.L62
 1034              	.L61:
 1035              	.LVL85:
 565:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1036              		.loc 1 565 5 is_stmt 1 view .LVU310
 565:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1037              		.loc 1 565 7 is_stmt 0 view .LVU311
 1038 0072 13F0807F 		tst	r3, #16777216
 1039 0076 EAD0     		beq	.L63
 567:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1040              		.loc 1 567 6 is_stmt 1 view .LVU312
 567:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1041              		.loc 1 567 20 is_stmt 0 view .LVU313
 1042 0078 1743     		orrs	r7, r7, r2
 1043              	.LVL86:
 567:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1044              		.loc 1 567 20 view .LVU314
 1045 007a E8E7     		b	.L63
 1046              	.LVL87:
 1047              	.L67:
ARM GAS  /tmp/ccJvJKVn.s 			page 40


 590:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1048              		.loc 1 590 3 is_stmt 1 view .LVU315
 590:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1049              		.loc 1 590 28 is_stmt 0 view .LVU316
 1050 007c 2368     		ldr	r3, [r4]
 1051 007e 23EA0703 		bic	r3, r3, r7
 1052 0082 2360     		str	r3, [r4]
 592:base/os/FreeRTOS/Source/event_groups.c **** 
 1053              		.loc 1 592 2 is_stmt 1 view .LVU317
 592:base/os/FreeRTOS/Source/event_groups.c **** 
 1054              		.loc 1 592 11 is_stmt 0 view .LVU318
 1055 0084 FFF7FEFF 		bl	xTaskResumeAll
 1056              	.LVL88:
 594:base/os/FreeRTOS/Source/event_groups.c **** }
 1057              		.loc 1 594 2 is_stmt 1 view .LVU319
 595:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1058              		.loc 1 595 1 is_stmt 0 view .LVU320
 1059 0088 2068     		ldr	r0, [r4]
 1060 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 595:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1061              		.loc 1 595 1 view .LVU321
 1062              		.cfi_endproc
 1063              	.LFE11:
 1065              		.section	.text.xEventGroupSync,"ax",%progbits
 1066              		.align	1
 1067              		.global	xEventGroupSync
 1068              		.syntax unified
 1069              		.thumb
 1070              		.thumb_func
 1071              		.fpu softvfp
 1073              	xEventGroupSync:
 1074              	.LVL89:
 1075              	.LFB6:
 177:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 1076              		.loc 1 177 1 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 177:base/os/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 1080              		.loc 1 177 1 is_stmt 0 view .LVU323
 1081 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1082              	.LCFI13:
 1083              		.cfi_def_cfa_offset 32
 1084              		.cfi_offset 3, -32
 1085              		.cfi_offset 4, -28
 1086              		.cfi_offset 5, -24
 1087              		.cfi_offset 6, -20
 1088              		.cfi_offset 7, -16
 1089              		.cfi_offset 8, -12
 1090              		.cfi_offset 9, -8
 1091              		.cfi_offset 14, -4
 178:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1092              		.loc 1 178 1 is_stmt 1 view .LVU324
 179:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 1093              		.loc 1 179 1 view .LVU325
 1094              	.LVL90:
 180:base/os/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
ARM GAS  /tmp/ccJvJKVn.s 			page 41


 1095              		.loc 1 180 1 view .LVU326
 181:base/os/FreeRTOS/Source/event_groups.c **** 
 1096              		.loc 1 181 1 view .LVU327
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1097              		.loc 1 183 2 view .LVU328
 1098 0004 12F07F48 		ands	r8, r2, #-16777216
 1099 0008 08D0     		beq	.L69
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1100              		.loc 1 183 2 view .LVU329
 1101              	.LBB65:
 1102              	.LBI65:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1103              		.loc 2 191 30 view .LVU330
 1104              	.LBB66:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1105              		.loc 2 193 1 view .LVU331
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1106              		.loc 2 195 2 view .LVU332
 1107              		.syntax unified
 1108              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1109 000a 4FF05003 			mov r3, #80												
 1110 000e 83F31188 		msr basepri, r3											
 1111 0012 BFF36F8F 		isb														
 1112 0016 BFF34F8F 		dsb														
 1113              	
 1114              	@ 0 "" 2
 1115              	.LVL91:
 1116              		.thumb
 1117              		.syntax unified
 1118              	.L70:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1119              		.loc 2 195 2 is_stmt 0 view .LVU333
 1120              	.LBE66:
 1121              	.LBE65:
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1122              		.loc 1 183 2 is_stmt 1 discriminator 1 view .LVU334
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1123              		.loc 1 183 2 discriminator 1 view .LVU335
 1124 001a FEE7     		b	.L70
 1125              	.LVL92:
 1126              	.L69:
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1127              		.loc 1 183 2 is_stmt 0 discriminator 1 view .LVU336
 1128 001c 0746     		mov	r7, r0
 1129 001e 0E46     		mov	r6, r1
 1130 0020 1446     		mov	r4, r2
 1131 0022 1D46     		mov	r5, r3
 183:base/os/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 1132              		.loc 1 183 74 is_stmt 1 discriminator 2 view .LVU337
 184:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1133              		.loc 1 184 2 discriminator 2 view .LVU338
 1134 0024 42B9     		cbnz	r2, .L71
 184:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1135              		.loc 1 184 2 view .LVU339
 1136              	.LBB67:
 1137              	.LBI67:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
ARM GAS  /tmp/ccJvJKVn.s 			page 42


 1138              		.loc 2 191 30 view .LVU340
 1139              	.LBB68:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1140              		.loc 2 193 1 view .LVU341
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1141              		.loc 2 195 2 view .LVU342
 1142              		.syntax unified
 1143              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1144 0026 4FF05003 			mov r3, #80												
 1145 002a 83F31188 		msr basepri, r3											
 1146 002e BFF36F8F 		isb														
 1147 0032 BFF34F8F 		dsb														
 1148              	
 1149              	@ 0 "" 2
 1150              	.LVL93:
 1151              		.thumb
 1152              		.syntax unified
 1153              	.L72:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1154              		.loc 2 195 2 is_stmt 0 view .LVU343
 1155              	.LBE68:
 1156              	.LBE67:
 184:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1157              		.loc 1 184 2 is_stmt 1 discriminator 2 view .LVU344
 184:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1158              		.loc 1 184 2 discriminator 2 view .LVU345
 1159 0036 FEE7     		b	.L72
 1160              	.LVL94:
 1161              	.L71:
 184:base/os/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1162              		.loc 1 184 38 discriminator 2 view .LVU346
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1163              		.loc 1 187 3 discriminator 2 view .LVU347
 1164 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 1165              	.LVL95:
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1166              		.loc 1 187 3 is_stmt 0 discriminator 2 view .LVU348
 1167 003c 48B9     		cbnz	r0, .L73
 1168 003e 45B1     		cbz	r5, .L73
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1169              		.loc 1 187 3 is_stmt 1 view .LVU349
 1170              	.LBB69:
 1171              	.LBI69:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1172              		.loc 2 191 30 view .LVU350
 1173              	.LBB70:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1174              		.loc 2 193 1 view .LVU351
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1175              		.loc 2 195 2 view .LVU352
 1176              		.syntax unified
 1177              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1178 0040 4FF05003 			mov r3, #80												
 1179 0044 83F31188 		msr basepri, r3											
 1180 0048 BFF36F8F 		isb														
 1181 004c BFF34F8F 		dsb														
 1182              	
ARM GAS  /tmp/ccJvJKVn.s 			page 43


 1183              	@ 0 "" 2
 1184              	.LVL96:
 1185              		.thumb
 1186              		.syntax unified
 1187              	.L74:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1188              		.loc 2 195 2 is_stmt 0 view .LVU353
 1189              	.LBE70:
 1190              	.LBE69:
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1191              		.loc 1 187 3 is_stmt 1 discriminator 3 view .LVU354
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1192              		.loc 1 187 3 discriminator 3 view .LVU355
 1193 0050 FEE7     		b	.L74
 1194              	.L73:
 187:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1195              		.loc 1 187 104 discriminator 8 view .LVU356
 191:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1196              		.loc 1 191 2 discriminator 8 view .LVU357
 1197 0052 FFF7FEFF 		bl	vTaskSuspendAll
 1198              	.LVL97:
 193:base/os/FreeRTOS/Source/event_groups.c **** 
 1199              		.loc 1 193 3 discriminator 8 view .LVU358
 193:base/os/FreeRTOS/Source/event_groups.c **** 
 1200              		.loc 1 193 22 is_stmt 0 discriminator 8 view .LVU359
 1201 0056 D7F80090 		ldr	r9, [r7]
 1202              	.LVL98:
 195:base/os/FreeRTOS/Source/event_groups.c **** 
 1203              		.loc 1 195 3 is_stmt 1 discriminator 8 view .LVU360
 195:base/os/FreeRTOS/Source/event_groups.c **** 
 1204              		.loc 1 195 12 is_stmt 0 discriminator 8 view .LVU361
 1205 005a 3146     		mov	r1, r6
 1206 005c 3846     		mov	r0, r7
 1207 005e FFF7FEFF 		bl	xEventGroupSetBits
 1208              	.LVL99:
 197:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1209              		.loc 1 197 3 is_stmt 1 discriminator 8 view .LVU362
 197:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1210              		.loc 1 197 30 is_stmt 0 discriminator 8 view .LVU363
 1211 0062 49EA0606 		orr	r6, r9, r6
 1212              	.LVL100:
 197:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1213              		.loc 1 197 5 discriminator 8 view .LVU364
 1214 0066 34EA0603 		bics	r3, r4, r6
 1215 006a 1AD0     		beq	.L83
 210:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1216              		.loc 1 210 4 is_stmt 1 view .LVU365
 210:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1217              		.loc 1 210 6 is_stmt 0 view .LVU366
 1218 006c FDB9     		cbnz	r5, .L84
 229:base/os/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1219              		.loc 1 229 5 is_stmt 1 view .LVU367
 229:base/os/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1220              		.loc 1 229 14 is_stmt 0 view .LVU368
 1221 006e 3E68     		ldr	r6, [r7]
 1222              	.LVL101:
 230:base/os/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  /tmp/ccJvJKVn.s 			page 44


 1223              		.loc 1 230 5 is_stmt 1 view .LVU369
 1224              	.L76:
 234:base/os/FreeRTOS/Source/event_groups.c **** 
 1225              		.loc 1 234 2 view .LVU370
 234:base/os/FreeRTOS/Source/event_groups.c **** 
 1226              		.loc 1 234 20 is_stmt 0 view .LVU371
 1227 0070 FFF7FEFF 		bl	xTaskResumeAll
 1228              	.LVL102:
 236:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1229              		.loc 1 236 2 is_stmt 1 view .LVU372
 236:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1230              		.loc 1 236 4 is_stmt 0 view .LVU373
 1231 0074 95B1     		cbz	r5, .L68
 238:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1232              		.loc 1 238 3 is_stmt 1 view .LVU374
 238:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1233              		.loc 1 238 5 is_stmt 0 view .LVU375
 1234 0076 48B9     		cbnz	r0, .L79
 240:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1235              		.loc 1 240 4 is_stmt 1 view .LVU376
 1236 0078 4FF0E023 		mov	r3, #-536813568
 1237 007c 4FF08052 		mov	r2, #268435456
 1238 0080 C3F8042D 		str	r2, [r3, #3332]
 240:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1239              		.loc 1 240 4 view .LVU377
 1240              		.syntax unified
 1241              	@ 240 "base/os/FreeRTOS/Source/event_groups.c" 1
 1242 0084 BFF34F8F 		dsb
 1243              	@ 0 "" 2
 240:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1244              		.loc 1 240 4 view .LVU378
 1245              	@ 240 "base/os/FreeRTOS/Source/event_groups.c" 1
 1246 0088 BFF36F8F 		isb
 1247              	@ 0 "" 2
 240:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1248              		.loc 1 240 26 view .LVU379
 1249              		.thumb
 1250              		.syntax unified
 1251              	.L79:
 244:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1252              		.loc 1 244 28 view .LVU380
 251:base/os/FreeRTOS/Source/event_groups.c **** 
 1253              		.loc 1 251 3 view .LVU381
 251:base/os/FreeRTOS/Source/event_groups.c **** 
 1254              		.loc 1 251 14 is_stmt 0 view .LVU382
 1255 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 1256              	.LVL103:
 251:base/os/FreeRTOS/Source/event_groups.c **** 
 1257              		.loc 1 251 14 view .LVU383
 1258 0090 0646     		mov	r6, r0
 1259              	.LVL104:
 253:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1260              		.loc 1 253 3 is_stmt 1 view .LVU384
 253:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1261              		.loc 1 253 5 is_stmt 0 view .LVU385
 1262 0092 10F0007F 		tst	r0, #33554432
 1263 0096 12D0     		beq	.L85
ARM GAS  /tmp/ccJvJKVn.s 			page 45


 1264              	.LVL105:
 1265              	.L80:
 280:base/os/FreeRTOS/Source/event_groups.c **** 
 1266              		.loc 1 280 3 is_stmt 1 view .LVU386
 284:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1267              		.loc 1 284 3 view .LVU387
 284:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1268              		.loc 1 284 12 is_stmt 0 view .LVU388
 1269 0098 26F07F46 		bic	r6, r6, #-16777216
 1270              	.LVL106:
 287:base/os/FreeRTOS/Source/event_groups.c **** 
 1271              		.loc 1 287 2 is_stmt 1 view .LVU389
 290:base/os/FreeRTOS/Source/event_groups.c **** 
 1272              		.loc 1 290 2 view .LVU390
 292:base/os/FreeRTOS/Source/event_groups.c **** }
 1273              		.loc 1 292 2 view .LVU391
 1274              	.L68:
 293:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1275              		.loc 1 293 1 is_stmt 0 view .LVU392
 1276 009c 3046     		mov	r0, r6
 1277 009e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1278              	.LVL107:
 1279              	.L83:
 200:base/os/FreeRTOS/Source/event_groups.c **** 
 1280              		.loc 1 200 4 is_stmt 1 view .LVU393
 204:base/os/FreeRTOS/Source/event_groups.c **** 
 1281              		.loc 1 204 4 view .LVU394
 204:base/os/FreeRTOS/Source/event_groups.c **** 
 1282              		.loc 1 204 29 is_stmt 0 view .LVU395
 1283 00a2 3B68     		ldr	r3, [r7]
 1284 00a4 23EA0403 		bic	r3, r3, r4
 1285 00a8 3B60     		str	r3, [r7]
 206:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1286              		.loc 1 206 4 is_stmt 1 view .LVU396
 1287              	.LVL108:
 206:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1288              		.loc 1 206 17 is_stmt 0 view .LVU397
 1289 00aa 4546     		mov	r5, r8
 1290 00ac E0E7     		b	.L76
 1291              	.LVL109:
 1292              	.L84:
 212:base/os/FreeRTOS/Source/event_groups.c **** 
 1293              		.loc 1 212 77 is_stmt 1 view .LVU398
 217:base/os/FreeRTOS/Source/event_groups.c **** 
 1294              		.loc 1 217 5 view .LVU399
 1295 00ae 2A46     		mov	r2, r5
 1296 00b0 44F0A061 		orr	r1, r4, #83886080
 1297 00b4 381D     		adds	r0, r7, #4
 1298 00b6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 1299              	.LVL110:
 223:base/os/FreeRTOS/Source/event_groups.c **** 			}
 1300              		.loc 1 223 5 view .LVU400
 223:base/os/FreeRTOS/Source/event_groups.c **** 			}
 1301              		.loc 1 223 14 is_stmt 0 view .LVU401
 1302 00ba 4646     		mov	r6, r8
 1303 00bc D8E7     		b	.L76
 1304              	.LVL111:
ARM GAS  /tmp/ccJvJKVn.s 			page 46


 1305              	.L85:
 256:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1306              		.loc 1 256 4 is_stmt 1 view .LVU402
 1307 00be FFF7FEFF 		bl	vPortEnterCritical
 1308              	.LVL112:
 258:base/os/FreeRTOS/Source/event_groups.c **** 
 1309              		.loc 1 258 5 view .LVU403
 258:base/os/FreeRTOS/Source/event_groups.c **** 
 1310              		.loc 1 258 14 is_stmt 0 view .LVU404
 1311 00c2 3E68     		ldr	r6, [r7]
 1312              	.LVL113:
 264:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1313              		.loc 1 264 5 is_stmt 1 view .LVU405
 264:base/os/FreeRTOS/Source/event_groups.c **** 				{
 1314              		.loc 1 264 7 is_stmt 0 view .LVU406
 1315 00c4 34EA0603 		bics	r3, r4, r6
 1316 00c8 02D0     		beq	.L86
 1317              	.LVL114:
 1318              	.L81:
 270:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1319              		.loc 1 270 30 is_stmt 1 view .LVU407
 273:base/os/FreeRTOS/Source/event_groups.c **** 
 1320              		.loc 1 273 4 view .LVU408
 1321 00ca FFF7FEFF 		bl	vPortExitCritical
 1322              	.LVL115:
 275:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1323              		.loc 1 275 4 view .LVU409
 275:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1324              		.loc 1 275 4 is_stmt 0 view .LVU410
 1325 00ce E3E7     		b	.L80
 1326              	.LVL116:
 1327              	.L86:
 266:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1328              		.loc 1 266 6 is_stmt 1 view .LVU411
 266:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1329              		.loc 1 266 31 is_stmt 0 view .LVU412
 1330 00d0 26EA0404 		bic	r4, r6, r4
 1331              	.LVL117:
 266:base/os/FreeRTOS/Source/event_groups.c **** 				}
 1332              		.loc 1 266 31 view .LVU413
 1333 00d4 3C60     		str	r4, [r7]
 1334 00d6 F8E7     		b	.L81
 1335              		.cfi_endproc
 1336              	.LFE6:
 1338              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1339              		.align	1
 1340              		.global	vEventGroupSetBitsCallback
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu softvfp
 1346              	vEventGroupSetBitsCallback:
 1347              	.LVL118:
 1348              	.LFB13:
 643:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1349              		.loc 1 643 1 is_stmt 1 view -0
 1350              		.cfi_startproc
ARM GAS  /tmp/ccJvJKVn.s 			page 47


 1351              		@ args = 0, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 643:base/os/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1353              		.loc 1 643 1 is_stmt 0 view .LVU415
 1354 0000 08B5     		push	{r3, lr}
 1355              	.LCFI14:
 1356              		.cfi_def_cfa_offset 8
 1357              		.cfi_offset 3, -8
 1358              		.cfi_offset 14, -4
 644:base/os/FreeRTOS/Source/event_groups.c **** }
 1359              		.loc 1 644 2 is_stmt 1 view .LVU416
 644:base/os/FreeRTOS/Source/event_groups.c **** }
 1360              		.loc 1 644 11 is_stmt 0 view .LVU417
 1361 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1362              	.LVL119:
 645:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1363              		.loc 1 645 1 view .LVU418
 1364 0006 08BD     		pop	{r3, pc}
 1365              		.cfi_endproc
 1366              	.LFE13:
 1368              		.section	.text.vEventGroupDelete,"ax",%progbits
 1369              		.align	1
 1370              		.global	vEventGroupDelete
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1374              		.fpu softvfp
 1376              	vEventGroupDelete:
 1377              	.LVL120:
 1378              	.LFB12:
 599:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1379              		.loc 1 599 1 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 599:base/os/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1383              		.loc 1 599 1 is_stmt 0 view .LVU420
 1384 0000 10B5     		push	{r4, lr}
 1385              	.LCFI15:
 1386              		.cfi_def_cfa_offset 8
 1387              		.cfi_offset 4, -8
 1388              		.cfi_offset 14, -4
 1389 0002 0446     		mov	r4, r0
 600:base/os/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1390              		.loc 1 600 1 is_stmt 1 view .LVU421
 1391              	.LVL121:
 601:base/os/FreeRTOS/Source/event_groups.c **** 
 1392              		.loc 1 601 1 view .LVU422
 603:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1393              		.loc 1 603 2 view .LVU423
 1394 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1395              	.LVL122:
 605:base/os/FreeRTOS/Source/event_groups.c **** 
 1396              		.loc 1 605 41 view .LVU424
 607:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1397              		.loc 1 607 3 view .LVU425
 1398              	.L90:
ARM GAS  /tmp/ccJvJKVn.s 			page 48


 607:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1399              		.loc 1 607 59 view .LVU426
 607:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1400              		.loc 1 607 10 is_stmt 0 view .LVU427
 1401 0008 6368     		ldr	r3, [r4, #4]
 607:base/os/FreeRTOS/Source/event_groups.c **** 		{
 1402              		.loc 1 607 59 view .LVU428
 1403 000a 93B1     		cbz	r3, .L96
 611:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1404              		.loc 1 611 4 is_stmt 1 view .LVU429
 1405 000c 2069     		ldr	r0, [r4, #16]
 1406 000e 04F10C03 		add	r3, r4, #12
 1407 0012 9842     		cmp	r0, r3
 1408 0014 04D0     		beq	.L97
 611:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1409              		.loc 1 611 121 discriminator 2 view .LVU430
 612:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1410              		.loc 1 612 4 discriminator 2 view .LVU431
 1411 0016 4FF00071 		mov	r1, #33554432
 1412 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1413              	.LVL123:
 1414 001e F3E7     		b	.L90
 1415              	.L97:
 611:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1416              		.loc 1 611 4 view .LVU432
 1417              	.LBB71:
 1418              	.LBI71:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1419              		.loc 2 191 30 view .LVU433
 1420              	.LBB72:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1421              		.loc 2 193 1 view .LVU434
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1422              		.loc 2 195 2 view .LVU435
 1423              		.syntax unified
 1424              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1425 0020 4FF05003 			mov r3, #80												
 1426 0024 83F31188 		msr basepri, r3											
 1427 0028 BFF36F8F 		isb														
 1428 002c BFF34F8F 		dsb														
 1429              	
 1430              	@ 0 "" 2
 1431              	.LVL124:
 1432              		.thumb
 1433              		.syntax unified
 1434              	.L92:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1435              		.loc 2 195 2 is_stmt 0 view .LVU436
 1436              	.LBE72:
 1437              	.LBE71:
 611:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1438              		.loc 1 611 4 is_stmt 1 discriminator 1 view .LVU437
 611:base/os/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1439              		.loc 1 611 4 discriminator 1 view .LVU438
 1440 0030 FEE7     		b	.L92
 1441              	.L96:
 625:base/os/FreeRTOS/Source/event_groups.c **** 			{
ARM GAS  /tmp/ccJvJKVn.s 			page 49


 1442              		.loc 1 625 4 view .LVU439
 625:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1443              		.loc 1 625 19 is_stmt 0 view .LVU440
 1444 0032 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 625:base/os/FreeRTOS/Source/event_groups.c **** 			{
 1445              		.loc 1 625 6 view .LVU441
 1446 0034 13B1     		cbz	r3, .L98
 1447              	.L94:
 631:base/os/FreeRTOS/Source/event_groups.c **** 			}
 1448              		.loc 1 631 29 is_stmt 1 view .LVU442
 636:base/os/FreeRTOS/Source/event_groups.c **** }
 1449              		.loc 1 636 2 view .LVU443
 636:base/os/FreeRTOS/Source/event_groups.c **** }
 1450              		.loc 1 636 11 is_stmt 0 view .LVU444
 1451 0036 FFF7FEFF 		bl	xTaskResumeAll
 1452              	.LVL125:
 637:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1453              		.loc 1 637 1 view .LVU445
 1454 003a 10BD     		pop	{r4, pc}
 1455              	.LVL126:
 1456              	.L98:
 627:base/os/FreeRTOS/Source/event_groups.c **** 			}
 1457              		.loc 1 627 5 is_stmt 1 view .LVU446
 1458 003c 2046     		mov	r0, r4
 1459 003e FFF7FEFF 		bl	vPortFree
 1460              	.LVL127:
 1461 0042 F8E7     		b	.L94
 1462              		.cfi_endproc
 1463              	.LFE12:
 1465              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1466              		.align	1
 1467              		.global	xEventGroupSetBitsFromISR
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu softvfp
 1473              	xEventGroupSetBitsFromISR:
 1474              	.LVL128:
 1475              	.LFB16:
 689:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 690:base/os/FreeRTOS/Source/event_groups.c **** 
 691:base/os/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 692:base/os/FreeRTOS/Source/event_groups.c **** 
 693:base/os/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 694:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1476              		.loc 1 694 2 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              		.loc 1 694 2 is_stmt 0 view .LVU448
 1481 0000 08B5     		push	{r3, lr}
 1482              	.LCFI16:
 1483              		.cfi_def_cfa_offset 8
 1484              		.cfi_offset 3, -8
 1485              		.cfi_offset 14, -4
 1486 0002 1346     		mov	r3, r2
 695:base/os/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/ccJvJKVn.s 			page 50


 1487              		.loc 1 695 2 is_stmt 1 view .LVU449
 696:base/os/FreeRTOS/Source/event_groups.c **** 
 697:base/os/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 1488              		.loc 1 697 65 view .LVU450
 698:base/os/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1489              		.loc 1 698 3 view .LVU451
 1490              		.loc 1 698 13 is_stmt 0 view .LVU452
 1491 0004 0A46     		mov	r2, r1
 1492              	.LVL129:
 1493              		.loc 1 698 13 view .LVU453
 1494 0006 0146     		mov	r1, r0
 1495              	.LVL130:
 1496              		.loc 1 698 13 view .LVU454
 1497 0008 0148     		ldr	r0, .L101
 1498              	.LVL131:
 1499              		.loc 1 698 13 view .LVU455
 1500 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1501              	.LVL132:
 699:base/os/FreeRTOS/Source/event_groups.c **** 
 700:base/os/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1502              		.loc 1 700 3 is_stmt 1 view .LVU456
 701:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1503              		.loc 1 701 2 is_stmt 0 view .LVU457
 1504 000e 08BD     		pop	{r3, pc}
 1505              	.L102:
 1506              		.align	2
 1507              	.L101:
 1508 0010 00000000 		.word	vEventGroupSetBitsCallback
 1509              		.cfi_endproc
 1510              	.LFE16:
 1512              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1513              		.align	1
 1514              		.global	uxEventGroupGetNumber
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu softvfp
 1520              	uxEventGroupGetNumber:
 1521              	.LVL133:
 1522              	.LFB17:
 702:base/os/FreeRTOS/Source/event_groups.c **** 
 703:base/os/FreeRTOS/Source/event_groups.c **** #endif
 704:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:base/os/FreeRTOS/Source/event_groups.c **** 
 706:base/os/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 707:base/os/FreeRTOS/Source/event_groups.c **** 
 708:base/os/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 709:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1523              		.loc 1 709 2 is_stmt 1 view -0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 0
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              		@ link register save eliminated.
 710:base/os/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 1528              		.loc 1 710 2 view .LVU459
 711:base/os/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1529              		.loc 1 711 2 view .LVU460
ARM GAS  /tmp/ccJvJKVn.s 			page 51


 712:base/os/FreeRTOS/Source/event_groups.c **** 
 713:base/os/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1530              		.loc 1 713 3 view .LVU461
 1531              		.loc 1 713 5 is_stmt 0 view .LVU462
 1532 0000 08B1     		cbz	r0, .L105
 714:base/os/FreeRTOS/Source/event_groups.c **** 		{
 715:base/os/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 716:base/os/FreeRTOS/Source/event_groups.c **** 		}
 717:base/os/FreeRTOS/Source/event_groups.c **** 		else
 718:base/os/FreeRTOS/Source/event_groups.c **** 		{
 719:base/os/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1533              		.loc 1 719 4 is_stmt 1 view .LVU463
 1534              		.loc 1 719 12 is_stmt 0 view .LVU464
 1535 0002 8069     		ldr	r0, [r0, #24]
 1536              	.LVL134:
 1537              		.loc 1 719 12 view .LVU465
 1538 0004 7047     		bx	lr
 1539              	.LVL135:
 1540              	.L105:
 715:base/os/FreeRTOS/Source/event_groups.c **** 		}
 1541              		.loc 1 715 12 view .LVU466
 1542 0006 0020     		movs	r0, #0
 1543              	.LVL136:
 720:base/os/FreeRTOS/Source/event_groups.c **** 		}
 721:base/os/FreeRTOS/Source/event_groups.c **** 
 722:base/os/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1544              		.loc 1 722 3 is_stmt 1 view .LVU467
 723:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1545              		.loc 1 723 2 is_stmt 0 view .LVU468
 1546 0008 7047     		bx	lr
 1547              		.cfi_endproc
 1548              	.LFE17:
 1550              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1551              		.align	1
 1552              		.global	vEventGroupSetNumber
 1553              		.syntax unified
 1554              		.thumb
 1555              		.thumb_func
 1556              		.fpu softvfp
 1558              	vEventGroupSetNumber:
 1559              	.LVL137:
 1560              	.LFB18:
 724:base/os/FreeRTOS/Source/event_groups.c **** 
 725:base/os/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 726:base/os/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 727:base/os/FreeRTOS/Source/event_groups.c **** 
 728:base/os/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 729:base/os/FreeRTOS/Source/event_groups.c **** 
 730:base/os/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 731:base/os/FreeRTOS/Source/event_groups.c **** 	{
 1561              		.loc 1 731 2 is_stmt 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 0
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 1565              		@ link register save eliminated.
 732:base/os/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber;
 1566              		.loc 1 732 3 view .LVU470
ARM GAS  /tmp/ccJvJKVn.s 			page 52


 1567              		.loc 1 732 58 is_stmt 0 view .LVU471
 1568 0000 8161     		str	r1, [r0, #24]
 733:base/os/FreeRTOS/Source/event_groups.c **** 	}
 1569              		.loc 1 733 2 view .LVU472
 1570 0002 7047     		bx	lr
 1571              		.cfi_endproc
 1572              	.LFE18:
 1574              		.text
 1575              	.Letext0:
 1576              		.file 3 "/usr/lib/gcc/arm-none-eabi/11.1.0/include/stddef.h"
 1577              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1578              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1579              		.file 6 "base/os/FreeRTOS/Source/include/FreeRTOS.h"
 1580              		.file 7 "base/os/FreeRTOS/Source/include/list.h"
 1581              		.file 8 "base/os/FreeRTOS/Source/include/timers.h"
 1582              		.file 9 "base/os/FreeRTOS/Source/include/event_groups.h"
 1583              		.file 10 "base/os/FreeRTOS/Source/include/portable.h"
 1584              		.file 11 "base/os/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccJvJKVn.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccJvJKVn.s:16     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccJvJKVn.s:23     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccJvJKVn.s:78     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccJvJKVn.s:85     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccJvJKVn.s:211    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccJvJKVn.s:218    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccJvJKVn.s:264    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccJvJKVn.s:271    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccJvJKVn.s:602    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccJvJKVn.s:609    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccJvJKVn.s:725    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccJvJKVn.s:732    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccJvJKVn.s:755    .text.xEventGroupClearBitsFromISR:0000000000000000 $t
     /tmp/ccJvJKVn.s:762    .text.xEventGroupClearBitsFromISR:0000000000000000 xEventGroupClearBitsFromISR
     /tmp/ccJvJKVn.s:795    .text.xEventGroupClearBitsFromISR:0000000000000010 $d
     /tmp/ccJvJKVn.s:800    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccJvJKVn.s:807    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccJvJKVn.s:868    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccJvJKVn.s:875    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccJvJKVn.s:1066   .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccJvJKVn.s:1073   .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccJvJKVn.s:1339   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccJvJKVn.s:1346   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccJvJKVn.s:1369   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccJvJKVn.s:1376   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccJvJKVn.s:1466   .text.xEventGroupSetBitsFromISR:0000000000000000 $t
     /tmp/ccJvJKVn.s:1473   .text.xEventGroupSetBitsFromISR:0000000000000000 xEventGroupSetBitsFromISR
     /tmp/ccJvJKVn.s:1508   .text.xEventGroupSetBitsFromISR:0000000000000010 $d
     /tmp/ccJvJKVn.s:1513   .text.uxEventGroupGetNumber:0000000000000000 $t
     /tmp/ccJvJKVn.s:1520   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
     /tmp/ccJvJKVn.s:1551   .text.vEventGroupSetNumber:0000000000000000 $t
     /tmp/ccJvJKVn.s:1558   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vTaskPlaceOnUnorderedEventList
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
