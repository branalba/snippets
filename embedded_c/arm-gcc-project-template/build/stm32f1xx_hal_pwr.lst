ARM GAS  /tmp/ccNJYCjz.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PWR_OverloadWfe,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	PWR_OverloadWfe:
  24              	.LFB65:
  25              		.file 1 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c"
   1:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
   2:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
   3:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @file    stm32f1xx_hal_pwr.c
   4:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @author  MCD Application Team
   5:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
   7:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   8:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   9:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
  10:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           + Peripheral Control functions 
  11:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  12:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
  13:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @attention
  14:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  15:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  16:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * All rights reserved.</center></h2>
  17:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  18:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  19:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * the "License"; You may not use this file except in compliance with the
  20:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * License. You may obtain a copy of the License at:
  21:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *                        opensource.org/licenses/BSD-3-Clause
  22:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
  23:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   ******************************************************************************
  24:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  25:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  26:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  27:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #include "stm32f1xx_hal.h"
  28:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  29:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @addtogroup STM32F1xx_HAL_Driver
  30:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  31:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  32:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  33:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR PWR
ARM GAS  /tmp/ccNJYCjz.s 			page 2


  34:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief    PWR HAL module driver
  35:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  36:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  37:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  38:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  39:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  40:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  41:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  42:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  43:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Private_Constants PWR Private Constants
  44:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  45:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  46:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
  47:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  48:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  49:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */ 
  50:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U
  51:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U
  52:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U
  53:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U
  54:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
  55:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
  56:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  57:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  58:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  59:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_register_alias_address PWR Register alias address
  60:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  61:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */ 
  62:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* ------------- PWR registers bit address in the alias region ---------------*/
  63:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  64:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CR_OFFSET            0x00U
  65:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CSR_OFFSET           0x04U
  66:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CR_OFFSET_BB         (PWR_OFFSET + PWR_CR_OFFSET)
  67:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PWR_CSR_OFFSET_BB        (PWR_OFFSET + PWR_CSR_OFFSET)
  68:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
  69:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
  70:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  71:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    
  72:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_CR_register_alias PWR CR Register alias address
  73:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  74:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */  
  75:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* --- CR Register ---*/
  76:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of LPSDSR bit */
  77:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define LPSDSR_BIT_NUMBER        PWR_CR_LPDS_Pos
  78:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_LPSDSR_BB             ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32U) + (LPSDSR_BI
  79:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  80:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of DBP bit */
  81:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define DBP_BIT_NUMBER            PWR_CR_DBP_Pos
  82:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_DBP_BB                ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32U) + (DBP_BIT_N
  83:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  84:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of PVDE bit */
  85:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define PVDE_BIT_NUMBER           PWR_CR_PVDE_Pos
  86:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CR_PVDE_BB               ((uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32U) + (PVDE_BIT_
  87:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  88:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
  89:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
  90:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
ARM GAS  /tmp/ccNJYCjz.s 			page 3


  91:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  92:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_CSR_register_alias PWR CSR Register alias address
  93:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
  94:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
  95:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
  96:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* --- CSR Register ---*/
  97:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Alias word address of EWUP1 bit */
  98:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #define CSR_EWUP_BB(VAL)         ((uint32_t)(PERIPH_BB_BASE + (PWR_CSR_OFFSET_BB * 32U) + (POSITION
  99:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 100:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 101:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 102:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 103:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 104:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 105:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 106:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 107:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
 108:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 109:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Private_Functions PWR Private Functions
 110:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  * brief   WFE cortex command overloaded for HAL_PWR_EnterSTOPMode usage only (see Workaround secti
 111:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  * @{
 112:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  */
 113:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** static void PWR_OverloadWfe(void);
 114:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 115:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
 116:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** __NOINLINE
 117:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** static void PWR_OverloadWfe(void)
 118:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  26              		.loc 1 118 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 119:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __asm volatile( "wfe" );
  31              		.loc 1 119 3 view .LVU1
  32              		.syntax unified
  33              	@ 119 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
  34 0000 20BF     		wfe
  35              	@ 0 "" 2
 120:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __asm volatile( "nop" );
  36              		.loc 1 120 3 view .LVU2
  37              	@ 120 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
  38 0002 00BF     		nop
  39              	@ 0 "" 2
 121:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
  40              		.loc 1 121 1 is_stmt 0 view .LVU3
  41              		.thumb
  42              		.syntax unified
  43 0004 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE65:
  47              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  48              		.align	1
  49              		.global	HAL_PWR_DeInit
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
ARM GAS  /tmp/ccNJYCjz.s 			page 4


  53              		.fpu softvfp
  55              	HAL_PWR_DeInit:
  56              	.LFB66:
 122:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 123:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 124:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 125:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 126:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 127:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 128:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
 129:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 130:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 131:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 132:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
 133:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *  @brief   Initialization and de-initialization functions
 134:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
 135:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @verbatim
 136:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 137:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
 138:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 139:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 140:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data
 141:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       registers) is protected against possible unwanted
 142:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       write accesses.
 143:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 144:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 145:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
 146:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
 147:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 148:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @endverbatim
 149:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 150:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 151:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 152:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 153:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
 154:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 155:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 156:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 157:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  57              		.loc 1 157 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 158:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  62              		.loc 1 158 3 view .LVU5
  63 0000 044B     		ldr	r3, .L3
  64 0002 1A69     		ldr	r2, [r3, #16]
  65 0004 42F08052 		orr	r2, r2, #268435456
  66 0008 1A61     		str	r2, [r3, #16]
 159:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  67              		.loc 1 159 3 view .LVU6
  68 000a 1A69     		ldr	r2, [r3, #16]
  69 000c 22F08052 		bic	r2, r2, #268435456
  70 0010 1A61     		str	r2, [r3, #16]
 160:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
  71              		.loc 1 160 1 is_stmt 0 view .LVU7
ARM GAS  /tmp/ccNJYCjz.s 			page 5


  72 0012 7047     		bx	lr
  73              	.L4:
  74              		.align	2
  75              	.L3:
  76 0014 00100240 		.word	1073876992
  77              		.cfi_endproc
  78              	.LFE66:
  80              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  81              		.align	1
  82              		.global	HAL_PWR_EnableBkUpAccess
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu softvfp
  88              	HAL_PWR_EnableBkUpAccess:
  89              	.LFB67:
 161:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 162:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 163:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Enables access to the backup domain (RTC registers, RTC
 164:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         backup data registers ).
 165:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   If the HSE divided by 128 is used as the RTC clock, the
 166:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 167:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 168:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 169:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 170:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
  90              		.loc 1 170 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 171:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable access to RTC and backup registers */
 172:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  95              		.loc 1 172 3 view .LVU9
  96              		.loc 1 172 32 is_stmt 0 view .LVU10
  97 0000 014B     		ldr	r3, .L6
  98 0002 0122     		movs	r2, #1
  99 0004 1A62     		str	r2, [r3, #32]
 173:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 100              		.loc 1 173 1 view .LVU11
 101 0006 7047     		bx	lr
 102              	.L7:
 103              		.align	2
 104              	.L6:
 105 0008 00000E42 		.word	1108213760
 106              		.cfi_endproc
 107              	.LFE67:
 109              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 110              		.align	1
 111              		.global	HAL_PWR_DisableBkUpAccess
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	HAL_PWR_DisableBkUpAccess:
 118              	.LFB68:
 174:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
ARM GAS  /tmp/ccNJYCjz.s 			page 6


 175:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 176:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Disables access to the backup domain (RTC registers, RTC
 177:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         backup data registers).
 178:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   If the HSE divided by 128 is used as the RTC clock, the
 179:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 180:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 181:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 182:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 183:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 119              		.loc 1 183 1 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 184:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable access to RTC and backup registers */
 185:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 124              		.loc 1 185 3 view .LVU13
 125              		.loc 1 185 32 is_stmt 0 view .LVU14
 126 0000 014B     		ldr	r3, .L9
 127 0002 0022     		movs	r2, #0
 128 0004 1A62     		str	r2, [r3, #32]
 186:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 129              		.loc 1 186 1 view .LVU15
 130 0006 7047     		bx	lr
 131              	.L10:
 132              		.align	2
 133              	.L9:
 134 0008 00000E42 		.word	1108213760
 135              		.cfi_endproc
 136              	.LFE68:
 138              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 139              		.align	1
 140              		.global	HAL_PWR_ConfigPVD
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	HAL_PWR_ConfigPVD:
 147              	.LVL0:
 148              	.LFB69:
 187:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 188:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 189:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @}
 190:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 191:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 192:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 193:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief    Low Power modes configuration functions
 194:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *
 195:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @verbatim
 196:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 197:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 198:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****  ===============================================================================
 199:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      
 200:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** PVD configuration ***
 201:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     =========================
 202:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 203:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
ARM GAS  /tmp/ccNJYCjz.s 			page 7


 204:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 205:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 206:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
 207:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 208:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 209:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 210:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 211:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 212:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 213:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     ================================
 214:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 215:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) WakeUp pin is used to wake up the system from Standby mode. This pin is
 216:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 217:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) There is one WakeUp pin:
 218:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           WakeUp Pin 1 on PA.00.
 219:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 220:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 221:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 222:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     *** Low Power modes configuration ***
 223:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     =====================================
 224:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      [..]
 225:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The device features 3 low-power modes:
 226:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Sleep mode: CPU clock off, all peripherals including Cortex-M3 core peripherals like 
 227:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                       NVIC, SysTick, etc. are kept running
 228:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Stop mode: All clocks are stopped
 229:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Standby mode: 1.8V domain powered off
 230:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 231:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 232:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Sleep mode ***
 233:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    ==================
 234:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 235:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 236:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_S
 237:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****               functions with
 238:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 239:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 240:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      
 241:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 242:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WFI entry mode, Any peripheral interrupt acknowledged by the nested vectored interrupt
 243:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 244:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WFE entry mode, Any wakeup event can wake up the device from Sleep mode.
 245:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (+++) Any peripheral interrupt w/o NVIC configuration & SEVONPEND bit set in the Cortex 
 246:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (+++) Any EXTI Line (Internal or External) configured in Event mode
 247:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 248:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Stop mode ***
 249:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    =================
 250:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     [..]
 251:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The Stop mode is based on the Cortex-M3 deepsleep mode combined with peripheral
 252:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       clock gating. The voltage regulator can be configured either in normal or low-power mode.
 253:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.8 V domain are stopped, the PLL, the HSI and the HSE RC 
 254:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       oscillators are disabled. SRAM and register contents are preserved.
 255:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       In Stop mode, all I/O pins keep the same state as in Run mode.
 256:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 257:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 258:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VALUE, PWR_SLEEPE
 259:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              function with:
 260:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_REGULATOR_VALUE= PWR_MAINREGULATOR_ON: Main regulator ON.
ARM GAS  /tmp/ccNJYCjz.s 			page 8


 261:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_REGULATOR_VALUE= PWR_LOWPOWERREGULATOR_ON: Low Power regulator ON.
 262:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFx= PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
 263:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFx= PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
 264:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 265:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) WFI entry mode, Any EXTI Line (Internal or External) configured in Interrupt mode wi
 266:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (++) WFE entry mode, Any EXTI Line (Internal or External) configured in Event mode.
 267:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 268:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Standby mode ***
 269:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    ====================
 270:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****      [..]
 271:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based on the
 272:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       Cortex-M3 deepsleep mode, with the voltage regulator disabled. The 1.8 V domain is 
 273:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       consequently powered off. The PLL, the HSI oscillator and the HSE oscillator are also 
 274:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       switched off. SRAM and register contents are lost except for registers in the Backup domain 
 275:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       and Standby circuitry
 276:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       
 277:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Entry:
 278:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 279:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****       (+) Exit:
 280:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         (++) WKUP pin rising edge, RTC alarm event rising edge, external Reset in 
 281:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****              NRSTpin, IWDG Reset
 282:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 283:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 284:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        =============================================
 285:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        [..]
 286:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         
 287:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (+) The MCU can be woken up from low-power mode by an RTC Alarm event, 
 288:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            without depending on an external interrupt (Auto-wakeup mode).
 289:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    
 290:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (+) RTC auto-wakeup (AWU) from the Stop and Standby modes
 291:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 292:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****            (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 293:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****                 configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() functio
 294:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 295:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    *** PWR Workarounds linked to Silicon Limitation ***
 296:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        ====================================================
 297:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        [..]
 298:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        Below the list of all silicon limitations known on STM32F1xx prouct.
 299:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 300:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****        (#)Workarounds Implemented inside PWR HAL Driver
 301:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****           (##)Debugging Stop mode with WFE entry - overloaded the WFE by an internal function    
 302:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****         
 303:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** @endverbatim
 304:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @{
 305:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 306:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 307:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 308:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 309:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param  sConfigPVD: pointer to an PWR_PVDTypeDef structure that contains the configuration
 310:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         information for the PVD.
 311:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 312:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each
 313:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         detection level.
 314:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 315:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 316:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 317:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
ARM GAS  /tmp/ccNJYCjz.s 			page 9


 149              		.loc 1 317 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 318:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 319:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 154              		.loc 1 319 3 view .LVU17
 320:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 155              		.loc 1 320 3 view .LVU18
 321:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 322:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 323:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 156              		.loc 1 323 3 view .LVU19
 157 0000 1E4A     		ldr	r2, .L16
 158 0002 1368     		ldr	r3, [r2]
 159 0004 23F0E003 		bic	r3, r3, #224
 160 0008 0168     		ldr	r1, [r0]
 161 000a 0B43     		orrs	r3, r3, r1
 162 000c 1360     		str	r3, [r2]
 324:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 325:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 326:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 163              		.loc 1 326 3 view .LVU20
 164 000e 1C4B     		ldr	r3, .L16+4
 165 0010 5A68     		ldr	r2, [r3, #4]
 166 0012 22F48032 		bic	r2, r2, #65536
 167 0016 5A60     		str	r2, [r3, #4]
 327:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 168              		.loc 1 327 3 view .LVU21
 169 0018 1A68     		ldr	r2, [r3]
 170 001a 22F48032 		bic	r2, r2, #65536
 171 001e 1A60     		str	r2, [r3]
 328:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 172              		.loc 1 328 3 view .LVU22
 173 0020 DA68     		ldr	r2, [r3, #12]
 174 0022 22F48032 		bic	r2, r2, #65536
 175 0026 DA60     		str	r2, [r3, #12]
 329:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 176              		.loc 1 329 3 view .LVU23
 177 0028 9A68     		ldr	r2, [r3, #8]
 178 002a 22F48032 		bic	r2, r2, #65536
 179 002e 9A60     		str	r2, [r3, #8]
 330:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 331:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure interrupt mode */
 332:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 180              		.loc 1 332 3 view .LVU24
 181              		.loc 1 332 17 is_stmt 0 view .LVU25
 182 0030 4368     		ldr	r3, [r0, #4]
 183              		.loc 1 332 5 view .LVU26
 184 0032 13F4803F 		tst	r3, #65536
 185 0036 04D0     		beq	.L12
 333:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 334:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 186              		.loc 1 334 5 is_stmt 1 view .LVU27
 187 0038 114A     		ldr	r2, .L16+4
 188 003a 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccNJYCjz.s 			page 10


 189 003c 43F48033 		orr	r3, r3, #65536
 190 0040 1360     		str	r3, [r2]
 191              	.L12:
 335:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 336:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 337:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure event mode */
 338:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 192              		.loc 1 338 3 view .LVU28
 193              		.loc 1 338 17 is_stmt 0 view .LVU29
 194 0042 4368     		ldr	r3, [r0, #4]
 195              		.loc 1 338 5 view .LVU30
 196 0044 13F4003F 		tst	r3, #131072
 197 0048 04D0     		beq	.L13
 339:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 340:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 198              		.loc 1 340 5 is_stmt 1 view .LVU31
 199 004a 0D4A     		ldr	r2, .L16+4
 200 004c 5368     		ldr	r3, [r2, #4]
 201 004e 43F48033 		orr	r3, r3, #65536
 202 0052 5360     		str	r3, [r2, #4]
 203              	.L13:
 341:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 342:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 343:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Configure the edge */
 344:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 204              		.loc 1 344 3 view .LVU32
 205              		.loc 1 344 17 is_stmt 0 view .LVU33
 206 0054 4368     		ldr	r3, [r0, #4]
 207              		.loc 1 344 5 view .LVU34
 208 0056 13F0010F 		tst	r3, #1
 209 005a 04D0     		beq	.L14
 345:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 346:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 210              		.loc 1 346 5 is_stmt 1 view .LVU35
 211 005c 084A     		ldr	r2, .L16+4
 212 005e 9368     		ldr	r3, [r2, #8]
 213 0060 43F48033 		orr	r3, r3, #65536
 214 0064 9360     		str	r3, [r2, #8]
 215              	.L14:
 347:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 348:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   
 349:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 216              		.loc 1 349 3 view .LVU36
 217              		.loc 1 349 17 is_stmt 0 view .LVU37
 218 0066 4368     		ldr	r3, [r0, #4]
 219              		.loc 1 349 5 view .LVU38
 220 0068 13F0020F 		tst	r3, #2
 221 006c 04D0     		beq	.L11
 350:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 351:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 222              		.loc 1 351 5 is_stmt 1 view .LVU39
 223 006e 044A     		ldr	r2, .L16+4
 224 0070 D368     		ldr	r3, [r2, #12]
 225 0072 43F48033 		orr	r3, r3, #65536
 226 0076 D360     		str	r3, [r2, #12]
 227              	.L11:
 352:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
ARM GAS  /tmp/ccNJYCjz.s 			page 11


 353:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 228              		.loc 1 353 1 is_stmt 0 view .LVU40
 229 0078 7047     		bx	lr
 230              	.L17:
 231 007a 00BF     		.align	2
 232              	.L16:
 233 007c 00700040 		.word	1073770496
 234 0080 00040140 		.word	1073808384
 235              		.cfi_endproc
 236              	.LFE69:
 238              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 239              		.align	1
 240              		.global	HAL_PWR_EnablePVD
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu softvfp
 246              	HAL_PWR_EnablePVD:
 247              	.LFB70:
 354:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 355:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 356:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Enables the Power Voltage Detector(PVD).
 357:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 358:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 359:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 360:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 248              		.loc 1 360 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 361:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable the power voltage detector */
 362:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 253              		.loc 1 362 3 view .LVU42
 254              		.loc 1 362 33 is_stmt 0 view .LVU43
 255 0000 014B     		ldr	r3, .L19
 256 0002 0122     		movs	r2, #1
 257 0004 1A61     		str	r2, [r3, #16]
 363:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 258              		.loc 1 363 1 view .LVU44
 259 0006 7047     		bx	lr
 260              	.L20:
 261              		.align	2
 262              	.L19:
 263 0008 00000E42 		.word	1108213760
 264              		.cfi_endproc
 265              	.LFE70:
 267              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 268              		.align	1
 269              		.global	HAL_PWR_DisablePVD
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	HAL_PWR_DisablePVD:
 276              	.LFB71:
 364:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
ARM GAS  /tmp/ccNJYCjz.s 			page 12


 365:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 366:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  Disables the Power Voltage Detector(PVD).
 367:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 368:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 369:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 370:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 277              		.loc 1 370 1 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 371:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable the power voltage detector */
 372:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 282              		.loc 1 372 3 view .LVU46
 283              		.loc 1 372 33 is_stmt 0 view .LVU47
 284 0000 014B     		ldr	r3, .L22
 285 0002 0022     		movs	r2, #0
 286 0004 1A61     		str	r2, [r3, #16]
 373:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 287              		.loc 1 373 1 view .LVU48
 288 0006 7047     		bx	lr
 289              	.L23:
 290              		.align	2
 291              	.L22:
 292 0008 00000E42 		.word	1108213760
 293              		.cfi_endproc
 294              	.LFE71:
 296              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 297              		.align	1
 298              		.global	HAL_PWR_EnableWakeUpPin
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
 304              	HAL_PWR_EnableWakeUpPin:
 305              	.LVL1:
 306              	.LFB72:
 374:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 375:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 376:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 377:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to enable.
 378:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 379:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 380:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 381:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 382:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 383:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 307              		.loc 1 383 1 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 384:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameter */
 385:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 312              		.loc 1 385 3 view .LVU50
 386:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Enable the EWUPx pin */
 387:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
ARM GAS  /tmp/ccNJYCjz.s 			page 13


 313              		.loc 1 387 3 view .LVU51
 314              	.LBB6:
 315              	.LBI6:
 316              		.file 2 "base/chip/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  /tmp/ccNJYCjz.s 			page 14


  54:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  /tmp/ccNJYCjz.s 			page 15


 111:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccNJYCjz.s 			page 16


 168:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccNJYCjz.s 			page 17


 225:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccNJYCjz.s 			page 18


 282:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccNJYCjz.s 			page 19


 339:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
ARM GAS  /tmp/ccNJYCjz.s 			page 20


 396:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
ARM GAS  /tmp/ccNJYCjz.s 			page 21


 453:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccNJYCjz.s 			page 22


 510:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
ARM GAS  /tmp/ccNJYCjz.s 			page 23


 567:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccNJYCjz.s 			page 24


 624:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccNJYCjz.s 			page 25


 681:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/ccNJYCjz.s 			page 26


 738:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
ARM GAS  /tmp/ccNJYCjz.s 			page 27


 795:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccNJYCjz.s 			page 28


 852:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccNJYCjz.s 			page 29


 909:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccNJYCjz.s 			page 30


 966:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 317              		.loc 2 981 31 view .LVU52
 318              	.LBB7:
 982:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319              		.loc 2 983 3 view .LVU53
 984:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 320              		.loc 2 988 4 view .LVU54
 321              		.syntax unified
 322              	@ 988 "base/chip/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 323 0000 90FAA0F0 		rbit r0, r0
 324              	@ 0 "" 2
 325              	.LVL2:
 989:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 326              		.loc 2 1001 3 view .LVU55
 327              		.loc 2 1001 3 is_stmt 0 view .LVU56
 328              		.thumb
 329              		.syntax unified
 330              	.LBE7:
 331              	.LBE6:
 332              		.loc 1 387 22 view .LVU57
 333 0004 B0FA80F0 		clz	r0, r0
 334 0008 024B     		ldr	r3, .L25
 335 000a 0344     		add	r3, r3, r0
 336 000c 9B00     		lsls	r3, r3, #2
 337              		.loc 1 387 46 view .LVU58
ARM GAS  /tmp/ccNJYCjz.s 			page 31


 338 000e 0122     		movs	r2, #1
 339 0010 1A60     		str	r2, [r3]
 388:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 340              		.loc 1 388 1 view .LVU59
 341 0012 7047     		bx	lr
 342              	.L26:
 343              		.align	2
 344              	.L25:
 345 0014 20808310 		.word	277053472
 346              		.cfi_endproc
 347              	.LFE72:
 349              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 350              		.align	1
 351              		.global	HAL_PWR_DisableWakeUpPin
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu softvfp
 357              	HAL_PWR_DisableWakeUpPin:
 358              	.LVL3:
 359              	.LFB73:
 389:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 390:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 391:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 392:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 393:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 394:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 395:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 396:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 397:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 398:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 360              		.loc 1 398 1 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 399:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameter */
 400:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 365              		.loc 1 400 3 view .LVU61
 401:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Disable the EWUPx pin */
 402:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 366              		.loc 1 402 3 view .LVU62
 367              	.LBB8:
 368              	.LBI8:
 981:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 369              		.loc 2 981 31 view .LVU63
 370              	.LBB9:
 983:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371              		.loc 2 983 3 view .LVU64
 988:base/chip/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 372              		.loc 2 988 4 view .LVU65
 373              		.syntax unified
 374              	@ 988 "base/chip/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 375 0000 90FAA0F0 		rbit r0, r0
 376              	@ 0 "" 2
 377              	.LVL4:
 378              		.loc 2 1001 3 view .LVU66
ARM GAS  /tmp/ccNJYCjz.s 			page 32


 379              		.loc 2 1001 3 is_stmt 0 view .LVU67
 380              		.thumb
 381              		.syntax unified
 382              	.LBE9:
 383              	.LBE8:
 384              		.loc 1 402 22 view .LVU68
 385 0004 B0FA80F0 		clz	r0, r0
 386 0008 024B     		ldr	r3, .L28
 387 000a 0344     		add	r3, r3, r0
 388 000c 9B00     		lsls	r3, r3, #2
 389              		.loc 1 402 46 view .LVU69
 390 000e 0022     		movs	r2, #0
 391 0010 1A60     		str	r2, [r3]
 403:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 392              		.loc 1 403 1 view .LVU70
 393 0012 7047     		bx	lr
 394              	.L29:
 395              		.align	2
 396              	.L28:
 397 0014 20808310 		.word	277053472
 398              		.cfi_endproc
 399              	.LFE73:
 401              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 402              		.align	1
 403              		.global	HAL_PWR_EnterSLEEPMode
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu softvfp
 409              	HAL_PWR_EnterSLEEPMode:
 410              	.LVL5:
 411              	.LFB74:
 404:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 405:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 406:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 407:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Sleep mode, all I/O pins keep the same state as in Run mode.
 408:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param Regulator: Regulator state as no effect in SLEEP mode -  allows to support portability f
 409:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if SLEEP mode is entered with WFI or WFE instruction.
 410:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
 411:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           the interrupt wake up source.
 412:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 413:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 414:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 415:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 416:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 417:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 418:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 412              		.loc 1 418 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 419:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 420:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* No check on Regulator because parameter not used in SLEEP mode */
 421:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 422:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   UNUSED(Regulator);
 417              		.loc 1 422 3 view .LVU72
ARM GAS  /tmp/ccNJYCjz.s 			page 33


 423:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 424:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 418              		.loc 1 424 3 view .LVU73
 425:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 426:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 427:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 419              		.loc 1 427 3 view .LVU74
 420 0000 064A     		ldr	r2, .L34
 421 0002 1369     		ldr	r3, [r2, #16]
 422 0004 23F00403 		bic	r3, r3, #4
 423 0008 1361     		str	r3, [r2, #16]
 428:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 429:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 430:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 424              		.loc 1 430 3 view .LVU75
 425              		.loc 1 430 5 is_stmt 0 view .LVU76
 426 000a 0129     		cmp	r1, #1
 427 000c 03D0     		beq	.L33
 431:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 432:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 433:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFI();
 434:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 435:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   else
 436:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 437:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Event */
 438:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __SEV();
 428              		.loc 1 438 5 is_stmt 1 view .LVU77
 429              		.syntax unified
 430              	@ 438 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 431 000e 40BF     		sev
 432              	@ 0 "" 2
 439:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFE();
 433              		.loc 1 439 5 view .LVU78
 434              	@ 439 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 435 0010 20BF     		wfe
 436              	@ 0 "" 2
 440:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFE();
 437              		.loc 1 440 5 view .LVU79
 438              	@ 440 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 439 0012 20BF     		wfe
 440              	@ 0 "" 2
 441:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 442:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 441              		.loc 1 442 1 is_stmt 0 view .LVU80
 442              		.thumb
 443              		.syntax unified
 444 0014 7047     		bx	lr
 445              	.L33:
 433:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 446              		.loc 1 433 5 is_stmt 1 view .LVU81
 447              		.syntax unified
 448              	@ 433 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 449 0016 30BF     		wfi
 450              	@ 0 "" 2
 451              		.thumb
 452              		.syntax unified
 453 0018 7047     		bx	lr
ARM GAS  /tmp/ccNJYCjz.s 			page 34


 454              	.L35:
 455 001a 00BF     		.align	2
 456              	.L34:
 457 001c 00ED00E0 		.word	-536810240
 458              		.cfi_endproc
 459              	.LFE74:
 461              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 462              		.align	1
 463              		.global	HAL_PWR_EnterSTOPMode
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
 467              		.fpu softvfp
 469              	HAL_PWR_EnterSTOPMode:
 470              	.LVL6:
 471              	.LFB75:
 443:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 444:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 445:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 446:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 447:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  When exiting Stop mode by using an interrupt or a wakeup event,
 448:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *        HSI RC oscillator is selected as system clock.
 449:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
 450:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 451:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption
 452:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 453:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 454:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 455:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 456:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 457:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @param STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
 458:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 459:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 460:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
 461:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 462:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 463:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 464:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 472              		.loc 1 464 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		.loc 1 464 1 is_stmt 0 view .LVU83
 477 0000 08B5     		push	{r3, lr}
 478              	.LCFI0:
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 3, -8
 481              		.cfi_offset 14, -4
 465:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check the parameters */
 466:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 482              		.loc 1 466 3 is_stmt 1 view .LVU84
 467:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 483              		.loc 1 467 3 view .LVU85
 468:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 469:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */
 470:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 484              		.loc 1 470 3 view .LVU86
ARM GAS  /tmp/ccNJYCjz.s 			page 35


 485 0002 0F4A     		ldr	r2, .L40
 486 0004 1368     		ldr	r3, [r2]
 487 0006 23F00203 		bic	r3, r3, #2
 488 000a 1360     		str	r3, [r2]
 471:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 472:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator p
 473:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 489              		.loc 1 473 3 view .LVU87
 490 000c 1368     		ldr	r3, [r2]
 491 000e 23F00103 		bic	r3, r3, #1
 492 0012 0343     		orrs	r3, r3, r0
 493 0014 1360     		str	r3, [r2]
 474:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 475:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 476:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 494              		.loc 1 476 3 view .LVU88
 495 0016 0B4A     		ldr	r2, .L40+4
 496 0018 1369     		ldr	r3, [r2, #16]
 497 001a 43F00403 		orr	r3, r3, #4
 498 001e 1361     		str	r3, [r2, #16]
 477:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 478:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 479:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 499              		.loc 1 479 3 view .LVU89
 500              		.loc 1 479 5 is_stmt 0 view .LVU90
 501 0020 0129     		cmp	r1, #1
 502 0022 06D1     		bne	.L37
 480:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 481:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 482:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __WFI();
 503              		.loc 1 482 5 is_stmt 1 view .LVU91
 504              		.syntax unified
 505              	@ 482 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 506 0024 30BF     		wfi
 507              	@ 0 "" 2
 508              	.LVL7:
 509              		.thumb
 510              		.syntax unified
 511              	.L38:
 483:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 484:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   else
 485:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 486:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Request Wait For Event */
 487:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __SEV();
 488:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 489:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 490:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 491:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 492:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 512              		.loc 1 492 3 view .LVU92
 513 0026 074A     		ldr	r2, .L40+4
 514 0028 1369     		ldr	r3, [r2, #16]
 515 002a 23F00403 		bic	r3, r3, #4
 516 002e 1361     		str	r3, [r2, #16]
 493:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 517              		.loc 1 493 1 is_stmt 0 view .LVU93
 518 0030 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccNJYCjz.s 			page 36


 519              	.LVL8:
 520              	.L37:
 487:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 521              		.loc 1 487 5 is_stmt 1 view .LVU94
 522              		.syntax unified
 523              	@ 487 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 524 0032 40BF     		sev
 525              	@ 0 "" 2
 488:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     PWR_OverloadWfe(); /* WFE redefine locally */
 526              		.loc 1 488 5 view .LVU95
 527              		.thumb
 528              		.syntax unified
 529 0034 FFF7FEFF 		bl	PWR_OverloadWfe
 530              	.LVL9:
 489:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 531              		.loc 1 489 5 view .LVU96
 532 0038 FFF7FEFF 		bl	PWR_OverloadWfe
 533              	.LVL10:
 534 003c F3E7     		b	.L38
 535              	.L41:
 536 003e 00BF     		.align	2
 537              	.L40:
 538 0040 00700040 		.word	1073770496
 539 0044 00ED00E0 		.word	-536810240
 540              		.cfi_endproc
 541              	.LFE75:
 543              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 544              		.align	1
 545              		.global	HAL_PWR_EnterSTANDBYMode
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu softvfp
 551              	HAL_PWR_EnterSTANDBYMode:
 552              	.LFB76:
 494:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 495:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 496:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enters Standby mode.
 497:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note  In Standby mode, all I/O pins are high impedance except for:
 498:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - Reset pad (still available) 
 499:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - TAMPER pin if configured for tamper or calibration out.
 500:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *          - WKUP pin (PA0) if enabled.
 501:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 502:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 503:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 504:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 553              		.loc 1 504 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 505:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Select Standby mode */
 506:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 558              		.loc 1 506 3 view .LVU98
 559 0000 054A     		ldr	r2, .L43
 560 0002 1368     		ldr	r3, [r2]
 561 0004 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/ccNJYCjz.s 			page 37


 562 0008 1360     		str	r3, [r2]
 507:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 508:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 509:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 563              		.loc 1 509 3 view .LVU99
 564 000a 044A     		ldr	r2, .L43+4
 565 000c 1369     		ldr	r3, [r2, #16]
 566 000e 43F00403 		orr	r3, r3, #4
 567 0012 1361     		str	r3, [r2, #16]
 510:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 511:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 512:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #if defined ( __CC_ARM)
 513:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __force_stores();
 514:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** #endif
 515:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 516:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   __WFI();
 568              		.loc 1 516 3 view .LVU100
 569              		.syntax unified
 570              	@ 516 "base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c" 1
 571 0014 30BF     		wfi
 572              	@ 0 "" 2
 517:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 573              		.loc 1 517 1 is_stmt 0 view .LVU101
 574              		.thumb
 575              		.syntax unified
 576 0016 7047     		bx	lr
 577              	.L44:
 578              		.align	2
 579              	.L43:
 580 0018 00700040 		.word	1073770496
 581 001c 00ED00E0 		.word	-536810240
 582              		.cfi_endproc
 583              	.LFE76:
 585              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 586              		.align	1
 587              		.global	HAL_PWR_EnableSleepOnExit
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu softvfp
 593              	HAL_PWR_EnableSleepOnExit:
 594              	.LFB77:
 518:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 519:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 520:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 521:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 522:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 523:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 524:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 525:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       interruptions handling.         
 526:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 527:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 528:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 529:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 595              		.loc 1 529 1 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNJYCjz.s 			page 38


 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 530:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 531:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 600              		.loc 1 531 3 view .LVU103
 601 0000 024A     		ldr	r2, .L46
 602 0002 1369     		ldr	r3, [r2, #16]
 603 0004 43F00203 		orr	r3, r3, #2
 604 0008 1361     		str	r3, [r2, #16]
 532:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 605              		.loc 1 532 1 is_stmt 0 view .LVU104
 606 000a 7047     		bx	lr
 607              	.L47:
 608              		.align	2
 609              	.L46:
 610 000c 00ED00E0 		.word	-536810240
 611              		.cfi_endproc
 612              	.LFE77:
 614              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 615              		.align	1
 616              		.global	HAL_PWR_DisableSleepOnExit
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 620              		.fpu softvfp
 622              	HAL_PWR_DisableSleepOnExit:
 623              	.LFB78:
 533:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 534:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 535:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 536:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 537:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 538:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 539:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 540:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 541:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 542:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 624              		.loc 1 542 1 is_stmt 1 view -0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 543:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 544:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 629              		.loc 1 544 3 view .LVU106
 630 0000 024A     		ldr	r2, .L49
 631 0002 1369     		ldr	r3, [r2, #16]
 632 0004 23F00203 		bic	r3, r3, #2
 633 0008 1361     		str	r3, [r2, #16]
 545:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 634              		.loc 1 545 1 is_stmt 0 view .LVU107
 635 000a 7047     		bx	lr
 636              	.L50:
 637              		.align	2
 638              	.L49:
 639 000c 00ED00E0 		.word	-536810240
 640              		.cfi_endproc
ARM GAS  /tmp/ccNJYCjz.s 			page 39


 641              	.LFE78:
 643              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 644              		.align	1
 645              		.global	HAL_PWR_EnableSEVOnPend
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu softvfp
 651              	HAL_PWR_EnableSEVOnPend:
 652              	.LFB79:
 546:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 547:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 548:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 549:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Enables CORTEX M3 SEVONPEND bit. 
 550:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 551:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 552:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 553:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 554:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 555:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 653              		.loc 1 555 1 is_stmt 1 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 556:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 557:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 658              		.loc 1 557 3 view .LVU109
 659 0000 024A     		ldr	r2, .L52
 660 0002 1369     		ldr	r3, [r2, #16]
 661 0004 43F01003 		orr	r3, r3, #16
 662 0008 1361     		str	r3, [r2, #16]
 558:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 663              		.loc 1 558 1 is_stmt 0 view .LVU110
 664 000a 7047     		bx	lr
 665              	.L53:
 666              		.align	2
 667              	.L52:
 668 000c 00ED00E0 		.word	-536810240
 669              		.cfi_endproc
 670              	.LFE79:
 672              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 673              		.align	1
 674              		.global	HAL_PWR_DisableSEVOnPend
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu softvfp
 680              	HAL_PWR_DisableSEVOnPend:
 681              	.LFB80:
 559:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 560:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 561:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 562:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief Disables CORTEX M3 SEVONPEND bit. 
 563:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 564:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 565:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
ARM GAS  /tmp/ccNJYCjz.s 			page 40


 566:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 567:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 568:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 682              		.loc 1 568 1 is_stmt 1 view -0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 569:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 570:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 687              		.loc 1 570 3 view .LVU112
 688 0000 024A     		ldr	r2, .L55
 689 0002 1369     		ldr	r3, [r2, #16]
 690 0004 23F01003 		bic	r3, r3, #16
 691 0008 1361     		str	r3, [r2, #16]
 571:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 692              		.loc 1 571 1 is_stmt 0 view .LVU113
 693 000a 7047     		bx	lr
 694              	.L56:
 695              		.align	2
 696              	.L55:
 697 000c 00ED00E0 		.word	-536810240
 698              		.cfi_endproc
 699              	.LFE80:
 701              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 702              		.align	1
 703              		.weak	HAL_PWR_PVDCallback
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 707              		.fpu softvfp
 709              	HAL_PWR_PVDCallback:
 710              	.LFB82:
 572:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 573:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 574:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 575:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 576:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  This function handles the PWR PVD interrupt request.
 577:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @note   This API should be called under the PVD_IRQHandler().
 578:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
 579:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 580:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 581:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 582:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check PWR exti flag */
 583:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 584:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 585:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 586:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 587:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 588:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 589:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 590:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 591:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 592:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 593:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** /**
 594:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 595:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   * @retval None
ARM GAS  /tmp/ccNJYCjz.s 			page 41


 596:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   */
 597:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 598:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** {
 711              		.loc 1 598 1 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 599:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 600:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 601:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****    */ 
 602:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** }
 716              		.loc 1 602 1 view .LVU115
 717 0000 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE82:
 721              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 722              		.align	1
 723              		.global	HAL_PWR_PVD_IRQHandler
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu softvfp
 729              	HAL_PWR_PVD_IRQHandler:
 730              	.LFB81:
 581:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   /* Check PWR exti flag */
 731              		.loc 1 581 1 view -0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735 0000 08B5     		push	{r3, lr}
 736              	.LCFI1:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 3, -8
 739              		.cfi_offset 14, -4
 583:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 740              		.loc 1 583 3 view .LVU117
 583:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 741              		.loc 1 583 6 is_stmt 0 view .LVU118
 742 0002 064B     		ldr	r3, .L62
 743 0004 5B69     		ldr	r3, [r3, #20]
 583:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   {
 744              		.loc 1 583 5 view .LVU119
 745 0006 13F4803F 		tst	r3, #65536
 746 000a 00D1     		bne	.L61
 747              	.L58:
 591:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 748              		.loc 1 591 1 view .LVU120
 749 000c 08BD     		pop	{r3, pc}
 750              	.L61:
 586:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 751              		.loc 1 586 5 is_stmt 1 view .LVU121
 752 000e FFF7FEFF 		bl	HAL_PWR_PVDCallback
 753              	.LVL11:
 589:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c ****   }
 754              		.loc 1 589 5 view .LVU122
 755 0012 024B     		ldr	r3, .L62
ARM GAS  /tmp/ccNJYCjz.s 			page 42


 756 0014 4FF48032 		mov	r2, #65536
 757 0018 5A61     		str	r2, [r3, #20]
 591:base/chip/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c **** 
 758              		.loc 1 591 1 is_stmt 0 view .LVU123
 759 001a F7E7     		b	.L58
 760              	.L63:
 761              		.align	2
 762              	.L62:
 763 001c 00040140 		.word	1073808384
 764              		.cfi_endproc
 765              	.LFE81:
 767              		.text
 768              	.Letext0:
 769              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 770              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 771              		.file 5 "base/chip/Drivers/CMSIS/Include/core_cm3.h"
 772              		.file 6 "base/chip/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103x6.h"
 773              		.file 7 "base/chip/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 774              		.file 8 "base/chip/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pwr.h"
ARM GAS  /tmp/ccNJYCjz.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_pwr.c
     /tmp/ccNJYCjz.s:16     .text.PWR_OverloadWfe:0000000000000000 $t
     /tmp/ccNJYCjz.s:23     .text.PWR_OverloadWfe:0000000000000000 PWR_OverloadWfe
     /tmp/ccNJYCjz.s:48     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/ccNJYCjz.s:55     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/ccNJYCjz.s:76     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/ccNJYCjz.s:81     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/ccNJYCjz.s:88     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccNJYCjz.s:105    .text.HAL_PWR_EnableBkUpAccess:0000000000000008 $d
     /tmp/ccNJYCjz.s:110    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/ccNJYCjz.s:117    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccNJYCjz.s:134    .text.HAL_PWR_DisableBkUpAccess:0000000000000008 $d
     /tmp/ccNJYCjz.s:139    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/ccNJYCjz.s:146    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/ccNJYCjz.s:233    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/ccNJYCjz.s:239    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/ccNJYCjz.s:246    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/ccNJYCjz.s:263    .text.HAL_PWR_EnablePVD:0000000000000008 $d
     /tmp/ccNJYCjz.s:268    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/ccNJYCjz.s:275    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/ccNJYCjz.s:292    .text.HAL_PWR_DisablePVD:0000000000000008 $d
     /tmp/ccNJYCjz.s:297    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccNJYCjz.s:304    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccNJYCjz.s:345    .text.HAL_PWR_EnableWakeUpPin:0000000000000014 $d
     /tmp/ccNJYCjz.s:350    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccNJYCjz.s:357    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccNJYCjz.s:397    .text.HAL_PWR_DisableWakeUpPin:0000000000000014 $d
     /tmp/ccNJYCjz.s:402    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/ccNJYCjz.s:409    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccNJYCjz.s:457    .text.HAL_PWR_EnterSLEEPMode:000000000000001c $d
     /tmp/ccNJYCjz.s:462    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccNJYCjz.s:469    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/ccNJYCjz.s:538    .text.HAL_PWR_EnterSTOPMode:0000000000000040 $d
     /tmp/ccNJYCjz.s:544    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccNJYCjz.s:551    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccNJYCjz.s:580    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
     /tmp/ccNJYCjz.s:586    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/ccNJYCjz.s:593    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccNJYCjz.s:610    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/ccNJYCjz.s:615    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/ccNJYCjz.s:622    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccNJYCjz.s:639    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/ccNJYCjz.s:644    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/ccNJYCjz.s:651    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccNJYCjz.s:668    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/ccNJYCjz.s:673    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/ccNJYCjz.s:680    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccNJYCjz.s:697    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d
     /tmp/ccNJYCjz.s:702    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/ccNJYCjz.s:709    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
     /tmp/ccNJYCjz.s:722    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
     /tmp/ccNJYCjz.s:729    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
     /tmp/ccNJYCjz.s:763    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d

NO UNDEFINED SYMBOLS
