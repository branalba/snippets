ARM GAS  /tmp/cccNjxhi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"timers.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvGetNextExpireTime:
  24              	.LVL0:
  25              	.LFB16:
  26              		.file 1 "base/os/FreeRTOS/Source/timers.c"
   1:base/os/FreeRTOS/Source/timers.c **** /*
   2:base/os/FreeRTOS/Source/timers.c ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/timers.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/timers.c ****  *
   5:base/os/FreeRTOS/Source/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/timers.c ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/timers.c ****  *
  12:base/os/FreeRTOS/Source/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/timers.c ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/timers.c ****  *
  15:base/os/FreeRTOS/Source/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/timers.c ****  *
  22:base/os/FreeRTOS/Source/timers.c ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/timers.c ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/timers.c ****  *
  25:base/os/FreeRTOS/Source/timers.c ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/timers.c ****  */
  27:base/os/FreeRTOS/Source/timers.c **** 
  28:base/os/FreeRTOS/Source/timers.c **** /* Standard includes. */
  29:base/os/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  30:base/os/FreeRTOS/Source/timers.c **** 
  31:base/os/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:base/os/FreeRTOS/Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/cccNjxhi.s 			page 2


  33:base/os/FreeRTOS/Source/timers.c **** task.h is included from an application file. */
  34:base/os/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:base/os/FreeRTOS/Source/timers.c **** 
  36:base/os/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  37:base/os/FreeRTOS/Source/timers.c **** #include "task.h"
  38:base/os/FreeRTOS/Source/timers.c **** #include "queue.h"
  39:base/os/FreeRTOS/Source/timers.c **** #include "timers.h"
  40:base/os/FreeRTOS/Source/timers.c **** 
  41:base/os/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:base/os/FreeRTOS/Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:base/os/FreeRTOS/Source/timers.c **** #endif
  44:base/os/FreeRTOS/Source/timers.c **** 
  45:base/os/FreeRTOS/Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  46:base/os/FreeRTOS/Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  47:base/os/FreeRTOS/Source/timers.c **** header files above, but not in this file, in order to generate the correct
  48:base/os/FreeRTOS/Source/timers.c **** privileged Vs unprivileged linkage and placement. */
  49:base/os/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  50:base/os/FreeRTOS/Source/timers.c **** 
  51:base/os/FreeRTOS/Source/timers.c **** 
  52:base/os/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:base/os/FreeRTOS/Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:base/os/FreeRTOS/Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:base/os/FreeRTOS/Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:base/os/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:base/os/FreeRTOS/Source/timers.c **** 
  58:base/os/FreeRTOS/Source/timers.c **** /* Misc definitions. */
  59:base/os/FreeRTOS/Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:base/os/FreeRTOS/Source/timers.c **** 
  61:base/os/FreeRTOS/Source/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:base/os/FreeRTOS/Source/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:base/os/FreeRTOS/Source/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:base/os/FreeRTOS/Source/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:base/os/FreeRTOS/Source/timers.c **** #endif
  66:base/os/FreeRTOS/Source/timers.c **** 
  67:base/os/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
  68:base/os/FreeRTOS/Source/timers.c **** typedef struct tmrTimerControl
  69:base/os/FreeRTOS/Source/timers.c **** {
  70:base/os/FreeRTOS/Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  71:base/os/FreeRTOS/Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  72:base/os/FreeRTOS/Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  73:base/os/FreeRTOS/Source/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
  74:base/os/FreeRTOS/Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  75:base/os/FreeRTOS/Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  76:base/os/FreeRTOS/Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  77:base/os/FreeRTOS/Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  78:base/os/FreeRTOS/Source/timers.c **** 	#endif
  79:base/os/FreeRTOS/Source/timers.c **** 
  80:base/os/FreeRTOS/Source/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  81:base/os/FreeRTOS/Source/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
  82:base/os/FreeRTOS/Source/timers.c **** 	#endif
  83:base/os/FreeRTOS/Source/timers.c **** } xTIMER;
  84:base/os/FreeRTOS/Source/timers.c **** 
  85:base/os/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  86:base/os/FreeRTOS/Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
  87:base/os/FreeRTOS/Source/timers.c **** typedef xTIMER Timer_t;
  88:base/os/FreeRTOS/Source/timers.c **** 
  89:base/os/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
ARM GAS  /tmp/cccNjxhi.s 			page 3


  90:base/os/FreeRTOS/Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  91:base/os/FreeRTOS/Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
  92:base/os/FreeRTOS/Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  93:base/os/FreeRTOS/Source/timers.c **** and xCallbackParametersType respectively. */
  94:base/os/FreeRTOS/Source/timers.c **** typedef struct tmrTimerParameters
  95:base/os/FreeRTOS/Source/timers.c **** {
  96:base/os/FreeRTOS/Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  97:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  98:base/os/FreeRTOS/Source/timers.c **** } TimerParameter_t;
  99:base/os/FreeRTOS/Source/timers.c **** 
 100:base/os/FreeRTOS/Source/timers.c **** 
 101:base/os/FreeRTOS/Source/timers.c **** typedef struct tmrCallbackParameters
 102:base/os/FreeRTOS/Source/timers.c **** {
 103:base/os/FreeRTOS/Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 104:base/os/FreeRTOS/Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 105:base/os/FreeRTOS/Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 106:base/os/FreeRTOS/Source/timers.c **** } CallbackParameters_t;
 107:base/os/FreeRTOS/Source/timers.c **** 
 108:base/os/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 109:base/os/FreeRTOS/Source/timers.c **** that is used to determine which message type is valid. */
 110:base/os/FreeRTOS/Source/timers.c **** typedef struct tmrTimerQueueMessage
 111:base/os/FreeRTOS/Source/timers.c **** {
 112:base/os/FreeRTOS/Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 113:base/os/FreeRTOS/Source/timers.c **** 	union
 114:base/os/FreeRTOS/Source/timers.c **** 	{
 115:base/os/FreeRTOS/Source/timers.c **** 		TimerParameter_t xTimerParameters;
 116:base/os/FreeRTOS/Source/timers.c **** 
 117:base/os/FreeRTOS/Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 118:base/os/FreeRTOS/Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 119:base/os/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 120:base/os/FreeRTOS/Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 121:base/os/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 122:base/os/FreeRTOS/Source/timers.c **** 	} u;
 123:base/os/FreeRTOS/Source/timers.c **** } DaemonTaskMessage_t;
 124:base/os/FreeRTOS/Source/timers.c **** 
 125:base/os/FreeRTOS/Source/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 126:base/os/FreeRTOS/Source/timers.c **** which static variables must be declared volatile. */
 127:base/os/FreeRTOS/Source/timers.c **** 
 128:base/os/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 129:base/os/FreeRTOS/Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 130:base/os/FreeRTOS/Source/timers.c **** timer service task is allowed to access these lists. */
 131:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1 = {0};
 132:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2 = {0};
 133:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList = NULL;
 134:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList = NULL;
 135:base/os/FreeRTOS/Source/timers.c **** 
 136:base/os/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 137:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 138:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 139:base/os/FreeRTOS/Source/timers.c **** 
 140:base/os/FreeRTOS/Source/timers.c **** /*lint -restore */
 141:base/os/FreeRTOS/Source/timers.c **** 
 142:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 143:base/os/FreeRTOS/Source/timers.c **** 
 144:base/os/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 145:base/os/FreeRTOS/Source/timers.c **** 
 146:base/os/FreeRTOS/Source/timers.c **** 	/* If static allocation is supported then the application must provide the
ARM GAS  /tmp/cccNjxhi.s 			page 4


 147:base/os/FreeRTOS/Source/timers.c **** 	following callback function - which enables the application to optionally
 148:base/os/FreeRTOS/Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 149:base/os/FreeRTOS/Source/timers.c **** 	and TCB. */
 150:base/os/FreeRTOS/Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 151:base/os/FreeRTOS/Source/timers.c **** 
 152:base/os/FreeRTOS/Source/timers.c **** #endif
 153:base/os/FreeRTOS/Source/timers.c **** 
 154:base/os/FreeRTOS/Source/timers.c **** /*
 155:base/os/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 156:base/os/FreeRTOS/Source/timers.c ****  * been initialised already.
 157:base/os/FreeRTOS/Source/timers.c ****  */
 158:base/os/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 159:base/os/FreeRTOS/Source/timers.c **** 
 160:base/os/FreeRTOS/Source/timers.c **** /*
 161:base/os/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 162:base/os/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 163:base/os/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 164:base/os/FreeRTOS/Source/timers.c ****  */
 165:base/os/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 166:base/os/FreeRTOS/Source/timers.c **** 
 167:base/os/FreeRTOS/Source/timers.c **** /*
 168:base/os/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 169:base/os/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 170:base/os/FreeRTOS/Source/timers.c ****  */
 171:base/os/FreeRTOS/Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 172:base/os/FreeRTOS/Source/timers.c **** 
 173:base/os/FreeRTOS/Source/timers.c **** /*
 174:base/os/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 175:base/os/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 176:base/os/FreeRTOS/Source/timers.c ****  */
 177:base/os/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 178:base/os/FreeRTOS/Source/timers.c **** 
 179:base/os/FreeRTOS/Source/timers.c **** /*
 180:base/os/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 181:base/os/FreeRTOS/Source/timers.c ****  * auto reload timer, then call its callback.
 182:base/os/FreeRTOS/Source/timers.c ****  */
 183:base/os/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 184:base/os/FreeRTOS/Source/timers.c **** 
 185:base/os/FreeRTOS/Source/timers.c **** /*
 186:base/os/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 187:base/os/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 188:base/os/FreeRTOS/Source/timers.c ****  */
 189:base/os/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 190:base/os/FreeRTOS/Source/timers.c **** 
 191:base/os/FreeRTOS/Source/timers.c **** /*
 192:base/os/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 193:base/os/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 194:base/os/FreeRTOS/Source/timers.c ****  */
 195:base/os/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 196:base/os/FreeRTOS/Source/timers.c **** 
 197:base/os/FreeRTOS/Source/timers.c **** /*
 198:base/os/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 199:base/os/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 200:base/os/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 201:base/os/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 202:base/os/FreeRTOS/Source/timers.c ****  */
 203:base/os/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/cccNjxhi.s 			page 5


 204:base/os/FreeRTOS/Source/timers.c **** 
 205:base/os/FreeRTOS/Source/timers.c **** /*
 206:base/os/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 207:base/os/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 208:base/os/FreeRTOS/Source/timers.c ****  */
 209:base/os/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 210:base/os/FreeRTOS/Source/timers.c **** 
 211:base/os/FreeRTOS/Source/timers.c **** /*
 212:base/os/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 213:base/os/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 214:base/os/FreeRTOS/Source/timers.c ****  */
 215:base/os/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 216:base/os/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 217:base/os/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 218:base/os/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 219:base/os/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 220:base/os/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 221:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 222:base/os/FreeRTOS/Source/timers.c **** 
 223:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 224:base/os/FreeRTOS/Source/timers.c **** {
 225:base/os/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 226:base/os/FreeRTOS/Source/timers.c **** 
 227:base/os/FreeRTOS/Source/timers.c **** 	/* This function is called when the scheduler is started if
 228:base/os/FreeRTOS/Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 229:base/os/FreeRTOS/Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 230:base/os/FreeRTOS/Source/timers.c **** 	been created then the initialisation will already have been performed. */
 231:base/os/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
 232:base/os/FreeRTOS/Source/timers.c **** 
 233:base/os/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 234:base/os/FreeRTOS/Source/timers.c **** 	{
 235:base/os/FreeRTOS/Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 236:base/os/FreeRTOS/Source/timers.c **** 		{
 237:base/os/FreeRTOS/Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 238:base/os/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 239:base/os/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 240:base/os/FreeRTOS/Source/timers.c **** 
 241:base/os/FreeRTOS/Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 242:base/os/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 243:base/os/FreeRTOS/Source/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 244:base/os/FreeRTOS/Source/timers.c **** 													ulTimerTaskStackSize,
 245:base/os/FreeRTOS/Source/timers.c **** 													NULL,
 246:base/os/FreeRTOS/Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 247:base/os/FreeRTOS/Source/timers.c **** 													pxTimerTaskStackBuffer,
 248:base/os/FreeRTOS/Source/timers.c **** 													pxTimerTaskTCBBuffer );
 249:base/os/FreeRTOS/Source/timers.c **** 
 250:base/os/FreeRTOS/Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 251:base/os/FreeRTOS/Source/timers.c **** 			{
 252:base/os/FreeRTOS/Source/timers.c **** 				xReturn = pdPASS;
 253:base/os/FreeRTOS/Source/timers.c **** 			}
 254:base/os/FreeRTOS/Source/timers.c **** 		}
 255:base/os/FreeRTOS/Source/timers.c **** 		#else
 256:base/os/FreeRTOS/Source/timers.c **** 		{
 257:base/os/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 258:base/os/FreeRTOS/Source/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 259:base/os/FreeRTOS/Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 260:base/os/FreeRTOS/Source/timers.c **** 									NULL,
ARM GAS  /tmp/cccNjxhi.s 			page 6


 261:base/os/FreeRTOS/Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 262:base/os/FreeRTOS/Source/timers.c **** 									&xTimerTaskHandle );
 263:base/os/FreeRTOS/Source/timers.c **** 		}
 264:base/os/FreeRTOS/Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 265:base/os/FreeRTOS/Source/timers.c **** 	}
 266:base/os/FreeRTOS/Source/timers.c **** 	else
 267:base/os/FreeRTOS/Source/timers.c **** 	{
 268:base/os/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 269:base/os/FreeRTOS/Source/timers.c **** 	}
 270:base/os/FreeRTOS/Source/timers.c **** 
 271:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 272:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 273:base/os/FreeRTOS/Source/timers.c **** }
 274:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 275:base/os/FreeRTOS/Source/timers.c **** 
 276:base/os/FreeRTOS/Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 277:base/os/FreeRTOS/Source/timers.c **** 
 278:base/os/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 279:base/os/FreeRTOS/Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 280:base/os/FreeRTOS/Source/timers.c **** 								const UBaseType_t uxAutoReload,
 281:base/os/FreeRTOS/Source/timers.c **** 								void * const pvTimerID,
 282:base/os/FreeRTOS/Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 283:base/os/FreeRTOS/Source/timers.c **** 	{
 284:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 285:base/os/FreeRTOS/Source/timers.c **** 
 286:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 287:base/os/FreeRTOS/Source/timers.c **** 
 288:base/os/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 289:base/os/FreeRTOS/Source/timers.c **** 		{
 290:base/os/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 291:base/os/FreeRTOS/Source/timers.c **** 
 292:base/os/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 293:base/os/FreeRTOS/Source/timers.c **** 			{
 294:base/os/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 295:base/os/FreeRTOS/Source/timers.c **** 				timer was created dynamically in case the timer is later
 296:base/os/FreeRTOS/Source/timers.c **** 				deleted. */
 297:base/os/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 298:base/os/FreeRTOS/Source/timers.c **** 			}
 299:base/os/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 300:base/os/FreeRTOS/Source/timers.c **** 		}
 301:base/os/FreeRTOS/Source/timers.c **** 
 302:base/os/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 303:base/os/FreeRTOS/Source/timers.c **** 	}
 304:base/os/FreeRTOS/Source/timers.c **** 
 305:base/os/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 306:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 307:base/os/FreeRTOS/Source/timers.c **** 
 308:base/os/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:base/os/FreeRTOS/Source/timers.c **** 
 310:base/os/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 311:base/os/FreeRTOS/Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 312:base/os/FreeRTOS/Source/timers.c **** 										const UBaseType_t uxAutoReload,
 313:base/os/FreeRTOS/Source/timers.c **** 										void * const pvTimerID,
 314:base/os/FreeRTOS/Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 315:base/os/FreeRTOS/Source/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 316:base/os/FreeRTOS/Source/timers.c **** 	{
 317:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
ARM GAS  /tmp/cccNjxhi.s 			page 7


 318:base/os/FreeRTOS/Source/timers.c **** 
 319:base/os/FreeRTOS/Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 320:base/os/FreeRTOS/Source/timers.c **** 		{
 321:base/os/FreeRTOS/Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 322:base/os/FreeRTOS/Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 323:base/os/FreeRTOS/Source/timers.c **** 			structure. */
 324:base/os/FreeRTOS/Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 325:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 326:base/os/FreeRTOS/Source/timers.c **** 		}
 327:base/os/FreeRTOS/Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:base/os/FreeRTOS/Source/timers.c **** 
 329:base/os/FreeRTOS/Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:base/os/FreeRTOS/Source/timers.c **** 		configASSERT( pxTimerBuffer );
 331:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 332:base/os/FreeRTOS/Source/timers.c **** 
 333:base/os/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 334:base/os/FreeRTOS/Source/timers.c **** 		{
 335:base/os/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 336:base/os/FreeRTOS/Source/timers.c **** 
 337:base/os/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 338:base/os/FreeRTOS/Source/timers.c **** 			{
 339:base/os/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically so note this
 340:base/os/FreeRTOS/Source/timers.c **** 				timer was created statically in case it is later deleted. */
 341:base/os/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 342:base/os/FreeRTOS/Source/timers.c **** 			}
 343:base/os/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 344:base/os/FreeRTOS/Source/timers.c **** 		}
 345:base/os/FreeRTOS/Source/timers.c **** 
 346:base/os/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 347:base/os/FreeRTOS/Source/timers.c **** 	}
 348:base/os/FreeRTOS/Source/timers.c **** 
 349:base/os/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 350:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 351:base/os/FreeRTOS/Source/timers.c **** 
 352:base/os/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 353:base/os/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 354:base/os/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 355:base/os/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 356:base/os/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 357:base/os/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer )
 358:base/os/FreeRTOS/Source/timers.c **** {
 359:base/os/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 360:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 361:base/os/FreeRTOS/Source/timers.c **** 
 362:base/os/FreeRTOS/Source/timers.c **** 	if( pxNewTimer != NULL )
 363:base/os/FreeRTOS/Source/timers.c **** 	{
 364:base/os/FreeRTOS/Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 365:base/os/FreeRTOS/Source/timers.c **** 		created/initialised. */
 366:base/os/FreeRTOS/Source/timers.c **** 		prvCheckForValidListAndQueue();
 367:base/os/FreeRTOS/Source/timers.c **** 
 368:base/os/FreeRTOS/Source/timers.c **** 		/* Initialise the timer structure members using the function
 369:base/os/FreeRTOS/Source/timers.c **** 		parameters. */
 370:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 371:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 372:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 373:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 374:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
ARM GAS  /tmp/cccNjxhi.s 			page 8


 375:base/os/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 376:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:base/os/FreeRTOS/Source/timers.c **** 	}
 378:base/os/FreeRTOS/Source/timers.c **** }
 379:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 380:base/os/FreeRTOS/Source/timers.c **** 
 381:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:base/os/FreeRTOS/Source/timers.c **** {
 383:base/os/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 384:base/os/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 385:base/os/FreeRTOS/Source/timers.c **** 
 386:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 387:base/os/FreeRTOS/Source/timers.c **** 
 388:base/os/FreeRTOS/Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:base/os/FreeRTOS/Source/timers.c **** 	on a particular timer definition. */
 390:base/os/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 391:base/os/FreeRTOS/Source/timers.c **** 	{
 392:base/os/FreeRTOS/Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:base/os/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 394:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 395:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 396:base/os/FreeRTOS/Source/timers.c **** 
 397:base/os/FreeRTOS/Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 398:base/os/FreeRTOS/Source/timers.c **** 		{
 399:base/os/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 400:base/os/FreeRTOS/Source/timers.c **** 			{
 401:base/os/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 402:base/os/FreeRTOS/Source/timers.c **** 			}
 403:base/os/FreeRTOS/Source/timers.c **** 			else
 404:base/os/FreeRTOS/Source/timers.c **** 			{
 405:base/os/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 406:base/os/FreeRTOS/Source/timers.c **** 			}
 407:base/os/FreeRTOS/Source/timers.c **** 		}
 408:base/os/FreeRTOS/Source/timers.c **** 		else
 409:base/os/FreeRTOS/Source/timers.c **** 		{
 410:base/os/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 411:base/os/FreeRTOS/Source/timers.c **** 		}
 412:base/os/FreeRTOS/Source/timers.c **** 
 413:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:base/os/FreeRTOS/Source/timers.c **** 	}
 415:base/os/FreeRTOS/Source/timers.c **** 	else
 416:base/os/FreeRTOS/Source/timers.c **** 	{
 417:base/os/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:base/os/FreeRTOS/Source/timers.c **** 	}
 419:base/os/FreeRTOS/Source/timers.c **** 
 420:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 421:base/os/FreeRTOS/Source/timers.c **** }
 422:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 423:base/os/FreeRTOS/Source/timers.c **** 
 424:base/os/FreeRTOS/Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:base/os/FreeRTOS/Source/timers.c **** {
 426:base/os/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:base/os/FreeRTOS/Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 429:base/os/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 430:base/os/FreeRTOS/Source/timers.c **** }
 431:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cccNjxhi.s 			page 9


 432:base/os/FreeRTOS/Source/timers.c **** 
 433:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:base/os/FreeRTOS/Source/timers.c **** {
 435:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 436:base/os/FreeRTOS/Source/timers.c **** 
 437:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 438:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 439:base/os/FreeRTOS/Source/timers.c **** }
 440:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 441:base/os/FreeRTOS/Source/timers.c **** 
 442:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 443:base/os/FreeRTOS/Source/timers.c **** {
 444:base/os/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 445:base/os/FreeRTOS/Source/timers.c **** TickType_t xReturn;
 446:base/os/FreeRTOS/Source/timers.c **** 
 447:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 448:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 449:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 450:base/os/FreeRTOS/Source/timers.c **** }
 451:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 452:base/os/FreeRTOS/Source/timers.c **** 
 453:base/os/FreeRTOS/Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 454:base/os/FreeRTOS/Source/timers.c **** {
 455:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 456:base/os/FreeRTOS/Source/timers.c **** 
 457:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 458:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 459:base/os/FreeRTOS/Source/timers.c **** }
 460:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 461:base/os/FreeRTOS/Source/timers.c **** 
 462:base/os/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 463:base/os/FreeRTOS/Source/timers.c **** {
 464:base/os/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 465:base/os/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 466:base/os/FreeRTOS/Source/timers.c **** 
 467:base/os/FreeRTOS/Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 468:base/os/FreeRTOS/Source/timers.c **** 	been performed to ensure the list is not empty. */
 469:base/os/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 470:base/os/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 471:base/os/FreeRTOS/Source/timers.c **** 
 472:base/os/FreeRTOS/Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 473:base/os/FreeRTOS/Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 474:base/os/FreeRTOS/Source/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 475:base/os/FreeRTOS/Source/timers.c **** 	{
 476:base/os/FreeRTOS/Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 477:base/os/FreeRTOS/Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 478:base/os/FreeRTOS/Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 479:base/os/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 480:base/os/FreeRTOS/Source/timers.c **** 		{
 481:base/os/FreeRTOS/Source/timers.c **** 			/* The timer expired before it was added to the active timer
 482:base/os/FreeRTOS/Source/timers.c **** 			list.  Reload it now.  */
 483:base/os/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 484:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 485:base/os/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 486:base/os/FreeRTOS/Source/timers.c **** 		}
 487:base/os/FreeRTOS/Source/timers.c **** 		else
 488:base/os/FreeRTOS/Source/timers.c **** 		{
ARM GAS  /tmp/cccNjxhi.s 			page 10


 489:base/os/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 490:base/os/FreeRTOS/Source/timers.c **** 		}
 491:base/os/FreeRTOS/Source/timers.c **** 	}
 492:base/os/FreeRTOS/Source/timers.c **** 	else
 493:base/os/FreeRTOS/Source/timers.c **** 	{
 494:base/os/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 495:base/os/FreeRTOS/Source/timers.c **** 	}
 496:base/os/FreeRTOS/Source/timers.c **** 
 497:base/os/FreeRTOS/Source/timers.c **** 	/* Call the timer callback. */
 498:base/os/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 499:base/os/FreeRTOS/Source/timers.c **** }
 500:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 501:base/os/FreeRTOS/Source/timers.c **** 
 502:base/os/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters )
 503:base/os/FreeRTOS/Source/timers.c **** {
 504:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 505:base/os/FreeRTOS/Source/timers.c **** BaseType_t xListWasEmpty;
 506:base/os/FreeRTOS/Source/timers.c **** 
 507:base/os/FreeRTOS/Source/timers.c **** 	/* Just to avoid compiler warnings. */
 508:base/os/FreeRTOS/Source/timers.c **** 	( void ) pvParameters;
 509:base/os/FreeRTOS/Source/timers.c **** 
 510:base/os/FreeRTOS/Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 511:base/os/FreeRTOS/Source/timers.c **** 	{
 512:base/os/FreeRTOS/Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 513:base/os/FreeRTOS/Source/timers.c **** 
 514:base/os/FreeRTOS/Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 515:base/os/FreeRTOS/Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 516:base/os/FreeRTOS/Source/timers.c **** 		application includes initialisation code that would benefit from
 517:base/os/FreeRTOS/Source/timers.c **** 		executing after the scheduler has been started. */
 518:base/os/FreeRTOS/Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 519:base/os/FreeRTOS/Source/timers.c **** 	}
 520:base/os/FreeRTOS/Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 521:base/os/FreeRTOS/Source/timers.c **** 
 522:base/os/FreeRTOS/Source/timers.c **** 	for( ;; )
 523:base/os/FreeRTOS/Source/timers.c **** 	{
 524:base/os/FreeRTOS/Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 525:base/os/FreeRTOS/Source/timers.c **** 		obtain the time at which the next timer will expire. */
 526:base/os/FreeRTOS/Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 527:base/os/FreeRTOS/Source/timers.c **** 
 528:base/os/FreeRTOS/Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 529:base/os/FreeRTOS/Source/timers.c **** 		until either a timer does expire, or a command is received. */
 530:base/os/FreeRTOS/Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 531:base/os/FreeRTOS/Source/timers.c **** 
 532:base/os/FreeRTOS/Source/timers.c **** 		/* Empty the command queue. */
 533:base/os/FreeRTOS/Source/timers.c **** 		prvProcessReceivedCommands();
 534:base/os/FreeRTOS/Source/timers.c **** 	}
 535:base/os/FreeRTOS/Source/timers.c **** }
 536:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 537:base/os/FreeRTOS/Source/timers.c **** 
 538:base/os/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 539:base/os/FreeRTOS/Source/timers.c **** {
 540:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 541:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 542:base/os/FreeRTOS/Source/timers.c **** 
 543:base/os/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 544:base/os/FreeRTOS/Source/timers.c **** 	{
 545:base/os/FreeRTOS/Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
ARM GAS  /tmp/cccNjxhi.s 			page 11


 546:base/os/FreeRTOS/Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 547:base/os/FreeRTOS/Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 548:base/os/FreeRTOS/Source/timers.c **** 		when the lists were switched will have been processed within the
 549:base/os/FreeRTOS/Source/timers.c **** 		prvSampleTimeNow() function. */
 550:base/os/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 551:base/os/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 552:base/os/FreeRTOS/Source/timers.c **** 		{
 553:base/os/FreeRTOS/Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 554:base/os/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 555:base/os/FreeRTOS/Source/timers.c **** 			{
 556:base/os/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 557:base/os/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 558:base/os/FreeRTOS/Source/timers.c **** 			}
 559:base/os/FreeRTOS/Source/timers.c **** 			else
 560:base/os/FreeRTOS/Source/timers.c **** 			{
 561:base/os/FreeRTOS/Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 562:base/os/FreeRTOS/Source/timers.c **** 				time has not been reached yet.  This task should therefore
 563:base/os/FreeRTOS/Source/timers.c **** 				block to wait for the next expire time or a command to be
 564:base/os/FreeRTOS/Source/timers.c **** 				received - whichever comes first.  The following line cannot
 565:base/os/FreeRTOS/Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 566:base/os/FreeRTOS/Source/timers.c **** 				case when the current timer list is empty. */
 567:base/os/FreeRTOS/Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
 568:base/os/FreeRTOS/Source/timers.c **** 				{
 569:base/os/FreeRTOS/Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 570:base/os/FreeRTOS/Source/timers.c **** 					also empty? */
 571:base/os/FreeRTOS/Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 572:base/os/FreeRTOS/Source/timers.c **** 				}
 573:base/os/FreeRTOS/Source/timers.c **** 
 574:base/os/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 575:base/os/FreeRTOS/Source/timers.c **** 
 576:base/os/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 577:base/os/FreeRTOS/Source/timers.c **** 				{
 578:base/os/FreeRTOS/Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 579:base/os/FreeRTOS/Source/timers.c **** 					block time to expire.  If a command arrived between the
 580:base/os/FreeRTOS/Source/timers.c **** 					critical section being exited and this yield then the yield
 581:base/os/FreeRTOS/Source/timers.c **** 					will not cause the task to block. */
 582:base/os/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 583:base/os/FreeRTOS/Source/timers.c **** 				}
 584:base/os/FreeRTOS/Source/timers.c **** 				else
 585:base/os/FreeRTOS/Source/timers.c **** 				{
 586:base/os/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 587:base/os/FreeRTOS/Source/timers.c **** 				}
 588:base/os/FreeRTOS/Source/timers.c **** 			}
 589:base/os/FreeRTOS/Source/timers.c **** 		}
 590:base/os/FreeRTOS/Source/timers.c **** 		else
 591:base/os/FreeRTOS/Source/timers.c **** 		{
 592:base/os/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 593:base/os/FreeRTOS/Source/timers.c **** 		}
 594:base/os/FreeRTOS/Source/timers.c **** 	}
 595:base/os/FreeRTOS/Source/timers.c **** }
 596:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 597:base/os/FreeRTOS/Source/timers.c **** 
 598:base/os/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 599:base/os/FreeRTOS/Source/timers.c **** {
  27              		.loc 1 599 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cccNjxhi.s 			page 12


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 600:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
  32              		.loc 1 600 1 view .LVU1
 601:base/os/FreeRTOS/Source/timers.c **** 
 602:base/os/FreeRTOS/Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 603:base/os/FreeRTOS/Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 604:base/os/FreeRTOS/Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 605:base/os/FreeRTOS/Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 606:base/os/FreeRTOS/Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 607:base/os/FreeRTOS/Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 608:base/os/FreeRTOS/Source/timers.c **** 	re-assessed.  */
 609:base/os/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 609 2 view .LVU2
  34              		.loc 1 609 20 is_stmt 0 view .LVU3
  35 0000 064B     		ldr	r3, .L4
  36 0002 1A68     		ldr	r2, [r3]
  37 0004 1368     		ldr	r3, [r2]
  38 0006 B3FA83F3 		clz	r3, r3
  39 000a 5B09     		lsrs	r3, r3, #5
  40              		.loc 1 609 18 view .LVU4
  41 000c 0360     		str	r3, [r0]
 610:base/os/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  42              		.loc 1 610 2 is_stmt 1 view .LVU5
  43              		.loc 1 610 4 is_stmt 0 view .LVU6
  44 000e 13B9     		cbnz	r3, .L3
 611:base/os/FreeRTOS/Source/timers.c **** 	{
 612:base/os/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  45              		.loc 1 612 3 is_stmt 1 view .LVU7
  46              		.loc 1 612 21 is_stmt 0 view .LVU8
  47 0010 D368     		ldr	r3, [r2, #12]
  48              		.loc 1 612 19 view .LVU9
  49 0012 1868     		ldr	r0, [r3]
  50              	.LVL1:
  51              		.loc 1 612 19 view .LVU10
  52 0014 7047     		bx	lr
  53              	.LVL2:
  54              	.L3:
 613:base/os/FreeRTOS/Source/timers.c **** 	}
 614:base/os/FreeRTOS/Source/timers.c **** 	else
 615:base/os/FreeRTOS/Source/timers.c **** 	{
 616:base/os/FreeRTOS/Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 617:base/os/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  55              		.loc 1 617 19 view .LVU11
  56 0016 0020     		movs	r0, #0
  57              	.LVL3:
 618:base/os/FreeRTOS/Source/timers.c **** 	}
 619:base/os/FreeRTOS/Source/timers.c **** 
 620:base/os/FreeRTOS/Source/timers.c **** 	return xNextExpireTime;
  58              		.loc 1 620 2 is_stmt 1 view .LVU12
 621:base/os/FreeRTOS/Source/timers.c **** }
  59              		.loc 1 621 1 is_stmt 0 view .LVU13
  60 0018 7047     		bx	lr
  61              	.L5:
  62 001a 00BF     		.align	2
  63              	.L4:
  64 001c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cccNjxhi.s 			page 13


  65              		.cfi_endproc
  66              	.LFE16:
  68              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	prvInsertTimerInActiveList:
  76              	.LVL4:
  77              	.LFB18:
 622:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 623:base/os/FreeRTOS/Source/timers.c **** 
 624:base/os/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 625:base/os/FreeRTOS/Source/timers.c **** {
 626:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 627:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 628:base/os/FreeRTOS/Source/timers.c **** 
 629:base/os/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 630:base/os/FreeRTOS/Source/timers.c **** 
 631:base/os/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 632:base/os/FreeRTOS/Source/timers.c **** 	{
 633:base/os/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists();
 634:base/os/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 635:base/os/FreeRTOS/Source/timers.c **** 	}
 636:base/os/FreeRTOS/Source/timers.c **** 	else
 637:base/os/FreeRTOS/Source/timers.c **** 	{
 638:base/os/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 639:base/os/FreeRTOS/Source/timers.c **** 	}
 640:base/os/FreeRTOS/Source/timers.c **** 
 641:base/os/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
 642:base/os/FreeRTOS/Source/timers.c **** 
 643:base/os/FreeRTOS/Source/timers.c **** 	return xTimeNow;
 644:base/os/FreeRTOS/Source/timers.c **** }
 645:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 646:base/os/FreeRTOS/Source/timers.c **** 
 647:base/os/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 648:base/os/FreeRTOS/Source/timers.c **** {
  78              		.loc 1 648 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		.loc 1 648 1 is_stmt 0 view .LVU15
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
 649:base/os/FreeRTOS/Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
  88              		.loc 1 649 1 is_stmt 1 view .LVU16
  89              	.LVL5:
 650:base/os/FreeRTOS/Source/timers.c **** 
 651:base/os/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  90              		.loc 1 651 2 view .LVU17
  91 0002 4160     		str	r1, [r0, #4]
 652:base/os/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  92              		.loc 1 652 2 view .LVU18
ARM GAS  /tmp/cccNjxhi.s 			page 14


  93 0004 0061     		str	r0, [r0, #16]
 653:base/os/FreeRTOS/Source/timers.c **** 
 654:base/os/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  94              		.loc 1 654 2 view .LVU19
  95              		.loc 1 654 4 is_stmt 0 view .LVU20
  96 0006 9142     		cmp	r1, r2
  97 0008 0CD8     		bhi	.L7
 655:base/os/FreeRTOS/Source/timers.c **** 	{
 656:base/os/FreeRTOS/Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 657:base/os/FreeRTOS/Source/timers.c **** 		timer was issued, and the time the command was processed? */
 658:base/os/FreeRTOS/Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
  98              		.loc 1 658 3 is_stmt 1 view .LVU21
  99              		.loc 1 658 35 is_stmt 0 view .LVU22
 100 000a D21A     		subs	r2, r2, r3
 101              	.LVL6:
 102              		.loc 1 658 64 view .LVU23
 103 000c 8369     		ldr	r3, [r0, #24]
 104              	.LVL7:
 105              		.loc 1 658 5 view .LVU24
 106 000e 9A42     		cmp	r2, r3
 107 0010 01D3     		bcc	.L13
 659:base/os/FreeRTOS/Source/timers.c **** 		{
 660:base/os/FreeRTOS/Source/timers.c **** 			/* The time between a command being issued and the command being
 661:base/os/FreeRTOS/Source/timers.c **** 			processed actually exceeds the timers period.  */
 662:base/os/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 108              		.loc 1 662 21 view .LVU25
 109 0012 0120     		movs	r0, #1
 110              	.LVL8:
 111              	.L6:
 663:base/os/FreeRTOS/Source/timers.c **** 		}
 664:base/os/FreeRTOS/Source/timers.c **** 		else
 665:base/os/FreeRTOS/Source/timers.c **** 		{
 666:base/os/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 667:base/os/FreeRTOS/Source/timers.c **** 		}
 668:base/os/FreeRTOS/Source/timers.c **** 	}
 669:base/os/FreeRTOS/Source/timers.c **** 	else
 670:base/os/FreeRTOS/Source/timers.c **** 	{
 671:base/os/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 672:base/os/FreeRTOS/Source/timers.c **** 		{
 673:base/os/FreeRTOS/Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 674:base/os/FreeRTOS/Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 675:base/os/FreeRTOS/Source/timers.c **** 			its expiry time and should be processed immediately. */
 676:base/os/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 677:base/os/FreeRTOS/Source/timers.c **** 		}
 678:base/os/FreeRTOS/Source/timers.c **** 		else
 679:base/os/FreeRTOS/Source/timers.c **** 		{
 680:base/os/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 681:base/os/FreeRTOS/Source/timers.c **** 		}
 682:base/os/FreeRTOS/Source/timers.c **** 	}
 683:base/os/FreeRTOS/Source/timers.c **** 
 684:base/os/FreeRTOS/Source/timers.c **** 	return xProcessTimerNow;
 685:base/os/FreeRTOS/Source/timers.c **** }
 112              		.loc 1 685 1 view .LVU26
 113 0014 08BD     		pop	{r3, pc}
 114              	.LVL9:
 115              	.L13:
 666:base/os/FreeRTOS/Source/timers.c **** 		}
ARM GAS  /tmp/cccNjxhi.s 			page 15


 116              		.loc 1 666 4 is_stmt 1 view .LVU27
 117 0016 011D     		adds	r1, r0, #4
 118              	.LVL10:
 666:base/os/FreeRTOS/Source/timers.c **** 		}
 119              		.loc 1 666 4 is_stmt 0 view .LVU28
 120 0018 094B     		ldr	r3, .L14
 121 001a 1868     		ldr	r0, [r3]
 122              	.LVL11:
 666:base/os/FreeRTOS/Source/timers.c **** 		}
 123              		.loc 1 666 4 view .LVU29
 124 001c FFF7FEFF 		bl	vListInsert
 125              	.LVL12:
 649:base/os/FreeRTOS/Source/timers.c **** 
 126              		.loc 1 649 12 view .LVU30
 127 0020 0020     		movs	r0, #0
 128 0022 F7E7     		b	.L6
 129              	.LVL13:
 130              	.L7:
 671:base/os/FreeRTOS/Source/timers.c **** 		{
 131              		.loc 1 671 3 is_stmt 1 view .LVU31
 671:base/os/FreeRTOS/Source/timers.c **** 		{
 132              		.loc 1 671 5 is_stmt 0 view .LVU32
 133 0024 9A42     		cmp	r2, r3
 134 0026 01D2     		bcs	.L9
 671:base/os/FreeRTOS/Source/timers.c **** 		{
 135              		.loc 1 671 35 discriminator 1 view .LVU33
 136 0028 9942     		cmp	r1, r3
 137 002a 06D2     		bcs	.L11
 138              	.L9:
 680:base/os/FreeRTOS/Source/timers.c **** 		}
 139              		.loc 1 680 4 is_stmt 1 view .LVU34
 140 002c 011D     		adds	r1, r0, #4
 141              	.LVL14:
 680:base/os/FreeRTOS/Source/timers.c **** 		}
 142              		.loc 1 680 4 is_stmt 0 view .LVU35
 143 002e 054B     		ldr	r3, .L14+4
 144              	.LVL15:
 680:base/os/FreeRTOS/Source/timers.c **** 		}
 145              		.loc 1 680 4 view .LVU36
 146 0030 1868     		ldr	r0, [r3]
 147              	.LVL16:
 680:base/os/FreeRTOS/Source/timers.c **** 		}
 148              		.loc 1 680 4 view .LVU37
 149 0032 FFF7FEFF 		bl	vListInsert
 150              	.LVL17:
 649:base/os/FreeRTOS/Source/timers.c **** 
 151              		.loc 1 649 12 view .LVU38
 152 0036 0020     		movs	r0, #0
 153 0038 ECE7     		b	.L6
 154              	.LVL18:
 155              	.L11:
 676:base/os/FreeRTOS/Source/timers.c **** 		}
 156              		.loc 1 676 21 view .LVU39
 157 003a 0120     		movs	r0, #1
 158              	.LVL19:
 684:base/os/FreeRTOS/Source/timers.c **** }
 159              		.loc 1 684 2 is_stmt 1 view .LVU40
ARM GAS  /tmp/cccNjxhi.s 			page 16


 684:base/os/FreeRTOS/Source/timers.c **** }
 160              		.loc 1 684 9 is_stmt 0 view .LVU41
 161 003c EAE7     		b	.L6
 162              	.L15:
 163 003e 00BF     		.align	2
 164              	.L14:
 165 0040 00000000 		.word	.LANCHOR1
 166 0044 00000000 		.word	.LANCHOR0
 167              		.cfi_endproc
 168              	.LFE18:
 170              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 171              		.align	2
 172              	.LC0:
 173 0000 546D7251 		.ascii	"TmrQ\000"
 173      00
 174              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	prvCheckForValidListAndQueue:
 182              	.LFB21:
 686:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 687:base/os/FreeRTOS/Source/timers.c **** 
 688:base/os/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void )
 689:base/os/FreeRTOS/Source/timers.c **** {
 690:base/os/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 691:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 692:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 693:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 694:base/os/FreeRTOS/Source/timers.c **** 
 695:base/os/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 696:base/os/FreeRTOS/Source/timers.c **** 	{
 697:base/os/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 698:base/os/FreeRTOS/Source/timers.c **** 		{
 699:base/os/FreeRTOS/Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 700:base/os/FreeRTOS/Source/timers.c **** 			commands. */
 701:base/os/FreeRTOS/Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 702:base/os/FreeRTOS/Source/timers.c **** 			{
 703:base/os/FreeRTOS/Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 704:base/os/FreeRTOS/Source/timers.c **** 
 705:base/os/FreeRTOS/Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 706:base/os/FreeRTOS/Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 707:base/os/FreeRTOS/Source/timers.c **** 				configASSERT( pxCallback );
 708:base/os/FreeRTOS/Source/timers.c **** 
 709:base/os/FreeRTOS/Source/timers.c **** 				/* Call the function. */
 710:base/os/FreeRTOS/Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 711:base/os/FreeRTOS/Source/timers.c **** 			}
 712:base/os/FreeRTOS/Source/timers.c **** 			else
 713:base/os/FreeRTOS/Source/timers.c **** 			{
 714:base/os/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 715:base/os/FreeRTOS/Source/timers.c **** 			}
 716:base/os/FreeRTOS/Source/timers.c **** 		}
 717:base/os/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 718:base/os/FreeRTOS/Source/timers.c **** 
 719:base/os/FreeRTOS/Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
ARM GAS  /tmp/cccNjxhi.s 			page 17


 720:base/os/FreeRTOS/Source/timers.c **** 		function calls. */
 721:base/os/FreeRTOS/Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 722:base/os/FreeRTOS/Source/timers.c **** 		{
 723:base/os/FreeRTOS/Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 724:base/os/FreeRTOS/Source/timers.c **** 			software timer. */
 725:base/os/FreeRTOS/Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 726:base/os/FreeRTOS/Source/timers.c **** 
 727:base/os/FreeRTOS/Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 728:base/os/FreeRTOS/Source/timers.c **** 			{
 729:base/os/FreeRTOS/Source/timers.c **** 				/* The timer is in a list, remove it. */
 730:base/os/FreeRTOS/Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 731:base/os/FreeRTOS/Source/timers.c **** 			}
 732:base/os/FreeRTOS/Source/timers.c **** 			else
 733:base/os/FreeRTOS/Source/timers.c **** 			{
 734:base/os/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 735:base/os/FreeRTOS/Source/timers.c **** 			}
 736:base/os/FreeRTOS/Source/timers.c **** 
 737:base/os/FreeRTOS/Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 738:base/os/FreeRTOS/Source/timers.c **** 
 739:base/os/FreeRTOS/Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 740:base/os/FreeRTOS/Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 741:base/os/FreeRTOS/Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 742:base/os/FreeRTOS/Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 743:base/os/FreeRTOS/Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 744:base/os/FreeRTOS/Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 745:base/os/FreeRTOS/Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 746:base/os/FreeRTOS/Source/timers.c **** 
 747:base/os/FreeRTOS/Source/timers.c **** 			switch( xMessage.xMessageID )
 748:base/os/FreeRTOS/Source/timers.c **** 			{
 749:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START :
 750:base/os/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 751:base/os/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET :
 752:base/os/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 753:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 754:base/os/FreeRTOS/Source/timers.c **** 					/* Start or restart a timer. */
 755:base/os/FreeRTOS/Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 756:base/os/FreeRTOS/Source/timers.c **** 					{
 757:base/os/FreeRTOS/Source/timers.c **** 						/* The timer expired before it was added to the active
 758:base/os/FreeRTOS/Source/timers.c **** 						timer list.  Process it now. */
 759:base/os/FreeRTOS/Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 760:base/os/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 761:base/os/FreeRTOS/Source/timers.c **** 
 762:base/os/FreeRTOS/Source/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 763:base/os/FreeRTOS/Source/timers.c **** 						{
 764:base/os/FreeRTOS/Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 765:base/os/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 766:base/os/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 767:base/os/FreeRTOS/Source/timers.c **** 						}
 768:base/os/FreeRTOS/Source/timers.c **** 						else
 769:base/os/FreeRTOS/Source/timers.c **** 						{
 770:base/os/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 771:base/os/FreeRTOS/Source/timers.c **** 						}
 772:base/os/FreeRTOS/Source/timers.c **** 					}
 773:base/os/FreeRTOS/Source/timers.c **** 					else
 774:base/os/FreeRTOS/Source/timers.c **** 					{
 775:base/os/FreeRTOS/Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 776:base/os/FreeRTOS/Source/timers.c **** 					}
ARM GAS  /tmp/cccNjxhi.s 			page 18


 777:base/os/FreeRTOS/Source/timers.c **** 					break;
 778:base/os/FreeRTOS/Source/timers.c **** 
 779:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP :
 780:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 781:base/os/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list.
 782:base/os/FreeRTOS/Source/timers.c **** 					There is nothing to do here. */
 783:base/os/FreeRTOS/Source/timers.c **** 					break;
 784:base/os/FreeRTOS/Source/timers.c **** 
 785:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 786:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 787:base/os/FreeRTOS/Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 788:base/os/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 789:base/os/FreeRTOS/Source/timers.c **** 
 790:base/os/FreeRTOS/Source/timers.c **** 					/* The new period does not really have a reference, and can
 791:base/os/FreeRTOS/Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 792:base/os/FreeRTOS/Source/timers.c **** 					therefore set to the current time, and as the period cannot
 793:base/os/FreeRTOS/Source/timers.c **** 					be zero the next expiry time can only be in the future,
 794:base/os/FreeRTOS/Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 795:base/os/FreeRTOS/Source/timers.c **** 					no fail case that needs to be handled here. */
 796:base/os/FreeRTOS/Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 797:base/os/FreeRTOS/Source/timers.c **** 					break;
 798:base/os/FreeRTOS/Source/timers.c **** 
 799:base/os/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_DELETE :
 800:base/os/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list,
 801:base/os/FreeRTOS/Source/timers.c **** 					just free up the memory if the memory was dynamically
 802:base/os/FreeRTOS/Source/timers.c **** 					allocated. */
 803:base/os/FreeRTOS/Source/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 804:base/os/FreeRTOS/Source/timers.c **** 					{
 805:base/os/FreeRTOS/Source/timers.c **** 						/* The timer can only have been allocated dynamically -
 806:base/os/FreeRTOS/Source/timers.c **** 						free it again. */
 807:base/os/FreeRTOS/Source/timers.c **** 						vPortFree( pxTimer );
 808:base/os/FreeRTOS/Source/timers.c **** 					}
 809:base/os/FreeRTOS/Source/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 810:base/os/FreeRTOS/Source/timers.c **** 					{
 811:base/os/FreeRTOS/Source/timers.c **** 						/* The timer could have been allocated statically or
 812:base/os/FreeRTOS/Source/timers.c **** 						dynamically, so check before attempting to free the
 813:base/os/FreeRTOS/Source/timers.c **** 						memory. */
 814:base/os/FreeRTOS/Source/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 815:base/os/FreeRTOS/Source/timers.c **** 						{
 816:base/os/FreeRTOS/Source/timers.c **** 							vPortFree( pxTimer );
 817:base/os/FreeRTOS/Source/timers.c **** 						}
 818:base/os/FreeRTOS/Source/timers.c **** 						else
 819:base/os/FreeRTOS/Source/timers.c **** 						{
 820:base/os/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 821:base/os/FreeRTOS/Source/timers.c **** 						}
 822:base/os/FreeRTOS/Source/timers.c **** 					}
 823:base/os/FreeRTOS/Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 824:base/os/FreeRTOS/Source/timers.c **** 					break;
 825:base/os/FreeRTOS/Source/timers.c **** 
 826:base/os/FreeRTOS/Source/timers.c **** 				default	:
 827:base/os/FreeRTOS/Source/timers.c **** 					/* Don't expect to get here. */
 828:base/os/FreeRTOS/Source/timers.c **** 					break;
 829:base/os/FreeRTOS/Source/timers.c **** 			}
 830:base/os/FreeRTOS/Source/timers.c **** 		}
 831:base/os/FreeRTOS/Source/timers.c **** 	}
 832:base/os/FreeRTOS/Source/timers.c **** }
 833:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cccNjxhi.s 			page 19


 834:base/os/FreeRTOS/Source/timers.c **** 
 835:base/os/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void )
 836:base/os/FreeRTOS/Source/timers.c **** {
 837:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 838:base/os/FreeRTOS/Source/timers.c **** List_t *pxTemp;
 839:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 840:base/os/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 841:base/os/FreeRTOS/Source/timers.c **** 
 842:base/os/FreeRTOS/Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 843:base/os/FreeRTOS/Source/timers.c **** 	If there are any timers still referenced from the current timer list
 844:base/os/FreeRTOS/Source/timers.c **** 	then they must have expired and should be processed before the lists
 845:base/os/FreeRTOS/Source/timers.c **** 	are switched. */
 846:base/os/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 847:base/os/FreeRTOS/Source/timers.c **** 	{
 848:base/os/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 849:base/os/FreeRTOS/Source/timers.c **** 
 850:base/os/FreeRTOS/Source/timers.c **** 		/* Remove the timer from the list. */
 851:base/os/FreeRTOS/Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 852:base/os/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 853:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 854:base/os/FreeRTOS/Source/timers.c **** 
 855:base/os/FreeRTOS/Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 856:base/os/FreeRTOS/Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 857:base/os/FreeRTOS/Source/timers.c **** 		have not yet been switched. */
 858:base/os/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 859:base/os/FreeRTOS/Source/timers.c **** 
 860:base/os/FreeRTOS/Source/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 861:base/os/FreeRTOS/Source/timers.c **** 		{
 862:base/os/FreeRTOS/Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 863:base/os/FreeRTOS/Source/timers.c **** 			the timer going into the same timer list then it has already expired
 864:base/os/FreeRTOS/Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 865:base/os/FreeRTOS/Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 866:base/os/FreeRTOS/Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 867:base/os/FreeRTOS/Source/timers.c **** 			the lists have been swapped. */
 868:base/os/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 869:base/os/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 870:base/os/FreeRTOS/Source/timers.c **** 			{
 871:base/os/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 872:base/os/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 873:base/os/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 874:base/os/FreeRTOS/Source/timers.c **** 			}
 875:base/os/FreeRTOS/Source/timers.c **** 			else
 876:base/os/FreeRTOS/Source/timers.c **** 			{
 877:base/os/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 878:base/os/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 879:base/os/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 880:base/os/FreeRTOS/Source/timers.c **** 			}
 881:base/os/FreeRTOS/Source/timers.c **** 		}
 882:base/os/FreeRTOS/Source/timers.c **** 		else
 883:base/os/FreeRTOS/Source/timers.c **** 		{
 884:base/os/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 885:base/os/FreeRTOS/Source/timers.c **** 		}
 886:base/os/FreeRTOS/Source/timers.c **** 	}
 887:base/os/FreeRTOS/Source/timers.c **** 
 888:base/os/FreeRTOS/Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 889:base/os/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 890:base/os/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
ARM GAS  /tmp/cccNjxhi.s 			page 20


 891:base/os/FreeRTOS/Source/timers.c **** }
 892:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 893:base/os/FreeRTOS/Source/timers.c **** 
 894:base/os/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 895:base/os/FreeRTOS/Source/timers.c **** {
 183              		.loc 1 895 1 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 30B5     		push	{r4, r5, lr}
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 12
 190              		.cfi_offset 4, -12
 191              		.cfi_offset 5, -8
 192              		.cfi_offset 14, -4
 193 0002 83B0     		sub	sp, sp, #12
 194              	.LCFI2:
 195              		.cfi_def_cfa_offset 24
 896:base/os/FreeRTOS/Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 897:base/os/FreeRTOS/Source/timers.c **** 	queue used to communicate with the timer service, have been
 898:base/os/FreeRTOS/Source/timers.c **** 	initialised. */
 899:base/os/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 196              		.loc 1 899 2 view .LVU43
 197 0004 FFF7FEFF 		bl	vPortEnterCritical
 198              	.LVL20:
 900:base/os/FreeRTOS/Source/timers.c **** 	{
 901:base/os/FreeRTOS/Source/timers.c **** 		if( xTimerQueue == NULL )
 199              		.loc 1 901 3 view .LVU44
 200              		.loc 1 901 19 is_stmt 0 view .LVU45
 201 0008 114B     		ldr	r3, .L20
 202 000a 1B68     		ldr	r3, [r3]
 203              		.loc 1 901 5 view .LVU46
 204 000c 1BB1     		cbz	r3, .L19
 205              	.L17:
 902:base/os/FreeRTOS/Source/timers.c **** 		{
 903:base/os/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 904:base/os/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 905:base/os/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 906:base/os/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 907:base/os/FreeRTOS/Source/timers.c **** 
 908:base/os/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 909:base/os/FreeRTOS/Source/timers.c **** 			{
 910:base/os/FreeRTOS/Source/timers.c **** 				/* The timer queue is allocated statically in case
 911:base/os/FreeRTOS/Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 912:base/os/FreeRTOS/Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 913:base/os/FreeRTOS/Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 914:base/os/FreeRTOS/Source/timers.c **** 
 915:base/os/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 916:base/os/FreeRTOS/Source/timers.c **** 			}
 917:base/os/FreeRTOS/Source/timers.c **** 			#else
 918:base/os/FreeRTOS/Source/timers.c **** 			{
 919:base/os/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 920:base/os/FreeRTOS/Source/timers.c **** 			}
 921:base/os/FreeRTOS/Source/timers.c **** 			#endif
 922:base/os/FreeRTOS/Source/timers.c **** 
 923:base/os/FreeRTOS/Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 924:base/os/FreeRTOS/Source/timers.c **** 			{
ARM GAS  /tmp/cccNjxhi.s 			page 21


 925:base/os/FreeRTOS/Source/timers.c **** 				if( xTimerQueue != NULL )
 926:base/os/FreeRTOS/Source/timers.c **** 				{
 927:base/os/FreeRTOS/Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 928:base/os/FreeRTOS/Source/timers.c **** 				}
 929:base/os/FreeRTOS/Source/timers.c **** 				else
 930:base/os/FreeRTOS/Source/timers.c **** 				{
 931:base/os/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 932:base/os/FreeRTOS/Source/timers.c **** 				}
 933:base/os/FreeRTOS/Source/timers.c **** 			}
 934:base/os/FreeRTOS/Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 935:base/os/FreeRTOS/Source/timers.c **** 		}
 936:base/os/FreeRTOS/Source/timers.c **** 		else
 937:base/os/FreeRTOS/Source/timers.c **** 		{
 938:base/os/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 206              		.loc 1 938 28 is_stmt 1 view .LVU47
 939:base/os/FreeRTOS/Source/timers.c **** 		}
 940:base/os/FreeRTOS/Source/timers.c **** 	}
 941:base/os/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 207              		.loc 1 941 2 view .LVU48
 208 000e FFF7FEFF 		bl	vPortExitCritical
 209              	.LVL21:
 942:base/os/FreeRTOS/Source/timers.c **** }
 210              		.loc 1 942 1 is_stmt 0 view .LVU49
 211 0012 03B0     		add	sp, sp, #12
 212              	.LCFI3:
 213              		.cfi_remember_state
 214              		.cfi_def_cfa_offset 12
 215              		@ sp needed
 216 0014 30BD     		pop	{r4, r5, pc}
 217              	.L19:
 218              	.LCFI4:
 219              		.cfi_restore_state
 903:base/os/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 220              		.loc 1 903 4 is_stmt 1 view .LVU50
 221 0016 0F4D     		ldr	r5, .L20+4
 222 0018 2846     		mov	r0, r5
 223 001a FFF7FEFF 		bl	vListInitialise
 224              	.LVL22:
 904:base/os/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 225              		.loc 1 904 4 view .LVU51
 226 001e 0E4C     		ldr	r4, .L20+8
 227 0020 2046     		mov	r0, r4
 228 0022 FFF7FEFF 		bl	vListInitialise
 229              	.LVL23:
 905:base/os/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 230              		.loc 1 905 4 view .LVU52
 905:base/os/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 231              		.loc 1 905 23 is_stmt 0 view .LVU53
 232 0026 0D4B     		ldr	r3, .L20+12
 233 0028 1D60     		str	r5, [r3]
 906:base/os/FreeRTOS/Source/timers.c **** 
 234              		.loc 1 906 4 is_stmt 1 view .LVU54
 906:base/os/FreeRTOS/Source/timers.c **** 
 235              		.loc 1 906 24 is_stmt 0 view .LVU55
 236 002a 0D4B     		ldr	r3, .L20+16
 237 002c 1C60     		str	r4, [r3]
 238              	.LBB41:
ARM GAS  /tmp/cccNjxhi.s 			page 22


 912:base/os/FreeRTOS/Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 239              		.loc 1 912 5 is_stmt 1 view .LVU56
 913:base/os/FreeRTOS/Source/timers.c **** 
 240              		.loc 1 913 5 view .LVU57
 915:base/os/FreeRTOS/Source/timers.c **** 			}
 241              		.loc 1 915 5 view .LVU58
 915:base/os/FreeRTOS/Source/timers.c **** 			}
 242              		.loc 1 915 19 is_stmt 0 view .LVU59
 243 002e 0023     		movs	r3, #0
 244 0030 0093     		str	r3, [sp]
 245 0032 0C4B     		ldr	r3, .L20+20
 246 0034 0C4A     		ldr	r2, .L20+24
 247 0036 1021     		movs	r1, #16
 248 0038 0A20     		movs	r0, #10
 249 003a FFF7FEFF 		bl	xQueueGenericCreateStatic
 250              	.LVL24:
 915:base/os/FreeRTOS/Source/timers.c **** 			}
 251              		.loc 1 915 17 view .LVU60
 252 003e 044B     		ldr	r3, .L20
 253 0040 1860     		str	r0, [r3]
 254              	.LBE41:
 925:base/os/FreeRTOS/Source/timers.c **** 				{
 255              		.loc 1 925 5 is_stmt 1 view .LVU61
 925:base/os/FreeRTOS/Source/timers.c **** 				{
 256              		.loc 1 925 7 is_stmt 0 view .LVU62
 257 0042 0028     		cmp	r0, #0
 258 0044 E3D0     		beq	.L17
 927:base/os/FreeRTOS/Source/timers.c **** 				}
 259              		.loc 1 927 6 is_stmt 1 view .LVU63
 260 0046 0949     		ldr	r1, .L20+28
 261 0048 FFF7FEFF 		bl	vQueueAddToRegistry
 262              	.LVL25:
 263 004c DFE7     		b	.L17
 264              	.L21:
 265 004e 00BF     		.align	2
 266              	.L20:
 267 0050 00000000 		.word	.LANCHOR2
 268 0054 00000000 		.word	.LANCHOR3
 269 0058 00000000 		.word	.LANCHOR4
 270 005c 00000000 		.word	.LANCHOR0
 271 0060 00000000 		.word	.LANCHOR1
 272 0064 00000000 		.word	.LANCHOR5
 273 0068 00000000 		.word	.LANCHOR6
 274 006c 00000000 		.word	.LC0
 275              		.cfi_endproc
 276              	.LFE21:
 278              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 279              		.align	1
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 283              		.fpu softvfp
 285              	prvInitialiseNewTimer:
 286              	.LVL26:
 287              	.LFB7:
 358:base/os/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 288              		.loc 1 358 1 view -0
ARM GAS  /tmp/cccNjxhi.s 			page 23


 289              		.cfi_startproc
 290              		@ args = 8, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 358:base/os/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 292              		.loc 1 358 1 is_stmt 0 view .LVU65
 293 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 294              	.LCFI5:
 295              		.cfi_def_cfa_offset 24
 296              		.cfi_offset 4, -24
 297              		.cfi_offset 5, -20
 298              		.cfi_offset 6, -16
 299              		.cfi_offset 7, -12
 300              		.cfi_offset 8, -8
 301              		.cfi_offset 14, -4
 302 0004 079F     		ldr	r7, [sp, #28]
 360:base/os/FreeRTOS/Source/timers.c **** 
 303              		.loc 1 360 2 is_stmt 1 view .LVU66
 304 0006 41B9     		cbnz	r1, .L23
 360:base/os/FreeRTOS/Source/timers.c **** 
 305              		.loc 1 360 2 view .LVU67
 306              	.LBB42:
 307              	.LBI42:
 308              		.file 2 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
ARM GAS  /tmp/cccNjxhi.s 			page 24


  35:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
ARM GAS  /tmp/cccNjxhi.s 			page 25


  92:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cccNjxhi.s 			page 26


 149:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 309              		.loc 2 191 30 view .LVU68
 310              	.LBB43:
 192:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 311              		.loc 2 193 1 view .LVU69
 194:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 312              		.loc 2 195 2 view .LVU70
 313              		.syntax unified
 314              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 315 0008 4FF05003 			mov r3, #80												
 316 000c 83F31188 		msr basepri, r3											
 317 0010 BFF36F8F 		isb														
 318 0014 BFF34F8F 		dsb														
ARM GAS  /tmp/cccNjxhi.s 			page 27


 319              	
 320              	@ 0 "" 2
 321              	.LVL27:
 322              		.thumb
 323              		.syntax unified
 324              	.L24:
 325              		.loc 2 195 2 is_stmt 0 view .LVU71
 326              	.LBE43:
 327              	.LBE42:
 360:base/os/FreeRTOS/Source/timers.c **** 
 328              		.loc 1 360 2 is_stmt 1 discriminator 1 view .LVU72
 360:base/os/FreeRTOS/Source/timers.c **** 
 329              		.loc 1 360 2 discriminator 1 view .LVU73
 330 0018 FEE7     		b	.L24
 331              	.LVL28:
 332              	.L23:
 360:base/os/FreeRTOS/Source/timers.c **** 
 333              		.loc 1 360 2 is_stmt 0 discriminator 1 view .LVU74
 334 001a 0646     		mov	r6, r0
 335 001c 1546     		mov	r5, r2
 336 001e 1C46     		mov	r4, r3
 337 0020 8846     		mov	r8, r1
 360:base/os/FreeRTOS/Source/timers.c **** 
 338              		.loc 1 360 45 is_stmt 1 discriminator 2 view .LVU75
 362:base/os/FreeRTOS/Source/timers.c **** 	{
 339              		.loc 1 362 2 discriminator 2 view .LVU76
 362:base/os/FreeRTOS/Source/timers.c **** 	{
 340              		.loc 1 362 4 is_stmt 0 discriminator 2 view .LVU77
 341 0022 5FB1     		cbz	r7, .L22
 366:base/os/FreeRTOS/Source/timers.c **** 
 342              		.loc 1 366 3 is_stmt 1 view .LVU78
 343 0024 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 344              	.LVL29:
 370:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 345              		.loc 1 370 3 view .LVU79
 370:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 346              		.loc 1 370 27 is_stmt 0 view .LVU80
 347 0028 3E60     		str	r6, [r7]
 371:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 348              		.loc 1 371 3 is_stmt 1 view .LVU81
 371:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 349              		.loc 1 371 35 is_stmt 0 view .LVU82
 350 002a C7F81880 		str	r8, [r7, #24]
 372:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 351              		.loc 1 372 3 is_stmt 1 view .LVU83
 372:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 352              		.loc 1 372 28 is_stmt 0 view .LVU84
 353 002e FD61     		str	r5, [r7, #28]
 373:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 354              		.loc 1 373 3 is_stmt 1 view .LVU85
 373:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 355              		.loc 1 373 25 is_stmt 0 view .LVU86
 356 0030 3C62     		str	r4, [r7, #32]
 374:base/os/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 357              		.loc 1 374 3 is_stmt 1 view .LVU87
 374:base/os/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 358              		.loc 1 374 34 is_stmt 0 view .LVU88
ARM GAS  /tmp/cccNjxhi.s 			page 28


 359 0032 069B     		ldr	r3, [sp, #24]
 360 0034 7B62     		str	r3, [r7, #36]
 375:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 361              		.loc 1 375 3 is_stmt 1 view .LVU89
 362 0036 381D     		adds	r0, r7, #4
 363 0038 FFF7FEFF 		bl	vListInitialiseItem
 364              	.LVL30:
 376:base/os/FreeRTOS/Source/timers.c **** 	}
 365              		.loc 1 376 34 view .LVU90
 366              	.L22:
 378:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 367              		.loc 1 378 1 is_stmt 0 view .LVU91
 368 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 378:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 369              		.loc 1 378 1 view .LVU92
 370              		.cfi_endproc
 371              	.LFE7:
 373              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 374              		.align	2
 375              	.LC1:
 376 0000 546D7220 		.ascii	"Tmr Svc\000"
 376      53766300 
 377              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 378              		.align	1
 379              		.global	xTimerCreateTimerTask
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu softvfp
 385              	xTimerCreateTimerTask:
 386              	.LFB4:
 224:base/os/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 387              		.loc 1 224 1 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 16
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI6:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396 0002 88B0     		sub	sp, sp, #32
 397              	.LCFI7:
 398              		.cfi_def_cfa_offset 40
 225:base/os/FreeRTOS/Source/timers.c **** 
 399              		.loc 1 225 1 view .LVU94
 400              	.LVL31:
 231:base/os/FreeRTOS/Source/timers.c **** 
 401              		.loc 1 231 2 view .LVU95
 402 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 403              	.LVL32:
 233:base/os/FreeRTOS/Source/timers.c **** 	{
 404              		.loc 1 233 2 view .LVU96
 233:base/os/FreeRTOS/Source/timers.c **** 	{
 405              		.loc 1 233 18 is_stmt 0 view .LVU97
 406 0008 124B     		ldr	r3, .L33
 407 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccNjxhi.s 			page 29


 233:base/os/FreeRTOS/Source/timers.c **** 	{
 408              		.loc 1 233 4 view .LVU98
 409 000c CBB1     		cbz	r3, .L28
 410              	.LBB44:
 237:base/os/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 411              		.loc 1 237 4 is_stmt 1 view .LVU99
 237:base/os/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 412              		.loc 1 237 18 is_stmt 0 view .LVU100
 413 000e 0024     		movs	r4, #0
 414 0010 0594     		str	r4, [sp, #20]
 238:base/os/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 415              		.loc 1 238 4 is_stmt 1 view .LVU101
 238:base/os/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 416              		.loc 1 238 17 is_stmt 0 view .LVU102
 417 0012 0694     		str	r4, [sp, #24]
 239:base/os/FreeRTOS/Source/timers.c **** 
 418              		.loc 1 239 4 is_stmt 1 view .LVU103
 241:base/os/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 419              		.loc 1 241 4 view .LVU104
 420 0014 07AA     		add	r2, sp, #28
 421 0016 06A9     		add	r1, sp, #24
 422 0018 05A8     		add	r0, sp, #20
 423 001a FFF7FEFF 		bl	vApplicationGetTimerTaskMemory
 424              	.LVL33:
 242:base/os/FreeRTOS/Source/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 425              		.loc 1 242 4 view .LVU105
 242:base/os/FreeRTOS/Source/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 426              		.loc 1 242 23 is_stmt 0 view .LVU106
 427 001e 059B     		ldr	r3, [sp, #20]
 428 0020 0293     		str	r3, [sp, #8]
 429 0022 069B     		ldr	r3, [sp, #24]
 430 0024 0193     		str	r3, [sp, #4]
 431 0026 0223     		movs	r3, #2
 432 0028 0093     		str	r3, [sp]
 433 002a 2346     		mov	r3, r4
 434 002c 079A     		ldr	r2, [sp, #28]
 435 002e 0A49     		ldr	r1, .L33+4
 436 0030 0A48     		ldr	r0, .L33+8
 437 0032 FFF7FEFF 		bl	xTaskCreateStatic
 438              	.LVL34:
 242:base/os/FreeRTOS/Source/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 439              		.loc 1 242 21 view .LVU107
 440 0036 0A4B     		ldr	r3, .L33+12
 441 0038 1860     		str	r0, [r3]
 250:base/os/FreeRTOS/Source/timers.c **** 			{
 442              		.loc 1 250 4 is_stmt 1 view .LVU108
 250:base/os/FreeRTOS/Source/timers.c **** 			{
 443              		.loc 1 250 6 is_stmt 0 view .LVU109
 444 003a 10B1     		cbz	r0, .L28
 445              	.LBE44:
 273:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 446              		.loc 1 273 1 view .LVU110
 447 003c 0120     		movs	r0, #1
 448 003e 08B0     		add	sp, sp, #32
 449              	.LCFI8:
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccNjxhi.s 			page 30


 452              		@ sp needed
 453 0040 10BD     		pop	{r4, pc}
 454              	.L28:
 455              	.LCFI9:
 456              		.cfi_restore_state
 457              	.LVL35:
 271:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 458              		.loc 1 271 2 is_stmt 1 view .LVU111
 459              	.LBB45:
 460              	.LBI45:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 461              		.loc 2 191 30 view .LVU112
 462              	.LBB46:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 463              		.loc 2 193 1 view .LVU113
 464              		.loc 2 195 2 view .LVU114
 465              		.syntax unified
 466              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 467 0042 4FF05003 			mov r3, #80												
 468 0046 83F31188 		msr basepri, r3											
 469 004a BFF36F8F 		isb														
 470 004e BFF34F8F 		dsb														
 471              	
 472              	@ 0 "" 2
 473              	.LVL36:
 474              		.thumb
 475              		.syntax unified
 476              	.L30:
 477              		.loc 2 195 2 is_stmt 0 view .LVU115
 478              	.LBE46:
 479              	.LBE45:
 271:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 480              		.loc 1 271 2 is_stmt 1 discriminator 1 view .LVU116
 271:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 481              		.loc 1 271 2 discriminator 1 view .LVU117
 482 0052 FEE7     		b	.L30
 483              	.L34:
 484              		.align	2
 485              	.L33:
 486 0054 00000000 		.word	.LANCHOR2
 487 0058 00000000 		.word	.LC1
 488 005c 00000000 		.word	prvTimerTask
 489 0060 00000000 		.word	.LANCHOR7
 490              		.cfi_endproc
 491              	.LFE4:
 493              		.section	.text.xTimerCreate,"ax",%progbits
 494              		.align	1
 495              		.global	xTimerCreate
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	xTimerCreate:
 502              	.LVL37:
 503              	.LFB5:
 283:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 504              		.loc 1 283 2 view -0
ARM GAS  /tmp/cccNjxhi.s 			page 31


 505              		.cfi_startproc
 506              		@ args = 4, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 283:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 508              		.loc 1 283 2 is_stmt 0 view .LVU119
 509 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 510              	.LCFI10:
 511              		.cfi_def_cfa_offset 24
 512              		.cfi_offset 4, -24
 513              		.cfi_offset 5, -20
 514              		.cfi_offset 6, -16
 515              		.cfi_offset 7, -12
 516              		.cfi_offset 8, -8
 517              		.cfi_offset 14, -4
 518 0004 82B0     		sub	sp, sp, #8
 519              	.LCFI11:
 520              		.cfi_def_cfa_offset 32
 521 0006 0446     		mov	r4, r0
 522 0008 8846     		mov	r8, r1
 523 000a 1546     		mov	r5, r2
 524 000c 1E46     		mov	r6, r3
 284:base/os/FreeRTOS/Source/timers.c **** 
 525              		.loc 1 284 2 is_stmt 1 view .LVU120
 286:base/os/FreeRTOS/Source/timers.c **** 
 526              		.loc 1 286 3 view .LVU121
 286:base/os/FreeRTOS/Source/timers.c **** 
 527              		.loc 1 286 30 is_stmt 0 view .LVU122
 528 000e 3020     		movs	r0, #48
 529              	.LVL38:
 286:base/os/FreeRTOS/Source/timers.c **** 
 530              		.loc 1 286 30 view .LVU123
 531 0010 FFF7FEFF 		bl	pvPortMalloc
 532              	.LVL39:
 288:base/os/FreeRTOS/Source/timers.c **** 		{
 533              		.loc 1 288 3 is_stmt 1 view .LVU124
 288:base/os/FreeRTOS/Source/timers.c **** 		{
 534              		.loc 1 288 5 is_stmt 0 view .LVU125
 535 0014 0746     		mov	r7, r0
 536 0016 58B1     		cbz	r0, .L35
 290:base/os/FreeRTOS/Source/timers.c **** 
 537              		.loc 1 290 4 is_stmt 1 view .LVU126
 538 0018 0190     		str	r0, [sp, #4]
 539 001a 089B     		ldr	r3, [sp, #32]
 540 001c 0093     		str	r3, [sp]
 541 001e 3346     		mov	r3, r6
 542 0020 2A46     		mov	r2, r5
 543 0022 4146     		mov	r1, r8
 544 0024 2046     		mov	r0, r4
 545              	.LVL40:
 290:base/os/FreeRTOS/Source/timers.c **** 
 546              		.loc 1 290 4 is_stmt 0 view .LVU127
 547 0026 FFF7FEFF 		bl	prvInitialiseNewTimer
 548              	.LVL41:
 297:base/os/FreeRTOS/Source/timers.c **** 			}
 549              		.loc 1 297 5 is_stmt 1 view .LVU128
 297:base/os/FreeRTOS/Source/timers.c **** 			}
 550              		.loc 1 297 39 is_stmt 0 view .LVU129
ARM GAS  /tmp/cccNjxhi.s 			page 32


 551 002a 0023     		movs	r3, #0
 552 002c 87F82C30 		strb	r3, [r7, #44]
 302:base/os/FreeRTOS/Source/timers.c **** 	}
 553              		.loc 1 302 3 is_stmt 1 view .LVU130
 554              	.L35:
 303:base/os/FreeRTOS/Source/timers.c **** 
 555              		.loc 1 303 2 is_stmt 0 view .LVU131
 556 0030 3846     		mov	r0, r7
 557 0032 02B0     		add	sp, sp, #8
 558              	.LCFI12:
 559              		.cfi_def_cfa_offset 24
 560              		@ sp needed
 561 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 303:base/os/FreeRTOS/Source/timers.c **** 
 562              		.loc 1 303 2 view .LVU132
 563              		.cfi_endproc
 564              	.LFE5:
 566              		.section	.text.xTimerCreateStatic,"ax",%progbits
 567              		.align	1
 568              		.global	xTimerCreateStatic
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 572              		.fpu softvfp
 574              	xTimerCreateStatic:
 575              	.LVL42:
 576              	.LFB6:
 316:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 577              		.loc 1 316 2 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 8, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 316:base/os/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 581              		.loc 1 316 2 is_stmt 0 view .LVU134
 582 0000 10B5     		push	{r4, lr}
 583              	.LCFI13:
 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 4, -8
 586              		.cfi_offset 14, -4
 587 0002 84B0     		sub	sp, sp, #16
 588              	.LCFI14:
 589              		.cfi_def_cfa_offset 24
 317:base/os/FreeRTOS/Source/timers.c **** 
 590              		.loc 1 317 2 is_stmt 1 view .LVU135
 591              	.LBB47:
 324:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 592              		.loc 1 324 4 view .LVU136
 324:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 593              		.loc 1 324 20 is_stmt 0 view .LVU137
 594 0004 3024     		movs	r4, #48
 595 0006 0394     		str	r4, [sp, #12]
 325:base/os/FreeRTOS/Source/timers.c **** 		}
 596              		.loc 1 325 4 is_stmt 1 view .LVU138
 597 0008 039C     		ldr	r4, [sp, #12]
 598 000a 302C     		cmp	r4, #48
 599 000c 08D0     		beq	.L39
 325:base/os/FreeRTOS/Source/timers.c **** 		}
ARM GAS  /tmp/cccNjxhi.s 			page 33


 600              		.loc 1 325 4 view .LVU139
 601              	.LBB48:
 602              	.LBI48:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 603              		.loc 2 191 30 view .LVU140
 604              	.LBB49:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 605              		.loc 2 193 1 view .LVU141
 606              		.loc 2 195 2 view .LVU142
 607              		.syntax unified
 608              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 609 000e 4FF05003 			mov r3, #80												
 610 0012 83F31188 		msr basepri, r3											
 611 0016 BFF36F8F 		isb														
 612 001a BFF34F8F 		dsb														
 613              	
 614              	@ 0 "" 2
 615              	.LVL43:
 616              		.thumb
 617              		.syntax unified
 618              	.L40:
 619              		.loc 2 195 2 is_stmt 0 view .LVU143
 620              	.LBE49:
 621              	.LBE48:
 325:base/os/FreeRTOS/Source/timers.c **** 		}
 622              		.loc 1 325 4 is_stmt 1 discriminator 1 view .LVU144
 325:base/os/FreeRTOS/Source/timers.c **** 		}
 623              		.loc 1 325 4 discriminator 1 view .LVU145
 624 001e FEE7     		b	.L40
 625              	.LVL44:
 626              	.L39:
 325:base/os/FreeRTOS/Source/timers.c **** 		}
 627              		.loc 1 325 46 discriminator 2 view .LVU146
 628              	.LBE47:
 330:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 629              		.loc 1 330 3 discriminator 2 view .LVU147
 630 0020 079C     		ldr	r4, [sp, #28]
 631 0022 64B1     		cbz	r4, .L44
 330:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 632              		.loc 1 330 32 view .LVU148
 331:base/os/FreeRTOS/Source/timers.c **** 
 633              		.loc 1 331 3 view .LVU149
 634              	.LVL45:
 333:base/os/FreeRTOS/Source/timers.c **** 		{
 635              		.loc 1 333 3 view .LVU150
 335:base/os/FreeRTOS/Source/timers.c **** 
 636              		.loc 1 335 4 view .LVU151
 637 0024 079C     		ldr	r4, [sp, #28]
 335:base/os/FreeRTOS/Source/timers.c **** 
 638              		.loc 1 335 4 is_stmt 0 view .LVU152
 639 0026 0194     		str	r4, [sp, #4]
 640 0028 069C     		ldr	r4, [sp, #24]
 641              	.LVL46:
 335:base/os/FreeRTOS/Source/timers.c **** 
 642              		.loc 1 335 4 view .LVU153
 643 002a 0094     		str	r4, [sp]
 644 002c FFF7FEFF 		bl	prvInitialiseNewTimer
ARM GAS  /tmp/cccNjxhi.s 			page 34


 645              	.LVL47:
 341:base/os/FreeRTOS/Source/timers.c **** 			}
 646              		.loc 1 341 5 is_stmt 1 view .LVU154
 341:base/os/FreeRTOS/Source/timers.c **** 			}
 647              		.loc 1 341 39 is_stmt 0 view .LVU155
 648 0030 0123     		movs	r3, #1
 649 0032 079A     		ldr	r2, [sp, #28]
 650 0034 82F82C30 		strb	r3, [r2, #44]
 346:base/os/FreeRTOS/Source/timers.c **** 	}
 651              		.loc 1 346 3 is_stmt 1 view .LVU156
 347:base/os/FreeRTOS/Source/timers.c **** 
 652              		.loc 1 347 2 is_stmt 0 view .LVU157
 653 0038 1046     		mov	r0, r2
 654 003a 04B0     		add	sp, sp, #16
 655              	.LCFI15:
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 8
 658              		@ sp needed
 659 003c 10BD     		pop	{r4, pc}
 660              	.LVL48:
 661              	.L44:
 662              	.LCFI16:
 663              		.cfi_restore_state
 330:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 664              		.loc 1 330 3 is_stmt 1 view .LVU158
 665              	.LBB50:
 666              	.LBI50:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 667              		.loc 2 191 30 view .LVU159
 668              	.LBB51:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 669              		.loc 2 193 1 view .LVU160
 670              		.loc 2 195 2 view .LVU161
 671              		.syntax unified
 672              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 673 003e 4FF05003 			mov r3, #80												
 674 0042 83F31188 		msr basepri, r3											
 675 0046 BFF36F8F 		isb														
 676 004a BFF34F8F 		dsb														
 677              	
 678              	@ 0 "" 2
 679              	.LVL49:
 680              		.thumb
 681              		.syntax unified
 682              	.L42:
 683              		.loc 2 195 2 is_stmt 0 view .LVU162
 684              	.LBE51:
 685              	.LBE50:
 330:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 686              		.loc 1 330 3 is_stmt 1 discriminator 2 view .LVU163
 330:base/os/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 687              		.loc 1 330 3 discriminator 2 view .LVU164
 688 004e FEE7     		b	.L42
 689              		.cfi_endproc
 690              	.LFE6:
 692              		.section	.text.xTimerGenericCommand,"ax",%progbits
 693              		.align	1
ARM GAS  /tmp/cccNjxhi.s 			page 35


 694              		.global	xTimerGenericCommand
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu softvfp
 700              	xTimerGenericCommand:
 701              	.LVL50:
 702              	.LFB8:
 382:base/os/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 703              		.loc 1 382 1 view -0
 704              		.cfi_startproc
 705              		@ args = 4, pretend = 0, frame = 16
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 383:base/os/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 707              		.loc 1 383 1 view .LVU166
 384:base/os/FreeRTOS/Source/timers.c **** 
 708              		.loc 1 384 1 view .LVU167
 386:base/os/FreeRTOS/Source/timers.c **** 
 709              		.loc 1 386 2 view .LVU168
 710 0000 B8B1     		cbz	r0, .L56
 711 0002 9C46     		mov	ip, r3
 712 0004 0346     		mov	r3, r0
 713              	.LVL51:
 386:base/os/FreeRTOS/Source/timers.c **** 
 714              		.loc 1 386 24 discriminator 2 view .LVU169
 390:base/os/FreeRTOS/Source/timers.c **** 	{
 715              		.loc 1 390 2 discriminator 2 view .LVU170
 390:base/os/FreeRTOS/Source/timers.c **** 	{
 716              		.loc 1 390 18 is_stmt 0 discriminator 2 view .LVU171
 717 0006 1848     		ldr	r0, .L58
 718              	.LVL52:
 390:base/os/FreeRTOS/Source/timers.c **** 	{
 719              		.loc 1 390 18 discriminator 2 view .LVU172
 720 0008 0068     		ldr	r0, [r0]
 390:base/os/FreeRTOS/Source/timers.c **** 	{
 721              		.loc 1 390 4 discriminator 2 view .LVU173
 722 000a 58B3     		cbz	r0, .L51
 382:base/os/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 723              		.loc 1 382 1 view .LVU174
 724 000c 00B5     		push	{lr}
 725              	.LCFI17:
 726              		.cfi_def_cfa_offset 4
 727              		.cfi_offset 14, -4
 728 000e 85B0     		sub	sp, sp, #20
 729              	.LCFI18:
 730              		.cfi_def_cfa_offset 24
 393:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 731              		.loc 1 393 3 is_stmt 1 view .LVU175
 393:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 732              		.loc 1 393 23 is_stmt 0 view .LVU176
 733 0010 0091     		str	r1, [sp]
 394:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 734              		.loc 1 394 3 is_stmt 1 view .LVU177
 394:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 735              		.loc 1 394 45 is_stmt 0 view .LVU178
 736 0012 0192     		str	r2, [sp, #4]
 395:base/os/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccNjxhi.s 			page 36


 737              		.loc 1 395 3 is_stmt 1 view .LVU179
 395:base/os/FreeRTOS/Source/timers.c **** 
 738              		.loc 1 395 39 is_stmt 0 view .LVU180
 739 0014 0293     		str	r3, [sp, #8]
 397:base/os/FreeRTOS/Source/timers.c **** 		{
 740              		.loc 1 397 3 is_stmt 1 view .LVU181
 397:base/os/FreeRTOS/Source/timers.c **** 		{
 741              		.loc 1 397 5 is_stmt 0 view .LVU182
 742 0016 0529     		cmp	r1, #5
 743 0018 1CDC     		bgt	.L49
 399:base/os/FreeRTOS/Source/timers.c **** 			{
 744              		.loc 1 399 4 is_stmt 1 view .LVU183
 399:base/os/FreeRTOS/Source/timers.c **** 			{
 745              		.loc 1 399 8 is_stmt 0 view .LVU184
 746 001a FFF7FEFF 		bl	xTaskGetSchedulerState
 747              	.LVL53:
 399:base/os/FreeRTOS/Source/timers.c **** 			{
 748              		.loc 1 399 6 view .LVU185
 749 001e 0228     		cmp	r0, #2
 750 0020 10D0     		beq	.L57
 405:base/os/FreeRTOS/Source/timers.c **** 			}
 751              		.loc 1 405 5 is_stmt 1 view .LVU186
 405:base/os/FreeRTOS/Source/timers.c **** 			}
 752              		.loc 1 405 15 is_stmt 0 view .LVU187
 753 0022 0023     		movs	r3, #0
 754 0024 1A46     		mov	r2, r3
 755 0026 6946     		mov	r1, sp
 756 0028 0F48     		ldr	r0, .L58
 757 002a 0068     		ldr	r0, [r0]
 758 002c FFF7FEFF 		bl	xQueueGenericSend
 759              	.LVL54:
 405:base/os/FreeRTOS/Source/timers.c **** 			}
 760              		.loc 1 405 15 view .LVU188
 761 0030 15E0     		b	.L45
 762              	.LVL55:
 763              	.L56:
 764              	.LCFI19:
 765              		.cfi_def_cfa_offset 0
 766              		.cfi_restore 14
 386:base/os/FreeRTOS/Source/timers.c **** 
 767              		.loc 1 386 2 is_stmt 1 view .LVU189
 768              	.LBB52:
 769              	.LBI52:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 770              		.loc 2 191 30 view .LVU190
 771              	.LBB53:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 772              		.loc 2 193 1 view .LVU191
 773              		.loc 2 195 2 view .LVU192
 774              		.syntax unified
 775              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 776 0032 4FF05003 			mov r3, #80												
 777 0036 83F31188 		msr basepri, r3											
 778 003a BFF36F8F 		isb														
 779 003e BFF34F8F 		dsb														
 780              	
 781              	@ 0 "" 2
ARM GAS  /tmp/cccNjxhi.s 			page 37


 782              	.LVL56:
 783              		.thumb
 784              		.syntax unified
 785              	.L47:
 786              		.loc 2 195 2 is_stmt 0 view .LVU193
 787              	.LBE53:
 788              	.LBE52:
 386:base/os/FreeRTOS/Source/timers.c **** 
 789              		.loc 1 386 2 is_stmt 1 discriminator 1 view .LVU194
 386:base/os/FreeRTOS/Source/timers.c **** 
 790              		.loc 1 386 2 discriminator 1 view .LVU195
 791 0042 FEE7     		b	.L47
 792              	.LVL57:
 793              	.L57:
 794              	.LCFI20:
 795              		.cfi_def_cfa_offset 24
 796              		.cfi_offset 14, -4
 401:base/os/FreeRTOS/Source/timers.c **** 			}
 797              		.loc 1 401 5 view .LVU196
 401:base/os/FreeRTOS/Source/timers.c **** 			}
 798              		.loc 1 401 15 is_stmt 0 view .LVU197
 799 0044 0023     		movs	r3, #0
 800 0046 069A     		ldr	r2, [sp, #24]
 801 0048 6946     		mov	r1, sp
 802 004a 0748     		ldr	r0, .L58
 803 004c 0068     		ldr	r0, [r0]
 804 004e FFF7FEFF 		bl	xQueueGenericSend
 805              	.LVL58:
 401:base/os/FreeRTOS/Source/timers.c **** 			}
 806              		.loc 1 401 15 view .LVU198
 807 0052 04E0     		b	.L45
 808              	.LVL59:
 809              	.L49:
 410:base/os/FreeRTOS/Source/timers.c **** 		}
 810              		.loc 1 410 4 is_stmt 1 view .LVU199
 410:base/os/FreeRTOS/Source/timers.c **** 		}
 811              		.loc 1 410 14 is_stmt 0 view .LVU200
 812 0054 0023     		movs	r3, #0
 813              	.LVL60:
 410:base/os/FreeRTOS/Source/timers.c **** 		}
 814              		.loc 1 410 14 view .LVU201
 815 0056 6246     		mov	r2, ip
 816              	.LVL61:
 410:base/os/FreeRTOS/Source/timers.c **** 		}
 817              		.loc 1 410 14 view .LVU202
 818 0058 6946     		mov	r1, sp
 819              	.LVL62:
 410:base/os/FreeRTOS/Source/timers.c **** 		}
 820              		.loc 1 410 14 view .LVU203
 821 005a FFF7FEFF 		bl	xQueueGenericSendFromISR
 822              	.LVL63:
 823              	.L45:
 421:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 824              		.loc 1 421 1 view .LVU204
 825 005e 05B0     		add	sp, sp, #20
 826              	.LCFI21:
 827              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cccNjxhi.s 			page 38


 828              		@ sp needed
 829 0060 5DF804FB 		ldr	pc, [sp], #4
 830              	.LVL64:
 831              	.L51:
 832              	.LCFI22:
 833              		.cfi_def_cfa_offset 0
 834              		.cfi_restore 14
 383:base/os/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 835              		.loc 1 383 12 view .LVU205
 836 0064 0020     		movs	r0, #0
 417:base/os/FreeRTOS/Source/timers.c **** 	}
 837              		.loc 1 417 27 is_stmt 1 view .LVU206
 420:base/os/FreeRTOS/Source/timers.c **** }
 838              		.loc 1 420 2 view .LVU207
 421:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 839              		.loc 1 421 1 is_stmt 0 view .LVU208
 840 0066 7047     		bx	lr
 841              	.L59:
 842              		.align	2
 843              	.L58:
 844 0068 00000000 		.word	.LANCHOR2
 845              		.cfi_endproc
 846              	.LFE8:
 848              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 849              		.align	1
 850              		.syntax unified
 851              		.thumb
 852              		.thumb_func
 853              		.fpu softvfp
 855              	prvSwitchTimerLists:
 856              	.LFB20:
 836:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 857              		.loc 1 836 1 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861 0000 70B5     		push	{r4, r5, r6, lr}
 862              	.LCFI23:
 863              		.cfi_def_cfa_offset 16
 864              		.cfi_offset 4, -16
 865              		.cfi_offset 5, -12
 866              		.cfi_offset 6, -8
 867              		.cfi_offset 14, -4
 868 0002 82B0     		sub	sp, sp, #8
 869              	.LCFI24:
 870              		.cfi_def_cfa_offset 24
 837:base/os/FreeRTOS/Source/timers.c **** List_t *pxTemp;
 871              		.loc 1 837 1 view .LVU210
 838:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 872              		.loc 1 838 1 view .LVU211
 839:base/os/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 873              		.loc 1 839 1 view .LVU212
 840:base/os/FreeRTOS/Source/timers.c **** 
 874              		.loc 1 840 1 view .LVU213
 846:base/os/FreeRTOS/Source/timers.c **** 	{
 875              		.loc 1 846 2 view .LVU214
 876              	.L62:
ARM GAS  /tmp/cccNjxhi.s 			page 39


 884:base/os/FreeRTOS/Source/timers.c **** 		}
 877              		.loc 1 884 28 view .LVU215
 846:base/os/FreeRTOS/Source/timers.c **** 	{
 878              		.loc 1 846 49 view .LVU216
 846:base/os/FreeRTOS/Source/timers.c **** 	{
 879              		.loc 1 846 9 is_stmt 0 view .LVU217
 880 0004 1A4B     		ldr	r3, .L69
 881 0006 1B68     		ldr	r3, [r3]
 882 0008 1A68     		ldr	r2, [r3]
 846:base/os/FreeRTOS/Source/timers.c **** 	{
 883              		.loc 1 846 49 view .LVU218
 884 000a 52B3     		cbz	r2, .L68
 848:base/os/FreeRTOS/Source/timers.c **** 
 885              		.loc 1 848 3 is_stmt 1 view .LVU219
 848:base/os/FreeRTOS/Source/timers.c **** 
 886              		.loc 1 848 21 is_stmt 0 view .LVU220
 887 000c DB68     		ldr	r3, [r3, #12]
 848:base/os/FreeRTOS/Source/timers.c **** 
 888              		.loc 1 848 19 view .LVU221
 889 000e 1E68     		ldr	r6, [r3]
 890              	.LVL65:
 851:base/os/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 891              		.loc 1 851 3 is_stmt 1 view .LVU222
 851:base/os/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 892              		.loc 1 851 11 is_stmt 0 view .LVU223
 893 0010 DC68     		ldr	r4, [r3, #12]
 894              	.LVL66:
 852:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 895              		.loc 1 852 3 is_stmt 1 view .LVU224
 852:base/os/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 896              		.loc 1 852 12 is_stmt 0 view .LVU225
 897 0012 251D     		adds	r5, r4, #4
 898 0014 2846     		mov	r0, r5
 899 0016 FFF7FEFF 		bl	uxListRemove
 900              	.LVL67:
 853:base/os/FreeRTOS/Source/timers.c **** 
 901              		.loc 1 853 32 is_stmt 1 view .LVU226
 858:base/os/FreeRTOS/Source/timers.c **** 
 902              		.loc 1 858 3 view .LVU227
 858:base/os/FreeRTOS/Source/timers.c **** 
 903              		.loc 1 858 10 is_stmt 0 view .LVU228
 904 001a 636A     		ldr	r3, [r4, #36]
 858:base/os/FreeRTOS/Source/timers.c **** 
 905              		.loc 1 858 3 view .LVU229
 906 001c 2046     		mov	r0, r4
 907 001e 9847     		blx	r3
 908              	.LVL68:
 860:base/os/FreeRTOS/Source/timers.c **** 		{
 909              		.loc 1 860 3 is_stmt 1 view .LVU230
 860:base/os/FreeRTOS/Source/timers.c **** 		{
 910              		.loc 1 860 14 is_stmt 0 view .LVU231
 911 0020 E369     		ldr	r3, [r4, #28]
 860:base/os/FreeRTOS/Source/timers.c **** 		{
 912              		.loc 1 860 5 view .LVU232
 913 0022 012B     		cmp	r3, #1
 914 0024 EED1     		bne	.L62
 868:base/os/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
ARM GAS  /tmp/cccNjxhi.s 			page 40


 915              		.loc 1 868 4 is_stmt 1 view .LVU233
 868:base/os/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 916              		.loc 1 868 45 is_stmt 0 view .LVU234
 917 0026 A369     		ldr	r3, [r4, #24]
 868:base/os/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 918              		.loc 1 868 16 view .LVU235
 919 0028 3344     		add	r3, r3, r6
 920              	.LVL69:
 869:base/os/FreeRTOS/Source/timers.c **** 			{
 921              		.loc 1 869 4 is_stmt 1 view .LVU236
 869:base/os/FreeRTOS/Source/timers.c **** 			{
 922              		.loc 1 869 6 is_stmt 0 view .LVU237
 923 002a 9E42     		cmp	r6, r3
 924 002c 07D2     		bcs	.L63
 871:base/os/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 925              		.loc 1 871 5 is_stmt 1 view .LVU238
 926 002e 6360     		str	r3, [r4, #4]
 872:base/os/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 927              		.loc 1 872 5 view .LVU239
 928 0030 2461     		str	r4, [r4, #16]
 873:base/os/FreeRTOS/Source/timers.c **** 			}
 929              		.loc 1 873 5 view .LVU240
 930 0032 2946     		mov	r1, r5
 931 0034 0E4B     		ldr	r3, .L69
 932              	.LVL70:
 873:base/os/FreeRTOS/Source/timers.c **** 			}
 933              		.loc 1 873 5 is_stmt 0 view .LVU241
 934 0036 1868     		ldr	r0, [r3]
 935 0038 FFF7FEFF 		bl	vListInsert
 936              	.LVL71:
 873:base/os/FreeRTOS/Source/timers.c **** 			}
 937              		.loc 1 873 5 view .LVU242
 938 003c E2E7     		b	.L62
 939              	.LVL72:
 940              	.L63:
 877:base/os/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 941              		.loc 1 877 5 is_stmt 1 view .LVU243
 877:base/os/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 942              		.loc 1 877 15 is_stmt 0 view .LVU244
 943 003e 0021     		movs	r1, #0
 944 0040 0091     		str	r1, [sp]
 945 0042 0B46     		mov	r3, r1
 946              	.LVL73:
 877:base/os/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 947              		.loc 1 877 15 view .LVU245
 948 0044 3246     		mov	r2, r6
 949 0046 2046     		mov	r0, r4
 950 0048 FFF7FEFF 		bl	xTimerGenericCommand
 951              	.LVL74:
 878:base/os/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 952              		.loc 1 878 5 is_stmt 1 view .LVU246
 953 004c 0028     		cmp	r0, #0
 954 004e D9D1     		bne	.L62
 878:base/os/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 955              		.loc 1 878 5 view .LVU247
 956              	.LBB54:
 957              	.LBI54:
ARM GAS  /tmp/cccNjxhi.s 			page 41


 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 958              		.loc 2 191 30 view .LVU248
 959              	.LBB55:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 960              		.loc 2 193 1 view .LVU249
 961              		.loc 2 195 2 view .LVU250
 962              		.syntax unified
 963              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 964 0050 4FF05003 			mov r3, #80												
 965 0054 83F31188 		msr basepri, r3											
 966 0058 BFF36F8F 		isb														
 967 005c BFF34F8F 		dsb														
 968              	
 969              	@ 0 "" 2
 970              	.LVL75:
 971              		.thumb
 972              		.syntax unified
 973              	.L65:
 974              		.loc 2 195 2 is_stmt 0 view .LVU251
 975              	.LBE55:
 976              	.LBE54:
 878:base/os/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 977              		.loc 1 878 5 is_stmt 1 discriminator 1 view .LVU252
 878:base/os/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 978              		.loc 1 878 5 discriminator 1 view .LVU253
 979 0060 FEE7     		b	.L65
 980              	.LVL76:
 981              	.L68:
 888:base/os/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 982              		.loc 1 888 2 view .LVU254
 889:base/os/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 983              		.loc 1 889 2 view .LVU255
 889:base/os/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 984              		.loc 1 889 21 is_stmt 0 view .LVU256
 985 0062 044A     		ldr	r2, .L69+4
 986 0064 1068     		ldr	r0, [r2]
 987 0066 0249     		ldr	r1, .L69
 988 0068 0860     		str	r0, [r1]
 890:base/os/FreeRTOS/Source/timers.c **** }
 989              		.loc 1 890 2 is_stmt 1 view .LVU257
 890:base/os/FreeRTOS/Source/timers.c **** }
 990              		.loc 1 890 22 is_stmt 0 view .LVU258
 991 006a 1360     		str	r3, [r2]
 891:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 992              		.loc 1 891 1 view .LVU259
 993 006c 02B0     		add	sp, sp, #8
 994              	.LCFI25:
 995              		.cfi_def_cfa_offset 16
 996              		@ sp needed
 997 006e 70BD     		pop	{r4, r5, r6, pc}
 998              	.L70:
 999              		.align	2
 1000              	.L69:
 1001 0070 00000000 		.word	.LANCHOR0
 1002 0074 00000000 		.word	.LANCHOR1
 1003              		.cfi_endproc
 1004              	.LFE20:
ARM GAS  /tmp/cccNjxhi.s 			page 42


 1006              		.section	.text.prvSampleTimeNow,"ax",%progbits
 1007              		.align	1
 1008              		.syntax unified
 1009              		.thumb
 1010              		.thumb_func
 1011              		.fpu softvfp
 1013              	prvSampleTimeNow:
 1014              	.LVL77:
 1015              	.LFB17:
 625:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 1016              		.loc 1 625 1 is_stmt 1 view -0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 625:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 1020              		.loc 1 625 1 is_stmt 0 view .LVU261
 1021 0000 38B5     		push	{r3, r4, r5, lr}
 1022              	.LCFI26:
 1023              		.cfi_def_cfa_offset 16
 1024              		.cfi_offset 3, -16
 1025              		.cfi_offset 4, -12
 1026              		.cfi_offset 5, -8
 1027              		.cfi_offset 14, -4
 1028 0002 0546     		mov	r5, r0
 626:base/os/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 1029              		.loc 1 626 1 is_stmt 1 view .LVU262
 627:base/os/FreeRTOS/Source/timers.c **** 
 1030              		.loc 1 627 17 view .LVU263
 629:base/os/FreeRTOS/Source/timers.c **** 
 1031              		.loc 1 629 2 view .LVU264
 629:base/os/FreeRTOS/Source/timers.c **** 
 1032              		.loc 1 629 13 is_stmt 0 view .LVU265
 1033 0004 FFF7FEFF 		bl	xTaskGetTickCount
 1034              	.LVL78:
 629:base/os/FreeRTOS/Source/timers.c **** 
 1035              		.loc 1 629 13 view .LVU266
 1036 0008 0446     		mov	r4, r0
 1037              	.LVL79:
 631:base/os/FreeRTOS/Source/timers.c **** 	{
 1038              		.loc 1 631 2 is_stmt 1 view .LVU267
 631:base/os/FreeRTOS/Source/timers.c **** 	{
 1039              		.loc 1 631 15 is_stmt 0 view .LVU268
 1040 000a 074B     		ldr	r3, .L76
 1041 000c 1B68     		ldr	r3, [r3]
 631:base/os/FreeRTOS/Source/timers.c **** 	{
 1042              		.loc 1 631 4 view .LVU269
 1043 000e 8342     		cmp	r3, r0
 1044 0010 05D8     		bhi	.L75
 638:base/os/FreeRTOS/Source/timers.c **** 	}
 1045              		.loc 1 638 3 is_stmt 1 view .LVU270
 638:base/os/FreeRTOS/Source/timers.c **** 	}
 1046              		.loc 1 638 29 is_stmt 0 view .LVU271
 1047 0012 0023     		movs	r3, #0
 1048 0014 2B60     		str	r3, [r5]
 1049              	.LVL80:
 1050              	.L73:
 641:base/os/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccNjxhi.s 			page 43


 1051              		.loc 1 641 2 is_stmt 1 view .LVU272
 641:base/os/FreeRTOS/Source/timers.c **** 
 1052              		.loc 1 641 12 is_stmt 0 view .LVU273
 1053 0016 044B     		ldr	r3, .L76
 1054 0018 1C60     		str	r4, [r3]
 643:base/os/FreeRTOS/Source/timers.c **** }
 1055              		.loc 1 643 2 is_stmt 1 view .LVU274
 644:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1056              		.loc 1 644 1 is_stmt 0 view .LVU275
 1057 001a 2046     		mov	r0, r4
 1058 001c 38BD     		pop	{r3, r4, r5, pc}
 1059              	.LVL81:
 1060              	.L75:
 633:base/os/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 1061              		.loc 1 633 3 is_stmt 1 view .LVU276
 1062 001e FFF7FEFF 		bl	prvSwitchTimerLists
 1063              	.LVL82:
 634:base/os/FreeRTOS/Source/timers.c **** 	}
 1064              		.loc 1 634 3 view .LVU277
 634:base/os/FreeRTOS/Source/timers.c **** 	}
 1065              		.loc 1 634 29 is_stmt 0 view .LVU278
 1066 0022 0123     		movs	r3, #1
 1067 0024 2B60     		str	r3, [r5]
 1068 0026 F6E7     		b	.L73
 1069              	.L77:
 1070              		.align	2
 1071              	.L76:
 1072 0028 00000000 		.word	.LANCHOR8
 1073              		.cfi_endproc
 1074              	.LFE17:
 1076              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 1077              		.align	1
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	prvProcessExpiredTimer:
 1084              	.LVL83:
 1085              	.LFB13:
 463:base/os/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 1086              		.loc 1 463 1 is_stmt 1 view -0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 463:base/os/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 1090              		.loc 1 463 1 is_stmt 0 view .LVU280
 1091 0000 70B5     		push	{r4, r5, r6, lr}
 1092              	.LCFI27:
 1093              		.cfi_def_cfa_offset 16
 1094              		.cfi_offset 4, -16
 1095              		.cfi_offset 5, -12
 1096              		.cfi_offset 6, -8
 1097              		.cfi_offset 14, -4
 1098 0002 82B0     		sub	sp, sp, #8
 1099              	.LCFI28:
 1100              		.cfi_def_cfa_offset 24
 1101 0004 0646     		mov	r6, r0
ARM GAS  /tmp/cccNjxhi.s 			page 44


 1102 0006 0D46     		mov	r5, r1
 464:base/os/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 1103              		.loc 1 464 1 is_stmt 1 view .LVU281
 465:base/os/FreeRTOS/Source/timers.c **** 
 1104              		.loc 1 465 1 view .LVU282
 465:base/os/FreeRTOS/Source/timers.c **** 
 1105              		.loc 1 465 41 is_stmt 0 view .LVU283
 1106 0008 1449     		ldr	r1, .L83
 1107              	.LVL84:
 465:base/os/FreeRTOS/Source/timers.c **** 
 1108              		.loc 1 465 41 view .LVU284
 1109 000a 0968     		ldr	r1, [r1]
 1110 000c C968     		ldr	r1, [r1, #12]
 465:base/os/FreeRTOS/Source/timers.c **** 
 1111              		.loc 1 465 17 view .LVU285
 1112 000e CC68     		ldr	r4, [r1, #12]
 1113              	.LVL85:
 469:base/os/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 1114              		.loc 1 469 2 is_stmt 1 view .LVU286
 469:base/os/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 1115              		.loc 1 469 11 is_stmt 0 view .LVU287
 1116 0010 201D     		adds	r0, r4, #4
 1117              	.LVL86:
 469:base/os/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 1118              		.loc 1 469 11 view .LVU288
 1119 0012 FFF7FEFF 		bl	uxListRemove
 1120              	.LVL87:
 470:base/os/FreeRTOS/Source/timers.c **** 
 1121              		.loc 1 470 31 is_stmt 1 view .LVU289
 474:base/os/FreeRTOS/Source/timers.c **** 	{
 1122              		.loc 1 474 2 view .LVU290
 474:base/os/FreeRTOS/Source/timers.c **** 	{
 1123              		.loc 1 474 13 is_stmt 0 view .LVU291
 1124 0016 E169     		ldr	r1, [r4, #28]
 474:base/os/FreeRTOS/Source/timers.c **** 	{
 1125              		.loc 1 474 4 view .LVU292
 1126 0018 0129     		cmp	r1, #1
 1127 001a 04D0     		beq	.L82
 1128              	.L79:
 494:base/os/FreeRTOS/Source/timers.c **** 	}
 1129              		.loc 1 494 27 is_stmt 1 view .LVU293
 498:base/os/FreeRTOS/Source/timers.c **** }
 1130              		.loc 1 498 2 view .LVU294
 498:base/os/FreeRTOS/Source/timers.c **** }
 1131              		.loc 1 498 9 is_stmt 0 view .LVU295
 1132 001c 636A     		ldr	r3, [r4, #36]
 498:base/os/FreeRTOS/Source/timers.c **** }
 1133              		.loc 1 498 2 view .LVU296
 1134 001e 2046     		mov	r0, r4
 1135 0020 9847     		blx	r3
 1136              	.LVL88:
 499:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1137              		.loc 1 499 1 view .LVU297
 1138 0022 02B0     		add	sp, sp, #8
 1139              	.LCFI29:
 1140              		.cfi_remember_state
 1141              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cccNjxhi.s 			page 45


 1142              		@ sp needed
 1143 0024 70BD     		pop	{r4, r5, r6, pc}
 1144              	.LVL89:
 1145              	.L82:
 1146              	.LCFI30:
 1147              		.cfi_restore_state
 479:base/os/FreeRTOS/Source/timers.c **** 		{
 1148              		.loc 1 479 3 is_stmt 1 view .LVU298
 479:base/os/FreeRTOS/Source/timers.c **** 		{
 1149              		.loc 1 479 71 is_stmt 0 view .LVU299
 1150 0026 A169     		ldr	r1, [r4, #24]
 479:base/os/FreeRTOS/Source/timers.c **** 		{
 1151              		.loc 1 479 7 view .LVU300
 1152 0028 3346     		mov	r3, r6
 1153 002a 2A46     		mov	r2, r5
 1154 002c 3144     		add	r1, r1, r6
 1155 002e 2046     		mov	r0, r4
 1156 0030 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1157              	.LVL90:
 479:base/os/FreeRTOS/Source/timers.c **** 		{
 1158              		.loc 1 479 5 view .LVU301
 1159 0034 0028     		cmp	r0, #0
 1160 0036 F1D0     		beq	.L79
 483:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 1161              		.loc 1 483 4 is_stmt 1 view .LVU302
 483:base/os/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 1162              		.loc 1 483 14 is_stmt 0 view .LVU303
 1163 0038 0021     		movs	r1, #0
 1164 003a 0091     		str	r1, [sp]
 1165 003c 0B46     		mov	r3, r1
 1166 003e 3246     		mov	r2, r6
 1167 0040 2046     		mov	r0, r4
 1168 0042 FFF7FEFF 		bl	xTimerGenericCommand
 1169              	.LVL91:
 484:base/os/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 1170              		.loc 1 484 4 is_stmt 1 view .LVU304
 1171 0046 0028     		cmp	r0, #0
 1172 0048 E8D1     		bne	.L79
 484:base/os/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 1173              		.loc 1 484 4 view .LVU305
 1174              	.LBB56:
 1175              	.LBI56:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1176              		.loc 2 191 30 view .LVU306
 1177              	.LBB57:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1178              		.loc 2 193 1 view .LVU307
 1179              		.loc 2 195 2 view .LVU308
 1180              		.syntax unified
 1181              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1182 004a 4FF05003 			mov r3, #80												
 1183 004e 83F31188 		msr basepri, r3											
 1184 0052 BFF36F8F 		isb														
 1185 0056 BFF34F8F 		dsb														
 1186              	
 1187              	@ 0 "" 2
 1188              	.LVL92:
ARM GAS  /tmp/cccNjxhi.s 			page 46


 1189              		.thumb
 1190              		.syntax unified
 1191              	.L80:
 1192              		.loc 2 195 2 is_stmt 0 view .LVU309
 1193              	.LBE57:
 1194              	.LBE56:
 484:base/os/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 1195              		.loc 1 484 4 is_stmt 1 discriminator 1 view .LVU310
 484:base/os/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 1196              		.loc 1 484 4 discriminator 1 view .LVU311
 1197 005a FEE7     		b	.L80
 1198              	.L84:
 1199              		.align	2
 1200              	.L83:
 1201 005c 00000000 		.word	.LANCHOR0
 1202              		.cfi_endproc
 1203              	.LFE13:
 1205              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 1206              		.align	1
 1207              		.syntax unified
 1208              		.thumb
 1209              		.thumb_func
 1210              		.fpu softvfp
 1212              	prvProcessTimerOrBlockTask:
 1213              	.LVL93:
 1214              	.LFB15:
 539:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 1215              		.loc 1 539 1 view -0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 8
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
 539:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 1219              		.loc 1 539 1 is_stmt 0 view .LVU313
 1220 0000 70B5     		push	{r4, r5, r6, lr}
 1221              	.LCFI31:
 1222              		.cfi_def_cfa_offset 16
 1223              		.cfi_offset 4, -16
 1224              		.cfi_offset 5, -12
 1225              		.cfi_offset 6, -8
 1226              		.cfi_offset 14, -4
 1227 0002 82B0     		sub	sp, sp, #8
 1228              	.LCFI32:
 1229              		.cfi_def_cfa_offset 24
 1230 0004 0646     		mov	r6, r0
 1231 0006 0C46     		mov	r4, r1
 540:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 1232              		.loc 1 540 1 is_stmt 1 view .LVU314
 541:base/os/FreeRTOS/Source/timers.c **** 
 1233              		.loc 1 541 1 view .LVU315
 543:base/os/FreeRTOS/Source/timers.c **** 	{
 1234              		.loc 1 543 2 view .LVU316
 1235 0008 FFF7FEFF 		bl	vTaskSuspendAll
 1236              	.LVL94:
 550:base/os/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 1237              		.loc 1 550 3 view .LVU317
 550:base/os/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 1238              		.loc 1 550 14 is_stmt 0 view .LVU318
ARM GAS  /tmp/cccNjxhi.s 			page 47


 1239 000c 01A8     		add	r0, sp, #4
 1240 000e FFF7FEFF 		bl	prvSampleTimeNow
 1241              	.LVL95:
 551:base/os/FreeRTOS/Source/timers.c **** 		{
 1242              		.loc 1 551 3 is_stmt 1 view .LVU319
 551:base/os/FreeRTOS/Source/timers.c **** 		{
 1243              		.loc 1 551 31 is_stmt 0 view .LVU320
 1244 0012 019B     		ldr	r3, [sp, #4]
 551:base/os/FreeRTOS/Source/timers.c **** 		{
 1245              		.loc 1 551 5 view .LVU321
 1246 0014 2BBB     		cbnz	r3, .L86
 1247 0016 0546     		mov	r5, r0
 554:base/os/FreeRTOS/Source/timers.c **** 			{
 1248              		.loc 1 554 4 is_stmt 1 view .LVU322
 554:base/os/FreeRTOS/Source/timers.c **** 			{
 1249              		.loc 1 554 6 is_stmt 0 view .LVU323
 1250 0018 0CB9     		cbnz	r4, .L87
 554:base/os/FreeRTOS/Source/timers.c **** 			{
 1251              		.loc 1 554 37 discriminator 1 view .LVU324
 1252 001a B042     		cmp	r0, r6
 1253 001c 1AD2     		bcs	.L91
 1254              	.L87:
 567:base/os/FreeRTOS/Source/timers.c **** 				{
 1255              		.loc 1 567 5 is_stmt 1 view .LVU325
 567:base/os/FreeRTOS/Source/timers.c **** 				{
 1256              		.loc 1 567 7 is_stmt 0 view .LVU326
 1257 001e 2CB1     		cbz	r4, .L89
 571:base/os/FreeRTOS/Source/timers.c **** 				}
 1258              		.loc 1 571 6 is_stmt 1 view .LVU327
 571:base/os/FreeRTOS/Source/timers.c **** 				}
 1259              		.loc 1 571 22 is_stmt 0 view .LVU328
 1260 0020 124B     		ldr	r3, .L92
 1261 0022 1B68     		ldr	r3, [r3]
 1262 0024 1C68     		ldr	r4, [r3]
 1263              	.LVL96:
 571:base/os/FreeRTOS/Source/timers.c **** 				}
 1264              		.loc 1 571 22 view .LVU329
 1265 0026 B4FA84F4 		clz	r4, r4
 1266 002a 6409     		lsrs	r4, r4, #5
 1267              	.LVL97:
 1268              	.L89:
 574:base/os/FreeRTOS/Source/timers.c **** 
 1269              		.loc 1 574 5 is_stmt 1 view .LVU330
 1270 002c 2246     		mov	r2, r4
 1271 002e 711B     		subs	r1, r6, r5
 1272 0030 0F4B     		ldr	r3, .L92+4
 1273 0032 1868     		ldr	r0, [r3]
 1274              	.LVL98:
 574:base/os/FreeRTOS/Source/timers.c **** 
 1275              		.loc 1 574 5 is_stmt 0 view .LVU331
 1276 0034 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 1277              	.LVL99:
 576:base/os/FreeRTOS/Source/timers.c **** 				{
 1278              		.loc 1 576 5 is_stmt 1 view .LVU332
 576:base/os/FreeRTOS/Source/timers.c **** 				{
 1279              		.loc 1 576 9 is_stmt 0 view .LVU333
 1280 0038 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/cccNjxhi.s 			page 48


 1281              	.LVL100:
 576:base/os/FreeRTOS/Source/timers.c **** 				{
 1282              		.loc 1 576 7 view .LVU334
 1283 003c 98B9     		cbnz	r0, .L85
 582:base/os/FreeRTOS/Source/timers.c **** 				}
 1284              		.loc 1 582 6 is_stmt 1 view .LVU335
 1285 003e 4FF0E023 		mov	r3, #-536813568
 1286 0042 4FF08052 		mov	r2, #268435456
 1287 0046 C3F8042D 		str	r2, [r3, #3332]
 582:base/os/FreeRTOS/Source/timers.c **** 				}
 1288              		.loc 1 582 6 view .LVU336
 1289              		.syntax unified
 1290              	@ 582 "base/os/FreeRTOS/Source/timers.c" 1
 1291 004a BFF34F8F 		dsb
 1292              	@ 0 "" 2
 582:base/os/FreeRTOS/Source/timers.c **** 				}
 1293              		.loc 1 582 6 view .LVU337
 1294              	@ 582 "base/os/FreeRTOS/Source/timers.c" 1
 1295 004e BFF36F8F 		isb
 1296              	@ 0 "" 2
 582:base/os/FreeRTOS/Source/timers.c **** 				}
 1297              		.loc 1 582 28 view .LVU338
 1298              		.thumb
 1299              		.syntax unified
 1300 0052 08E0     		b	.L85
 1301              	.LVL101:
 1302              	.L91:
 556:base/os/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1303              		.loc 1 556 5 view .LVU339
 556:base/os/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1304              		.loc 1 556 14 is_stmt 0 view .LVU340
 1305 0054 FFF7FEFF 		bl	xTaskResumeAll
 1306              	.LVL102:
 557:base/os/FreeRTOS/Source/timers.c **** 			}
 1307              		.loc 1 557 5 is_stmt 1 view .LVU341
 1308 0058 2946     		mov	r1, r5
 1309 005a 3046     		mov	r0, r6
 1310 005c FFF7FEFF 		bl	prvProcessExpiredTimer
 1311              	.LVL103:
 1312 0060 01E0     		b	.L85
 1313              	.LVL104:
 1314              	.L86:
 592:base/os/FreeRTOS/Source/timers.c **** 		}
 1315              		.loc 1 592 4 view .LVU342
 592:base/os/FreeRTOS/Source/timers.c **** 		}
 1316              		.loc 1 592 13 is_stmt 0 view .LVU343
 1317 0062 FFF7FEFF 		bl	xTaskResumeAll
 1318              	.LVL105:
 1319              	.L85:
 595:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1320              		.loc 1 595 1 view .LVU344
 1321 0066 02B0     		add	sp, sp, #8
 1322              	.LCFI33:
 1323              		.cfi_def_cfa_offset 16
 1324              		@ sp needed
 1325 0068 70BD     		pop	{r4, r5, r6, pc}
 1326              	.LVL106:
ARM GAS  /tmp/cccNjxhi.s 			page 49


 1327              	.L93:
 595:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1328              		.loc 1 595 1 view .LVU345
 1329 006a 00BF     		.align	2
 1330              	.L92:
 1331 006c 00000000 		.word	.LANCHOR1
 1332 0070 00000000 		.word	.LANCHOR2
 1333              		.cfi_endproc
 1334              	.LFE15:
 1336              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1337              		.align	1
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1341              		.fpu softvfp
 1343              	prvProcessReceivedCommands:
 1344              	.LFB19:
 689:base/os/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 1345              		.loc 1 689 1 is_stmt 1 view -0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 24
 1348              		@ frame_needed = 0, uses_anonymous_args = 0
 1349 0000 10B5     		push	{r4, lr}
 1350              	.LCFI34:
 1351              		.cfi_def_cfa_offset 8
 1352              		.cfi_offset 4, -8
 1353              		.cfi_offset 14, -4
 1354 0002 88B0     		sub	sp, sp, #32
 1355              	.LCFI35:
 1356              		.cfi_def_cfa_offset 40
 690:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 1357              		.loc 1 690 1 view .LVU347
 691:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 1358              		.loc 1 691 1 view .LVU348
 692:base/os/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 1359              		.loc 1 692 1 view .LVU349
 693:base/os/FreeRTOS/Source/timers.c **** 
 1360              		.loc 1 693 1 view .LVU350
 695:base/os/FreeRTOS/Source/timers.c **** 	{
 1361              		.loc 1 695 2 view .LVU351
 695:base/os/FreeRTOS/Source/timers.c **** 	{
 1362              		.loc 1 695 7 is_stmt 0 view .LVU352
 1363 0004 02E0     		b	.L97
 1364              	.L96:
 714:base/os/FreeRTOS/Source/timers.c **** 			}
 1365              		.loc 1 714 29 is_stmt 1 view .LVU353
 721:base/os/FreeRTOS/Source/timers.c **** 		{
 1366              		.loc 1 721 3 view .LVU354
 721:base/os/FreeRTOS/Source/timers.c **** 		{
 1367              		.loc 1 721 15 is_stmt 0 view .LVU355
 1368 0006 049B     		ldr	r3, [sp, #16]
 721:base/os/FreeRTOS/Source/timers.c **** 		{
 1369              		.loc 1 721 5 view .LVU356
 1370 0008 002B     		cmp	r3, #0
 1371 000a 0FDA     		bge	.L110
 1372              	.L97:
 695:base/os/FreeRTOS/Source/timers.c **** 	{
ARM GAS  /tmp/cccNjxhi.s 			page 50


 1373              		.loc 1 695 62 is_stmt 1 view .LVU357
 695:base/os/FreeRTOS/Source/timers.c **** 	{
 1374              		.loc 1 695 9 is_stmt 0 view .LVU358
 1375 000c 0022     		movs	r2, #0
 1376 000e 04A9     		add	r1, sp, #16
 1377 0010 384B     		ldr	r3, .L113
 1378 0012 1868     		ldr	r0, [r3]
 1379 0014 FFF7FEFF 		bl	xQueueReceive
 1380              	.LVL107:
 695:base/os/FreeRTOS/Source/timers.c **** 	{
 1381              		.loc 1 695 62 view .LVU359
 1382 0018 0028     		cmp	r0, #0
 1383 001a 69D0     		beq	.L111
 701:base/os/FreeRTOS/Source/timers.c **** 			{
 1384              		.loc 1 701 4 is_stmt 1 view .LVU360
 701:base/os/FreeRTOS/Source/timers.c **** 			{
 1385              		.loc 1 701 16 is_stmt 0 view .LVU361
 1386 001c 049B     		ldr	r3, [sp, #16]
 701:base/os/FreeRTOS/Source/timers.c **** 			{
 1387              		.loc 1 701 6 view .LVU362
 1388 001e 002B     		cmp	r3, #0
 1389 0020 F1DA     		bge	.L96
 1390              	.LBB58:
 703:base/os/FreeRTOS/Source/timers.c **** 
 1391              		.loc 1 703 5 is_stmt 1 discriminator 2 view .LVU363
 1392              	.LVL108:
 707:base/os/FreeRTOS/Source/timers.c **** 
 1393              		.loc 1 707 5 discriminator 2 view .LVU364
 707:base/os/FreeRTOS/Source/timers.c **** 
 1394              		.loc 1 707 31 discriminator 2 view .LVU365
 710:base/os/FreeRTOS/Source/timers.c **** 			}
 1395              		.loc 1 710 5 discriminator 2 view .LVU366
 1396 0022 0799     		ldr	r1, [sp, #28]
 1397 0024 0698     		ldr	r0, [sp, #24]
 1398 0026 059B     		ldr	r3, [sp, #20]
 1399 0028 9847     		blx	r3
 1400              	.LVL109:
 1401              	.LBE58:
 1402 002a ECE7     		b	.L96
 1403              	.LVL110:
 1404              	.L110:
 725:base/os/FreeRTOS/Source/timers.c **** 
 1405              		.loc 1 725 4 view .LVU367
 725:base/os/FreeRTOS/Source/timers.c **** 
 1406              		.loc 1 725 12 is_stmt 0 view .LVU368
 1407 002c 069C     		ldr	r4, [sp, #24]
 1408              	.LVL111:
 727:base/os/FreeRTOS/Source/timers.c **** 			{
 1409              		.loc 1 727 4 is_stmt 1 view .LVU369
 727:base/os/FreeRTOS/Source/timers.c **** 			{
 1410              		.loc 1 727 8 is_stmt 0 view .LVU370
 1411 002e 6369     		ldr	r3, [r4, #20]
 727:base/os/FreeRTOS/Source/timers.c **** 			{
 1412              		.loc 1 727 6 view .LVU371
 1413 0030 13B1     		cbz	r3, .L98
 730:base/os/FreeRTOS/Source/timers.c **** 			}
 1414              		.loc 1 730 5 is_stmt 1 view .LVU372
ARM GAS  /tmp/cccNjxhi.s 			page 51


 730:base/os/FreeRTOS/Source/timers.c **** 			}
 1415              		.loc 1 730 14 is_stmt 0 view .LVU373
 1416 0032 201D     		adds	r0, r4, #4
 1417 0034 FFF7FEFF 		bl	uxListRemove
 1418              	.LVL112:
 1419              	.L98:
 734:base/os/FreeRTOS/Source/timers.c **** 			}
 1420              		.loc 1 734 29 is_stmt 1 view .LVU374
 737:base/os/FreeRTOS/Source/timers.c **** 
 1421              		.loc 1 737 106 view .LVU375
 745:base/os/FreeRTOS/Source/timers.c **** 
 1422              		.loc 1 745 4 view .LVU376
 745:base/os/FreeRTOS/Source/timers.c **** 
 1423              		.loc 1 745 15 is_stmt 0 view .LVU377
 1424 0038 03A8     		add	r0, sp, #12
 1425 003a FFF7FEFF 		bl	prvSampleTimeNow
 1426              	.LVL113:
 747:base/os/FreeRTOS/Source/timers.c **** 			{
 1427              		.loc 1 747 4 is_stmt 1 view .LVU378
 747:base/os/FreeRTOS/Source/timers.c **** 			{
 1428              		.loc 1 747 20 is_stmt 0 view .LVU379
 1429 003e 049B     		ldr	r3, [sp, #16]
 747:base/os/FreeRTOS/Source/timers.c **** 			{
 1430              		.loc 1 747 4 view .LVU380
 1431 0040 092B     		cmp	r3, #9
 1432 0042 E3D8     		bhi	.L97
 1433 0044 01A2     		adr	r2, .L101
 1434 0046 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1435 004a 00BF     		.p2align 2
 1436              	.L101:
 1437 004c 75000000 		.word	.L102+1
 1438 0050 75000000 		.word	.L102+1
 1439 0054 75000000 		.word	.L102+1
 1440 0058 0D000000 		.word	.L97+1
 1441 005c BB000000 		.word	.L100+1
 1442 0060 E1000000 		.word	.L103+1
 1443 0064 75000000 		.word	.L102+1
 1444 0068 75000000 		.word	.L102+1
 1445 006c 0D000000 		.word	.L97+1
 1446 0070 BB000000 		.word	.L100+1
 1447              		.p2align 1
 1448              	.L102:
 755:base/os/FreeRTOS/Source/timers.c **** 					{
 1449              		.loc 1 755 6 is_stmt 1 view .LVU381
 755:base/os/FreeRTOS/Source/timers.c **** 					{
 1450              		.loc 1 755 75 is_stmt 0 view .LVU382
 1451 0074 059B     		ldr	r3, [sp, #20]
 755:base/os/FreeRTOS/Source/timers.c **** 					{
 1452              		.loc 1 755 99 view .LVU383
 1453 0076 A169     		ldr	r1, [r4, #24]
 755:base/os/FreeRTOS/Source/timers.c **** 					{
 1454              		.loc 1 755 10 view .LVU384
 1455 0078 0246     		mov	r2, r0
 1456 007a 1944     		add	r1, r1, r3
 1457 007c 2046     		mov	r0, r4
 1458              	.LVL114:
 755:base/os/FreeRTOS/Source/timers.c **** 					{
ARM GAS  /tmp/cccNjxhi.s 			page 52


 1459              		.loc 1 755 10 view .LVU385
 1460 007e FFF7FEFF 		bl	prvInsertTimerInActiveList
 1461              	.LVL115:
 755:base/os/FreeRTOS/Source/timers.c **** 					{
 1462              		.loc 1 755 8 view .LVU386
 1463 0082 0028     		cmp	r0, #0
 1464 0084 C2D0     		beq	.L97
 759:base/os/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1465              		.loc 1 759 7 is_stmt 1 view .LVU387
 759:base/os/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1466              		.loc 1 759 14 is_stmt 0 view .LVU388
 1467 0086 636A     		ldr	r3, [r4, #36]
 759:base/os/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1468              		.loc 1 759 7 view .LVU389
 1469 0088 2046     		mov	r0, r4
 1470 008a 9847     		blx	r3
 1471              	.LVL116:
 760:base/os/FreeRTOS/Source/timers.c **** 
 1472              		.loc 1 760 36 is_stmt 1 view .LVU390
 762:base/os/FreeRTOS/Source/timers.c **** 						{
 1473              		.loc 1 762 7 view .LVU391
 762:base/os/FreeRTOS/Source/timers.c **** 						{
 1474              		.loc 1 762 18 is_stmt 0 view .LVU392
 1475 008c E369     		ldr	r3, [r4, #28]
 762:base/os/FreeRTOS/Source/timers.c **** 						{
 1476              		.loc 1 762 9 view .LVU393
 1477 008e 012B     		cmp	r3, #1
 1478 0090 BCD1     		bne	.L97
 764:base/os/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1479              		.loc 1 764 8 is_stmt 1 view .LVU394
 764:base/os/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1480              		.loc 1 764 129 is_stmt 0 view .LVU395
 1481 0092 A269     		ldr	r2, [r4, #24]
 764:base/os/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1482              		.loc 1 764 18 view .LVU396
 1483 0094 0021     		movs	r1, #0
 1484 0096 0091     		str	r1, [sp]
 1485 0098 0B46     		mov	r3, r1
 1486 009a 0598     		ldr	r0, [sp, #20]
 1487 009c 0244     		add	r2, r2, r0
 1488 009e 2046     		mov	r0, r4
 1489 00a0 FFF7FEFF 		bl	xTimerGenericCommand
 1490              	.LVL117:
 765:base/os/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1491              		.loc 1 765 8 is_stmt 1 view .LVU397
 1492 00a4 0028     		cmp	r0, #0
 1493 00a6 B1D1     		bne	.L97
 765:base/os/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1494              		.loc 1 765 8 view .LVU398
 1495              	.LBB59:
 1496              	.LBI59:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1497              		.loc 2 191 30 view .LVU399
 1498              	.LBB60:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1499              		.loc 2 193 1 view .LVU400
 1500              		.loc 2 195 2 view .LVU401
ARM GAS  /tmp/cccNjxhi.s 			page 53


 1501              		.syntax unified
 1502              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1503 00a8 4FF05003 			mov r3, #80												
 1504 00ac 83F31188 		msr basepri, r3											
 1505 00b0 BFF36F8F 		isb														
 1506 00b4 BFF34F8F 		dsb														
 1507              	
 1508              	@ 0 "" 2
 1509              	.LVL118:
 1510              		.thumb
 1511              		.syntax unified
 1512              	.L104:
 1513              		.loc 2 195 2 is_stmt 0 view .LVU402
 1514              	.LBE60:
 1515              	.LBE59:
 765:base/os/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1516              		.loc 1 765 8 is_stmt 1 discriminator 2 view .LVU403
 765:base/os/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1517              		.loc 1 765 8 discriminator 2 view .LVU404
 1518 00b8 FEE7     		b	.L104
 1519              	.LVL119:
 1520              	.L100:
 787:base/os/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1521              		.loc 1 787 6 view .LVU405
 787:base/os/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1522              		.loc 1 787 64 is_stmt 0 view .LVU406
 1523 00ba 0599     		ldr	r1, [sp, #20]
 787:base/os/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1524              		.loc 1 787 35 view .LVU407
 1525 00bc A161     		str	r1, [r4, #24]
 788:base/os/FreeRTOS/Source/timers.c **** 
 1526              		.loc 1 788 6 is_stmt 1 view .LVU408
 1527 00be 31B1     		cbz	r1, .L112
 788:base/os/FreeRTOS/Source/timers.c **** 
 1528              		.loc 1 788 58 discriminator 2 view .LVU409
 796:base/os/FreeRTOS/Source/timers.c **** 					break;
 1529              		.loc 1 796 6 discriminator 2 view .LVU410
 796:base/os/FreeRTOS/Source/timers.c **** 					break;
 1530              		.loc 1 796 15 is_stmt 0 discriminator 2 view .LVU411
 1531 00c0 0346     		mov	r3, r0
 1532 00c2 0246     		mov	r2, r0
 1533 00c4 0144     		add	r1, r1, r0
 1534 00c6 2046     		mov	r0, r4
 1535              	.LVL120:
 796:base/os/FreeRTOS/Source/timers.c **** 					break;
 1536              		.loc 1 796 15 discriminator 2 view .LVU412
 1537 00c8 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1538              	.LVL121:
 797:base/os/FreeRTOS/Source/timers.c **** 
 1539              		.loc 1 797 6 is_stmt 1 discriminator 2 view .LVU413
 1540 00cc 9EE7     		b	.L97
 1541              	.LVL122:
 1542              	.L112:
 788:base/os/FreeRTOS/Source/timers.c **** 
 1543              		.loc 1 788 6 view .LVU414
 1544              	.LBB61:
 1545              	.LBI61:
ARM GAS  /tmp/cccNjxhi.s 			page 54


 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1546              		.loc 2 191 30 view .LVU415
 1547              	.LBB62:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1548              		.loc 2 193 1 view .LVU416
 1549              		.loc 2 195 2 view .LVU417
 1550              		.syntax unified
 1551              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1552 00ce 4FF05003 			mov r3, #80												
 1553 00d2 83F31188 		msr basepri, r3											
 1554 00d6 BFF36F8F 		isb														
 1555 00da BFF34F8F 		dsb														
 1556              	
 1557              	@ 0 "" 2
 1558              	.LVL123:
 1559              		.thumb
 1560              		.syntax unified
 1561              	.L106:
 1562              		.loc 2 195 2 is_stmt 0 view .LVU418
 1563              	.LBE62:
 1564              	.LBE61:
 788:base/os/FreeRTOS/Source/timers.c **** 
 1565              		.loc 1 788 6 is_stmt 1 discriminator 5 view .LVU419
 788:base/os/FreeRTOS/Source/timers.c **** 
 1566              		.loc 1 788 6 discriminator 5 view .LVU420
 1567 00de FEE7     		b	.L106
 1568              	.L103:
 814:base/os/FreeRTOS/Source/timers.c **** 						{
 1569              		.loc 1 814 7 view .LVU421
 814:base/os/FreeRTOS/Source/timers.c **** 						{
 1570              		.loc 1 814 18 is_stmt 0 view .LVU422
 1571 00e0 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 814:base/os/FreeRTOS/Source/timers.c **** 						{
 1572              		.loc 1 814 9 view .LVU423
 1573 00e4 002B     		cmp	r3, #0
 1574 00e6 91D1     		bne	.L97
 816:base/os/FreeRTOS/Source/timers.c **** 						}
 1575              		.loc 1 816 8 is_stmt 1 view .LVU424
 1576 00e8 2046     		mov	r0, r4
 1577              	.LVL124:
 816:base/os/FreeRTOS/Source/timers.c **** 						}
 1578              		.loc 1 816 8 is_stmt 0 view .LVU425
 1579 00ea FFF7FEFF 		bl	vPortFree
 1580              	.LVL125:
 1581 00ee 8DE7     		b	.L97
 1582              	.LVL126:
 1583              	.L111:
 832:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1584              		.loc 1 832 1 view .LVU426
 1585 00f0 08B0     		add	sp, sp, #32
 1586              	.LCFI36:
 1587              		.cfi_def_cfa_offset 8
 1588              		@ sp needed
 1589 00f2 10BD     		pop	{r4, pc}
 1590              	.L114:
 1591              		.align	2
 1592              	.L113:
ARM GAS  /tmp/cccNjxhi.s 			page 55


 1593 00f4 00000000 		.word	.LANCHOR2
 1594              		.cfi_endproc
 1595              	.LFE19:
 1597              		.section	.text.prvTimerTask,"ax",%progbits
 1598              		.align	1
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu softvfp
 1604              	prvTimerTask:
 1605              	.LFB14:
 503:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 1606              		.loc 1 503 1 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 8
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              	.LVL127:
 503:base/os/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 1611              		.loc 1 503 1 is_stmt 0 view .LVU428
 1612 0000 00B5     		push	{lr}
 1613              	.LCFI37:
 1614              		.cfi_def_cfa_offset 4
 1615              		.cfi_offset 14, -4
 1616 0002 83B0     		sub	sp, sp, #12
 1617              	.LCFI38:
 1618              		.cfi_def_cfa_offset 16
 1619              	.LVL128:
 1620              	.L116:
 504:base/os/FreeRTOS/Source/timers.c **** BaseType_t xListWasEmpty;
 1621              		.loc 1 504 1 is_stmt 1 discriminator 1 view .LVU429
 505:base/os/FreeRTOS/Source/timers.c **** 
 1622              		.loc 1 505 1 discriminator 1 view .LVU430
 508:base/os/FreeRTOS/Source/timers.c **** 
 1623              		.loc 1 508 2 discriminator 1 view .LVU431
 522:base/os/FreeRTOS/Source/timers.c **** 	{
 1624              		.loc 1 522 2 discriminator 1 view .LVU432
 526:base/os/FreeRTOS/Source/timers.c **** 
 1625              		.loc 1 526 3 discriminator 1 view .LVU433
 526:base/os/FreeRTOS/Source/timers.c **** 
 1626              		.loc 1 526 21 is_stmt 0 discriminator 1 view .LVU434
 1627 0004 01A8     		add	r0, sp, #4
 1628 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1629              	.LVL129:
 530:base/os/FreeRTOS/Source/timers.c **** 
 1630              		.loc 1 530 3 is_stmt 1 discriminator 1 view .LVU435
 1631 000a 0199     		ldr	r1, [sp, #4]
 1632 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1633              	.LVL130:
 533:base/os/FreeRTOS/Source/timers.c **** 	}
 1634              		.loc 1 533 3 discriminator 1 view .LVU436
 1635 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1636              	.LVL131:
 522:base/os/FreeRTOS/Source/timers.c **** 	{
 1637              		.loc 1 522 2 discriminator 1 view .LVU437
 1638 0014 F6E7     		b	.L116
 1639              		.cfi_endproc
 1640              	.LFE14:
ARM GAS  /tmp/cccNjxhi.s 			page 56


 1642              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1643              		.align	1
 1644              		.global	xTimerGetTimerDaemonTaskHandle
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu softvfp
 1650              	xTimerGetTimerDaemonTaskHandle:
 1651              	.LFB9:
 425:base/os/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1652              		.loc 1 425 1 view -0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 428:base/os/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1657              		.loc 1 428 2 view .LVU439
 1658 0000 064B     		ldr	r3, .L122
 1659 0002 1868     		ldr	r0, [r3]
 1660 0004 00B1     		cbz	r0, .L121
 430:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1661              		.loc 1 430 1 is_stmt 0 view .LVU440
 1662 0006 7047     		bx	lr
 1663              	.L121:
 428:base/os/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1664              		.loc 1 428 2 is_stmt 1 view .LVU441
 1665              	.LBB63:
 1666              	.LBI63:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1667              		.loc 2 191 30 view .LVU442
 1668              	.LBB64:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1669              		.loc 2 193 1 view .LVU443
 1670              		.loc 2 195 2 view .LVU444
 1671              		.syntax unified
 1672              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1673 0008 4FF05003 			mov r3, #80												
 1674 000c 83F31188 		msr basepri, r3											
 1675 0010 BFF36F8F 		isb														
 1676 0014 BFF34F8F 		dsb														
 1677              	
 1678              	@ 0 "" 2
 1679              	.LVL132:
 1680              		.thumb
 1681              		.syntax unified
 1682              	.L120:
 1683              		.loc 2 195 2 is_stmt 0 view .LVU445
 1684              	.LBE64:
 1685              	.LBE63:
 428:base/os/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1686              		.loc 1 428 2 is_stmt 1 discriminator 1 view .LVU446
 428:base/os/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1687              		.loc 1 428 2 discriminator 1 view .LVU447
 1688 0018 FEE7     		b	.L120
 1689              	.L123:
 1690 001a 00BF     		.align	2
 1691              	.L122:
ARM GAS  /tmp/cccNjxhi.s 			page 57


 1692 001c 00000000 		.word	.LANCHOR7
 1693              		.cfi_endproc
 1694              	.LFE9:
 1696              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1697              		.align	1
 1698              		.global	xTimerGetPeriod
 1699              		.syntax unified
 1700              		.thumb
 1701              		.thumb_func
 1702              		.fpu softvfp
 1704              	xTimerGetPeriod:
 1705              	.LVL133:
 1706              	.LFB10:
 434:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1707              		.loc 1 434 1 view -0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 435:base/os/FreeRTOS/Source/timers.c **** 
 1712              		.loc 1 435 1 view .LVU449
 437:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1713              		.loc 1 437 2 view .LVU450
 1714 0000 08B1     		cbz	r0, .L127
 437:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1715              		.loc 1 437 24 discriminator 2 view .LVU451
 438:base/os/FreeRTOS/Source/timers.c **** }
 1716              		.loc 1 438 2 discriminator 2 view .LVU452
 439:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1717              		.loc 1 439 1 is_stmt 0 discriminator 2 view .LVU453
 1718 0002 8069     		ldr	r0, [r0, #24]
 1719              	.LVL134:
 439:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1720              		.loc 1 439 1 discriminator 2 view .LVU454
 1721 0004 7047     		bx	lr
 1722              	.LVL135:
 1723              	.L127:
 437:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1724              		.loc 1 437 2 is_stmt 1 view .LVU455
 1725              	.LBB65:
 1726              	.LBI65:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1727              		.loc 2 191 30 view .LVU456
 1728              	.LBB66:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1729              		.loc 2 193 1 view .LVU457
 1730              		.loc 2 195 2 view .LVU458
 1731              		.syntax unified
 1732              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1733 0006 4FF05003 			mov r3, #80												
 1734 000a 83F31188 		msr basepri, r3											
 1735 000e BFF36F8F 		isb														
 1736 0012 BFF34F8F 		dsb														
 1737              	
 1738              	@ 0 "" 2
 1739              	.LVL136:
 1740              		.thumb
ARM GAS  /tmp/cccNjxhi.s 			page 58


 1741              		.syntax unified
 1742              	.L126:
 1743              		.loc 2 195 2 is_stmt 0 view .LVU459
 1744              	.LBE66:
 1745              	.LBE65:
 437:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1746              		.loc 1 437 2 is_stmt 1 discriminator 1 view .LVU460
 437:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1747              		.loc 1 437 2 discriminator 1 view .LVU461
 1748 0016 FEE7     		b	.L126
 1749              		.cfi_endproc
 1750              	.LFE10:
 1752              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1753              		.align	1
 1754              		.global	xTimerGetExpiryTime
 1755              		.syntax unified
 1756              		.thumb
 1757              		.thumb_func
 1758              		.fpu softvfp
 1760              	xTimerGetExpiryTime:
 1761              	.LVL137:
 1762              	.LFB11:
 443:base/os/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1763              		.loc 1 443 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 444:base/os/FreeRTOS/Source/timers.c **** TickType_t xReturn;
 1768              		.loc 1 444 1 view .LVU463
 445:base/os/FreeRTOS/Source/timers.c **** 
 1769              		.loc 1 445 1 view .LVU464
 447:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1770              		.loc 1 447 2 view .LVU465
 1771 0000 08B1     		cbz	r0, .L131
 447:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1772              		.loc 1 447 24 discriminator 2 view .LVU466
 448:base/os/FreeRTOS/Source/timers.c **** 	return xReturn;
 1773              		.loc 1 448 2 discriminator 2 view .LVU467
 1774              	.LVL138:
 449:base/os/FreeRTOS/Source/timers.c **** }
 1775              		.loc 1 449 2 discriminator 2 view .LVU468
 450:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1776              		.loc 1 450 1 is_stmt 0 discriminator 2 view .LVU469
 1777 0002 4068     		ldr	r0, [r0, #4]
 1778              	.LVL139:
 450:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1779              		.loc 1 450 1 discriminator 2 view .LVU470
 1780 0004 7047     		bx	lr
 1781              	.LVL140:
 1782              	.L131:
 447:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1783              		.loc 1 447 2 is_stmt 1 view .LVU471
 1784              	.LBB67:
 1785              	.LBI67:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1786              		.loc 2 191 30 view .LVU472
ARM GAS  /tmp/cccNjxhi.s 			page 59


 1787              	.LBB68:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1788              		.loc 2 193 1 view .LVU473
 1789              		.loc 2 195 2 view .LVU474
 1790              		.syntax unified
 1791              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1792 0006 4FF05003 			mov r3, #80												
 1793 000a 83F31188 		msr basepri, r3											
 1794 000e BFF36F8F 		isb														
 1795 0012 BFF34F8F 		dsb														
 1796              	
 1797              	@ 0 "" 2
 1798              	.LVL141:
 1799              		.thumb
 1800              		.syntax unified
 1801              	.L130:
 1802              		.loc 2 195 2 is_stmt 0 view .LVU475
 1803              	.LBE68:
 1804              	.LBE67:
 447:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1805              		.loc 1 447 2 is_stmt 1 discriminator 1 view .LVU476
 447:base/os/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1806              		.loc 1 447 2 discriminator 1 view .LVU477
 1807 0016 FEE7     		b	.L130
 1808              		.cfi_endproc
 1809              	.LFE11:
 1811              		.section	.text.pcTimerGetName,"ax",%progbits
 1812              		.align	1
 1813              		.global	pcTimerGetName
 1814              		.syntax unified
 1815              		.thumb
 1816              		.thumb_func
 1817              		.fpu softvfp
 1819              	pcTimerGetName:
 1820              	.LVL142:
 1821              	.LFB12:
 454:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1822              		.loc 1 454 1 view -0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 455:base/os/FreeRTOS/Source/timers.c **** 
 1827              		.loc 1 455 1 view .LVU479
 457:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1828              		.loc 1 457 2 view .LVU480
 1829 0000 08B1     		cbz	r0, .L135
 457:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1830              		.loc 1 457 24 discriminator 2 view .LVU481
 458:base/os/FreeRTOS/Source/timers.c **** }
 1831              		.loc 1 458 2 discriminator 2 view .LVU482
 459:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1832              		.loc 1 459 1 is_stmt 0 discriminator 2 view .LVU483
 1833 0002 0068     		ldr	r0, [r0]
 1834              	.LVL143:
 459:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1835              		.loc 1 459 1 discriminator 2 view .LVU484
ARM GAS  /tmp/cccNjxhi.s 			page 60


 1836 0004 7047     		bx	lr
 1837              	.LVL144:
 1838              	.L135:
 457:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1839              		.loc 1 457 2 is_stmt 1 view .LVU485
 1840              	.LBB69:
 1841              	.LBI69:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1842              		.loc 2 191 30 view .LVU486
 1843              	.LBB70:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1844              		.loc 2 193 1 view .LVU487
 1845              		.loc 2 195 2 view .LVU488
 1846              		.syntax unified
 1847              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1848 0006 4FF05003 			mov r3, #80												
 1849 000a 83F31188 		msr basepri, r3											
 1850 000e BFF36F8F 		isb														
 1851 0012 BFF34F8F 		dsb														
 1852              	
 1853              	@ 0 "" 2
 1854              	.LVL145:
 1855              		.thumb
 1856              		.syntax unified
 1857              	.L134:
 1858              		.loc 2 195 2 is_stmt 0 view .LVU489
 1859              	.LBE70:
 1860              	.LBE69:
 457:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1861              		.loc 1 457 2 is_stmt 1 discriminator 1 view .LVU490
 457:base/os/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1862              		.loc 1 457 2 discriminator 1 view .LVU491
 1863 0016 FEE7     		b	.L134
 1864              		.cfi_endproc
 1865              	.LFE12:
 1867              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1868              		.align	1
 1869              		.global	xTimerIsTimerActive
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1873              		.fpu softvfp
 1875              	xTimerIsTimerActive:
 1876              	.LVL146:
 1877              	.LFB22:
 943:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 944:base/os/FreeRTOS/Source/timers.c **** 
 945:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 946:base/os/FreeRTOS/Source/timers.c **** {
 1878              		.loc 1 946 1 view -0
 1879              		.cfi_startproc
 1880              		@ args = 0, pretend = 0, frame = 0
 1881              		@ frame_needed = 0, uses_anonymous_args = 0
 947:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 1882              		.loc 1 947 1 view .LVU493
 948:base/os/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1883              		.loc 1 948 1 view .LVU494
ARM GAS  /tmp/cccNjxhi.s 			page 61


 949:base/os/FreeRTOS/Source/timers.c **** 
 950:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1884              		.loc 1 950 2 view .LVU495
 1885 0000 58B1     		cbz	r0, .L141
 946:base/os/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 1886              		.loc 1 946 1 is_stmt 0 discriminator 2 view .LVU496
 1887 0002 10B5     		push	{r4, lr}
 1888              	.LCFI39:
 1889              		.cfi_def_cfa_offset 8
 1890              		.cfi_offset 4, -8
 1891              		.cfi_offset 14, -4
 1892 0004 0446     		mov	r4, r0
 1893              		.loc 1 950 24 is_stmt 1 discriminator 2 view .LVU497
 951:base/os/FreeRTOS/Source/timers.c **** 
 952:base/os/FreeRTOS/Source/timers.c **** 	/* Is the timer in the list of active timers? */
 953:base/os/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1894              		.loc 1 953 2 discriminator 2 view .LVU498
 1895 0006 FFF7FEFF 		bl	vPortEnterCritical
 1896              	.LVL147:
 954:base/os/FreeRTOS/Source/timers.c **** 	{
 955:base/os/FreeRTOS/Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 956:base/os/FreeRTOS/Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 957:base/os/FreeRTOS/Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 958:base/os/FreeRTOS/Source/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1897              		.loc 1 958 3 discriminator 2 view .LVU499
 1898              		.loc 1 958 44 is_stmt 0 discriminator 2 view .LVU500
 1899 000a 6469     		ldr	r4, [r4, #20]
 1900              	.LVL148:
 1901              		.loc 1 958 26 discriminator 2 view .LVU501
 1902 000c 003C     		subs	r4, r4, #0
 1903 000e 18BF     		it	ne
 1904 0010 0124     		movne	r4, #1
 1905              	.LVL149:
 959:base/os/FreeRTOS/Source/timers.c **** 	}
 960:base/os/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1906              		.loc 1 960 2 is_stmt 1 discriminator 2 view .LVU502
 1907 0012 FFF7FEFF 		bl	vPortExitCritical
 1908              	.LVL150:
 961:base/os/FreeRTOS/Source/timers.c **** 
 962:base/os/FreeRTOS/Source/timers.c **** 	return xTimerIsInActiveList;
 1909              		.loc 1 962 2 discriminator 2 view .LVU503
 963:base/os/FreeRTOS/Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1910              		.loc 1 963 1 is_stmt 0 discriminator 2 view .LVU504
 1911 0016 2046     		mov	r0, r4
 1912 0018 10BD     		pop	{r4, pc}
 1913              	.LVL151:
 1914              	.L141:
 1915              	.LCFI40:
 1916              		.cfi_def_cfa_offset 0
 1917              		.cfi_restore 4
 1918              		.cfi_restore 14
 950:base/os/FreeRTOS/Source/timers.c **** 
 1919              		.loc 1 950 2 is_stmt 1 view .LVU505
 1920              	.LBB71:
 1921              	.LBI71:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1922              		.loc 2 191 30 view .LVU506
ARM GAS  /tmp/cccNjxhi.s 			page 62


 1923              	.LBB72:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1924              		.loc 2 193 1 view .LVU507
 1925              		.loc 2 195 2 view .LVU508
 1926              		.syntax unified
 1927              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1928 001a 4FF05003 			mov r3, #80												
 1929 001e 83F31188 		msr basepri, r3											
 1930 0022 BFF36F8F 		isb														
 1931 0026 BFF34F8F 		dsb														
 1932              	
 1933              	@ 0 "" 2
 1934              	.LVL152:
 1935              		.thumb
 1936              		.syntax unified
 1937              	.L138:
 1938              		.loc 2 195 2 is_stmt 0 view .LVU509
 1939              	.LBE72:
 1940              	.LBE71:
 950:base/os/FreeRTOS/Source/timers.c **** 
 1941              		.loc 1 950 2 is_stmt 1 discriminator 1 view .LVU510
 950:base/os/FreeRTOS/Source/timers.c **** 
 1942              		.loc 1 950 2 discriminator 1 view .LVU511
 1943 002a FEE7     		b	.L138
 1944              		.cfi_endproc
 1945              	.LFE22:
 1947              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1948              		.align	1
 1949              		.global	pvTimerGetTimerID
 1950              		.syntax unified
 1951              		.thumb
 1952              		.thumb_func
 1953              		.fpu softvfp
 1955              	pvTimerGetTimerID:
 1956              	.LVL153:
 1957              	.LFB23:
 964:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 965:base/os/FreeRTOS/Source/timers.c **** 
 966:base/os/FreeRTOS/Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
 967:base/os/FreeRTOS/Source/timers.c **** {
 1958              		.loc 1 967 1 view -0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 968:base/os/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1962              		.loc 1 968 1 view .LVU513
 969:base/os/FreeRTOS/Source/timers.c **** void *pvReturn;
 1963              		.loc 1 969 1 view .LVU514
 970:base/os/FreeRTOS/Source/timers.c **** 
 971:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1964              		.loc 1 971 2 view .LVU515
 1965 0000 40B1     		cbz	r0, .L147
 967:base/os/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1966              		.loc 1 967 1 is_stmt 0 discriminator 2 view .LVU516
 1967 0002 10B5     		push	{r4, lr}
 1968              	.LCFI41:
 1969              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccNjxhi.s 			page 63


 1970              		.cfi_offset 4, -8
 1971              		.cfi_offset 14, -4
 1972 0004 0446     		mov	r4, r0
 1973              		.loc 1 971 24 is_stmt 1 discriminator 2 view .LVU517
 972:base/os/FreeRTOS/Source/timers.c **** 
 973:base/os/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1974              		.loc 1 973 2 discriminator 2 view .LVU518
 1975 0006 FFF7FEFF 		bl	vPortEnterCritical
 1976              	.LVL154:
 974:base/os/FreeRTOS/Source/timers.c **** 	{
 975:base/os/FreeRTOS/Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1977              		.loc 1 975 3 discriminator 2 view .LVU519
 1978              		.loc 1 975 12 is_stmt 0 discriminator 2 view .LVU520
 1979 000a 246A     		ldr	r4, [r4, #32]
 1980              	.LVL155:
 976:base/os/FreeRTOS/Source/timers.c **** 	}
 977:base/os/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1981              		.loc 1 977 2 is_stmt 1 discriminator 2 view .LVU521
 1982 000c FFF7FEFF 		bl	vPortExitCritical
 1983              	.LVL156:
 978:base/os/FreeRTOS/Source/timers.c **** 
 979:base/os/FreeRTOS/Source/timers.c **** 	return pvReturn;
 1984              		.loc 1 979 2 discriminator 2 view .LVU522
 980:base/os/FreeRTOS/Source/timers.c **** }
 1985              		.loc 1 980 1 is_stmt 0 discriminator 2 view .LVU523
 1986 0010 2046     		mov	r0, r4
 1987 0012 10BD     		pop	{r4, pc}
 1988              	.LVL157:
 1989              	.L147:
 1990              	.LCFI42:
 1991              		.cfi_def_cfa_offset 0
 1992              		.cfi_restore 4
 1993              		.cfi_restore 14
 971:base/os/FreeRTOS/Source/timers.c **** 
 1994              		.loc 1 971 2 is_stmt 1 view .LVU524
 1995              	.LBB73:
 1996              	.LBI73:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1997              		.loc 2 191 30 view .LVU525
 1998              	.LBB74:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1999              		.loc 2 193 1 view .LVU526
 2000              		.loc 2 195 2 view .LVU527
 2001              		.syntax unified
 2002              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2003 0014 4FF05003 			mov r3, #80												
 2004 0018 83F31188 		msr basepri, r3											
 2005 001c BFF36F8F 		isb														
 2006 0020 BFF34F8F 		dsb														
 2007              	
 2008              	@ 0 "" 2
 2009              	.LVL158:
 2010              		.thumb
 2011              		.syntax unified
 2012              	.L144:
 2013              		.loc 2 195 2 is_stmt 0 view .LVU528
 2014              	.LBE74:
ARM GAS  /tmp/cccNjxhi.s 			page 64


 2015              	.LBE73:
 971:base/os/FreeRTOS/Source/timers.c **** 
 2016              		.loc 1 971 2 is_stmt 1 discriminator 1 view .LVU529
 971:base/os/FreeRTOS/Source/timers.c **** 
 2017              		.loc 1 971 2 discriminator 1 view .LVU530
 2018 0024 FEE7     		b	.L144
 2019              		.cfi_endproc
 2020              	.LFE23:
 2022              		.section	.text.vTimerSetTimerID,"ax",%progbits
 2023              		.align	1
 2024              		.global	vTimerSetTimerID
 2025              		.syntax unified
 2026              		.thumb
 2027              		.thumb_func
 2028              		.fpu softvfp
 2030              	vTimerSetTimerID:
 2031              	.LVL159:
 2032              	.LFB24:
 981:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 982:base/os/FreeRTOS/Source/timers.c **** 
 983:base/os/FreeRTOS/Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
 984:base/os/FreeRTOS/Source/timers.c **** {
 2033              		.loc 1 984 1 view -0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              		.loc 1 984 1 is_stmt 0 view .LVU532
 2038 0000 38B5     		push	{r3, r4, r5, lr}
 2039              	.LCFI43:
 2040              		.cfi_def_cfa_offset 16
 2041              		.cfi_offset 3, -16
 2042              		.cfi_offset 4, -12
 2043              		.cfi_offset 5, -8
 2044              		.cfi_offset 14, -4
 985:base/os/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 2045              		.loc 1 985 1 is_stmt 1 view .LVU533
 2046              	.LVL160:
 986:base/os/FreeRTOS/Source/timers.c **** 
 987:base/os/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 2047              		.loc 1 987 2 view .LVU534
 2048 0002 38B1     		cbz	r0, .L152
 2049 0004 0C46     		mov	r4, r1
 2050 0006 0546     		mov	r5, r0
 2051              		.loc 1 987 24 discriminator 2 view .LVU535
 988:base/os/FreeRTOS/Source/timers.c **** 
 989:base/os/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 2052              		.loc 1 989 2 discriminator 2 view .LVU536
 2053 0008 FFF7FEFF 		bl	vPortEnterCritical
 2054              	.LVL161:
 990:base/os/FreeRTOS/Source/timers.c **** 	{
 991:base/os/FreeRTOS/Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 2055              		.loc 1 991 3 discriminator 2 view .LVU537
 2056              		.loc 1 991 22 is_stmt 0 discriminator 2 view .LVU538
 2057 000c 2C62     		str	r4, [r5, #32]
 992:base/os/FreeRTOS/Source/timers.c **** 	}
 993:base/os/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 2058              		.loc 1 993 2 is_stmt 1 discriminator 2 view .LVU539
ARM GAS  /tmp/cccNjxhi.s 			page 65


 2059 000e FFF7FEFF 		bl	vPortExitCritical
 2060              	.LVL162:
 994:base/os/FreeRTOS/Source/timers.c **** }
 2061              		.loc 1 994 1 is_stmt 0 discriminator 2 view .LVU540
 2062 0012 38BD     		pop	{r3, r4, r5, pc}
 2063              	.LVL163:
 2064              	.L152:
 987:base/os/FreeRTOS/Source/timers.c **** 
 2065              		.loc 1 987 2 is_stmt 1 view .LVU541
 2066              	.LBB75:
 2067              	.LBI75:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2068              		.loc 2 191 30 view .LVU542
 2069              	.LBB76:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2070              		.loc 2 193 1 view .LVU543
 2071              		.loc 2 195 2 view .LVU544
 2072              		.syntax unified
 2073              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2074 0014 4FF05003 			mov r3, #80												
 2075 0018 83F31188 		msr basepri, r3											
 2076 001c BFF36F8F 		isb														
 2077 0020 BFF34F8F 		dsb														
 2078              	
 2079              	@ 0 "" 2
 2080              	.LVL164:
 2081              		.thumb
 2082              		.syntax unified
 2083              	.L150:
 2084              		.loc 2 195 2 is_stmt 0 view .LVU545
 2085              	.LBE76:
 2086              	.LBE75:
 987:base/os/FreeRTOS/Source/timers.c **** 
 2087              		.loc 1 987 2 is_stmt 1 discriminator 1 view .LVU546
 987:base/os/FreeRTOS/Source/timers.c **** 
 2088              		.loc 1 987 2 discriminator 1 view .LVU547
 2089 0024 FEE7     		b	.L150
 2090              		.cfi_endproc
 2091              	.LFE24:
 2093              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 2094              		.align	1
 2095              		.global	xTimerPendFunctionCallFromISR
 2096              		.syntax unified
 2097              		.thumb
 2098              		.thumb_func
 2099              		.fpu softvfp
 2101              	xTimerPendFunctionCallFromISR:
 2102              	.LVL165:
 2103              	.LFB25:
 995:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 996:base/os/FreeRTOS/Source/timers.c **** 
 997:base/os/FreeRTOS/Source/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
 998:base/os/FreeRTOS/Source/timers.c **** 
 999:base/os/FreeRTOS/Source/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1000:base/os/FreeRTOS/Source/timers.c **** 	{
 2104              		.loc 1 1000 2 view -0
 2105              		.cfi_startproc
ARM GAS  /tmp/cccNjxhi.s 			page 66


 2106              		@ args = 0, pretend = 0, frame = 16
 2107              		@ frame_needed = 0, uses_anonymous_args = 0
 2108              		.loc 1 1000 2 is_stmt 0 view .LVU549
 2109 0000 10B5     		push	{r4, lr}
 2110              	.LCFI44:
 2111              		.cfi_def_cfa_offset 8
 2112              		.cfi_offset 4, -8
 2113              		.cfi_offset 14, -4
 2114 0002 84B0     		sub	sp, sp, #16
 2115              	.LCFI45:
 2116              		.cfi_def_cfa_offset 24
 2117 0004 1446     		mov	r4, r2
 2118 0006 1A46     		mov	r2, r3
 2119              	.LVL166:
1001:base/os/FreeRTOS/Source/timers.c **** 	DaemonTaskMessage_t xMessage;
 2120              		.loc 1 1001 2 is_stmt 1 view .LVU550
1002:base/os/FreeRTOS/Source/timers.c **** 	BaseType_t xReturn;
 2121              		.loc 1 1002 2 view .LVU551
1003:base/os/FreeRTOS/Source/timers.c **** 
1004:base/os/FreeRTOS/Source/timers.c **** 		/* Complete the message with the function parameters and post it to the
1005:base/os/FreeRTOS/Source/timers.c **** 		daemon task. */
1006:base/os/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 2122              		.loc 1 1006 3 view .LVU552
 2123              		.loc 1 1006 23 is_stmt 0 view .LVU553
 2124 0008 6FF00103 		mvn	r3, #1
 2125              	.LVL167:
 2126              		.loc 1 1006 23 view .LVU554
 2127 000c 0093     		str	r3, [sp]
1007:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2128              		.loc 1 1007 3 is_stmt 1 view .LVU555
 2129              		.loc 1 1007 53 is_stmt 0 view .LVU556
 2130 000e 0190     		str	r0, [sp, #4]
1008:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2131              		.loc 1 1008 3 is_stmt 1 view .LVU557
 2132              		.loc 1 1008 47 is_stmt 0 view .LVU558
 2133 0010 0291     		str	r1, [sp, #8]
1009:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2134              		.loc 1 1009 3 is_stmt 1 view .LVU559
 2135              		.loc 1 1009 47 is_stmt 0 view .LVU560
 2136 0012 0394     		str	r4, [sp, #12]
1010:base/os/FreeRTOS/Source/timers.c **** 
1011:base/os/FreeRTOS/Source/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 2137              		.loc 1 1011 3 is_stmt 1 view .LVU561
 2138              		.loc 1 1011 13 is_stmt 0 view .LVU562
 2139 0014 0023     		movs	r3, #0
 2140 0016 6946     		mov	r1, sp
 2141              	.LVL168:
 2142              		.loc 1 1011 13 view .LVU563
 2143 0018 0248     		ldr	r0, .L155
 2144              	.LVL169:
 2145              		.loc 1 1011 13 view .LVU564
 2146 001a 0068     		ldr	r0, [r0]
 2147 001c FFF7FEFF 		bl	xQueueGenericSendFromISR
 2148              	.LVL170:
1012:base/os/FreeRTOS/Source/timers.c **** 
1013:base/os/FreeRTOS/Source/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 2149              		.loc 1 1013 87 is_stmt 1 view .LVU565
ARM GAS  /tmp/cccNjxhi.s 			page 67


1014:base/os/FreeRTOS/Source/timers.c **** 
1015:base/os/FreeRTOS/Source/timers.c **** 		return xReturn;
 2150              		.loc 1 1015 3 view .LVU566
1016:base/os/FreeRTOS/Source/timers.c **** 	}
 2151              		.loc 1 1016 2 is_stmt 0 view .LVU567
 2152 0020 04B0     		add	sp, sp, #16
 2153              	.LCFI46:
 2154              		.cfi_def_cfa_offset 8
 2155              		@ sp needed
 2156 0022 10BD     		pop	{r4, pc}
 2157              	.LVL171:
 2158              	.L156:
 2159              		.loc 1 1016 2 view .LVU568
 2160              		.align	2
 2161              	.L155:
 2162 0024 00000000 		.word	.LANCHOR2
 2163              		.cfi_endproc
 2164              	.LFE25:
 2166              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 2167              		.align	1
 2168              		.global	xTimerPendFunctionCall
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu softvfp
 2174              	xTimerPendFunctionCall:
 2175              	.LVL172:
 2176              	.LFB26:
1017:base/os/FreeRTOS/Source/timers.c **** 
1018:base/os/FreeRTOS/Source/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1019:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1020:base/os/FreeRTOS/Source/timers.c **** 
1021:base/os/FreeRTOS/Source/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1022:base/os/FreeRTOS/Source/timers.c **** 
1023:base/os/FreeRTOS/Source/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1024:base/os/FreeRTOS/Source/timers.c **** 	{
 2177              		.loc 1 1024 2 is_stmt 1 view -0
 2178              		.cfi_startproc
 2179              		@ args = 0, pretend = 0, frame = 16
 2180              		@ frame_needed = 0, uses_anonymous_args = 0
 2181              		.loc 1 1024 2 is_stmt 0 view .LVU570
 2182 0000 30B5     		push	{r4, r5, lr}
 2183              	.LCFI47:
 2184              		.cfi_def_cfa_offset 12
 2185              		.cfi_offset 4, -12
 2186              		.cfi_offset 5, -8
 2187              		.cfi_offset 14, -4
 2188 0002 85B0     		sub	sp, sp, #20
 2189              	.LCFI48:
 2190              		.cfi_def_cfa_offset 32
 2191 0004 1446     		mov	r4, r2
 2192 0006 1A46     		mov	r2, r3
 2193              	.LVL173:
1025:base/os/FreeRTOS/Source/timers.c **** 	DaemonTaskMessage_t xMessage;
 2194              		.loc 1 1025 2 is_stmt 1 view .LVU571
1026:base/os/FreeRTOS/Source/timers.c **** 	BaseType_t xReturn;
 2195              		.loc 1 1026 2 view .LVU572
ARM GAS  /tmp/cccNjxhi.s 			page 68


1027:base/os/FreeRTOS/Source/timers.c **** 
1028:base/os/FreeRTOS/Source/timers.c **** 		/* This function can only be called after a timer has been created or
1029:base/os/FreeRTOS/Source/timers.c **** 		after the scheduler has been started because, until then, the timer
1030:base/os/FreeRTOS/Source/timers.c **** 		queue does not exist. */
1031:base/os/FreeRTOS/Source/timers.c **** 		configASSERT( xTimerQueue );
 2196              		.loc 1 1031 3 view .LVU573
 2197 0008 0C4B     		ldr	r3, .L162
 2198              	.LVL174:
 2199              		.loc 1 1031 3 is_stmt 0 view .LVU574
 2200 000a 1D68     		ldr	r5, [r3]
 2201 000c 65B1     		cbz	r5, .L161
 2202              		.loc 1 1031 30 is_stmt 1 discriminator 2 view .LVU575
1032:base/os/FreeRTOS/Source/timers.c **** 
1033:base/os/FreeRTOS/Source/timers.c **** 		/* Complete the message with the function parameters and post it to the
1034:base/os/FreeRTOS/Source/timers.c **** 		daemon task. */
1035:base/os/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2203              		.loc 1 1035 3 discriminator 2 view .LVU576
 2204              		.loc 1 1035 23 is_stmt 0 discriminator 2 view .LVU577
 2205 000e 4FF0FF33 		mov	r3, #-1
 2206 0012 0093     		str	r3, [sp]
1036:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2207              		.loc 1 1036 3 is_stmt 1 discriminator 2 view .LVU578
 2208              		.loc 1 1036 53 is_stmt 0 discriminator 2 view .LVU579
 2209 0014 0190     		str	r0, [sp, #4]
1037:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2210              		.loc 1 1037 3 is_stmt 1 discriminator 2 view .LVU580
 2211              		.loc 1 1037 47 is_stmt 0 discriminator 2 view .LVU581
 2212 0016 0291     		str	r1, [sp, #8]
1038:base/os/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2213              		.loc 1 1038 3 is_stmt 1 discriminator 2 view .LVU582
 2214              		.loc 1 1038 47 is_stmt 0 discriminator 2 view .LVU583
 2215 0018 0394     		str	r4, [sp, #12]
1039:base/os/FreeRTOS/Source/timers.c **** 
1040:base/os/FreeRTOS/Source/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2216              		.loc 1 1040 3 is_stmt 1 discriminator 2 view .LVU584
 2217              		.loc 1 1040 13 is_stmt 0 discriminator 2 view .LVU585
 2218 001a 0023     		movs	r3, #0
 2219 001c 6946     		mov	r1, sp
 2220              	.LVL175:
 2221              		.loc 1 1040 13 discriminator 2 view .LVU586
 2222 001e 2846     		mov	r0, r5
 2223              	.LVL176:
 2224              		.loc 1 1040 13 discriminator 2 view .LVU587
 2225 0020 FFF7FEFF 		bl	xQueueGenericSend
 2226              	.LVL177:
1041:base/os/FreeRTOS/Source/timers.c **** 
1042:base/os/FreeRTOS/Source/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 2227              		.loc 1 1042 78 is_stmt 1 discriminator 2 view .LVU588
1043:base/os/FreeRTOS/Source/timers.c **** 
1044:base/os/FreeRTOS/Source/timers.c **** 		return xReturn;
 2228              		.loc 1 1044 3 discriminator 2 view .LVU589
1045:base/os/FreeRTOS/Source/timers.c **** 	}
 2229              		.loc 1 1045 2 is_stmt 0 discriminator 2 view .LVU590
 2230 0024 05B0     		add	sp, sp, #20
 2231              	.LCFI49:
 2232              		.cfi_remember_state
 2233              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cccNjxhi.s 			page 69


 2234              		@ sp needed
 2235 0026 30BD     		pop	{r4, r5, pc}
 2236              	.LVL178:
 2237              	.L161:
 2238              	.LCFI50:
 2239              		.cfi_restore_state
1031:base/os/FreeRTOS/Source/timers.c **** 
 2240              		.loc 1 1031 3 is_stmt 1 view .LVU591
 2241              	.LBB77:
 2242              	.LBI77:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2243              		.loc 2 191 30 view .LVU592
 2244              	.LBB78:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2245              		.loc 2 193 1 view .LVU593
 2246              		.loc 2 195 2 view .LVU594
 2247              		.syntax unified
 2248              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2249 0028 4FF05003 			mov r3, #80												
 2250 002c 83F31188 		msr basepri, r3											
 2251 0030 BFF36F8F 		isb														
 2252 0034 BFF34F8F 		dsb														
 2253              	
 2254              	@ 0 "" 2
 2255              	.LVL179:
 2256              		.thumb
 2257              		.syntax unified
 2258              	.L159:
 2259              		.loc 2 195 2 is_stmt 0 view .LVU595
 2260              	.LBE78:
 2261              	.LBE77:
1031:base/os/FreeRTOS/Source/timers.c **** 
 2262              		.loc 1 1031 3 is_stmt 1 discriminator 1 view .LVU596
1031:base/os/FreeRTOS/Source/timers.c **** 
 2263              		.loc 1 1031 3 discriminator 1 view .LVU597
 2264 0038 FEE7     		b	.L159
 2265              	.L163:
 2266 003a 00BF     		.align	2
 2267              	.L162:
 2268 003c 00000000 		.word	.LANCHOR2
 2269              		.cfi_endproc
 2270              	.LFE26:
 2272              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2273              		.align	1
 2274              		.global	uxTimerGetTimerNumber
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2278              		.fpu softvfp
 2280              	uxTimerGetTimerNumber:
 2281              	.LVL180:
 2282              	.LFB27:
1046:base/os/FreeRTOS/Source/timers.c **** 
1047:base/os/FreeRTOS/Source/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1048:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1049:base/os/FreeRTOS/Source/timers.c **** 
1050:base/os/FreeRTOS/Source/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cccNjxhi.s 			page 70


1051:base/os/FreeRTOS/Source/timers.c **** 
1052:base/os/FreeRTOS/Source/timers.c **** 	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1053:base/os/FreeRTOS/Source/timers.c **** 	{
 2283              		.loc 1 1053 2 view -0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 0
 2286              		@ frame_needed = 0, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
1054:base/os/FreeRTOS/Source/timers.c **** 		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2288              		.loc 1 1054 3 view .LVU599
1055:base/os/FreeRTOS/Source/timers.c **** 	}
 2289              		.loc 1 1055 2 is_stmt 0 view .LVU600
 2290 0000 806A     		ldr	r0, [r0, #40]
 2291              	.LVL181:
 2292              		.loc 1 1055 2 view .LVU601
 2293 0002 7047     		bx	lr
 2294              		.cfi_endproc
 2295              	.LFE27:
 2297              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2298              		.align	1
 2299              		.global	vTimerSetTimerNumber
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu softvfp
 2305              	vTimerSetTimerNumber:
 2306              	.LVL182:
 2307              	.LFB28:
1056:base/os/FreeRTOS/Source/timers.c **** 
1057:base/os/FreeRTOS/Source/timers.c **** #endif /* configUSE_TRACE_FACILITY */
1058:base/os/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1059:base/os/FreeRTOS/Source/timers.c **** 
1060:base/os/FreeRTOS/Source/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1061:base/os/FreeRTOS/Source/timers.c **** 
1062:base/os/FreeRTOS/Source/timers.c **** 	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
1063:base/os/FreeRTOS/Source/timers.c **** 	{
 2308              		.loc 1 1063 2 is_stmt 1 view -0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 2312              		@ link register save eliminated.
1064:base/os/FreeRTOS/Source/timers.c **** 		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2313              		.loc 1 1064 3 view .LVU603
 2314              		.loc 1 1064 43 is_stmt 0 view .LVU604
 2315 0000 8162     		str	r1, [r0, #40]
1065:base/os/FreeRTOS/Source/timers.c **** 	}
 2316              		.loc 1 1065 2 view .LVU605
 2317 0002 7047     		bx	lr
 2318              		.cfi_endproc
 2319              	.LFE28:
 2321              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 2322              		.align	2
 2323              		.set	.LANCHOR0,. + 0
 2326              	pxCurrentTimerList:
 2327 0000 00000000 		.space	4
 2328              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 2329              		.align	2
ARM GAS  /tmp/cccNjxhi.s 			page 71


 2330              		.set	.LANCHOR1,. + 0
 2333              	pxOverflowTimerList:
 2334 0000 00000000 		.space	4
 2335              		.section	.bss.ucStaticTimerQueueStorage.1,"aw",%nobits
 2336              		.align	2
 2337              		.set	.LANCHOR6,. + 0
 2340              	ucStaticTimerQueueStorage.1:
 2341 0000 00000000 		.space	160
 2341      00000000 
 2341      00000000 
 2341      00000000 
 2341      00000000 
 2342              		.section	.bss.xActiveTimerList1,"aw",%nobits
 2343              		.align	2
 2344              		.set	.LANCHOR3,. + 0
 2347              	xActiveTimerList1:
 2348 0000 00000000 		.space	20
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2349              		.section	.bss.xActiveTimerList2,"aw",%nobits
 2350              		.align	2
 2351              		.set	.LANCHOR4,. + 0
 2354              	xActiveTimerList2:
 2355 0000 00000000 		.space	20
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2356              		.section	.bss.xLastTime.2,"aw",%nobits
 2357              		.align	2
 2358              		.set	.LANCHOR8,. + 0
 2361              	xLastTime.2:
 2362 0000 00000000 		.space	4
 2363              		.section	.bss.xStaticTimerQueue.0,"aw",%nobits
 2364              		.align	2
 2365              		.set	.LANCHOR5,. + 0
 2368              	xStaticTimerQueue.0:
 2369 0000 00000000 		.space	80
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370              		.section	.bss.xTimerQueue,"aw",%nobits
 2371              		.align	2
 2372              		.set	.LANCHOR2,. + 0
 2375              	xTimerQueue:
 2376 0000 00000000 		.space	4
 2377              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 2378              		.align	2
 2379              		.set	.LANCHOR7,. + 0
 2382              	xTimerTaskHandle:
 2383 0000 00000000 		.space	4
 2384              		.text
 2385              	.Letext0:
 2386              		.file 3 "/usr/lib/gcc/arm-none-eabi/11.1.0/include/stddef.h"
ARM GAS  /tmp/cccNjxhi.s 			page 72


 2387              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2388              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2389              		.file 6 "base/os/FreeRTOS/Source/include/projdefs.h"
 2390              		.file 7 "base/os/FreeRTOS/Source/include/FreeRTOS.h"
 2391              		.file 8 "base/os/FreeRTOS/Source/include/list.h"
 2392              		.file 9 "base/os/FreeRTOS/Source/include/task.h"
 2393              		.file 10 "base/os/FreeRTOS/Source/include/queue.h"
 2394              		.file 11 "base/os/FreeRTOS/Source/include/timers.h"
 2395              		.file 12 "base/os/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/cccNjxhi.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
     /tmp/cccNjxhi.s:16     .text.prvGetNextExpireTime:0000000000000000 $t
     /tmp/cccNjxhi.s:23     .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
     /tmp/cccNjxhi.s:64     .text.prvGetNextExpireTime:000000000000001c $d
     /tmp/cccNjxhi.s:69     .text.prvInsertTimerInActiveList:0000000000000000 $t
     /tmp/cccNjxhi.s:75     .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
     /tmp/cccNjxhi.s:165    .text.prvInsertTimerInActiveList:0000000000000040 $d
     /tmp/cccNjxhi.s:171    .rodata.prvCheckForValidListAndQueue.str1.4:0000000000000000 $d
     /tmp/cccNjxhi.s:175    .text.prvCheckForValidListAndQueue:0000000000000000 $t
     /tmp/cccNjxhi.s:181    .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
     /tmp/cccNjxhi.s:267    .text.prvCheckForValidListAndQueue:0000000000000050 $d
     /tmp/cccNjxhi.s:279    .text.prvInitialiseNewTimer:0000000000000000 $t
     /tmp/cccNjxhi.s:285    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
     /tmp/cccNjxhi.s:374    .rodata.xTimerCreateTimerTask.str1.4:0000000000000000 $d
     /tmp/cccNjxhi.s:378    .text.xTimerCreateTimerTask:0000000000000000 $t
     /tmp/cccNjxhi.s:385    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
     /tmp/cccNjxhi.s:486    .text.xTimerCreateTimerTask:0000000000000054 $d
     /tmp/cccNjxhi.s:1604   .text.prvTimerTask:0000000000000000 prvTimerTask
     /tmp/cccNjxhi.s:494    .text.xTimerCreate:0000000000000000 $t
     /tmp/cccNjxhi.s:501    .text.xTimerCreate:0000000000000000 xTimerCreate
     /tmp/cccNjxhi.s:567    .text.xTimerCreateStatic:0000000000000000 $t
     /tmp/cccNjxhi.s:574    .text.xTimerCreateStatic:0000000000000000 xTimerCreateStatic
     /tmp/cccNjxhi.s:693    .text.xTimerGenericCommand:0000000000000000 $t
     /tmp/cccNjxhi.s:700    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
     /tmp/cccNjxhi.s:844    .text.xTimerGenericCommand:0000000000000068 $d
     /tmp/cccNjxhi.s:849    .text.prvSwitchTimerLists:0000000000000000 $t
     /tmp/cccNjxhi.s:855    .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
     /tmp/cccNjxhi.s:1001   .text.prvSwitchTimerLists:0000000000000070 $d
     /tmp/cccNjxhi.s:1007   .text.prvSampleTimeNow:0000000000000000 $t
     /tmp/cccNjxhi.s:1013   .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
     /tmp/cccNjxhi.s:1072   .text.prvSampleTimeNow:0000000000000028 $d
     /tmp/cccNjxhi.s:1077   .text.prvProcessExpiredTimer:0000000000000000 $t
     /tmp/cccNjxhi.s:1083   .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
     /tmp/cccNjxhi.s:1201   .text.prvProcessExpiredTimer:000000000000005c $d
     /tmp/cccNjxhi.s:1206   .text.prvProcessTimerOrBlockTask:0000000000000000 $t
     /tmp/cccNjxhi.s:1212   .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
     /tmp/cccNjxhi.s:1331   .text.prvProcessTimerOrBlockTask:000000000000006c $d
     /tmp/cccNjxhi.s:1337   .text.prvProcessReceivedCommands:0000000000000000 $t
     /tmp/cccNjxhi.s:1343   .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
     /tmp/cccNjxhi.s:1437   .text.prvProcessReceivedCommands:000000000000004c $d
     /tmp/cccNjxhi.s:1447   .text.prvProcessReceivedCommands:0000000000000074 $t
     /tmp/cccNjxhi.s:1593   .text.prvProcessReceivedCommands:00000000000000f4 $d
     /tmp/cccNjxhi.s:1598   .text.prvTimerTask:0000000000000000 $t
     /tmp/cccNjxhi.s:1643   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
     /tmp/cccNjxhi.s:1650   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
     /tmp/cccNjxhi.s:1692   .text.xTimerGetTimerDaemonTaskHandle:000000000000001c $d
     /tmp/cccNjxhi.s:1697   .text.xTimerGetPeriod:0000000000000000 $t
     /tmp/cccNjxhi.s:1704   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
     /tmp/cccNjxhi.s:1753   .text.xTimerGetExpiryTime:0000000000000000 $t
     /tmp/cccNjxhi.s:1760   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
     /tmp/cccNjxhi.s:1812   .text.pcTimerGetName:0000000000000000 $t
     /tmp/cccNjxhi.s:1819   .text.pcTimerGetName:0000000000000000 pcTimerGetName
     /tmp/cccNjxhi.s:1868   .text.xTimerIsTimerActive:0000000000000000 $t
     /tmp/cccNjxhi.s:1875   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
     /tmp/cccNjxhi.s:1948   .text.pvTimerGetTimerID:0000000000000000 $t
     /tmp/cccNjxhi.s:1955   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
ARM GAS  /tmp/cccNjxhi.s 			page 74


     /tmp/cccNjxhi.s:2023   .text.vTimerSetTimerID:0000000000000000 $t
     /tmp/cccNjxhi.s:2030   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
     /tmp/cccNjxhi.s:2094   .text.xTimerPendFunctionCallFromISR:0000000000000000 $t
     /tmp/cccNjxhi.s:2101   .text.xTimerPendFunctionCallFromISR:0000000000000000 xTimerPendFunctionCallFromISR
     /tmp/cccNjxhi.s:2162   .text.xTimerPendFunctionCallFromISR:0000000000000024 $d
     /tmp/cccNjxhi.s:2167   .text.xTimerPendFunctionCall:0000000000000000 $t
     /tmp/cccNjxhi.s:2174   .text.xTimerPendFunctionCall:0000000000000000 xTimerPendFunctionCall
     /tmp/cccNjxhi.s:2268   .text.xTimerPendFunctionCall:000000000000003c $d
     /tmp/cccNjxhi.s:2273   .text.uxTimerGetTimerNumber:0000000000000000 $t
     /tmp/cccNjxhi.s:2280   .text.uxTimerGetTimerNumber:0000000000000000 uxTimerGetTimerNumber
     /tmp/cccNjxhi.s:2298   .text.vTimerSetTimerNumber:0000000000000000 $t
     /tmp/cccNjxhi.s:2305   .text.vTimerSetTimerNumber:0000000000000000 vTimerSetTimerNumber
     /tmp/cccNjxhi.s:2322   .bss.pxCurrentTimerList:0000000000000000 $d
     /tmp/cccNjxhi.s:2326   .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
     /tmp/cccNjxhi.s:2329   .bss.pxOverflowTimerList:0000000000000000 $d
     /tmp/cccNjxhi.s:2333   .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
     /tmp/cccNjxhi.s:2336   .bss.ucStaticTimerQueueStorage.1:0000000000000000 $d
     /tmp/cccNjxhi.s:2340   .bss.ucStaticTimerQueueStorage.1:0000000000000000 ucStaticTimerQueueStorage.1
     /tmp/cccNjxhi.s:2343   .bss.xActiveTimerList1:0000000000000000 $d
     /tmp/cccNjxhi.s:2347   .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
     /tmp/cccNjxhi.s:2350   .bss.xActiveTimerList2:0000000000000000 $d
     /tmp/cccNjxhi.s:2354   .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
     /tmp/cccNjxhi.s:2357   .bss.xLastTime.2:0000000000000000 $d
     /tmp/cccNjxhi.s:2361   .bss.xLastTime.2:0000000000000000 xLastTime.2
     /tmp/cccNjxhi.s:2364   .bss.xStaticTimerQueue.0:0000000000000000 $d
     /tmp/cccNjxhi.s:2368   .bss.xStaticTimerQueue.0:0000000000000000 xStaticTimerQueue.0
     /tmp/cccNjxhi.s:2371   .bss.xTimerQueue:0000000000000000 $d
     /tmp/cccNjxhi.s:2375   .bss.xTimerQueue:0000000000000000 xTimerQueue
     /tmp/cccNjxhi.s:2378   .bss.xTimerTaskHandle:0000000000000000 $d
     /tmp/cccNjxhi.s:2382   .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
vListInitialiseItem
vApplicationGetTimerTaskMemory
xTaskCreateStatic
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueReceive
vPortFree
