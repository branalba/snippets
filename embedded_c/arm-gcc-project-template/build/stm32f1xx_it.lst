ARM GAS  /tmp/cci3c1PI.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "base/stm32f1xx_it.c"
   1:base/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:base/stm32f1xx_it.c **** /**
   3:base/stm32f1xx_it.c ****  ******************************************************************************
   4:base/stm32f1xx_it.c ****  * @file    stm32f1xx_it.c
   5:base/stm32f1xx_it.c ****  * @brief   Interrupt Service Routines.
   6:base/stm32f1xx_it.c ****  ******************************************************************************
   7:base/stm32f1xx_it.c ****  * @attention
   8:base/stm32f1xx_it.c ****  *
   9:base/stm32f1xx_it.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:base/stm32f1xx_it.c ****  * All rights reserved.</center></h2>
  11:base/stm32f1xx_it.c ****  *
  12:base/stm32f1xx_it.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:base/stm32f1xx_it.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:base/stm32f1xx_it.c ****  * the License. You may obtain a copy of the License at:
  15:base/stm32f1xx_it.c ****  *                             www.st.com/SLA0044
  16:base/stm32f1xx_it.c ****  *
  17:base/stm32f1xx_it.c ****  ******************************************************************************
  18:base/stm32f1xx_it.c ****  */
  19:base/stm32f1xx_it.c **** /* USER CODE END Header */
  20:base/stm32f1xx_it.c **** 
  21:base/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:base/stm32f1xx_it.c **** #include "base.h"
  23:base/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:base/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:base/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:base/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:base/stm32f1xx_it.c **** 
  28:base/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:base/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:base/stm32f1xx_it.c **** 
  31:base/stm32f1xx_it.c **** /* USER CODE END TD */
  32:base/stm32f1xx_it.c **** 
ARM GAS  /tmp/cci3c1PI.s 			page 2


  33:base/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:base/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:base/stm32f1xx_it.c **** 
  36:base/stm32f1xx_it.c **** /* USER CODE END PD */
  37:base/stm32f1xx_it.c **** 
  38:base/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:base/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:base/stm32f1xx_it.c **** 
  41:base/stm32f1xx_it.c **** /* USER CODE END PM */
  42:base/stm32f1xx_it.c **** 
  43:base/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:base/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:base/stm32f1xx_it.c **** 
  46:base/stm32f1xx_it.c **** /* USER CODE END PV */
  47:base/stm32f1xx_it.c **** 
  48:base/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:base/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:base/stm32f1xx_it.c **** 
  51:base/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:base/stm32f1xx_it.c **** 
  53:base/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:base/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:base/stm32f1xx_it.c **** 
  56:base/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:base/stm32f1xx_it.c **** 
  58:base/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:base/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  60:base/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  61:base/stm32f1xx_it.c **** 
  62:base/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  63:base/stm32f1xx_it.c **** 
  64:base/stm32f1xx_it.c **** /* USER CODE END EV */
  65:base/stm32f1xx_it.c **** 
  66:base/stm32f1xx_it.c **** /******************************************************************************/
  67:base/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  68:base/stm32f1xx_it.c **** /******************************************************************************/
  69:base/stm32f1xx_it.c **** /**
  70:base/stm32f1xx_it.c ****  * @brief This function handles Non maskable interrupt.
  71:base/stm32f1xx_it.c ****  */
  72:base/stm32f1xx_it.c **** void NMI_Handler ( void )
  73:base/stm32f1xx_it.c **** {
  27              		.loc 1 73 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  74:base/stm32f1xx_it.c ****     /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  75:base/stm32f1xx_it.c **** 
  76:base/stm32f1xx_it.c ****     /* USER CODE END NonMaskableInt_IRQn 0 */
  77:base/stm32f1xx_it.c ****     /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  78:base/stm32f1xx_it.c ****     while ( 1 )
  34              		.loc 1 78 5 discriminator 1 view .LVU1
  79:base/stm32f1xx_it.c ****     {
  80:base/stm32f1xx_it.c ****     }
  35              		.loc 1 80 5 discriminator 1 view .LVU2
ARM GAS  /tmp/cci3c1PI.s 			page 3


  78:base/stm32f1xx_it.c ****     {
  36              		.loc 1 78 11 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE65:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	HardFault_Handler:
  50              	.LFB66:
  81:base/stm32f1xx_it.c ****     /* USER CODE END NonMaskableInt_IRQn 1 */
  82:base/stm32f1xx_it.c **** }
  83:base/stm32f1xx_it.c **** 
  84:base/stm32f1xx_it.c **** /**
  85:base/stm32f1xx_it.c ****  * @brief This function handles Hard fault interrupt.
  86:base/stm32f1xx_it.c ****  */
  87:base/stm32f1xx_it.c **** void HardFault_Handler ( void )
  88:base/stm32f1xx_it.c **** {
  51              		.loc 1 88 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  89:base/stm32f1xx_it.c ****     /* USER CODE BEGIN HardFault_IRQn 0 */
  90:base/stm32f1xx_it.c **** 
  91:base/stm32f1xx_it.c ****     /* USER CODE END HardFault_IRQn 0 */
  92:base/stm32f1xx_it.c ****     while ( 1 )
  58              		.loc 1 92 5 discriminator 1 view .LVU5
  93:base/stm32f1xx_it.c ****     {
  94:base/stm32f1xx_it.c ****         /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  95:base/stm32f1xx_it.c ****         /* USER CODE END W1_HardFault_IRQn 0 */
  96:base/stm32f1xx_it.c ****     }
  59              		.loc 1 96 5 discriminator 1 view .LVU6
  92:base/stm32f1xx_it.c ****     {
  60              		.loc 1 92 11 discriminator 1 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE66:
  65              		.section	.text.MemManage_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	MemManage_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	MemManage_Handler:
  74              	.LFB67:
  97:base/stm32f1xx_it.c **** }
  98:base/stm32f1xx_it.c **** 
  99:base/stm32f1xx_it.c **** /**
 100:base/stm32f1xx_it.c ****  * @brief This function handles Memory management fault.
ARM GAS  /tmp/cci3c1PI.s 			page 4


 101:base/stm32f1xx_it.c ****  */
 102:base/stm32f1xx_it.c **** void MemManage_Handler ( void )
 103:base/stm32f1xx_it.c **** {
  75              		.loc 1 103 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 104:base/stm32f1xx_it.c ****     /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 105:base/stm32f1xx_it.c **** 
 106:base/stm32f1xx_it.c ****     /* USER CODE END MemoryManagement_IRQn 0 */
 107:base/stm32f1xx_it.c ****     while ( 1 )
  82              		.loc 1 107 5 discriminator 1 view .LVU9
 108:base/stm32f1xx_it.c ****     {
 109:base/stm32f1xx_it.c ****         /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 110:base/stm32f1xx_it.c ****         /* USER CODE END W1_MemoryManagement_IRQn 0 */
 111:base/stm32f1xx_it.c ****     }
  83              		.loc 1 111 5 discriminator 1 view .LVU10
 107:base/stm32f1xx_it.c ****     {
  84              		.loc 1 107 11 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE67:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	BusFault_Handler:
  98              	.LFB68:
 112:base/stm32f1xx_it.c **** }
 113:base/stm32f1xx_it.c **** 
 114:base/stm32f1xx_it.c **** /**
 115:base/stm32f1xx_it.c ****  * @brief This function handles Prefetch fault, memory access fault.
 116:base/stm32f1xx_it.c ****  */
 117:base/stm32f1xx_it.c **** void BusFault_Handler ( void )
 118:base/stm32f1xx_it.c **** {
  99              		.loc 1 118 1 view -0
 100              		.cfi_startproc
 101              		@ Volatile: function does not return.
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.L8:
 119:base/stm32f1xx_it.c ****     /* USER CODE BEGIN BusFault_IRQn 0 */
 120:base/stm32f1xx_it.c **** 
 121:base/stm32f1xx_it.c ****     /* USER CODE END BusFault_IRQn 0 */
 122:base/stm32f1xx_it.c ****     while ( 1 )
 106              		.loc 1 122 5 discriminator 1 view .LVU13
 123:base/stm32f1xx_it.c ****     {
 124:base/stm32f1xx_it.c ****         /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 125:base/stm32f1xx_it.c ****         /* USER CODE END W1_BusFault_IRQn 0 */
 126:base/stm32f1xx_it.c ****     }
ARM GAS  /tmp/cci3c1PI.s 			page 5


 107              		.loc 1 126 5 discriminator 1 view .LVU14
 122:base/stm32f1xx_it.c ****     {
 108              		.loc 1 122 11 discriminator 1 view .LVU15
 109 0000 FEE7     		b	.L8
 110              		.cfi_endproc
 111              	.LFE68:
 113              		.section	.text.UsageFault_Handler,"ax",%progbits
 114              		.align	1
 115              		.global	UsageFault_Handler
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu softvfp
 121              	UsageFault_Handler:
 122              	.LFB69:
 127:base/stm32f1xx_it.c **** }
 128:base/stm32f1xx_it.c **** 
 129:base/stm32f1xx_it.c **** /**
 130:base/stm32f1xx_it.c ****  * @brief This function handles Undefined instruction or illegal state.
 131:base/stm32f1xx_it.c ****  */
 132:base/stm32f1xx_it.c **** void UsageFault_Handler ( void )
 133:base/stm32f1xx_it.c **** {
 123              		.loc 1 133 1 view -0
 124              		.cfi_startproc
 125              		@ Volatile: function does not return.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.L10:
 134:base/stm32f1xx_it.c ****     /* USER CODE BEGIN UsageFault_IRQn 0 */
 135:base/stm32f1xx_it.c **** 
 136:base/stm32f1xx_it.c ****     /* USER CODE END UsageFault_IRQn 0 */
 137:base/stm32f1xx_it.c ****     while ( 1 )
 130              		.loc 1 137 5 discriminator 1 view .LVU17
 138:base/stm32f1xx_it.c ****     {
 139:base/stm32f1xx_it.c ****         /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 140:base/stm32f1xx_it.c ****         /* USER CODE END W1_UsageFault_IRQn 0 */
 141:base/stm32f1xx_it.c ****     }
 131              		.loc 1 141 5 discriminator 1 view .LVU18
 137:base/stm32f1xx_it.c ****     {
 132              		.loc 1 137 11 discriminator 1 view .LVU19
 133 0000 FEE7     		b	.L10
 134              		.cfi_endproc
 135              	.LFE69:
 137              		.section	.text.DebugMon_Handler,"ax",%progbits
 138              		.align	1
 139              		.global	DebugMon_Handler
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	DebugMon_Handler:
 146              	.LFB70:
 142:base/stm32f1xx_it.c **** }
 143:base/stm32f1xx_it.c **** 
 144:base/stm32f1xx_it.c **** /**
 145:base/stm32f1xx_it.c ****  * @brief This function handles Debug monitor.
ARM GAS  /tmp/cci3c1PI.s 			page 6


 146:base/stm32f1xx_it.c ****  */
 147:base/stm32f1xx_it.c **** void DebugMon_Handler ( void )
 148:base/stm32f1xx_it.c **** {
 147              		.loc 1 148 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 149:base/stm32f1xx_it.c ****     /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 150:base/stm32f1xx_it.c **** 
 151:base/stm32f1xx_it.c ****     /* USER CODE END DebugMonitor_IRQn 0 */
 152:base/stm32f1xx_it.c ****     /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 153:base/stm32f1xx_it.c **** 
 154:base/stm32f1xx_it.c ****     /* USER CODE END DebugMonitor_IRQn 1 */
 155:base/stm32f1xx_it.c **** }
 152              		.loc 1 155 1 view .LVU21
 153 0000 7047     		bx	lr
 154              		.cfi_endproc
 155              	.LFE70:
 157              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 158              		.align	1
 159              		.global	TIM3_IRQHandler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	TIM3_IRQHandler:
 166              	.LFB71:
 156:base/stm32f1xx_it.c **** 
 157:base/stm32f1xx_it.c **** /******************************************************************************/
 158:base/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 159:base/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 160:base/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 161:base/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 162:base/stm32f1xx_it.c **** /******************************************************************************/
 163:base/stm32f1xx_it.c **** 
 164:base/stm32f1xx_it.c **** /**
 165:base/stm32f1xx_it.c ****  * @brief This function handles TIM3 global interrupt.
 166:base/stm32f1xx_it.c ****  */
 167:base/stm32f1xx_it.c **** void TIM3_IRQHandler ( void )
 168:base/stm32f1xx_it.c **** {
 167              		.loc 1 168 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 08B5     		push	{r3, lr}
 172              	.LCFI0:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 3, -8
 175              		.cfi_offset 14, -4
 169:base/stm32f1xx_it.c ****     /* USER CODE BEGIN TIM3_IRQn 0 */
 170:base/stm32f1xx_it.c **** 
 171:base/stm32f1xx_it.c ****     /* USER CODE END TIM3_IRQn 0 */
 172:base/stm32f1xx_it.c ****     HAL_TIM_IRQHandler ( &htim3 );
 176              		.loc 1 172 5 view .LVU23
 177 0002 0248     		ldr	r0, .L14
 178 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
ARM GAS  /tmp/cci3c1PI.s 			page 7


 179              	.LVL0:
 173:base/stm32f1xx_it.c ****     /* USER CODE BEGIN TIM3_IRQn 1 */
 174:base/stm32f1xx_it.c **** 
 175:base/stm32f1xx_it.c ****     /* USER CODE END TIM3_IRQn 1 */
 176:base/stm32f1xx_it.c **** }
 180              		.loc 1 176 1 is_stmt 0 view .LVU24
 181 0008 08BD     		pop	{r3, pc}
 182              	.L15:
 183 000a 00BF     		.align	2
 184              	.L14:
 185 000c 00000000 		.word	htim3
 186              		.cfi_endproc
 187              	.LFE71:
 189              		.section	.text.USART1_IRQHandler,"ax",%progbits
 190              		.align	1
 191              		.global	USART1_IRQHandler
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 197              	USART1_IRQHandler:
 198              	.LFB72:
 177:base/stm32f1xx_it.c **** 
 178:base/stm32f1xx_it.c **** /**
 179:base/stm32f1xx_it.c ****  * @brief This function handles USART1 global interrupt.
 180:base/stm32f1xx_it.c ****  */
 181:base/stm32f1xx_it.c **** void USART1_IRQHandler ( void )
 182:base/stm32f1xx_it.c **** {
 199              		.loc 1 182 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI1:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 183:base/stm32f1xx_it.c ****     /* USER CODE BEGIN USART1_IRQn 0 */
 184:base/stm32f1xx_it.c **** 
 185:base/stm32f1xx_it.c ****     /* USER CODE END USART1_IRQn 0 */
 186:base/stm32f1xx_it.c ****     HAL_UART_IRQHandler ( &huart1 );
 208              		.loc 1 186 5 view .LVU26
 209 0002 0248     		ldr	r0, .L18
 210 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 211              	.LVL1:
 187:base/stm32f1xx_it.c ****     /* USER CODE BEGIN USART1_IRQn 1 */
 188:base/stm32f1xx_it.c **** 
 189:base/stm32f1xx_it.c ****     /* USER CODE END USART1_IRQn 1 */
 190:base/stm32f1xx_it.c **** }
 212              		.loc 1 190 1 is_stmt 0 view .LVU27
 213 0008 08BD     		pop	{r3, pc}
 214              	.L19:
 215 000a 00BF     		.align	2
 216              	.L18:
 217 000c 00000000 		.word	huart1
 218              		.cfi_endproc
 219              	.LFE72:
ARM GAS  /tmp/cci3c1PI.s 			page 8


 221              		.text
 222              	.Letext0:
 223              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 224              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 225              		.file 4 "base/chip/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103x6.h"
 226              		.file 5 "base/chip/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 227              		.file 6 "base/chip/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 228              		.file 7 "base/chip/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 229              		.file 8 "base/chip/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
ARM GAS  /tmp/cci3c1PI.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/cci3c1PI.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cci3c1PI.s:42     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:49     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cci3c1PI.s:66     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cci3c1PI.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:97     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cci3c1PI.s:114    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:121    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cci3c1PI.s:138    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cci3c1PI.s:145    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cci3c1PI.s:158    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/cci3c1PI.s:165    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/cci3c1PI.s:185    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/cci3c1PI.s:190    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/cci3c1PI.s:197    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/cci3c1PI.s:217    .text.USART1_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_TIM_IRQHandler
htim3
HAL_UART_IRQHandler
huart1
