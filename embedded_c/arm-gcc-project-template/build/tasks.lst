ARM GAS  /tmp/cchwbchh.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTaskIsTaskSuspended:
  24              	.LVL0:
  25              	.LFB16:
  26              		.file 1 "base/os/FreeRTOS/Source/tasks.c"
   1:base/os/FreeRTOS/Source/tasks.c **** /*
   2:base/os/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/tasks.c ****  *
   5:base/os/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/tasks.c ****  *
  12:base/os/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/tasks.c ****  *
  15:base/os/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/tasks.c ****  *
  22:base/os/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/tasks.c ****  *
  25:base/os/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/tasks.c ****  */
  27:base/os/FreeRTOS/Source/tasks.c **** 
  28:base/os/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:base/os/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:base/os/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:base/os/FreeRTOS/Source/tasks.c **** 
  32:base/os/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/cchwbchh.s 			page 2


  33:base/os/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:base/os/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:base/os/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:base/os/FreeRTOS/Source/tasks.c **** 
  37:base/os/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:base/os/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:base/os/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:base/os/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:base/os/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:base/os/FreeRTOS/Source/tasks.c **** 
  43:base/os/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:base/os/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:base/os/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:base/os/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:base/os/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:base/os/FreeRTOS/Source/tasks.c **** 
  49:base/os/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:base/os/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:base/os/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:base/os/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:base/os/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:base/os/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:base/os/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:base/os/FreeRTOS/Source/tasks.c **** 
  59:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:base/os/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:base/os/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:base/os/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:base/os/FreeRTOS/Source/tasks.c **** #else
  64:base/os/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:base/os/FreeRTOS/Source/tasks.c **** #endif
  66:base/os/FreeRTOS/Source/tasks.c **** 
  67:base/os/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:base/os/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:base/os/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:base/os/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:base/os/FreeRTOS/Source/tasks.c **** 
  72:base/os/FreeRTOS/Source/tasks.c **** /*
  73:base/os/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:base/os/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:base/os/FreeRTOS/Source/tasks.c ****  */
  76:base/os/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:base/os/FreeRTOS/Source/tasks.c **** 
  78:base/os/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:base/os/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:base/os/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:base/os/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:base/os/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:base/os/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:base/os/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:base/os/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:base/os/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:base/os/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:base/os/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:base/os/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  /tmp/cchwbchh.s 			page 3


  90:base/os/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:base/os/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:base/os/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:base/os/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:base/os/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:base/os/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:base/os/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:base/os/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:base/os/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:base/os/FreeRTOS/Source/tasks.c **** 
 100:base/os/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:base/os/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:base/os/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:base/os/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:base/os/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:base/os/FreeRTOS/Source/tasks.c **** #else
 106:base/os/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:base/os/FreeRTOS/Source/tasks.c **** #endif
 108:base/os/FreeRTOS/Source/tasks.c **** 
 109:base/os/FreeRTOS/Source/tasks.c **** /*
 110:base/os/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:base/os/FreeRTOS/Source/tasks.c ****  */
 112:base/os/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:base/os/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:base/os/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:base/os/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:base/os/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:base/os/FreeRTOS/Source/tasks.c **** 
 118:base/os/FreeRTOS/Source/tasks.c **** /*
 119:base/os/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:base/os/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:base/os/FreeRTOS/Source/tasks.c ****  */
 122:base/os/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:base/os/FreeRTOS/Source/tasks.c **** 	#define static
 124:base/os/FreeRTOS/Source/tasks.c **** #endif
 125:base/os/FreeRTOS/Source/tasks.c **** 
 126:base/os/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:base/os/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:base/os/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:base/os/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:base/os/FreeRTOS/Source/tasks.c **** #endif
 131:base/os/FreeRTOS/Source/tasks.c **** 
 132:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:base/os/FreeRTOS/Source/tasks.c **** 
 134:base/os/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:base/os/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:base/os/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:base/os/FreeRTOS/Source/tasks.c **** 
 138:base/os/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:base/os/FreeRTOS/Source/tasks.c **** 	state task. */
 140:base/os/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:base/os/FreeRTOS/Source/tasks.c **** 	{																									\
 142:base/os/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:base/os/FreeRTOS/Source/tasks.c **** 		{																								\
 144:base/os/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:base/os/FreeRTOS/Source/tasks.c **** 		}																								\
 146:base/os/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  /tmp/cchwbchh.s 			page 4


 147:base/os/FreeRTOS/Source/tasks.c **** 
 148:base/os/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:base/os/FreeRTOS/Source/tasks.c **** 
 150:base/os/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:base/os/FreeRTOS/Source/tasks.c **** 	{																									\
 152:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:base/os/FreeRTOS/Source/tasks.c **** 																										\
 154:base/os/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:base/os/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:base/os/FreeRTOS/Source/tasks.c **** 		{																								\
 157:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:base/os/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:base/os/FreeRTOS/Source/tasks.c **** 		}																								\
 160:base/os/FreeRTOS/Source/tasks.c **** 																										\
 161:base/os/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:base/os/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:base/os/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:base/os/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:base/os/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:base/os/FreeRTOS/Source/tasks.c **** 
 167:base/os/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:base/os/FreeRTOS/Source/tasks.c **** 
 169:base/os/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:base/os/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:base/os/FreeRTOS/Source/tasks.c **** 	being used. */
 172:base/os/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:base/os/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:base/os/FreeRTOS/Source/tasks.c **** 
 175:base/os/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:base/os/FreeRTOS/Source/tasks.c **** 
 177:base/os/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:base/os/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:base/os/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:base/os/FreeRTOS/Source/tasks.c **** 
 181:base/os/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:base/os/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:base/os/FreeRTOS/Source/tasks.c **** 
 184:base/os/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:base/os/FreeRTOS/Source/tasks.c **** 
 186:base/os/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:base/os/FreeRTOS/Source/tasks.c **** 	{																								\
 188:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:base/os/FreeRTOS/Source/tasks.c **** 																									\
 190:base/os/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:base/os/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:base/os/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:base/os/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:base/os/FreeRTOS/Source/tasks.c **** 
 196:base/os/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:base/os/FreeRTOS/Source/tasks.c **** 
 198:base/os/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:base/os/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:base/os/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:base/os/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:base/os/FreeRTOS/Source/tasks.c **** 	{																									\
 203:base/os/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  /tmp/cchwbchh.s 			page 5


 204:base/os/FreeRTOS/Source/tasks.c **** 		{																								\
 205:base/os/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:base/os/FreeRTOS/Source/tasks.c **** 		}																								\
 207:base/os/FreeRTOS/Source/tasks.c **** 	}
 208:base/os/FreeRTOS/Source/tasks.c **** 
 209:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:base/os/FreeRTOS/Source/tasks.c **** 
 211:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:base/os/FreeRTOS/Source/tasks.c **** 
 213:base/os/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:base/os/FreeRTOS/Source/tasks.c **** count overflows. */
 215:base/os/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:base/os/FreeRTOS/Source/tasks.c **** {																									\
 217:base/os/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:base/os/FreeRTOS/Source/tasks.c **** 																									\
 219:base/os/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:base/os/FreeRTOS/Source/tasks.c **** 																									\
 222:base/os/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:base/os/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:base/os/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:base/os/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:base/os/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:base/os/FreeRTOS/Source/tasks.c **** }
 228:base/os/FreeRTOS/Source/tasks.c **** 
 229:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:base/os/FreeRTOS/Source/tasks.c **** 
 231:base/os/FreeRTOS/Source/tasks.c **** /*
 232:base/os/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:base/os/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:base/os/FreeRTOS/Source/tasks.c ****  */
 235:base/os/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:base/os/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:base/os/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:base/os/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:base/os/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:base/os/FreeRTOS/Source/tasks.c **** 
 242:base/os/FreeRTOS/Source/tasks.c **** /*
 243:base/os/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:base/os/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:base/os/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:base/os/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:base/os/FreeRTOS/Source/tasks.c ****  */
 248:base/os/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:base/os/FreeRTOS/Source/tasks.c **** 
 250:base/os/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:base/os/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:base/os/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:base/os/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:base/os/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:base/os/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:base/os/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:base/os/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:base/os/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:base/os/FreeRTOS/Source/tasks.c **** #else
ARM GAS  /tmp/cchwbchh.s 			page 6


 261:base/os/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:base/os/FreeRTOS/Source/tasks.c **** #endif
 263:base/os/FreeRTOS/Source/tasks.c **** 
 264:base/os/FreeRTOS/Source/tasks.c **** /*
 265:base/os/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:base/os/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:base/os/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:base/os/FreeRTOS/Source/tasks.c ****  */
 269:base/os/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:base/os/FreeRTOS/Source/tasks.c **** {
 271:base/os/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:base/os/FreeRTOS/Source/tasks.c **** 
 273:base/os/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:base/os/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 276:base/os/FreeRTOS/Source/tasks.c **** 
 277:base/os/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:base/os/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:base/os/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:base/os/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:base/os/FreeRTOS/Source/tasks.c **** 
 283:base/os/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:base/os/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 286:base/os/FreeRTOS/Source/tasks.c **** 
 287:base/os/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:base/os/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 290:base/os/FreeRTOS/Source/tasks.c **** 
 291:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:base/os/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:base/os/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 295:base/os/FreeRTOS/Source/tasks.c **** 
 296:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:base/os/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:base/os/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 300:base/os/FreeRTOS/Source/tasks.c **** 
 301:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:base/os/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 304:base/os/FreeRTOS/Source/tasks.c **** 
 305:base/os/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:base/os/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 308:base/os/FreeRTOS/Source/tasks.c **** 
 309:base/os/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:base/os/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 312:base/os/FreeRTOS/Source/tasks.c **** 
 313:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:base/os/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:base/os/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:base/os/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:base/os/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  /tmp/cchwbchh.s 			page 7


 318:base/os/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:base/os/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:base/os/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:base/os/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 323:base/os/FreeRTOS/Source/tasks.c **** 
 324:base/os/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:base/os/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:base/os/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 328:base/os/FreeRTOS/Source/tasks.c **** 
 329:base/os/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:base/os/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:base/os/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:base/os/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 334:base/os/FreeRTOS/Source/tasks.c **** 
 335:base/os/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:base/os/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 338:base/os/FreeRTOS/Source/tasks.c **** 
 339:base/os/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:base/os/FreeRTOS/Source/tasks.c **** 
 341:base/os/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:base/os/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:base/os/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:base/os/FreeRTOS/Source/tasks.c **** 
 345:base/os/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:base/os/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:base/os/FreeRTOS/Source/tasks.c **** 
 348:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:base/os/FreeRTOS/Source/tasks.c **** 
 350:base/os/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:base/os/FreeRTOS/Source/tasks.c **** 
 358:base/os/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:base/os/FreeRTOS/Source/tasks.c **** 
 360:base/os/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:base/os/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:base/os/FreeRTOS/Source/tasks.c **** 
 363:base/os/FreeRTOS/Source/tasks.c **** #endif
 364:base/os/FreeRTOS/Source/tasks.c **** 
 365:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:base/os/FreeRTOS/Source/tasks.c **** 
 367:base/os/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:base/os/FreeRTOS/Source/tasks.c **** 
 369:base/os/FreeRTOS/Source/tasks.c **** #endif
 370:base/os/FreeRTOS/Source/tasks.c **** 
 371:base/os/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/cchwbchh.s 			page 8


 375:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:base/os/FreeRTOS/Source/tasks.c **** 
 383:base/os/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:base/os/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:base/os/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:base/os/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:base/os/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:base/os/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:base/os/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:base/os/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:base/os/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:base/os/FreeRTOS/Source/tasks.c **** 
 393:base/os/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:base/os/FreeRTOS/Source/tasks.c **** 
 395:base/os/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:base/os/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:base/os/FreeRTOS/Source/tasks.c **** 
 398:base/os/FreeRTOS/Source/tasks.c **** #endif
 399:base/os/FreeRTOS/Source/tasks.c **** 
 400:base/os/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:base/os/FreeRTOS/Source/tasks.c **** 
 402:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:base/os/FreeRTOS/Source/tasks.c **** 
 404:base/os/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:base/os/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:base/os/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:base/os/FreeRTOS/Source/tasks.c **** #endif
 408:base/os/FreeRTOS/Source/tasks.c **** 
 409:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:base/os/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:base/os/FreeRTOS/Source/tasks.c **** #endif
 412:base/os/FreeRTOS/Source/tasks.c **** 
 413:base/os/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:base/os/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:base/os/FreeRTOS/Source/tasks.c **** #endif
 416:base/os/FreeRTOS/Source/tasks.c **** 
 417:base/os/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:base/os/FreeRTOS/Source/tasks.c **** 
 419:base/os/FreeRTOS/Source/tasks.c **** /**
 420:base/os/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:base/os/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:base/os/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:base/os/FreeRTOS/Source/tasks.c ****  */
 424:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:base/os/FreeRTOS/Source/tasks.c **** 
 426:base/os/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:base/os/FreeRTOS/Source/tasks.c **** 
 428:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:base/os/FreeRTOS/Source/tasks.c **** 
 430:base/os/FreeRTOS/Source/tasks.c **** /*
 431:base/os/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/cchwbchh.s 			page 9


 432:base/os/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:base/os/FreeRTOS/Source/tasks.c ****  */
 434:base/os/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:base/os/FreeRTOS/Source/tasks.c **** 
 436:base/os/FreeRTOS/Source/tasks.c **** /*
 437:base/os/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:base/os/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:base/os/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:base/os/FreeRTOS/Source/tasks.c ****  *
 441:base/os/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:base/os/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:base/os/FreeRTOS/Source/tasks.c ****  *
 444:base/os/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:base/os/FreeRTOS/Source/tasks.c ****  *
 446:base/os/FreeRTOS/Source/tasks.c ****  */
 447:base/os/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:base/os/FreeRTOS/Source/tasks.c **** 
 449:base/os/FreeRTOS/Source/tasks.c **** /*
 450:base/os/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:base/os/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:base/os/FreeRTOS/Source/tasks.c ****  *
 453:base/os/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:base/os/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:base/os/FreeRTOS/Source/tasks.c ****  */
 456:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:base/os/FreeRTOS/Source/tasks.c **** 
 458:base/os/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:base/os/FreeRTOS/Source/tasks.c **** 
 460:base/os/FreeRTOS/Source/tasks.c **** #endif
 461:base/os/FreeRTOS/Source/tasks.c **** 
 462:base/os/FreeRTOS/Source/tasks.c **** /*
 463:base/os/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:base/os/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:base/os/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:base/os/FreeRTOS/Source/tasks.c ****  */
 467:base/os/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:base/os/FreeRTOS/Source/tasks.c **** 
 469:base/os/FreeRTOS/Source/tasks.c **** /*
 470:base/os/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:base/os/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:base/os/FreeRTOS/Source/tasks.c ****  */
 473:base/os/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:base/os/FreeRTOS/Source/tasks.c **** 
 475:base/os/FreeRTOS/Source/tasks.c **** /*
 476:base/os/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:base/os/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:base/os/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:base/os/FreeRTOS/Source/tasks.c ****  *
 480:base/os/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:base/os/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:base/os/FreeRTOS/Source/tasks.c ****  */
 483:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:base/os/FreeRTOS/Source/tasks.c **** 
 485:base/os/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:base/os/FreeRTOS/Source/tasks.c **** 
 487:base/os/FreeRTOS/Source/tasks.c **** #endif
 488:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 10


 489:base/os/FreeRTOS/Source/tasks.c **** /*
 490:base/os/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:base/os/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:base/os/FreeRTOS/Source/tasks.c ****  */
 493:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:base/os/FreeRTOS/Source/tasks.c **** 
 495:base/os/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:base/os/FreeRTOS/Source/tasks.c **** 
 497:base/os/FreeRTOS/Source/tasks.c **** #endif
 498:base/os/FreeRTOS/Source/tasks.c **** 
 499:base/os/FreeRTOS/Source/tasks.c **** /*
 500:base/os/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:base/os/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:base/os/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:base/os/FreeRTOS/Source/tasks.c ****  */
 504:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:base/os/FreeRTOS/Source/tasks.c **** 
 506:base/os/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:base/os/FreeRTOS/Source/tasks.c **** 
 508:base/os/FreeRTOS/Source/tasks.c **** #endif
 509:base/os/FreeRTOS/Source/tasks.c **** 
 510:base/os/FreeRTOS/Source/tasks.c **** /*
 511:base/os/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:base/os/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:base/os/FreeRTOS/Source/tasks.c ****  *
 514:base/os/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:base/os/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:base/os/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:base/os/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:base/os/FreeRTOS/Source/tasks.c ****  */
 519:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:base/os/FreeRTOS/Source/tasks.c **** 
 521:base/os/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:base/os/FreeRTOS/Source/tasks.c **** 
 523:base/os/FreeRTOS/Source/tasks.c **** #endif
 524:base/os/FreeRTOS/Source/tasks.c **** 
 525:base/os/FreeRTOS/Source/tasks.c **** /*
 526:base/os/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:base/os/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:base/os/FreeRTOS/Source/tasks.c ****  */
 529:base/os/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:base/os/FreeRTOS/Source/tasks.c **** 
 531:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:base/os/FreeRTOS/Source/tasks.c **** 
 533:base/os/FreeRTOS/Source/tasks.c **** 	/*
 534:base/os/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:base/os/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:base/os/FreeRTOS/Source/tasks.c **** 	 */
 537:base/os/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:base/os/FreeRTOS/Source/tasks.c **** 
 539:base/os/FreeRTOS/Source/tasks.c **** #endif
 540:base/os/FreeRTOS/Source/tasks.c **** 
 541:base/os/FreeRTOS/Source/tasks.c **** /*
 542:base/os/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:base/os/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:base/os/FreeRTOS/Source/tasks.c ****  */
 545:base/os/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/cchwbchh.s 			page 11


 546:base/os/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:base/os/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:base/os/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:base/os/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:base/os/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:base/os/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:base/os/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:base/os/FreeRTOS/Source/tasks.c **** 
 554:base/os/FreeRTOS/Source/tasks.c **** /*
 555:base/os/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:base/os/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:base/os/FreeRTOS/Source/tasks.c ****  */
 558:base/os/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:base/os/FreeRTOS/Source/tasks.c **** 
 560:base/os/FreeRTOS/Source/tasks.c **** /*
 561:base/os/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:base/os/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:base/os/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:base/os/FreeRTOS/Source/tasks.c ****  */
 565:base/os/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:base/os/FreeRTOS/Source/tasks.c **** 
 567:base/os/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:base/os/FreeRTOS/Source/tasks.c **** 
 569:base/os/FreeRTOS/Source/tasks.c **** #endif
 570:base/os/FreeRTOS/Source/tasks.c **** 
 571:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:base/os/FreeRTOS/Source/tasks.c **** 
 573:base/os/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:base/os/FreeRTOS/Source/tasks.c **** 
 575:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:base/os/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:base/os/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:base/os/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:base/os/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:base/os/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:base/os/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:base/os/FreeRTOS/Source/tasks.c **** 	{
 583:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:base/os/FreeRTOS/Source/tasks.c **** 
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:base/os/FreeRTOS/Source/tasks.c **** 
 589:base/os/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:base/os/FreeRTOS/Source/tasks.c **** 		{
 591:base/os/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:base/os/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:base/os/FreeRTOS/Source/tasks.c **** 			structure. */
 594:base/os/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:base/os/FreeRTOS/Source/tasks.c **** 		}
 597:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:base/os/FreeRTOS/Source/tasks.c **** 
 599:base/os/FreeRTOS/Source/tasks.c **** 
 600:base/os/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:base/os/FreeRTOS/Source/tasks.c **** 		{
 602:base/os/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/cchwbchh.s 			page 12


 603:base/os/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:base/os/FreeRTOS/Source/tasks.c **** 
 607:base/os/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:base/os/FreeRTOS/Source/tasks.c **** 			{
 609:base/os/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:base/os/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:base/os/FreeRTOS/Source/tasks.c **** 			}
 613:base/os/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:base/os/FreeRTOS/Source/tasks.c **** 
 615:base/os/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:base/os/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:base/os/FreeRTOS/Source/tasks.c **** 		}
 618:base/os/FreeRTOS/Source/tasks.c **** 		else
 619:base/os/FreeRTOS/Source/tasks.c **** 		{
 620:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:base/os/FreeRTOS/Source/tasks.c **** 		}
 622:base/os/FreeRTOS/Source/tasks.c **** 
 623:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:base/os/FreeRTOS/Source/tasks.c **** 	}
 625:base/os/FreeRTOS/Source/tasks.c **** 
 626:base/os/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:base/os/FreeRTOS/Source/tasks.c **** 
 629:base/os/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:base/os/FreeRTOS/Source/tasks.c **** 
 631:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:base/os/FreeRTOS/Source/tasks.c **** 	{
 633:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:base/os/FreeRTOS/Source/tasks.c **** 
 636:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:base/os/FreeRTOS/Source/tasks.c **** 
 639:base/os/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:base/os/FreeRTOS/Source/tasks.c **** 		{
 641:base/os/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:base/os/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:base/os/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:base/os/FreeRTOS/Source/tasks.c **** 
 646:base/os/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:base/os/FreeRTOS/Source/tasks.c **** 
 649:base/os/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:base/os/FreeRTOS/Source/tasks.c **** 			{
 651:base/os/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:base/os/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:base/os/FreeRTOS/Source/tasks.c **** 			}
 655:base/os/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:base/os/FreeRTOS/Source/tasks.c **** 
 657:base/os/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:base/os/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:base/os/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/cchwbchh.s 			page 13


 660:base/os/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:base/os/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:base/os/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:base/os/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:base/os/FreeRTOS/Source/tasks.c **** 
 665:base/os/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:base/os/FreeRTOS/Source/tasks.c **** 		}
 668:base/os/FreeRTOS/Source/tasks.c **** 
 669:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:base/os/FreeRTOS/Source/tasks.c **** 	}
 671:base/os/FreeRTOS/Source/tasks.c **** 
 672:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:base/os/FreeRTOS/Source/tasks.c **** 
 675:base/os/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:base/os/FreeRTOS/Source/tasks.c **** 
 677:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:base/os/FreeRTOS/Source/tasks.c **** 	{
 679:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:base/os/FreeRTOS/Source/tasks.c **** 
 682:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:base/os/FreeRTOS/Source/tasks.c **** 
 684:base/os/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:base/os/FreeRTOS/Source/tasks.c **** 		{
 686:base/os/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:base/os/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:base/os/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:base/os/FreeRTOS/Source/tasks.c **** 
 691:base/os/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:base/os/FreeRTOS/Source/tasks.c **** 			{
 693:base/os/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:base/os/FreeRTOS/Source/tasks.c **** 
 696:base/os/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:base/os/FreeRTOS/Source/tasks.c **** 				{
 698:base/os/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:base/os/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:base/os/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:base/os/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:base/os/FreeRTOS/Source/tasks.c **** 				}
 703:base/os/FreeRTOS/Source/tasks.c **** 				#endif
 704:base/os/FreeRTOS/Source/tasks.c **** 
 705:base/os/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:base/os/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:base/os/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:base/os/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:base/os/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:base/os/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:base/os/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:base/os/FreeRTOS/Source/tasks.c **** 
 713:base/os/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:base/os/FreeRTOS/Source/tasks.c **** 			}
 716:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 14


 717:base/os/FreeRTOS/Source/tasks.c **** 
 718:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:base/os/FreeRTOS/Source/tasks.c **** 	}
 720:base/os/FreeRTOS/Source/tasks.c **** 
 721:base/os/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:base/os/FreeRTOS/Source/tasks.c **** 
 724:base/os/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:base/os/FreeRTOS/Source/tasks.c **** 
 726:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:base/os/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:base/os/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:base/os/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:base/os/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:base/os/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:base/os/FreeRTOS/Source/tasks.c **** 	{
 733:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:base/os/FreeRTOS/Source/tasks.c **** 
 736:base/os/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:base/os/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:base/os/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:base/os/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:base/os/FreeRTOS/Source/tasks.c **** 		{
 741:base/os/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:base/os/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:base/os/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:base/os/FreeRTOS/Source/tasks.c **** 
 746:base/os/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:base/os/FreeRTOS/Source/tasks.c **** 			{
 748:base/os/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:base/os/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:base/os/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:base/os/FreeRTOS/Source/tasks.c **** 
 753:base/os/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:base/os/FreeRTOS/Source/tasks.c **** 				{
 755:base/os/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:base/os/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:base/os/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:base/os/FreeRTOS/Source/tasks.c **** 				}
 759:base/os/FreeRTOS/Source/tasks.c **** 			}
 760:base/os/FreeRTOS/Source/tasks.c **** 		}
 761:base/os/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:base/os/FreeRTOS/Source/tasks.c **** 		{
 763:base/os/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:base/os/FreeRTOS/Source/tasks.c **** 
 765:base/os/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:base/os/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:base/os/FreeRTOS/Source/tasks.c **** 
 768:base/os/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:base/os/FreeRTOS/Source/tasks.c **** 			{
 770:base/os/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:base/os/FreeRTOS/Source/tasks.c **** 
 773:base/os/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  /tmp/cchwbchh.s 			page 15


 774:base/os/FreeRTOS/Source/tasks.c **** 				{
 775:base/os/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:base/os/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:base/os/FreeRTOS/Source/tasks.c **** 				}
 778:base/os/FreeRTOS/Source/tasks.c **** 				else
 779:base/os/FreeRTOS/Source/tasks.c **** 				{
 780:base/os/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:base/os/FreeRTOS/Source/tasks.c **** 					it again. */
 782:base/os/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:base/os/FreeRTOS/Source/tasks.c **** 				}
 784:base/os/FreeRTOS/Source/tasks.c **** 			}
 785:base/os/FreeRTOS/Source/tasks.c **** 			else
 786:base/os/FreeRTOS/Source/tasks.c **** 			{
 787:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:base/os/FreeRTOS/Source/tasks.c **** 			}
 789:base/os/FreeRTOS/Source/tasks.c **** 		}
 790:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:base/os/FreeRTOS/Source/tasks.c **** 
 792:base/os/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:base/os/FreeRTOS/Source/tasks.c **** 		{
 794:base/os/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:base/os/FreeRTOS/Source/tasks.c **** 			{
 796:base/os/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:base/os/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:base/os/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:base/os/FreeRTOS/Source/tasks.c **** 			}
 800:base/os/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:base/os/FreeRTOS/Source/tasks.c **** 
 802:base/os/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:base/os/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:base/os/FreeRTOS/Source/tasks.c **** 		}
 806:base/os/FreeRTOS/Source/tasks.c **** 		else
 807:base/os/FreeRTOS/Source/tasks.c **** 		{
 808:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:base/os/FreeRTOS/Source/tasks.c **** 		}
 810:base/os/FreeRTOS/Source/tasks.c **** 
 811:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:base/os/FreeRTOS/Source/tasks.c **** 	}
 813:base/os/FreeRTOS/Source/tasks.c **** 
 814:base/os/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:base/os/FreeRTOS/Source/tasks.c **** 
 817:base/os/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:base/os/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:base/os/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:base/os/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:base/os/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:base/os/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:base/os/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:base/os/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:base/os/FreeRTOS/Source/tasks.c **** {
 826:base/os/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:base/os/FreeRTOS/Source/tasks.c **** 
 829:base/os/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:base/os/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  /tmp/cchwbchh.s 			page 16


 831:base/os/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:base/os/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:base/os/FreeRTOS/Source/tasks.c **** 		{
 834:base/os/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:base/os/FreeRTOS/Source/tasks.c **** 		}
 836:base/os/FreeRTOS/Source/tasks.c **** 		else
 837:base/os/FreeRTOS/Source/tasks.c **** 		{
 838:base/os/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:base/os/FreeRTOS/Source/tasks.c **** 		}
 840:base/os/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:base/os/FreeRTOS/Source/tasks.c **** 
 843:base/os/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:base/os/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:base/os/FreeRTOS/Source/tasks.c **** 	{
 846:base/os/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:base/os/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:base/os/FreeRTOS/Source/tasks.c **** 	}
 849:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:base/os/FreeRTOS/Source/tasks.c **** 
 851:base/os/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:base/os/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:base/os/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:base/os/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:base/os/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:base/os/FreeRTOS/Source/tasks.c **** 	{
 857:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:base/os/FreeRTOS/Source/tasks.c **** 
 860:base/os/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:base/os/FreeRTOS/Source/tasks.c **** 
 863:base/os/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:base/os/FreeRTOS/Source/tasks.c **** 		{
 865:base/os/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:base/os/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:base/os/FreeRTOS/Source/tasks.c **** 		}
 869:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:base/os/FreeRTOS/Source/tasks.c **** 	}
 871:base/os/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:base/os/FreeRTOS/Source/tasks.c **** 	{
 873:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:base/os/FreeRTOS/Source/tasks.c **** 
 875:base/os/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:base/os/FreeRTOS/Source/tasks.c **** 
 878:base/os/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:base/os/FreeRTOS/Source/tasks.c **** 		performed. */
 880:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:base/os/FreeRTOS/Source/tasks.c **** 	}
 882:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:base/os/FreeRTOS/Source/tasks.c **** 
 884:base/os/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:base/os/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:base/os/FreeRTOS/Source/tasks.c **** 	{
 887:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/cchwbchh.s 			page 17


 888:base/os/FreeRTOS/Source/tasks.c **** 
 889:base/os/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:base/os/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:base/os/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:base/os/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:base/os/FreeRTOS/Source/tasks.c **** 		{
 894:base/os/FreeRTOS/Source/tasks.c **** 			break;
 895:base/os/FreeRTOS/Source/tasks.c **** 		}
 896:base/os/FreeRTOS/Source/tasks.c **** 		else
 897:base/os/FreeRTOS/Source/tasks.c **** 		{
 898:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:base/os/FreeRTOS/Source/tasks.c **** 		}
 900:base/os/FreeRTOS/Source/tasks.c **** 	}
 901:base/os/FreeRTOS/Source/tasks.c **** 
 902:base/os/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:base/os/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:base/os/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:base/os/FreeRTOS/Source/tasks.c **** 
 906:base/os/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:base/os/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:base/os/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:base/os/FreeRTOS/Source/tasks.c **** 	{
 910:base/os/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:base/os/FreeRTOS/Source/tasks.c **** 	}
 912:base/os/FreeRTOS/Source/tasks.c **** 	else
 913:base/os/FreeRTOS/Source/tasks.c **** 	{
 914:base/os/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:base/os/FreeRTOS/Source/tasks.c **** 	}
 916:base/os/FreeRTOS/Source/tasks.c **** 
 917:base/os/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:base/os/FreeRTOS/Source/tasks.c **** 	{
 920:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:base/os/FreeRTOS/Source/tasks.c **** 	}
 923:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:base/os/FreeRTOS/Source/tasks.c **** 
 925:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:base/os/FreeRTOS/Source/tasks.c **** 
 928:base/os/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:base/os/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:base/os/FreeRTOS/Source/tasks.c **** 
 932:base/os/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:base/os/FreeRTOS/Source/tasks.c **** 
 936:base/os/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:base/os/FreeRTOS/Source/tasks.c **** 	{
 938:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:base/os/FreeRTOS/Source/tasks.c **** 	}
 940:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:base/os/FreeRTOS/Source/tasks.c **** 
 942:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:base/os/FreeRTOS/Source/tasks.c **** 	{
 944:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/cchwbchh.s 			page 18


 945:base/os/FreeRTOS/Source/tasks.c **** 	}
 946:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:base/os/FreeRTOS/Source/tasks.c **** 
 948:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:base/os/FreeRTOS/Source/tasks.c **** 	{
 950:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:base/os/FreeRTOS/Source/tasks.c **** 	}
 952:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:base/os/FreeRTOS/Source/tasks.c **** 
 954:base/os/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:base/os/FreeRTOS/Source/tasks.c **** 	{
 956:base/os/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:base/os/FreeRTOS/Source/tasks.c **** 	}
 958:base/os/FreeRTOS/Source/tasks.c **** 	#else
 959:base/os/FreeRTOS/Source/tasks.c **** 	{
 960:base/os/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:base/os/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:base/os/FreeRTOS/Source/tasks.c **** 	}
 963:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 964:base/os/FreeRTOS/Source/tasks.c **** 
 965:base/os/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:base/os/FreeRTOS/Source/tasks.c **** 	{
 967:base/os/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:base/os/FreeRTOS/Source/tasks.c **** 		{
 969:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:base/os/FreeRTOS/Source/tasks.c **** 		}
 971:base/os/FreeRTOS/Source/tasks.c **** 	}
 972:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 973:base/os/FreeRTOS/Source/tasks.c **** 
 974:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:base/os/FreeRTOS/Source/tasks.c **** 	{
 976:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:base/os/FreeRTOS/Source/tasks.c **** 	}
 979:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 980:base/os/FreeRTOS/Source/tasks.c **** 
 981:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:base/os/FreeRTOS/Source/tasks.c **** 	{
 983:base/os/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:base/os/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:base/os/FreeRTOS/Source/tasks.c **** 	}
 986:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 987:base/os/FreeRTOS/Source/tasks.c **** 
 988:base/os/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:base/os/FreeRTOS/Source/tasks.c **** 	{
 990:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:base/os/FreeRTOS/Source/tasks.c **** 	}
 992:base/os/FreeRTOS/Source/tasks.c **** 	#endif
 993:base/os/FreeRTOS/Source/tasks.c **** 
 994:base/os/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:base/os/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:base/os/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:base/os/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:base/os/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:base/os/FreeRTOS/Source/tasks.c **** 	{
1000:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:base/os/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cchwbchh.s 			page 19


1002:base/os/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:base/os/FreeRTOS/Source/tasks.c **** 	{
1004:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:base/os/FreeRTOS/Source/tasks.c **** 	}
1006:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:base/os/FreeRTOS/Source/tasks.c **** 
1008:base/os/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:base/os/FreeRTOS/Source/tasks.c **** 	{
1010:base/os/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:base/os/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:base/os/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:base/os/FreeRTOS/Source/tasks.c **** 	}
1014:base/os/FreeRTOS/Source/tasks.c **** 	else
1015:base/os/FreeRTOS/Source/tasks.c **** 	{
1016:base/os/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:base/os/FreeRTOS/Source/tasks.c **** 	}
1018:base/os/FreeRTOS/Source/tasks.c **** }
1019:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:base/os/FreeRTOS/Source/tasks.c **** 
1021:base/os/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:base/os/FreeRTOS/Source/tasks.c **** {
1023:base/os/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:base/os/FreeRTOS/Source/tasks.c **** 	updated. */
1025:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:base/os/FreeRTOS/Source/tasks.c **** 	{
1027:base/os/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:base/os/FreeRTOS/Source/tasks.c **** 		{
1030:base/os/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:base/os/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:base/os/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:base/os/FreeRTOS/Source/tasks.c **** 
1034:base/os/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:base/os/FreeRTOS/Source/tasks.c **** 			{
1036:base/os/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:base/os/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:base/os/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:base/os/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:base/os/FreeRTOS/Source/tasks.c **** 			}
1041:base/os/FreeRTOS/Source/tasks.c **** 			else
1042:base/os/FreeRTOS/Source/tasks.c **** 			{
1043:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:base/os/FreeRTOS/Source/tasks.c **** 			}
1045:base/os/FreeRTOS/Source/tasks.c **** 		}
1046:base/os/FreeRTOS/Source/tasks.c **** 		else
1047:base/os/FreeRTOS/Source/tasks.c **** 		{
1048:base/os/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:base/os/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:base/os/FreeRTOS/Source/tasks.c **** 			so far. */
1051:base/os/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:base/os/FreeRTOS/Source/tasks.c **** 			{
1053:base/os/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:base/os/FreeRTOS/Source/tasks.c **** 				{
1055:base/os/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:base/os/FreeRTOS/Source/tasks.c **** 				}
1057:base/os/FreeRTOS/Source/tasks.c **** 				else
1058:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 20


1059:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:base/os/FreeRTOS/Source/tasks.c **** 				}
1061:base/os/FreeRTOS/Source/tasks.c **** 			}
1062:base/os/FreeRTOS/Source/tasks.c **** 			else
1063:base/os/FreeRTOS/Source/tasks.c **** 			{
1064:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:base/os/FreeRTOS/Source/tasks.c **** 			}
1066:base/os/FreeRTOS/Source/tasks.c **** 		}
1067:base/os/FreeRTOS/Source/tasks.c **** 
1068:base/os/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:base/os/FreeRTOS/Source/tasks.c **** 
1070:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:base/os/FreeRTOS/Source/tasks.c **** 		{
1072:base/os/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:base/os/FreeRTOS/Source/tasks.c **** 		}
1075:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:base/os/FreeRTOS/Source/tasks.c **** 
1078:base/os/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:base/os/FreeRTOS/Source/tasks.c **** 
1080:base/os/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:base/os/FreeRTOS/Source/tasks.c **** 	}
1082:base/os/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:base/os/FreeRTOS/Source/tasks.c **** 
1084:base/os/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:base/os/FreeRTOS/Source/tasks.c **** 	{
1086:base/os/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:base/os/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:base/os/FreeRTOS/Source/tasks.c **** 		{
1090:base/os/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:base/os/FreeRTOS/Source/tasks.c **** 		}
1092:base/os/FreeRTOS/Source/tasks.c **** 		else
1093:base/os/FreeRTOS/Source/tasks.c **** 		{
1094:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:base/os/FreeRTOS/Source/tasks.c **** 		}
1096:base/os/FreeRTOS/Source/tasks.c **** 	}
1097:base/os/FreeRTOS/Source/tasks.c **** 	else
1098:base/os/FreeRTOS/Source/tasks.c **** 	{
1099:base/os/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:base/os/FreeRTOS/Source/tasks.c **** 	}
1101:base/os/FreeRTOS/Source/tasks.c **** }
1102:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:base/os/FreeRTOS/Source/tasks.c **** 
1104:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:base/os/FreeRTOS/Source/tasks.c **** 
1106:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:base/os/FreeRTOS/Source/tasks.c **** 	{
1108:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:base/os/FreeRTOS/Source/tasks.c **** 
1110:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:base/os/FreeRTOS/Source/tasks.c **** 		{
1112:base/os/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:base/os/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 21


1116:base/os/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:base/os/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:base/os/FreeRTOS/Source/tasks.c **** 			{
1119:base/os/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:base/os/FreeRTOS/Source/tasks.c **** 			}
1121:base/os/FreeRTOS/Source/tasks.c **** 			else
1122:base/os/FreeRTOS/Source/tasks.c **** 			{
1123:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:base/os/FreeRTOS/Source/tasks.c **** 			}
1125:base/os/FreeRTOS/Source/tasks.c **** 
1126:base/os/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:base/os/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:base/os/FreeRTOS/Source/tasks.c **** 			{
1129:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:base/os/FreeRTOS/Source/tasks.c **** 			}
1131:base/os/FreeRTOS/Source/tasks.c **** 			else
1132:base/os/FreeRTOS/Source/tasks.c **** 			{
1133:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:base/os/FreeRTOS/Source/tasks.c **** 			}
1135:base/os/FreeRTOS/Source/tasks.c **** 
1136:base/os/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:base/os/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:base/os/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:base/os/FreeRTOS/Source/tasks.c **** 			not return. */
1140:base/os/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:base/os/FreeRTOS/Source/tasks.c **** 
1142:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:base/os/FreeRTOS/Source/tasks.c **** 			{
1144:base/os/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:base/os/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:base/os/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:base/os/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:base/os/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:base/os/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:base/os/FreeRTOS/Source/tasks.c **** 
1151:base/os/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:base/os/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:base/os/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:base/os/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:base/os/FreeRTOS/Source/tasks.c **** 
1156:base/os/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:base/os/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:base/os/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:base/os/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:base/os/FreeRTOS/Source/tasks.c **** 				required. */
1161:base/os/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:base/os/FreeRTOS/Source/tasks.c **** 			}
1163:base/os/FreeRTOS/Source/tasks.c **** 			else
1164:base/os/FreeRTOS/Source/tasks.c **** 			{
1165:base/os/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:base/os/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:base/os/FreeRTOS/Source/tasks.c **** 
1168:base/os/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:base/os/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:base/os/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:base/os/FreeRTOS/Source/tasks.c **** 			}
1172:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 22


1173:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:base/os/FreeRTOS/Source/tasks.c **** 		}
1175:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:base/os/FreeRTOS/Source/tasks.c **** 
1177:base/os/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:base/os/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:base/os/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:base/os/FreeRTOS/Source/tasks.c **** 		{
1181:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:base/os/FreeRTOS/Source/tasks.c **** 			{
1183:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:base/os/FreeRTOS/Source/tasks.c **** 			}
1186:base/os/FreeRTOS/Source/tasks.c **** 			else
1187:base/os/FreeRTOS/Source/tasks.c **** 			{
1188:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:base/os/FreeRTOS/Source/tasks.c **** 			}
1190:base/os/FreeRTOS/Source/tasks.c **** 		}
1191:base/os/FreeRTOS/Source/tasks.c **** 	}
1192:base/os/FreeRTOS/Source/tasks.c **** 
1193:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:base/os/FreeRTOS/Source/tasks.c **** 
1196:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:base/os/FreeRTOS/Source/tasks.c **** 
1198:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:base/os/FreeRTOS/Source/tasks.c **** 	{
1200:base/os/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:base/os/FreeRTOS/Source/tasks.c **** 
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:base/os/FreeRTOS/Source/tasks.c **** 
1207:base/os/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:base/os/FreeRTOS/Source/tasks.c **** 		{
1209:base/os/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:base/os/FreeRTOS/Source/tasks.c **** 			block. */
1211:base/os/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:base/os/FreeRTOS/Source/tasks.c **** 
1213:base/os/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:base/os/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:base/os/FreeRTOS/Source/tasks.c **** 
1216:base/os/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:base/os/FreeRTOS/Source/tasks.c **** 			{
1218:base/os/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:base/os/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:base/os/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:base/os/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:base/os/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:base/os/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:base/os/FreeRTOS/Source/tasks.c **** 				{
1225:base/os/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:base/os/FreeRTOS/Source/tasks.c **** 				}
1227:base/os/FreeRTOS/Source/tasks.c **** 				else
1228:base/os/FreeRTOS/Source/tasks.c **** 				{
1229:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cchwbchh.s 			page 23


1230:base/os/FreeRTOS/Source/tasks.c **** 				}
1231:base/os/FreeRTOS/Source/tasks.c **** 			}
1232:base/os/FreeRTOS/Source/tasks.c **** 			else
1233:base/os/FreeRTOS/Source/tasks.c **** 			{
1234:base/os/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:base/os/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:base/os/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:base/os/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:base/os/FreeRTOS/Source/tasks.c **** 				{
1239:base/os/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:base/os/FreeRTOS/Source/tasks.c **** 				}
1241:base/os/FreeRTOS/Source/tasks.c **** 				else
1242:base/os/FreeRTOS/Source/tasks.c **** 				{
1243:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:base/os/FreeRTOS/Source/tasks.c **** 				}
1245:base/os/FreeRTOS/Source/tasks.c **** 			}
1246:base/os/FreeRTOS/Source/tasks.c **** 
1247:base/os/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:base/os/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:base/os/FreeRTOS/Source/tasks.c **** 
1250:base/os/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:base/os/FreeRTOS/Source/tasks.c **** 			{
1252:base/os/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:base/os/FreeRTOS/Source/tasks.c **** 
1254:base/os/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:base/os/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:base/os/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:base/os/FreeRTOS/Source/tasks.c **** 			}
1258:base/os/FreeRTOS/Source/tasks.c **** 			else
1259:base/os/FreeRTOS/Source/tasks.c **** 			{
1260:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:base/os/FreeRTOS/Source/tasks.c **** 			}
1262:base/os/FreeRTOS/Source/tasks.c **** 		}
1263:base/os/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:base/os/FreeRTOS/Source/tasks.c **** 
1265:base/os/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:base/os/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:base/os/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:base/os/FreeRTOS/Source/tasks.c **** 		{
1269:base/os/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:base/os/FreeRTOS/Source/tasks.c **** 		}
1271:base/os/FreeRTOS/Source/tasks.c **** 		else
1272:base/os/FreeRTOS/Source/tasks.c **** 		{
1273:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:base/os/FreeRTOS/Source/tasks.c **** 		}
1275:base/os/FreeRTOS/Source/tasks.c **** 	}
1276:base/os/FreeRTOS/Source/tasks.c **** 
1277:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:base/os/FreeRTOS/Source/tasks.c **** 
1280:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:base/os/FreeRTOS/Source/tasks.c **** 
1282:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:base/os/FreeRTOS/Source/tasks.c **** 	{
1284:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:base/os/FreeRTOS/Source/tasks.c **** 
1286:base/os/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/cchwbchh.s 			page 24


1287:base/os/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:base/os/FreeRTOS/Source/tasks.c **** 		{
1289:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:base/os/FreeRTOS/Source/tasks.c **** 			{
1292:base/os/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:base/os/FreeRTOS/Source/tasks.c **** 
1294:base/os/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:base/os/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:base/os/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:base/os/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:base/os/FreeRTOS/Source/tasks.c **** 
1299:base/os/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:base/os/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:base/os/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:base/os/FreeRTOS/Source/tasks.c **** 			}
1303:base/os/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:base/os/FreeRTOS/Source/tasks.c **** 		}
1305:base/os/FreeRTOS/Source/tasks.c **** 		else
1306:base/os/FreeRTOS/Source/tasks.c **** 		{
1307:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:base/os/FreeRTOS/Source/tasks.c **** 		}
1309:base/os/FreeRTOS/Source/tasks.c **** 
1310:base/os/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:base/os/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:base/os/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:base/os/FreeRTOS/Source/tasks.c **** 		{
1314:base/os/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:base/os/FreeRTOS/Source/tasks.c **** 		}
1316:base/os/FreeRTOS/Source/tasks.c **** 		else
1317:base/os/FreeRTOS/Source/tasks.c **** 		{
1318:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:base/os/FreeRTOS/Source/tasks.c **** 		}
1320:base/os/FreeRTOS/Source/tasks.c **** 	}
1321:base/os/FreeRTOS/Source/tasks.c **** 
1322:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:base/os/FreeRTOS/Source/tasks.c **** 
1325:base/os/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:base/os/FreeRTOS/Source/tasks.c **** 
1327:base/os/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:base/os/FreeRTOS/Source/tasks.c **** 	{
1329:base/os/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:base/os/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:base/os/FreeRTOS/Source/tasks.c **** 
1333:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:base/os/FreeRTOS/Source/tasks.c **** 
1335:base/os/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:base/os/FreeRTOS/Source/tasks.c **** 		{
1337:base/os/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:base/os/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:base/os/FreeRTOS/Source/tasks.c **** 		}
1340:base/os/FreeRTOS/Source/tasks.c **** 		else
1341:base/os/FreeRTOS/Source/tasks.c **** 		{
1342:base/os/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:base/os/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cchwbchh.s 			page 25


1344:base/os/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:base/os/FreeRTOS/Source/tasks.c **** 			}
1346:base/os/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:base/os/FreeRTOS/Source/tasks.c **** 
1348:base/os/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:base/os/FreeRTOS/Source/tasks.c **** 			{
1350:base/os/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:base/os/FreeRTOS/Source/tasks.c **** 				lists. */
1352:base/os/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:base/os/FreeRTOS/Source/tasks.c **** 			}
1354:base/os/FreeRTOS/Source/tasks.c **** 
1355:base/os/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:base/os/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:base/os/FreeRTOS/Source/tasks.c **** 				{
1358:base/os/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:base/os/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:base/os/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:base/os/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:base/os/FreeRTOS/Source/tasks.c **** 					{
1363:base/os/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:base/os/FreeRTOS/Source/tasks.c **** 					}
1365:base/os/FreeRTOS/Source/tasks.c **** 					else
1366:base/os/FreeRTOS/Source/tasks.c **** 					{
1367:base/os/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:base/os/FreeRTOS/Source/tasks.c **** 					}
1369:base/os/FreeRTOS/Source/tasks.c **** 				}
1370:base/os/FreeRTOS/Source/tasks.c **** 			#endif
1371:base/os/FreeRTOS/Source/tasks.c **** 
1372:base/os/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:base/os/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:base/os/FreeRTOS/Source/tasks.c **** 				{
1375:base/os/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:base/os/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:base/os/FreeRTOS/Source/tasks.c **** 					all. */
1378:base/os/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:base/os/FreeRTOS/Source/tasks.c **** 				}
1380:base/os/FreeRTOS/Source/tasks.c **** 			#endif
1381:base/os/FreeRTOS/Source/tasks.c **** 
1382:base/os/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:base/os/FreeRTOS/Source/tasks.c **** 			{
1384:base/os/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:base/os/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:base/os/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:base/os/FreeRTOS/Source/tasks.c **** 			}
1388:base/os/FreeRTOS/Source/tasks.c **** 		}
1389:base/os/FreeRTOS/Source/tasks.c **** 
1390:base/os/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:base/os/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:base/os/FreeRTOS/Source/tasks.c **** 
1393:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:base/os/FreeRTOS/Source/tasks.c **** 
1396:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:base/os/FreeRTOS/Source/tasks.c **** 
1398:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:base/os/FreeRTOS/Source/tasks.c **** 	{
1400:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cchwbchh.s 			page 26


1401:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:base/os/FreeRTOS/Source/tasks.c **** 
1403:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:base/os/FreeRTOS/Source/tasks.c **** 		{
1405:base/os/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:base/os/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:base/os/FreeRTOS/Source/tasks.c **** 		}
1410:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:base/os/FreeRTOS/Source/tasks.c **** 
1412:base/os/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:base/os/FreeRTOS/Source/tasks.c **** 	}
1414:base/os/FreeRTOS/Source/tasks.c **** 
1415:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:base/os/FreeRTOS/Source/tasks.c **** 
1418:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:base/os/FreeRTOS/Source/tasks.c **** 
1420:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:base/os/FreeRTOS/Source/tasks.c **** 	{
1422:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:base/os/FreeRTOS/Source/tasks.c **** 
1425:base/os/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:base/os/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:base/os/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:base/os/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:base/os/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:base/os/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:base/os/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:base/os/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:base/os/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:base/os/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:base/os/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:base/os/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:base/os/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:base/os/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:base/os/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:base/os/FreeRTOS/Source/tasks.c **** 
1443:base/os/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:base/os/FreeRTOS/Source/tasks.c **** 		{
1445:base/os/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:base/os/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:base/os/FreeRTOS/Source/tasks.c **** 		}
1450:base/os/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:base/os/FreeRTOS/Source/tasks.c **** 
1452:base/os/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:base/os/FreeRTOS/Source/tasks.c **** 	}
1454:base/os/FreeRTOS/Source/tasks.c **** 
1455:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 27


1458:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:base/os/FreeRTOS/Source/tasks.c **** 
1460:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:base/os/FreeRTOS/Source/tasks.c **** 	{
1462:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:base/os/FreeRTOS/Source/tasks.c **** 
1466:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:base/os/FreeRTOS/Source/tasks.c **** 
1468:base/os/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:base/os/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:base/os/FreeRTOS/Source/tasks.c **** 		{
1471:base/os/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:base/os/FreeRTOS/Source/tasks.c **** 		}
1473:base/os/FreeRTOS/Source/tasks.c **** 		else
1474:base/os/FreeRTOS/Source/tasks.c **** 		{
1475:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:base/os/FreeRTOS/Source/tasks.c **** 		}
1477:base/os/FreeRTOS/Source/tasks.c **** 
1478:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:base/os/FreeRTOS/Source/tasks.c **** 		{
1480:base/os/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:base/os/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:base/os/FreeRTOS/Source/tasks.c **** 
1484:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:base/os/FreeRTOS/Source/tasks.c **** 
1486:base/os/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:base/os/FreeRTOS/Source/tasks.c **** 			{
1488:base/os/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:base/os/FreeRTOS/Source/tasks.c **** 			}
1490:base/os/FreeRTOS/Source/tasks.c **** 			#else
1491:base/os/FreeRTOS/Source/tasks.c **** 			{
1492:base/os/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:base/os/FreeRTOS/Source/tasks.c **** 			}
1494:base/os/FreeRTOS/Source/tasks.c **** 			#endif
1495:base/os/FreeRTOS/Source/tasks.c **** 
1496:base/os/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:base/os/FreeRTOS/Source/tasks.c **** 			{
1498:base/os/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:base/os/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:base/os/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:base/os/FreeRTOS/Source/tasks.c **** 				{
1502:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:base/os/FreeRTOS/Source/tasks.c **** 					{
1504:base/os/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:base/os/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:base/os/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:base/os/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:base/os/FreeRTOS/Source/tasks.c **** 						{
1509:base/os/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:base/os/FreeRTOS/Source/tasks.c **** 						}
1511:base/os/FreeRTOS/Source/tasks.c **** 						else
1512:base/os/FreeRTOS/Source/tasks.c **** 						{
1513:base/os/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:base/os/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cchwbchh.s 			page 28


1515:base/os/FreeRTOS/Source/tasks.c **** 					}
1516:base/os/FreeRTOS/Source/tasks.c **** 					else
1517:base/os/FreeRTOS/Source/tasks.c **** 					{
1518:base/os/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:base/os/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:base/os/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:base/os/FreeRTOS/Source/tasks.c **** 					}
1522:base/os/FreeRTOS/Source/tasks.c **** 				}
1523:base/os/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:base/os/FreeRTOS/Source/tasks.c **** 				{
1525:base/os/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:base/os/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:base/os/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:base/os/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:base/os/FreeRTOS/Source/tasks.c **** 				}
1530:base/os/FreeRTOS/Source/tasks.c **** 				else
1531:base/os/FreeRTOS/Source/tasks.c **** 				{
1532:base/os/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:base/os/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:base/os/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:base/os/FreeRTOS/Source/tasks.c **** 				}
1536:base/os/FreeRTOS/Source/tasks.c **** 
1537:base/os/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:base/os/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:base/os/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:base/os/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:base/os/FreeRTOS/Source/tasks.c **** 
1542:base/os/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:base/os/FreeRTOS/Source/tasks.c **** 				{
1544:base/os/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:base/os/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:base/os/FreeRTOS/Source/tasks.c **** 					{
1548:base/os/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:base/os/FreeRTOS/Source/tasks.c **** 					}
1550:base/os/FreeRTOS/Source/tasks.c **** 					else
1551:base/os/FreeRTOS/Source/tasks.c **** 					{
1552:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:base/os/FreeRTOS/Source/tasks.c **** 					}
1554:base/os/FreeRTOS/Source/tasks.c **** 
1555:base/os/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:base/os/FreeRTOS/Source/tasks.c **** 				}
1558:base/os/FreeRTOS/Source/tasks.c **** 				#else
1559:base/os/FreeRTOS/Source/tasks.c **** 				{
1560:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:base/os/FreeRTOS/Source/tasks.c **** 				}
1562:base/os/FreeRTOS/Source/tasks.c **** 				#endif
1563:base/os/FreeRTOS/Source/tasks.c **** 
1564:base/os/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:base/os/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:base/os/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:base/os/FreeRTOS/Source/tasks.c **** 				{
1568:base/os/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:base/os/FreeRTOS/Source/tasks.c **** 				}
1570:base/os/FreeRTOS/Source/tasks.c **** 				else
1571:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 29


1572:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:base/os/FreeRTOS/Source/tasks.c **** 				}
1574:base/os/FreeRTOS/Source/tasks.c **** 
1575:base/os/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:base/os/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:base/os/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:base/os/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:base/os/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:base/os/FreeRTOS/Source/tasks.c **** 				{
1581:base/os/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:base/os/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:base/os/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:base/os/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:base/os/FreeRTOS/Source/tasks.c **** 					{
1586:base/os/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:base/os/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:base/os/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:base/os/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:base/os/FreeRTOS/Source/tasks.c **** 					}
1591:base/os/FreeRTOS/Source/tasks.c **** 					else
1592:base/os/FreeRTOS/Source/tasks.c **** 					{
1593:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:base/os/FreeRTOS/Source/tasks.c **** 					}
1595:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:base/os/FreeRTOS/Source/tasks.c **** 				}
1597:base/os/FreeRTOS/Source/tasks.c **** 				else
1598:base/os/FreeRTOS/Source/tasks.c **** 				{
1599:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:base/os/FreeRTOS/Source/tasks.c **** 				}
1601:base/os/FreeRTOS/Source/tasks.c **** 
1602:base/os/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:base/os/FreeRTOS/Source/tasks.c **** 				{
1604:base/os/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:base/os/FreeRTOS/Source/tasks.c **** 				}
1606:base/os/FreeRTOS/Source/tasks.c **** 				else
1607:base/os/FreeRTOS/Source/tasks.c **** 				{
1608:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:base/os/FreeRTOS/Source/tasks.c **** 				}
1610:base/os/FreeRTOS/Source/tasks.c **** 
1611:base/os/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:base/os/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:base/os/FreeRTOS/Source/tasks.c **** 			}
1615:base/os/FreeRTOS/Source/tasks.c **** 		}
1616:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:base/os/FreeRTOS/Source/tasks.c **** 	}
1618:base/os/FreeRTOS/Source/tasks.c **** 
1619:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:base/os/FreeRTOS/Source/tasks.c **** 
1622:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:base/os/FreeRTOS/Source/tasks.c **** 
1624:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:base/os/FreeRTOS/Source/tasks.c **** 	{
1626:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:base/os/FreeRTOS/Source/tasks.c **** 
1628:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cchwbchh.s 			page 30


1629:base/os/FreeRTOS/Source/tasks.c **** 		{
1630:base/os/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:base/os/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:base/os/FreeRTOS/Source/tasks.c **** 
1634:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:base/os/FreeRTOS/Source/tasks.c **** 
1636:base/os/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:base/os/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:base/os/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:base/os/FreeRTOS/Source/tasks.c **** 			{
1640:base/os/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:base/os/FreeRTOS/Source/tasks.c **** 			}
1642:base/os/FreeRTOS/Source/tasks.c **** 			else
1643:base/os/FreeRTOS/Source/tasks.c **** 			{
1644:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:base/os/FreeRTOS/Source/tasks.c **** 			}
1646:base/os/FreeRTOS/Source/tasks.c **** 
1647:base/os/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:base/os/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:base/os/FreeRTOS/Source/tasks.c **** 			{
1650:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:base/os/FreeRTOS/Source/tasks.c **** 			}
1652:base/os/FreeRTOS/Source/tasks.c **** 			else
1653:base/os/FreeRTOS/Source/tasks.c **** 			{
1654:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:base/os/FreeRTOS/Source/tasks.c **** 			}
1656:base/os/FreeRTOS/Source/tasks.c **** 
1657:base/os/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:base/os/FreeRTOS/Source/tasks.c **** 
1659:base/os/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:base/os/FreeRTOS/Source/tasks.c **** 			{
1661:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:base/os/FreeRTOS/Source/tasks.c **** 				{
1663:base/os/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:base/os/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:base/os/FreeRTOS/Source/tasks.c **** 				}
1667:base/os/FreeRTOS/Source/tasks.c **** 			}
1668:base/os/FreeRTOS/Source/tasks.c **** 			#endif
1669:base/os/FreeRTOS/Source/tasks.c **** 		}
1670:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:base/os/FreeRTOS/Source/tasks.c **** 
1672:base/os/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:base/os/FreeRTOS/Source/tasks.c **** 		{
1674:base/os/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:base/os/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:base/os/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:base/os/FreeRTOS/Source/tasks.c **** 			{
1678:base/os/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:base/os/FreeRTOS/Source/tasks.c **** 			}
1680:base/os/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:base/os/FreeRTOS/Source/tasks.c **** 		}
1682:base/os/FreeRTOS/Source/tasks.c **** 		else
1683:base/os/FreeRTOS/Source/tasks.c **** 		{
1684:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 31


1686:base/os/FreeRTOS/Source/tasks.c **** 
1687:base/os/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:base/os/FreeRTOS/Source/tasks.c **** 		{
1689:base/os/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:base/os/FreeRTOS/Source/tasks.c **** 			{
1691:base/os/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:base/os/FreeRTOS/Source/tasks.c **** 			}
1695:base/os/FreeRTOS/Source/tasks.c **** 			else
1696:base/os/FreeRTOS/Source/tasks.c **** 			{
1697:base/os/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:base/os/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:base/os/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:base/os/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:base/os/FreeRTOS/Source/tasks.c **** 				{
1702:base/os/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:base/os/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:base/os/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:base/os/FreeRTOS/Source/tasks.c **** 					is. */
1706:base/os/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:base/os/FreeRTOS/Source/tasks.c **** 				}
1708:base/os/FreeRTOS/Source/tasks.c **** 				else
1709:base/os/FreeRTOS/Source/tasks.c **** 				{
1710:base/os/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:base/os/FreeRTOS/Source/tasks.c **** 				}
1712:base/os/FreeRTOS/Source/tasks.c **** 			}
1713:base/os/FreeRTOS/Source/tasks.c **** 		}
1714:base/os/FreeRTOS/Source/tasks.c **** 		else
1715:base/os/FreeRTOS/Source/tasks.c **** 		{
1716:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:base/os/FreeRTOS/Source/tasks.c **** 		}
1718:base/os/FreeRTOS/Source/tasks.c **** 	}
1719:base/os/FreeRTOS/Source/tasks.c **** 
1720:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:base/os/FreeRTOS/Source/tasks.c **** 
1723:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:base/os/FreeRTOS/Source/tasks.c **** 
1725:base/os/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:base/os/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 2 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1727:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1727 2 view .LVU1
1728:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  33              		.loc 1 1728 2 view .LVU2
1729:base/os/FreeRTOS/Source/tasks.c **** 
1730:base/os/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:base/os/FreeRTOS/Source/tasks.c **** 		section. */
1732:base/os/FreeRTOS/Source/tasks.c **** 
1733:base/os/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  34              		.loc 1 1734 3 view .LVU3
ARM GAS  /tmp/cchwbchh.s 			page 32


  35 0000 28B1     		cbz	r0, .L8
  36              		.loc 1 1734 24 discriminator 2 view .LVU4
1735:base/os/FreeRTOS/Source/tasks.c **** 
1736:base/os/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:base/os/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  37              		.loc 1 1737 3 discriminator 2 view .LVU5
  38              		.loc 1 1737 7 is_stmt 0 discriminator 2 view .LVU6
  39 0002 4169     		ldr	r1, [r0, #20]
  40              		.loc 1 1737 82 discriminator 2 view .LVU7
  41 0004 0C4A     		ldr	r2, .L10
  42 0006 9142     		cmp	r1, r2
  43 0008 0AD0     		beq	.L9
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  44              		.loc 1 1727 13 view .LVU8
  45 000a 0020     		movs	r0, #0
  46              	.LVL1:
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1727 13 view .LVU9
  48 000c 7047     		bx	lr
  49              	.LVL2:
  50              	.L8:
1734:base/os/FreeRTOS/Source/tasks.c **** 
  51              		.loc 1 1734 3 is_stmt 1 view .LVU10
  52              	.LBB113:
  53              	.LBI113:
  54              		.file 2 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cchwbchh.s 			page 33


  32:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
ARM GAS  /tmp/cchwbchh.s 			page 34


  89:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
ARM GAS  /tmp/cchwbchh.s 			page 35


 146:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  55              		.loc 2 191 30 view .LVU11
  56              	.LBB114:
 192:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
  57              		.loc 2 193 1 view .LVU12
 194:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  58              		.loc 2 195 2 view .LVU13
  59              		.syntax unified
  60              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  61 000e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cchwbchh.s 			page 36


  62 0012 83F31188 		msr basepri, r3											
  63 0016 BFF36F8F 		isb														
  64 001a BFF34F8F 		dsb														
  65              	
  66              	@ 0 "" 2
  67              	.LVL3:
  68              		.thumb
  69              		.syntax unified
  70              	.L3:
  71              		.loc 2 195 2 is_stmt 0 view .LVU14
  72              	.LBE114:
  73              	.LBE113:
1734:base/os/FreeRTOS/Source/tasks.c **** 
  74              		.loc 1 1734 3 is_stmt 1 discriminator 1 view .LVU15
1734:base/os/FreeRTOS/Source/tasks.c **** 
  75              		.loc 1 1734 3 discriminator 1 view .LVU16
  76 001e FEE7     		b	.L3
  77              	.L9:
1738:base/os/FreeRTOS/Source/tasks.c **** 		{
1739:base/os/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:base/os/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  78              		.loc 1 1740 4 view .LVU17
  79              		.loc 1 1740 8 is_stmt 0 view .LVU18
  80 0020 836A     		ldr	r3, [r0, #40]
  81              		.loc 1 1740 6 view .LVU19
  82 0022 064A     		ldr	r2, .L10+4
  83 0024 9342     		cmp	r3, r2
  84 0026 02D0     		beq	.L6
1741:base/os/FreeRTOS/Source/tasks.c **** 			{
1742:base/os/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:base/os/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:base/os/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  85              		.loc 1 1744 5 is_stmt 1 view .LVU20
  86              		.loc 1 1744 69 is_stmt 0 view .LVU21
  87 0028 1BB1     		cbz	r3, .L7
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  88              		.loc 1 1727 13 view .LVU22
  89 002a 0020     		movs	r0, #0
  90              	.LVL4:
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  91              		.loc 1 1727 13 view .LVU23
  92 002c 7047     		bx	lr
  93              	.LVL5:
  94              	.L6:
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  95              		.loc 1 1727 13 view .LVU24
  96 002e 0020     		movs	r0, #0
  97              	.LVL6:
1727:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  98              		.loc 1 1727 13 view .LVU25
  99 0030 7047     		bx	lr
 100              	.LVL7:
 101              	.L7:
1745:base/os/FreeRTOS/Source/tasks.c **** 				{
1746:base/os/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 102              		.loc 1 1746 14 view .LVU26
 103 0032 0120     		movs	r0, #1
ARM GAS  /tmp/cchwbchh.s 			page 37


 104              	.LVL8:
1747:base/os/FreeRTOS/Source/tasks.c **** 				}
1748:base/os/FreeRTOS/Source/tasks.c **** 				else
1749:base/os/FreeRTOS/Source/tasks.c **** 				{
1750:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:base/os/FreeRTOS/Source/tasks.c **** 				}
1752:base/os/FreeRTOS/Source/tasks.c **** 			}
1753:base/os/FreeRTOS/Source/tasks.c **** 			else
1754:base/os/FreeRTOS/Source/tasks.c **** 			{
1755:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:base/os/FreeRTOS/Source/tasks.c **** 			}
1757:base/os/FreeRTOS/Source/tasks.c **** 		}
1758:base/os/FreeRTOS/Source/tasks.c **** 		else
1759:base/os/FreeRTOS/Source/tasks.c **** 		{
1760:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 105              		.loc 1 1760 28 is_stmt 1 view .LVU27
1761:base/os/FreeRTOS/Source/tasks.c **** 		}
1762:base/os/FreeRTOS/Source/tasks.c **** 
1763:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
 106              		.loc 1 1763 3 view .LVU28
1764:base/os/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 107              		.loc 1 1764 2 is_stmt 0 view .LVU29
 108 0034 7047     		bx	lr
 109              	.L11:
 110 0036 00BF     		.align	2
 111              	.L10:
 112 0038 00000000 		.word	.LANCHOR0
 113 003c 00000000 		.word	.LANCHOR1
 114              		.cfi_endproc
 115              	.LFE16:
 117              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu softvfp
 124              	prvTaskCheckFreeStackSpace:
 125              	.LVL9:
 126              	.LFB46:
1765:base/os/FreeRTOS/Source/tasks.c **** 
1766:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:base/os/FreeRTOS/Source/tasks.c **** 
1769:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:base/os/FreeRTOS/Source/tasks.c **** 
1771:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:base/os/FreeRTOS/Source/tasks.c **** 	{
1773:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:base/os/FreeRTOS/Source/tasks.c **** 
1775:base/os/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:base/os/FreeRTOS/Source/tasks.c **** 
1778:base/os/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:base/os/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:base/os/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:base/os/FreeRTOS/Source/tasks.c **** 		{
1782:base/os/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/cchwbchh.s 			page 38


1783:base/os/FreeRTOS/Source/tasks.c **** 			{
1784:base/os/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:base/os/FreeRTOS/Source/tasks.c **** 				{
1786:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:base/os/FreeRTOS/Source/tasks.c **** 
1788:base/os/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:base/os/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:base/os/FreeRTOS/Source/tasks.c **** 
1793:base/os/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:base/os/FreeRTOS/Source/tasks.c **** 					{
1796:base/os/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:base/os/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:base/os/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:base/os/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:base/os/FreeRTOS/Source/tasks.c **** 					}
1801:base/os/FreeRTOS/Source/tasks.c **** 					else
1802:base/os/FreeRTOS/Source/tasks.c **** 					{
1803:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:base/os/FreeRTOS/Source/tasks.c **** 					}
1805:base/os/FreeRTOS/Source/tasks.c **** 				}
1806:base/os/FreeRTOS/Source/tasks.c **** 				else
1807:base/os/FreeRTOS/Source/tasks.c **** 				{
1808:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:base/os/FreeRTOS/Source/tasks.c **** 				}
1810:base/os/FreeRTOS/Source/tasks.c **** 			}
1811:base/os/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:base/os/FreeRTOS/Source/tasks.c **** 		}
1813:base/os/FreeRTOS/Source/tasks.c **** 		else
1814:base/os/FreeRTOS/Source/tasks.c **** 		{
1815:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:base/os/FreeRTOS/Source/tasks.c **** 		}
1817:base/os/FreeRTOS/Source/tasks.c **** 	}
1818:base/os/FreeRTOS/Source/tasks.c **** 
1819:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:base/os/FreeRTOS/Source/tasks.c **** 
1821:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:base/os/FreeRTOS/Source/tasks.c **** 
1823:base/os/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:base/os/FreeRTOS/Source/tasks.c **** 
1825:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:base/os/FreeRTOS/Source/tasks.c **** 	{
1827:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:base/os/FreeRTOS/Source/tasks.c **** 
1831:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:base/os/FreeRTOS/Source/tasks.c **** 
1833:base/os/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:base/os/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:base/os/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:base/os/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:base/os/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:base/os/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/cchwbchh.s 			page 39


1840:base/os/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:base/os/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:base/os/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:base/os/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:base/os/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:base/os/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:base/os/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:base/os/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:base/os/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:base/os/FreeRTOS/Source/tasks.c **** 
1851:base/os/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:base/os/FreeRTOS/Source/tasks.c **** 		{
1853:base/os/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:base/os/FreeRTOS/Source/tasks.c **** 			{
1855:base/os/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:base/os/FreeRTOS/Source/tasks.c **** 
1857:base/os/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:base/os/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:base/os/FreeRTOS/Source/tasks.c **** 				{
1860:base/os/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:base/os/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:base/os/FreeRTOS/Source/tasks.c **** 					{
1864:base/os/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:base/os/FreeRTOS/Source/tasks.c **** 					}
1866:base/os/FreeRTOS/Source/tasks.c **** 					else
1867:base/os/FreeRTOS/Source/tasks.c **** 					{
1868:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:base/os/FreeRTOS/Source/tasks.c **** 					}
1870:base/os/FreeRTOS/Source/tasks.c **** 
1871:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:base/os/FreeRTOS/Source/tasks.c **** 				}
1874:base/os/FreeRTOS/Source/tasks.c **** 				else
1875:base/os/FreeRTOS/Source/tasks.c **** 				{
1876:base/os/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:base/os/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:base/os/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:base/os/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:base/os/FreeRTOS/Source/tasks.c **** 				}
1881:base/os/FreeRTOS/Source/tasks.c **** 			}
1882:base/os/FreeRTOS/Source/tasks.c **** 			else
1883:base/os/FreeRTOS/Source/tasks.c **** 			{
1884:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:base/os/FreeRTOS/Source/tasks.c **** 			}
1886:base/os/FreeRTOS/Source/tasks.c **** 		}
1887:base/os/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:base/os/FreeRTOS/Source/tasks.c **** 
1889:base/os/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:base/os/FreeRTOS/Source/tasks.c **** 	}
1891:base/os/FreeRTOS/Source/tasks.c **** 
1892:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:base/os/FreeRTOS/Source/tasks.c **** 
1895:base/os/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:base/os/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cchwbchh.s 			page 40


1897:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:base/os/FreeRTOS/Source/tasks.c **** 
1899:base/os/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:base/os/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:base/os/FreeRTOS/Source/tasks.c **** 	{
1902:base/os/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:base/os/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:base/os/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:base/os/FreeRTOS/Source/tasks.c **** 
1906:base/os/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:base/os/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:base/os/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:base/os/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:base/os/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:base/os/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:base/os/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:base/os/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:base/os/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:base/os/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:base/os/FreeRTOS/Source/tasks.c **** 
1917:base/os/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:base/os/FreeRTOS/Source/tasks.c **** 		{
1919:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:base/os/FreeRTOS/Source/tasks.c **** 		}
1921:base/os/FreeRTOS/Source/tasks.c **** 		else
1922:base/os/FreeRTOS/Source/tasks.c **** 		{
1923:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:base/os/FreeRTOS/Source/tasks.c **** 		}
1925:base/os/FreeRTOS/Source/tasks.c **** 	}
1926:base/os/FreeRTOS/Source/tasks.c **** 	#else
1927:base/os/FreeRTOS/Source/tasks.c **** 	{
1928:base/os/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:base/os/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:base/os/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:base/os/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:base/os/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:base/os/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:base/os/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:base/os/FreeRTOS/Source/tasks.c **** 	}
1936:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:base/os/FreeRTOS/Source/tasks.c **** 
1938:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:base/os/FreeRTOS/Source/tasks.c **** 	{
1940:base/os/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:base/os/FreeRTOS/Source/tasks.c **** 		{
1942:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:base/os/FreeRTOS/Source/tasks.c **** 		}
1944:base/os/FreeRTOS/Source/tasks.c **** 		else
1945:base/os/FreeRTOS/Source/tasks.c **** 		{
1946:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:base/os/FreeRTOS/Source/tasks.c **** 		}
1948:base/os/FreeRTOS/Source/tasks.c **** 	}
1949:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:base/os/FreeRTOS/Source/tasks.c **** 
1951:base/os/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:base/os/FreeRTOS/Source/tasks.c **** 	{
1953:base/os/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
ARM GAS  /tmp/cchwbchh.s 			page 41


1954:base/os/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:base/os/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:base/os/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:base/os/FreeRTOS/Source/tasks.c **** 		{
1958:base/os/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:base/os/FreeRTOS/Source/tasks.c **** 		}
1960:base/os/FreeRTOS/Source/tasks.c **** 		#endif
1961:base/os/FreeRTOS/Source/tasks.c **** 
1962:base/os/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:base/os/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:base/os/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:base/os/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:base/os/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:base/os/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:base/os/FreeRTOS/Source/tasks.c **** 
1969:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:base/os/FreeRTOS/Source/tasks.c **** 		{
1971:base/os/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:base/os/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:base/os/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:base/os/FreeRTOS/Source/tasks.c **** 		}
1975:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:base/os/FreeRTOS/Source/tasks.c **** 
1977:base/os/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:base/os/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:base/os/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:base/os/FreeRTOS/Source/tasks.c **** 
1981:base/os/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:base/os/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:base/os/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:base/os/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:base/os/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:base/os/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:base/os/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:base/os/FreeRTOS/Source/tasks.c **** 
1989:base/os/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:base/os/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:base/os/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:base/os/FreeRTOS/Source/tasks.c **** 		{
1993:base/os/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:base/os/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:base/os/FreeRTOS/Source/tasks.c **** 		}
1996:base/os/FreeRTOS/Source/tasks.c **** 		else
1997:base/os/FreeRTOS/Source/tasks.c **** 		{
1998:base/os/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:base/os/FreeRTOS/Source/tasks.c **** 		}
2000:base/os/FreeRTOS/Source/tasks.c **** 	}
2001:base/os/FreeRTOS/Source/tasks.c **** 	else
2002:base/os/FreeRTOS/Source/tasks.c **** 	{
2003:base/os/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:base/os/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:base/os/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:base/os/FreeRTOS/Source/tasks.c **** 	}
2008:base/os/FreeRTOS/Source/tasks.c **** 
2009:base/os/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:base/os/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
ARM GAS  /tmp/cchwbchh.s 			page 42


2011:base/os/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:base/os/FreeRTOS/Source/tasks.c **** }
2013:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:base/os/FreeRTOS/Source/tasks.c **** 
2015:base/os/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:base/os/FreeRTOS/Source/tasks.c **** {
2017:base/os/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:base/os/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:base/os/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:base/os/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:base/os/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:base/os/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:base/os/FreeRTOS/Source/tasks.c **** }
2024:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:base/os/FreeRTOS/Source/tasks.c **** 
2026:base/os/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:base/os/FreeRTOS/Source/tasks.c **** {
2028:base/os/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:base/os/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:base/os/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:base/os/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:base/os/FreeRTOS/Source/tasks.c **** }
2034:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:base/os/FreeRTOS/Source/tasks.c **** 
2036:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:base/os/FreeRTOS/Source/tasks.c **** 
2038:base/os/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:base/os/FreeRTOS/Source/tasks.c **** 	{
2040:base/os/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:base/os/FreeRTOS/Source/tasks.c **** 
2043:base/os/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:base/os/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:base/os/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:base/os/FreeRTOS/Source/tasks.c **** 		running. */
2047:base/os/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:base/os/FreeRTOS/Source/tasks.c **** 		{
2049:base/os/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:base/os/FreeRTOS/Source/tasks.c **** 			{
2051:base/os/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:base/os/FreeRTOS/Source/tasks.c **** 			}
2053:base/os/FreeRTOS/Source/tasks.c **** 		}
2054:base/os/FreeRTOS/Source/tasks.c **** 		#else
2055:base/os/FreeRTOS/Source/tasks.c **** 		{
2056:base/os/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:base/os/FreeRTOS/Source/tasks.c **** 
2058:base/os/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:base/os/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:base/os/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:base/os/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:base/os/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:base/os/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:base/os/FreeRTOS/Source/tasks.c **** 			{
2065:base/os/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:base/os/FreeRTOS/Source/tasks.c **** 			}
2067:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 43


2068:base/os/FreeRTOS/Source/tasks.c **** 		#endif
2069:base/os/FreeRTOS/Source/tasks.c **** 
2070:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:base/os/FreeRTOS/Source/tasks.c **** 		{
2072:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:base/os/FreeRTOS/Source/tasks.c **** 		}
2074:base/os/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:base/os/FreeRTOS/Source/tasks.c **** 		{
2076:base/os/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:base/os/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:base/os/FreeRTOS/Source/tasks.c **** 			processed. */
2079:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:base/os/FreeRTOS/Source/tasks.c **** 		}
2081:base/os/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:base/os/FreeRTOS/Source/tasks.c **** 		{
2083:base/os/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:base/os/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:base/os/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:base/os/FreeRTOS/Source/tasks.c **** 		}
2088:base/os/FreeRTOS/Source/tasks.c **** 		else
2089:base/os/FreeRTOS/Source/tasks.c **** 		{
2090:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:base/os/FreeRTOS/Source/tasks.c **** 		}
2092:base/os/FreeRTOS/Source/tasks.c **** 
2093:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:base/os/FreeRTOS/Source/tasks.c **** 	}
2095:base/os/FreeRTOS/Source/tasks.c **** 
2096:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:base/os/FreeRTOS/Source/tasks.c **** 
2099:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:base/os/FreeRTOS/Source/tasks.c **** {
2101:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:base/os/FreeRTOS/Source/tasks.c **** 
2104:base/os/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:base/os/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:base/os/FreeRTOS/Source/tasks.c **** 
2108:base/os/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:base/os/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:base/os/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:base/os/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:base/os/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:base/os/FreeRTOS/Source/tasks.c **** 	{
2115:base/os/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:base/os/FreeRTOS/Source/tasks.c **** 
2117:base/os/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:base/os/FreeRTOS/Source/tasks.c **** 		{
2119:base/os/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:base/os/FreeRTOS/Source/tasks.c **** 			{
2121:base/os/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:base/os/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:base/os/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 44


2125:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:base/os/FreeRTOS/Source/tasks.c **** 
2130:base/os/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:base/os/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:base/os/FreeRTOS/Source/tasks.c **** 					{
2134:base/os/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:base/os/FreeRTOS/Source/tasks.c **** 					}
2136:base/os/FreeRTOS/Source/tasks.c **** 					else
2137:base/os/FreeRTOS/Source/tasks.c **** 					{
2138:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:base/os/FreeRTOS/Source/tasks.c **** 					}
2140:base/os/FreeRTOS/Source/tasks.c **** 				}
2141:base/os/FreeRTOS/Source/tasks.c **** 
2142:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:base/os/FreeRTOS/Source/tasks.c **** 				{
2144:base/os/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:base/os/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:base/os/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:base/os/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:base/os/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:base/os/FreeRTOS/Source/tasks.c **** 					state. */
2150:base/os/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:base/os/FreeRTOS/Source/tasks.c **** 				}
2152:base/os/FreeRTOS/Source/tasks.c **** 
2153:base/os/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:base/os/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:base/os/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:base/os/FreeRTOS/Source/tasks.c **** 				time. */
2157:base/os/FreeRTOS/Source/tasks.c **** 				{
2158:base/os/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:base/os/FreeRTOS/Source/tasks.c **** 
2160:base/os/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:base/os/FreeRTOS/Source/tasks.c **** 					{
2162:base/os/FreeRTOS/Source/tasks.c **** 						do
2163:base/os/FreeRTOS/Source/tasks.c **** 						{
2164:base/os/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:base/os/FreeRTOS/Source/tasks.c **** 							{
2166:base/os/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:base/os/FreeRTOS/Source/tasks.c **** 							}
2168:base/os/FreeRTOS/Source/tasks.c **** 							else
2169:base/os/FreeRTOS/Source/tasks.c **** 							{
2170:base/os/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:base/os/FreeRTOS/Source/tasks.c **** 							}
2172:base/os/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:base/os/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:base/os/FreeRTOS/Source/tasks.c **** 
2175:base/os/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:base/os/FreeRTOS/Source/tasks.c **** 					}
2177:base/os/FreeRTOS/Source/tasks.c **** 					else
2178:base/os/FreeRTOS/Source/tasks.c **** 					{
2179:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:base/os/FreeRTOS/Source/tasks.c **** 					}
2181:base/os/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cchwbchh.s 			page 45


2182:base/os/FreeRTOS/Source/tasks.c **** 
2183:base/os/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:base/os/FreeRTOS/Source/tasks.c **** 				{
2185:base/os/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:base/os/FreeRTOS/Source/tasks.c **** 					{
2187:base/os/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:base/os/FreeRTOS/Source/tasks.c **** 					}
2189:base/os/FreeRTOS/Source/tasks.c **** 					#endif
2190:base/os/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:base/os/FreeRTOS/Source/tasks.c **** 				}
2192:base/os/FreeRTOS/Source/tasks.c **** 				else
2193:base/os/FreeRTOS/Source/tasks.c **** 				{
2194:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:base/os/FreeRTOS/Source/tasks.c **** 				}
2196:base/os/FreeRTOS/Source/tasks.c **** 			}
2197:base/os/FreeRTOS/Source/tasks.c **** 		}
2198:base/os/FreeRTOS/Source/tasks.c **** 		else
2199:base/os/FreeRTOS/Source/tasks.c **** 		{
2200:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:base/os/FreeRTOS/Source/tasks.c **** 		}
2202:base/os/FreeRTOS/Source/tasks.c **** 	}
2203:base/os/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:base/os/FreeRTOS/Source/tasks.c **** 
2205:base/os/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:base/os/FreeRTOS/Source/tasks.c **** }
2207:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:base/os/FreeRTOS/Source/tasks.c **** 
2209:base/os/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:base/os/FreeRTOS/Source/tasks.c **** {
2211:base/os/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:base/os/FreeRTOS/Source/tasks.c **** 
2213:base/os/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:base/os/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:base/os/FreeRTOS/Source/tasks.c **** 	{
2216:base/os/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:base/os/FreeRTOS/Source/tasks.c **** 	}
2218:base/os/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:base/os/FreeRTOS/Source/tasks.c **** 
2220:base/os/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:base/os/FreeRTOS/Source/tasks.c **** }
2222:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:base/os/FreeRTOS/Source/tasks.c **** 
2224:base/os/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:base/os/FreeRTOS/Source/tasks.c **** {
2226:base/os/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:base/os/FreeRTOS/Source/tasks.c **** 
2229:base/os/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:base/os/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:base/os/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:base/os/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:base/os/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:base/os/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:base/os/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:base/os/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:base/os/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:base/os/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
ARM GAS  /tmp/cchwbchh.s 			page 46


2239:base/os/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:base/os/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:base/os/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:base/os/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:base/os/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:base/os/FreeRTOS/Source/tasks.c **** 
2245:base/os/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:base/os/FreeRTOS/Source/tasks.c **** 	{
2247:base/os/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:base/os/FreeRTOS/Source/tasks.c **** 	}
2249:base/os/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:base/os/FreeRTOS/Source/tasks.c **** 
2251:base/os/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:base/os/FreeRTOS/Source/tasks.c **** }
2253:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:base/os/FreeRTOS/Source/tasks.c **** 
2255:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:base/os/FreeRTOS/Source/tasks.c **** {
2257:base/os/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:base/os/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:base/os/FreeRTOS/Source/tasks.c **** }
2261:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:base/os/FreeRTOS/Source/tasks.c **** 
2263:base/os/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:base/os/FreeRTOS/Source/tasks.c **** {
2265:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:base/os/FreeRTOS/Source/tasks.c **** 
2267:base/os/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:base/os/FreeRTOS/Source/tasks.c **** 	queried. */
2269:base/os/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:base/os/FreeRTOS/Source/tasks.c **** }
2273:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:base/os/FreeRTOS/Source/tasks.c **** 
2275:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:base/os/FreeRTOS/Source/tasks.c **** 
2277:base/os/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:base/os/FreeRTOS/Source/tasks.c **** 	{
2279:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:base/os/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:base/os/FreeRTOS/Source/tasks.c **** 
2283:base/os/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:base/os/FreeRTOS/Source/tasks.c **** 
2285:base/os/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:base/os/FreeRTOS/Source/tasks.c **** 		{
2287:base/os/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:base/os/FreeRTOS/Source/tasks.c **** 
2289:base/os/FreeRTOS/Source/tasks.c **** 			do
2290:base/os/FreeRTOS/Source/tasks.c **** 			{
2291:base/os/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:base/os/FreeRTOS/Source/tasks.c **** 
2293:base/os/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:base/os/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:base/os/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  /tmp/cchwbchh.s 			page 47


2296:base/os/FreeRTOS/Source/tasks.c **** 				{
2297:base/os/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:base/os/FreeRTOS/Source/tasks.c **** 
2299:base/os/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:base/os/FreeRTOS/Source/tasks.c **** 					{
2301:base/os/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:base/os/FreeRTOS/Source/tasks.c **** 						break;
2303:base/os/FreeRTOS/Source/tasks.c **** 					}
2304:base/os/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:base/os/FreeRTOS/Source/tasks.c **** 					{
2306:base/os/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:base/os/FreeRTOS/Source/tasks.c **** 						found. */
2308:base/os/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:base/os/FreeRTOS/Source/tasks.c **** 						break;
2310:base/os/FreeRTOS/Source/tasks.c **** 					}
2311:base/os/FreeRTOS/Source/tasks.c **** 					else
2312:base/os/FreeRTOS/Source/tasks.c **** 					{
2313:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:base/os/FreeRTOS/Source/tasks.c **** 					}
2315:base/os/FreeRTOS/Source/tasks.c **** 				}
2316:base/os/FreeRTOS/Source/tasks.c **** 
2317:base/os/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:base/os/FreeRTOS/Source/tasks.c **** 				{
2319:base/os/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:base/os/FreeRTOS/Source/tasks.c **** 					break;
2321:base/os/FreeRTOS/Source/tasks.c **** 				}
2322:base/os/FreeRTOS/Source/tasks.c **** 
2323:base/os/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:base/os/FreeRTOS/Source/tasks.c **** 		}
2325:base/os/FreeRTOS/Source/tasks.c **** 		else
2326:base/os/FreeRTOS/Source/tasks.c **** 		{
2327:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:base/os/FreeRTOS/Source/tasks.c **** 		}
2329:base/os/FreeRTOS/Source/tasks.c **** 
2330:base/os/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:base/os/FreeRTOS/Source/tasks.c **** 	}
2332:base/os/FreeRTOS/Source/tasks.c **** 
2333:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:base/os/FreeRTOS/Source/tasks.c **** 
2336:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:base/os/FreeRTOS/Source/tasks.c **** 
2338:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:base/os/FreeRTOS/Source/tasks.c **** 	{
2340:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:base/os/FreeRTOS/Source/tasks.c **** 
2343:base/os/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:base/os/FreeRTOS/Source/tasks.c **** 
2346:base/os/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:base/os/FreeRTOS/Source/tasks.c **** 		{
2348:base/os/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:base/os/FreeRTOS/Source/tasks.c **** 			do
2350:base/os/FreeRTOS/Source/tasks.c **** 			{
2351:base/os/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:base/os/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
ARM GAS  /tmp/cchwbchh.s 			page 48


2353:base/os/FreeRTOS/Source/tasks.c **** 
2354:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:base/os/FreeRTOS/Source/tasks.c **** 				{
2356:base/os/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:base/os/FreeRTOS/Source/tasks.c **** 					break;
2358:base/os/FreeRTOS/Source/tasks.c **** 				}
2359:base/os/FreeRTOS/Source/tasks.c **** 
2360:base/os/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:base/os/FreeRTOS/Source/tasks.c **** 
2362:base/os/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:base/os/FreeRTOS/Source/tasks.c **** 			{
2365:base/os/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:base/os/FreeRTOS/Source/tasks.c **** 			}
2367:base/os/FreeRTOS/Source/tasks.c **** 
2368:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:base/os/FreeRTOS/Source/tasks.c **** 			{
2370:base/os/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:base/os/FreeRTOS/Source/tasks.c **** 			}
2372:base/os/FreeRTOS/Source/tasks.c **** 
2373:base/os/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:base/os/FreeRTOS/Source/tasks.c **** 			{
2375:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:base/os/FreeRTOS/Source/tasks.c **** 				{
2377:base/os/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:base/os/FreeRTOS/Source/tasks.c **** 				}
2380:base/os/FreeRTOS/Source/tasks.c **** 			}
2381:base/os/FreeRTOS/Source/tasks.c **** 			#endif
2382:base/os/FreeRTOS/Source/tasks.c **** 
2383:base/os/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:base/os/FreeRTOS/Source/tasks.c **** 			{
2385:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:base/os/FreeRTOS/Source/tasks.c **** 				{
2387:base/os/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:base/os/FreeRTOS/Source/tasks.c **** 				}
2390:base/os/FreeRTOS/Source/tasks.c **** 			}
2391:base/os/FreeRTOS/Source/tasks.c **** 			#endif
2392:base/os/FreeRTOS/Source/tasks.c **** 		}
2393:base/os/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:base/os/FreeRTOS/Source/tasks.c **** 
2395:base/os/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:base/os/FreeRTOS/Source/tasks.c **** 	}
2397:base/os/FreeRTOS/Source/tasks.c **** 
2398:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:base/os/FreeRTOS/Source/tasks.c **** 
2401:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:base/os/FreeRTOS/Source/tasks.c **** 
2403:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:base/os/FreeRTOS/Source/tasks.c **** 	{
2405:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:base/os/FreeRTOS/Source/tasks.c **** 
2407:base/os/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:base/os/FreeRTOS/Source/tasks.c **** 		{
2409:base/os/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
ARM GAS  /tmp/cchwbchh.s 			page 49


2410:base/os/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:base/os/FreeRTOS/Source/tasks.c **** 			{
2412:base/os/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:base/os/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:base/os/FreeRTOS/Source/tasks.c **** 				do
2415:base/os/FreeRTOS/Source/tasks.c **** 				{
2416:base/os/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:base/os/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:base/os/FreeRTOS/Source/tasks.c **** 
2419:base/os/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:base/os/FreeRTOS/Source/tasks.c **** 
2421:base/os/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:base/os/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:base/os/FreeRTOS/Source/tasks.c **** 
2426:base/os/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:base/os/FreeRTOS/Source/tasks.c **** 				{
2428:base/os/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:base/os/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:base/os/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:base/os/FreeRTOS/Source/tasks.c **** 				}
2432:base/os/FreeRTOS/Source/tasks.c **** 				#endif
2433:base/os/FreeRTOS/Source/tasks.c **** 
2434:base/os/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:base/os/FreeRTOS/Source/tasks.c **** 				{
2436:base/os/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:base/os/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:base/os/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:base/os/FreeRTOS/Source/tasks.c **** 				}
2440:base/os/FreeRTOS/Source/tasks.c **** 				#endif
2441:base/os/FreeRTOS/Source/tasks.c **** 
2442:base/os/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:base/os/FreeRTOS/Source/tasks.c **** 				{
2444:base/os/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:base/os/FreeRTOS/Source/tasks.c **** 					{
2446:base/os/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:base/os/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:base/os/FreeRTOS/Source/tasks.c **** 						#else
2449:base/os/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:base/os/FreeRTOS/Source/tasks.c **** 						#endif
2451:base/os/FreeRTOS/Source/tasks.c **** 					}
2452:base/os/FreeRTOS/Source/tasks.c **** 				}
2453:base/os/FreeRTOS/Source/tasks.c **** 				#else
2454:base/os/FreeRTOS/Source/tasks.c **** 				{
2455:base/os/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:base/os/FreeRTOS/Source/tasks.c **** 					{
2457:base/os/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:base/os/FreeRTOS/Source/tasks.c **** 					}
2459:base/os/FreeRTOS/Source/tasks.c **** 				}
2460:base/os/FreeRTOS/Source/tasks.c **** 				#endif
2461:base/os/FreeRTOS/Source/tasks.c **** 			}
2462:base/os/FreeRTOS/Source/tasks.c **** 			else
2463:base/os/FreeRTOS/Source/tasks.c **** 			{
2464:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:base/os/FreeRTOS/Source/tasks.c **** 			}
2466:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 50


2467:base/os/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:base/os/FreeRTOS/Source/tasks.c **** 
2469:base/os/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:base/os/FreeRTOS/Source/tasks.c **** 	}
2471:base/os/FreeRTOS/Source/tasks.c **** 
2472:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:base/os/FreeRTOS/Source/tasks.c **** 
2475:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:base/os/FreeRTOS/Source/tasks.c **** 
2477:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:base/os/FreeRTOS/Source/tasks.c **** 	{
2479:base/os/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:base/os/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:base/os/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:base/os/FreeRTOS/Source/tasks.c **** 	}
2484:base/os/FreeRTOS/Source/tasks.c **** 
2485:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:base/os/FreeRTOS/Source/tasks.c **** 
2488:base/os/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:base/os/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:base/os/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:base/os/FreeRTOS/Source/tasks.c **** 1. */
2492:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:base/os/FreeRTOS/Source/tasks.c **** 
2494:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:base/os/FreeRTOS/Source/tasks.c **** 	{
2496:base/os/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:base/os/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:base/os/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:base/os/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:base/os/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:base/os/FreeRTOS/Source/tasks.c **** 	}
2503:base/os/FreeRTOS/Source/tasks.c **** 
2504:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:base/os/FreeRTOS/Source/tasks.c **** 
2507:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:base/os/FreeRTOS/Source/tasks.c **** 
2509:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:base/os/FreeRTOS/Source/tasks.c **** 	{
2511:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:base/os/FreeRTOS/Source/tasks.c **** 
2514:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:base/os/FreeRTOS/Source/tasks.c **** 
2516:base/os/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:base/os/FreeRTOS/Source/tasks.c **** 		{
2518:base/os/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:base/os/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:base/os/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:base/os/FreeRTOS/Source/tasks.c **** 			{
2522:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 51


2524:base/os/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:base/os/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:base/os/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:base/os/FreeRTOS/Source/tasks.c **** 
2529:base/os/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:base/os/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:base/os/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:base/os/FreeRTOS/Source/tasks.c **** 				is used. */
2533:base/os/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:base/os/FreeRTOS/Source/tasks.c **** 				{
2535:base/os/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:base/os/FreeRTOS/Source/tasks.c **** 					{
2537:base/os/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:base/os/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:base/os/FreeRTOS/Source/tasks.c **** 					}
2540:base/os/FreeRTOS/Source/tasks.c **** 					else
2541:base/os/FreeRTOS/Source/tasks.c **** 					{
2542:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:base/os/FreeRTOS/Source/tasks.c **** 					}
2544:base/os/FreeRTOS/Source/tasks.c **** 				}
2545:base/os/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:base/os/FreeRTOS/Source/tasks.c **** 
2547:base/os/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:base/os/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:base/os/FreeRTOS/Source/tasks.c **** 
2550:base/os/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:base/os/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:base/os/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:base/os/FreeRTOS/Source/tasks.c **** 				{
2554:base/os/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:base/os/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:base/os/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:base/os/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:base/os/FreeRTOS/Source/tasks.c **** 					{
2559:base/os/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:base/os/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:base/os/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:base/os/FreeRTOS/Source/tasks.c **** 					}
2563:base/os/FreeRTOS/Source/tasks.c **** 					else
2564:base/os/FreeRTOS/Source/tasks.c **** 					{
2565:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:base/os/FreeRTOS/Source/tasks.c **** 					}
2567:base/os/FreeRTOS/Source/tasks.c **** 				}
2568:base/os/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:base/os/FreeRTOS/Source/tasks.c **** 			}
2570:base/os/FreeRTOS/Source/tasks.c **** 			else
2571:base/os/FreeRTOS/Source/tasks.c **** 			{
2572:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:base/os/FreeRTOS/Source/tasks.c **** 			}
2574:base/os/FreeRTOS/Source/tasks.c **** 		}
2575:base/os/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:base/os/FreeRTOS/Source/tasks.c **** 
2577:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:base/os/FreeRTOS/Source/tasks.c **** 	}
2579:base/os/FreeRTOS/Source/tasks.c **** 
2580:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
ARM GAS  /tmp/cchwbchh.s 			page 52


2581:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:base/os/FreeRTOS/Source/tasks.c **** 
2583:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:base/os/FreeRTOS/Source/tasks.c **** {
2585:base/os/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:base/os/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:base/os/FreeRTOS/Source/tasks.c **** 
2589:base/os/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:base/os/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:base/os/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:base/os/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:base/os/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:base/os/FreeRTOS/Source/tasks.c **** 	{
2595:base/os/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:base/os/FreeRTOS/Source/tasks.c **** 		block. */
2597:base/os/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:base/os/FreeRTOS/Source/tasks.c **** 
2599:base/os/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:base/os/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:base/os/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:base/os/FreeRTOS/Source/tasks.c **** 
2603:base/os/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:base/os/FreeRTOS/Source/tasks.c **** 		{
2605:base/os/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:base/os/FreeRTOS/Source/tasks.c **** 		}
2607:base/os/FreeRTOS/Source/tasks.c **** 		else
2608:base/os/FreeRTOS/Source/tasks.c **** 		{
2609:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:base/os/FreeRTOS/Source/tasks.c **** 		}
2611:base/os/FreeRTOS/Source/tasks.c **** 
2612:base/os/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:base/os/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:base/os/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:base/os/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:base/os/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:base/os/FreeRTOS/Source/tasks.c **** 		{
2618:base/os/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:base/os/FreeRTOS/Source/tasks.c **** 			{
2620:base/os/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:base/os/FreeRTOS/Source/tasks.c **** 				{
2622:base/os/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:base/os/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:base/os/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:base/os/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:base/os/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:base/os/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:base/os/FreeRTOS/Source/tasks.c **** 					break;
2629:base/os/FreeRTOS/Source/tasks.c **** 				}
2630:base/os/FreeRTOS/Source/tasks.c **** 				else
2631:base/os/FreeRTOS/Source/tasks.c **** 				{
2632:base/os/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:base/os/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:base/os/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:base/os/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:base/os/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cchwbchh.s 			page 53


2638:base/os/FreeRTOS/Source/tasks.c **** 
2639:base/os/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:base/os/FreeRTOS/Source/tasks.c **** 					{
2641:base/os/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:base/os/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:base/os/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:base/os/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:base/os/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:base/os/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:base/os/FreeRTOS/Source/tasks.c **** 						break;
2648:base/os/FreeRTOS/Source/tasks.c **** 					}
2649:base/os/FreeRTOS/Source/tasks.c **** 					else
2650:base/os/FreeRTOS/Source/tasks.c **** 					{
2651:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:base/os/FreeRTOS/Source/tasks.c **** 					}
2653:base/os/FreeRTOS/Source/tasks.c **** 
2654:base/os/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:base/os/FreeRTOS/Source/tasks.c **** 
2657:base/os/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:base/os/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:base/os/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:base/os/FreeRTOS/Source/tasks.c **** 					{
2661:base/os/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:base/os/FreeRTOS/Source/tasks.c **** 					}
2663:base/os/FreeRTOS/Source/tasks.c **** 					else
2664:base/os/FreeRTOS/Source/tasks.c **** 					{
2665:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:base/os/FreeRTOS/Source/tasks.c **** 					}
2667:base/os/FreeRTOS/Source/tasks.c **** 
2668:base/os/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:base/os/FreeRTOS/Source/tasks.c **** 					list. */
2670:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:base/os/FreeRTOS/Source/tasks.c **** 
2672:base/os/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:base/os/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:base/os/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:base/os/FreeRTOS/Source/tasks.c **** 					{
2676:base/os/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:base/os/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:base/os/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:base/os/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:base/os/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:base/os/FreeRTOS/Source/tasks.c **** 						{
2682:base/os/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:base/os/FreeRTOS/Source/tasks.c **** 						}
2684:base/os/FreeRTOS/Source/tasks.c **** 						else
2685:base/os/FreeRTOS/Source/tasks.c **** 						{
2686:base/os/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:base/os/FreeRTOS/Source/tasks.c **** 						}
2688:base/os/FreeRTOS/Source/tasks.c **** 					}
2689:base/os/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:base/os/FreeRTOS/Source/tasks.c **** 				}
2691:base/os/FreeRTOS/Source/tasks.c **** 			}
2692:base/os/FreeRTOS/Source/tasks.c **** 		}
2693:base/os/FreeRTOS/Source/tasks.c **** 
2694:base/os/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
ARM GAS  /tmp/cchwbchh.s 			page 54


2695:base/os/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:base/os/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:base/os/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:base/os/FreeRTOS/Source/tasks.c **** 		{
2699:base/os/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:base/os/FreeRTOS/Source/tasks.c **** 			{
2701:base/os/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:base/os/FreeRTOS/Source/tasks.c **** 			}
2703:base/os/FreeRTOS/Source/tasks.c **** 			else
2704:base/os/FreeRTOS/Source/tasks.c **** 			{
2705:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:base/os/FreeRTOS/Source/tasks.c **** 			}
2707:base/os/FreeRTOS/Source/tasks.c **** 		}
2708:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:base/os/FreeRTOS/Source/tasks.c **** 
2710:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:base/os/FreeRTOS/Source/tasks.c **** 		{
2712:base/os/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:base/os/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:base/os/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:base/os/FreeRTOS/Source/tasks.c **** 			{
2716:base/os/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:base/os/FreeRTOS/Source/tasks.c **** 			}
2718:base/os/FreeRTOS/Source/tasks.c **** 			else
2719:base/os/FreeRTOS/Source/tasks.c **** 			{
2720:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:base/os/FreeRTOS/Source/tasks.c **** 			}
2722:base/os/FreeRTOS/Source/tasks.c **** 		}
2723:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:base/os/FreeRTOS/Source/tasks.c **** 	}
2725:base/os/FreeRTOS/Source/tasks.c **** 	else
2726:base/os/FreeRTOS/Source/tasks.c **** 	{
2727:base/os/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:base/os/FreeRTOS/Source/tasks.c **** 
2729:base/os/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:base/os/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:base/os/FreeRTOS/Source/tasks.c **** 		{
2733:base/os/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:base/os/FreeRTOS/Source/tasks.c **** 		}
2735:base/os/FreeRTOS/Source/tasks.c **** 		#endif
2736:base/os/FreeRTOS/Source/tasks.c **** 	}
2737:base/os/FreeRTOS/Source/tasks.c **** 
2738:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:base/os/FreeRTOS/Source/tasks.c **** 	{
2740:base/os/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:base/os/FreeRTOS/Source/tasks.c **** 		{
2742:base/os/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:base/os/FreeRTOS/Source/tasks.c **** 		}
2744:base/os/FreeRTOS/Source/tasks.c **** 		else
2745:base/os/FreeRTOS/Source/tasks.c **** 		{
2746:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:base/os/FreeRTOS/Source/tasks.c **** 		}
2748:base/os/FreeRTOS/Source/tasks.c **** 	}
2749:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:base/os/FreeRTOS/Source/tasks.c **** 
2751:base/os/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
ARM GAS  /tmp/cchwbchh.s 			page 55


2752:base/os/FreeRTOS/Source/tasks.c **** }
2753:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:base/os/FreeRTOS/Source/tasks.c **** 
2755:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:base/os/FreeRTOS/Source/tasks.c **** 
2757:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:base/os/FreeRTOS/Source/tasks.c **** 	{
2759:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:base/os/FreeRTOS/Source/tasks.c **** 
2761:base/os/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:base/os/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:base/os/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:base/os/FreeRTOS/Source/tasks.c **** 		{
2765:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:base/os/FreeRTOS/Source/tasks.c **** 		}
2767:base/os/FreeRTOS/Source/tasks.c **** 		else
2768:base/os/FreeRTOS/Source/tasks.c **** 		{
2769:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:base/os/FreeRTOS/Source/tasks.c **** 		}
2771:base/os/FreeRTOS/Source/tasks.c **** 
2772:base/os/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:base/os/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:base/os/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:base/os/FreeRTOS/Source/tasks.c **** 	}
2778:base/os/FreeRTOS/Source/tasks.c **** 
2779:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:base/os/FreeRTOS/Source/tasks.c **** 
2782:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:base/os/FreeRTOS/Source/tasks.c **** 
2784:base/os/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:base/os/FreeRTOS/Source/tasks.c **** 	{
2786:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:base/os/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:base/os/FreeRTOS/Source/tasks.c **** 
2789:base/os/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:base/os/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:base/os/FreeRTOS/Source/tasks.c **** 		{
2792:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:base/os/FreeRTOS/Source/tasks.c **** 		}
2794:base/os/FreeRTOS/Source/tasks.c **** 		else
2795:base/os/FreeRTOS/Source/tasks.c **** 		{
2796:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:base/os/FreeRTOS/Source/tasks.c **** 		}
2798:base/os/FreeRTOS/Source/tasks.c **** 
2799:base/os/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:base/os/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:base/os/FreeRTOS/Source/tasks.c **** 		{
2803:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:base/os/FreeRTOS/Source/tasks.c **** 		}
2805:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:base/os/FreeRTOS/Source/tasks.c **** 
2807:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:base/os/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cchwbchh.s 			page 56


2809:base/os/FreeRTOS/Source/tasks.c **** 
2810:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:base/os/FreeRTOS/Source/tasks.c **** 
2813:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:base/os/FreeRTOS/Source/tasks.c **** 
2815:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:base/os/FreeRTOS/Source/tasks.c **** 	{
2817:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:base/os/FreeRTOS/Source/tasks.c **** 
2820:base/os/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:base/os/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:base/os/FreeRTOS/Source/tasks.c **** 		{
2823:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:base/os/FreeRTOS/Source/tasks.c **** 		}
2825:base/os/FreeRTOS/Source/tasks.c **** 		else
2826:base/os/FreeRTOS/Source/tasks.c **** 		{
2827:base/os/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:base/os/FreeRTOS/Source/tasks.c **** 		}
2829:base/os/FreeRTOS/Source/tasks.c **** 
2830:base/os/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:base/os/FreeRTOS/Source/tasks.c **** 		{
2832:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:base/os/FreeRTOS/Source/tasks.c **** 		}
2834:base/os/FreeRTOS/Source/tasks.c **** 		else
2835:base/os/FreeRTOS/Source/tasks.c **** 		{
2836:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:base/os/FreeRTOS/Source/tasks.c **** 		}
2838:base/os/FreeRTOS/Source/tasks.c **** 
2839:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:base/os/FreeRTOS/Source/tasks.c **** 	}
2841:base/os/FreeRTOS/Source/tasks.c **** 
2842:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:base/os/FreeRTOS/Source/tasks.c **** 
2845:base/os/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:base/os/FreeRTOS/Source/tasks.c **** {
2847:base/os/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:base/os/FreeRTOS/Source/tasks.c **** 	{
2849:base/os/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:base/os/FreeRTOS/Source/tasks.c **** 		switch. */
2851:base/os/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:base/os/FreeRTOS/Source/tasks.c **** 	}
2853:base/os/FreeRTOS/Source/tasks.c **** 	else
2854:base/os/FreeRTOS/Source/tasks.c **** 	{
2855:base/os/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:base/os/FreeRTOS/Source/tasks.c **** 
2858:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:base/os/FreeRTOS/Source/tasks.c **** 		{
2860:base/os/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:base/os/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:base/os/FreeRTOS/Source/tasks.c **** 				#else
2863:base/os/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:base/os/FreeRTOS/Source/tasks.c **** 				#endif
2865:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 57


2866:base/os/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:base/os/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:base/os/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:base/os/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:base/os/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:base/os/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:base/os/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:base/os/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:base/os/FreeRTOS/Source/tasks.c **** 				{
2875:base/os/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:base/os/FreeRTOS/Source/tasks.c **** 				}
2877:base/os/FreeRTOS/Source/tasks.c **** 				else
2878:base/os/FreeRTOS/Source/tasks.c **** 				{
2879:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:base/os/FreeRTOS/Source/tasks.c **** 				}
2881:base/os/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:base/os/FreeRTOS/Source/tasks.c **** 		}
2883:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:base/os/FreeRTOS/Source/tasks.c **** 
2885:base/os/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:base/os/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:base/os/FreeRTOS/Source/tasks.c **** 
2888:base/os/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:base/os/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:base/os/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:base/os/FreeRTOS/Source/tasks.c **** 
2893:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:base/os/FreeRTOS/Source/tasks.c **** 		{
2895:base/os/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:base/os/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:base/os/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:base/os/FreeRTOS/Source/tasks.c **** 		}
2899:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:base/os/FreeRTOS/Source/tasks.c **** 	}
2901:base/os/FreeRTOS/Source/tasks.c **** }
2902:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:base/os/FreeRTOS/Source/tasks.c **** 
2904:base/os/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:base/os/FreeRTOS/Source/tasks.c **** {
2906:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:base/os/FreeRTOS/Source/tasks.c **** 
2908:base/os/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:base/os/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:base/os/FreeRTOS/Source/tasks.c **** 
2911:base/os/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:base/os/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:base/os/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:base/os/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:base/os/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:base/os/FreeRTOS/Source/tasks.c **** 
2917:base/os/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:base/os/FreeRTOS/Source/tasks.c **** }
2919:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:base/os/FreeRTOS/Source/tasks.c **** 
2921:base/os/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:base/os/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cchwbchh.s 			page 58


2923:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:base/os/FreeRTOS/Source/tasks.c **** 
2925:base/os/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:base/os/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:base/os/FreeRTOS/Source/tasks.c **** 
2929:base/os/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:base/os/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:base/os/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:base/os/FreeRTOS/Source/tasks.c **** 
2934:base/os/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:base/os/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:base/os/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:base/os/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:base/os/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:base/os/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:base/os/FreeRTOS/Source/tasks.c **** 
2941:base/os/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:base/os/FreeRTOS/Source/tasks.c **** }
2943:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:base/os/FreeRTOS/Source/tasks.c **** 
2945:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:base/os/FreeRTOS/Source/tasks.c **** 
2947:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:base/os/FreeRTOS/Source/tasks.c **** 	{
2949:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:base/os/FreeRTOS/Source/tasks.c **** 
2951:base/os/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:base/os/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:base/os/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:base/os/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:base/os/FreeRTOS/Source/tasks.c **** 
2956:base/os/FreeRTOS/Source/tasks.c **** 
2957:base/os/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:base/os/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:base/os/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:base/os/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:base/os/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:base/os/FreeRTOS/Source/tasks.c **** 
2963:base/os/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:base/os/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:base/os/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:base/os/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:base/os/FreeRTOS/Source/tasks.c **** 		{
2968:base/os/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:base/os/FreeRTOS/Source/tasks.c **** 		}
2970:base/os/FreeRTOS/Source/tasks.c **** 
2971:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:base/os/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:base/os/FreeRTOS/Source/tasks.c **** 	}
2974:base/os/FreeRTOS/Source/tasks.c **** 
2975:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:base/os/FreeRTOS/Source/tasks.c **** 
2978:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:base/os/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cchwbchh.s 			page 59


2980:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:base/os/FreeRTOS/Source/tasks.c **** 
2983:base/os/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:base/os/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:base/os/FreeRTOS/Source/tasks.c **** 
2986:base/os/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:base/os/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:base/os/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:base/os/FreeRTOS/Source/tasks.c **** 
2990:base/os/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:base/os/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:base/os/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:base/os/FreeRTOS/Source/tasks.c **** 
2994:base/os/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:base/os/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:base/os/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:base/os/FreeRTOS/Source/tasks.c **** 
3000:base/os/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:base/os/FreeRTOS/Source/tasks.c **** 	{
3002:base/os/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:base/os/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:base/os/FreeRTOS/Source/tasks.c **** 	}
3005:base/os/FreeRTOS/Source/tasks.c **** 	else
3006:base/os/FreeRTOS/Source/tasks.c **** 	{
3007:base/os/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:base/os/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:base/os/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:base/os/FreeRTOS/Source/tasks.c **** 	}
3011:base/os/FreeRTOS/Source/tasks.c **** 
3012:base/os/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:base/os/FreeRTOS/Source/tasks.c **** 	{
3014:base/os/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:base/os/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:base/os/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:base/os/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:base/os/FreeRTOS/Source/tasks.c **** 
3019:base/os/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:base/os/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:base/os/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:base/os/FreeRTOS/Source/tasks.c **** 	}
3023:base/os/FreeRTOS/Source/tasks.c **** 	else
3024:base/os/FreeRTOS/Source/tasks.c **** 	{
3025:base/os/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:base/os/FreeRTOS/Source/tasks.c **** 	}
3027:base/os/FreeRTOS/Source/tasks.c **** 
3028:base/os/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:base/os/FreeRTOS/Source/tasks.c **** 	{
3030:base/os/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:base/os/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:base/os/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:base/os/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:base/os/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:base/os/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:base/os/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
ARM GAS  /tmp/cchwbchh.s 			page 60


3037:base/os/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:base/os/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:base/os/FreeRTOS/Source/tasks.c **** 	}
3040:base/os/FreeRTOS/Source/tasks.c **** 	#endif
3041:base/os/FreeRTOS/Source/tasks.c **** 
3042:base/os/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:base/os/FreeRTOS/Source/tasks.c **** }
3044:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:base/os/FreeRTOS/Source/tasks.c **** 
3046:base/os/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:base/os/FreeRTOS/Source/tasks.c **** {
3048:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:base/os/FreeRTOS/Source/tasks.c **** 
3050:base/os/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:base/os/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:base/os/FreeRTOS/Source/tasks.c **** 
3054:base/os/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:base/os/FreeRTOS/Source/tasks.c **** 
3057:base/os/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:base/os/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:base/os/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:base/os/FreeRTOS/Source/tasks.c **** 
3063:base/os/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:base/os/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:base/os/FreeRTOS/Source/tasks.c **** 	lists. */
3066:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:base/os/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:base/os/FreeRTOS/Source/tasks.c **** 
3069:base/os/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:base/os/FreeRTOS/Source/tasks.c **** 	{
3071:base/os/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:base/os/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:base/os/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:base/os/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:base/os/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:base/os/FreeRTOS/Source/tasks.c **** 	}
3077:base/os/FreeRTOS/Source/tasks.c **** }
3078:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:base/os/FreeRTOS/Source/tasks.c **** 
3080:base/os/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:base/os/FreeRTOS/Source/tasks.c **** {
3082:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:base/os/FreeRTOS/Source/tasks.c **** 	{
3085:base/os/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:base/os/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:base/os/FreeRTOS/Source/tasks.c **** 	}
3088:base/os/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:base/os/FreeRTOS/Source/tasks.c **** }
3090:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:base/os/FreeRTOS/Source/tasks.c **** 
3092:base/os/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:base/os/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cchwbchh.s 			page 61


3094:base/os/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:base/os/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:base/os/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:base/os/FreeRTOS/Source/tasks.c **** }
3098:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:base/os/FreeRTOS/Source/tasks.c **** 
3100:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:base/os/FreeRTOS/Source/tasks.c **** {
3102:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:base/os/FreeRTOS/Source/tasks.c **** 
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:base/os/FreeRTOS/Source/tasks.c **** 
3107:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:base/os/FreeRTOS/Source/tasks.c **** 	{
3109:base/os/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:base/os/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:base/os/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:base/os/FreeRTOS/Source/tasks.c **** 
3113:base/os/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:base/os/FreeRTOS/Source/tasks.c **** 			{
3116:base/os/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:base/os/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:base/os/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:base/os/FreeRTOS/Source/tasks.c **** 			}
3121:base/os/FreeRTOS/Source/tasks.c **** 			else
3122:base/os/FreeRTOS/Source/tasks.c **** 		#endif
3123:base/os/FreeRTOS/Source/tasks.c **** 
3124:base/os/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:base/os/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:base/os/FreeRTOS/Source/tasks.c **** 			{
3127:base/os/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:base/os/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:base/os/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:base/os/FreeRTOS/Source/tasks.c **** 			}
3132:base/os/FreeRTOS/Source/tasks.c **** 			else
3133:base/os/FreeRTOS/Source/tasks.c **** 		#endif
3134:base/os/FreeRTOS/Source/tasks.c **** 
3135:base/os/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:base/os/FreeRTOS/Source/tasks.c **** 		{
3137:base/os/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:base/os/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:base/os/FreeRTOS/Source/tasks.c **** 			was called. */
3142:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:base/os/FreeRTOS/Source/tasks.c **** 		}
3144:base/os/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:base/os/FreeRTOS/Source/tasks.c **** 		{
3146:base/os/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:base/os/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:base/os/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 62


3151:base/os/FreeRTOS/Source/tasks.c **** 		else
3152:base/os/FreeRTOS/Source/tasks.c **** 		{
3153:base/os/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:base/os/FreeRTOS/Source/tasks.c **** 		}
3156:base/os/FreeRTOS/Source/tasks.c **** 	}
3157:base/os/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:base/os/FreeRTOS/Source/tasks.c **** 
3159:base/os/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:base/os/FreeRTOS/Source/tasks.c **** }
3161:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:base/os/FreeRTOS/Source/tasks.c **** 
3163:base/os/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:base/os/FreeRTOS/Source/tasks.c **** {
3165:base/os/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:base/os/FreeRTOS/Source/tasks.c **** }
3167:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:base/os/FreeRTOS/Source/tasks.c **** 
3169:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:base/os/FreeRTOS/Source/tasks.c **** 
3171:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:base/os/FreeRTOS/Source/tasks.c **** 	{
3173:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:base/os/FreeRTOS/Source/tasks.c **** 
3176:base/os/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:base/os/FreeRTOS/Source/tasks.c **** 		{
3178:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:base/os/FreeRTOS/Source/tasks.c **** 		}
3181:base/os/FreeRTOS/Source/tasks.c **** 		else
3182:base/os/FreeRTOS/Source/tasks.c **** 		{
3183:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:base/os/FreeRTOS/Source/tasks.c **** 		}
3185:base/os/FreeRTOS/Source/tasks.c **** 
3186:base/os/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:base/os/FreeRTOS/Source/tasks.c **** 	}
3188:base/os/FreeRTOS/Source/tasks.c **** 
3189:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:base/os/FreeRTOS/Source/tasks.c **** 
3192:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:base/os/FreeRTOS/Source/tasks.c **** 
3194:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:base/os/FreeRTOS/Source/tasks.c **** 	{
3196:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:base/os/FreeRTOS/Source/tasks.c **** 
3198:base/os/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:base/os/FreeRTOS/Source/tasks.c **** 		{
3200:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:base/os/FreeRTOS/Source/tasks.c **** 		}
3203:base/os/FreeRTOS/Source/tasks.c **** 	}
3204:base/os/FreeRTOS/Source/tasks.c **** 
3205:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:base/os/FreeRTOS/Source/tasks.c **** 
3207:base/os/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/cchwbchh.s 			page 63


3208:base/os/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:base/os/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:base/os/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:base/os/FreeRTOS/Source/tasks.c ****  *
3212:base/os/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:base/os/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:base/os/FreeRTOS/Source/tasks.c ****  *
3215:base/os/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:base/os/FreeRTOS/Source/tasks.c ****  *
3217:base/os/FreeRTOS/Source/tasks.c ****  */
3218:base/os/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:base/os/FreeRTOS/Source/tasks.c **** {
3220:base/os/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:base/os/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:base/os/FreeRTOS/Source/tasks.c **** 
3223:base/os/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:base/os/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:base/os/FreeRTOS/Source/tasks.c **** 
3226:base/os/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:base/os/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:base/os/FreeRTOS/Source/tasks.c **** 	any. */
3229:base/os/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:base/os/FreeRTOS/Source/tasks.c **** 
3231:base/os/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:base/os/FreeRTOS/Source/tasks.c **** 	{
3233:base/os/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:base/os/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:base/os/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:base/os/FreeRTOS/Source/tasks.c **** 
3237:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:base/os/FreeRTOS/Source/tasks.c **** 		{
3239:base/os/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:base/os/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:base/os/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:base/os/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:base/os/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:base/os/FreeRTOS/Source/tasks.c **** 		}
3245:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:base/os/FreeRTOS/Source/tasks.c **** 
3247:base/os/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:base/os/FreeRTOS/Source/tasks.c **** 		{
3249:base/os/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:base/os/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:base/os/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:base/os/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:base/os/FreeRTOS/Source/tasks.c **** 
3254:base/os/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:base/os/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:base/os/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:base/os/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:base/os/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:base/os/FreeRTOS/Source/tasks.c **** 			{
3260:base/os/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:base/os/FreeRTOS/Source/tasks.c **** 			}
3262:base/os/FreeRTOS/Source/tasks.c **** 			else
3263:base/os/FreeRTOS/Source/tasks.c **** 			{
3264:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cchwbchh.s 			page 64


3265:base/os/FreeRTOS/Source/tasks.c **** 			}
3266:base/os/FreeRTOS/Source/tasks.c **** 		}
3267:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:base/os/FreeRTOS/Source/tasks.c **** 
3269:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:base/os/FreeRTOS/Source/tasks.c **** 		{
3271:base/os/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:base/os/FreeRTOS/Source/tasks.c **** 
3273:base/os/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:base/os/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:base/os/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:base/os/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:base/os/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:base/os/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:base/os/FreeRTOS/Source/tasks.c **** 		}
3280:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:base/os/FreeRTOS/Source/tasks.c **** 
3282:base/os/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:base/os/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:base/os/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:base/os/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:base/os/FreeRTOS/Source/tasks.c **** 		{
3288:base/os/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:base/os/FreeRTOS/Source/tasks.c **** 
3290:base/os/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:base/os/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:base/os/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:base/os/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:base/os/FreeRTOS/Source/tasks.c **** 			valid. */
3295:base/os/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:base/os/FreeRTOS/Source/tasks.c **** 
3297:base/os/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:base/os/FreeRTOS/Source/tasks.c **** 			{
3299:base/os/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:base/os/FreeRTOS/Source/tasks.c **** 				{
3301:base/os/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:base/os/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:base/os/FreeRTOS/Source/tasks.c **** 					be used. */
3304:base/os/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:base/os/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:base/os/FreeRTOS/Source/tasks.c **** 
3307:base/os/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:base/os/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:base/os/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:base/os/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:base/os/FreeRTOS/Source/tasks.c **** 
3312:base/os/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:base/os/FreeRTOS/Source/tasks.c **** 					{
3314:base/os/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:base/os/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:base/os/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:base/os/FreeRTOS/Source/tasks.c **** 					}
3318:base/os/FreeRTOS/Source/tasks.c **** 					else
3319:base/os/FreeRTOS/Source/tasks.c **** 					{
3320:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:base/os/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cchwbchh.s 			page 65


3322:base/os/FreeRTOS/Source/tasks.c **** 				}
3323:base/os/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:base/os/FreeRTOS/Source/tasks.c **** 			}
3325:base/os/FreeRTOS/Source/tasks.c **** 			else
3326:base/os/FreeRTOS/Source/tasks.c **** 			{
3327:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:base/os/FreeRTOS/Source/tasks.c **** 			}
3329:base/os/FreeRTOS/Source/tasks.c **** 		}
3330:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:base/os/FreeRTOS/Source/tasks.c **** 	}
3332:base/os/FreeRTOS/Source/tasks.c **** }
3333:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:base/os/FreeRTOS/Source/tasks.c **** 
3335:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:base/os/FreeRTOS/Source/tasks.c **** 
3337:base/os/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:base/os/FreeRTOS/Source/tasks.c **** 	{
3339:base/os/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:base/os/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:base/os/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:base/os/FreeRTOS/Source/tasks.c **** 
3343:base/os/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:base/os/FreeRTOS/Source/tasks.c **** 		{
3345:base/os/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:base/os/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:base/os/FreeRTOS/Source/tasks.c **** 		}
3348:base/os/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:base/os/FreeRTOS/Source/tasks.c **** 		{
3350:base/os/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:base/os/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:base/os/FreeRTOS/Source/tasks.c **** 		}
3353:base/os/FreeRTOS/Source/tasks.c **** 		else
3354:base/os/FreeRTOS/Source/tasks.c **** 		{
3355:base/os/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:base/os/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:base/os/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:base/os/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:base/os/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:base/os/FreeRTOS/Source/tasks.c **** 			{
3361:base/os/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:base/os/FreeRTOS/Source/tasks.c **** 			}
3363:base/os/FreeRTOS/Source/tasks.c **** 			else
3364:base/os/FreeRTOS/Source/tasks.c **** 			{
3365:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:base/os/FreeRTOS/Source/tasks.c **** 			}
3367:base/os/FreeRTOS/Source/tasks.c **** 		}
3368:base/os/FreeRTOS/Source/tasks.c **** 
3369:base/os/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:base/os/FreeRTOS/Source/tasks.c **** 	}
3371:base/os/FreeRTOS/Source/tasks.c **** 
3372:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:base/os/FreeRTOS/Source/tasks.c **** 
3375:base/os/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:base/os/FreeRTOS/Source/tasks.c **** 
3377:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:base/os/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cchwbchh.s 			page 66


3379:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:base/os/FreeRTOS/Source/tasks.c **** 
3381:base/os/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:base/os/FreeRTOS/Source/tasks.c **** 		{
3383:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:base/os/FreeRTOS/Source/tasks.c **** 		}
3386:base/os/FreeRTOS/Source/tasks.c **** 	}
3387:base/os/FreeRTOS/Source/tasks.c **** 
3388:base/os/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:base/os/FreeRTOS/Source/tasks.c **** 
3391:base/os/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:base/os/FreeRTOS/Source/tasks.c **** 
3393:base/os/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:base/os/FreeRTOS/Source/tasks.c **** 	{
3395:base/os/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:base/os/FreeRTOS/Source/tasks.c **** 
3398:base/os/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:base/os/FreeRTOS/Source/tasks.c **** 		{
3400:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:base/os/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:base/os/FreeRTOS/Source/tasks.c **** 		}
3403:base/os/FreeRTOS/Source/tasks.c **** 		else
3404:base/os/FreeRTOS/Source/tasks.c **** 		{
3405:base/os/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:base/os/FreeRTOS/Source/tasks.c **** 		}
3407:base/os/FreeRTOS/Source/tasks.c **** 
3408:base/os/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:base/os/FreeRTOS/Source/tasks.c **** 	}
3410:base/os/FreeRTOS/Source/tasks.c **** 
3411:base/os/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:base/os/FreeRTOS/Source/tasks.c **** 
3414:base/os/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:base/os/FreeRTOS/Source/tasks.c **** 
3416:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:base/os/FreeRTOS/Source/tasks.c **** 	{
3418:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:base/os/FreeRTOS/Source/tasks.c **** 
3420:base/os/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:base/os/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:base/os/FreeRTOS/Source/tasks.c **** 
3424:base/os/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:base/os/FreeRTOS/Source/tasks.c **** 	}
3426:base/os/FreeRTOS/Source/tasks.c **** 
3427:base/os/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:base/os/FreeRTOS/Source/tasks.c **** 
3430:base/os/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:base/os/FreeRTOS/Source/tasks.c **** {
3432:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:base/os/FreeRTOS/Source/tasks.c **** 
3434:base/os/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:base/os/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cchwbchh.s 			page 67


3436:base/os/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:base/os/FreeRTOS/Source/tasks.c **** 	}
3438:base/os/FreeRTOS/Source/tasks.c **** 
3439:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:base/os/FreeRTOS/Source/tasks.c **** 
3443:base/os/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:base/os/FreeRTOS/Source/tasks.c **** 	{
3445:base/os/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:base/os/FreeRTOS/Source/tasks.c **** 	}
3447:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:base/os/FreeRTOS/Source/tasks.c **** 
3449:base/os/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:base/os/FreeRTOS/Source/tasks.c **** 	{
3451:base/os/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:base/os/FreeRTOS/Source/tasks.c **** 	}
3453:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:base/os/FreeRTOS/Source/tasks.c **** 
3455:base/os/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:base/os/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:base/os/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:base/os/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:base/os/FreeRTOS/Source/tasks.c **** }
3460:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:base/os/FreeRTOS/Source/tasks.c **** 
3462:base/os/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:base/os/FreeRTOS/Source/tasks.c **** {
3464:base/os/FreeRTOS/Source/tasks.c **** 
3465:base/os/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:base/os/FreeRTOS/Source/tasks.c **** 
3467:base/os/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:base/os/FreeRTOS/Source/tasks.c **** 	{
3469:base/os/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:base/os/FreeRTOS/Source/tasks.c **** 
3471:base/os/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:base/os/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:base/os/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:base/os/FreeRTOS/Source/tasks.c **** 		{
3475:base/os/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:base/os/FreeRTOS/Source/tasks.c **** 			{
3477:base/os/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:base/os/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:base/os/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:base/os/FreeRTOS/Source/tasks.c **** 			}
3482:base/os/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:base/os/FreeRTOS/Source/tasks.c **** 
3484:base/os/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:base/os/FreeRTOS/Source/tasks.c **** 		}
3486:base/os/FreeRTOS/Source/tasks.c **** 	}
3487:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:base/os/FreeRTOS/Source/tasks.c **** }
3489:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:base/os/FreeRTOS/Source/tasks.c **** 
3491:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 68


3493:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:base/os/FreeRTOS/Source/tasks.c **** 	{
3495:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:base/os/FreeRTOS/Source/tasks.c **** 
3497:base/os/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:base/os/FreeRTOS/Source/tasks.c **** 
3500:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:base/os/FreeRTOS/Source/tasks.c **** 
3506:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:base/os/FreeRTOS/Source/tasks.c **** 		{
3508:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:base/os/FreeRTOS/Source/tasks.c **** 		}
3510:base/os/FreeRTOS/Source/tasks.c **** 		#else
3511:base/os/FreeRTOS/Source/tasks.c **** 		{
3512:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:base/os/FreeRTOS/Source/tasks.c **** 		}
3514:base/os/FreeRTOS/Source/tasks.c **** 		#endif
3515:base/os/FreeRTOS/Source/tasks.c **** 
3516:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:base/os/FreeRTOS/Source/tasks.c **** 		{
3518:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:base/os/FreeRTOS/Source/tasks.c **** 		}
3520:base/os/FreeRTOS/Source/tasks.c **** 		#else
3521:base/os/FreeRTOS/Source/tasks.c **** 		{
3522:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:base/os/FreeRTOS/Source/tasks.c **** 		}
3524:base/os/FreeRTOS/Source/tasks.c **** 		#endif
3525:base/os/FreeRTOS/Source/tasks.c **** 
3526:base/os/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:base/os/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:base/os/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:base/os/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:base/os/FreeRTOS/Source/tasks.c **** 		{
3531:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:base/os/FreeRTOS/Source/tasks.c **** 			{
3533:base/os/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:base/os/FreeRTOS/Source/tasks.c **** 			}
3535:base/os/FreeRTOS/Source/tasks.c **** 			else
3536:base/os/FreeRTOS/Source/tasks.c **** 			{
3537:base/os/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:base/os/FreeRTOS/Source/tasks.c **** 
3539:base/os/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:base/os/FreeRTOS/Source/tasks.c **** 				{
3541:base/os/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:base/os/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:base/os/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:base/os/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:base/os/FreeRTOS/Source/tasks.c **** 					{
3546:base/os/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:base/os/FreeRTOS/Source/tasks.c **** 						{
3548:base/os/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:base/os/FreeRTOS/Source/tasks.c **** 							{
ARM GAS  /tmp/cchwbchh.s 			page 69


3550:base/os/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:base/os/FreeRTOS/Source/tasks.c **** 							}
3552:base/os/FreeRTOS/Source/tasks.c **** 						}
3553:base/os/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:base/os/FreeRTOS/Source/tasks.c **** 					}
3555:base/os/FreeRTOS/Source/tasks.c **** 				}
3556:base/os/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:base/os/FreeRTOS/Source/tasks.c **** 			}
3558:base/os/FreeRTOS/Source/tasks.c **** 		}
3559:base/os/FreeRTOS/Source/tasks.c **** 		else
3560:base/os/FreeRTOS/Source/tasks.c **** 		{
3561:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:base/os/FreeRTOS/Source/tasks.c **** 		}
3563:base/os/FreeRTOS/Source/tasks.c **** 
3564:base/os/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:base/os/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:base/os/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:base/os/FreeRTOS/Source/tasks.c **** 		{
3568:base/os/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:base/os/FreeRTOS/Source/tasks.c **** 			{
3570:base/os/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:base/os/FreeRTOS/Source/tasks.c **** 			}
3572:base/os/FreeRTOS/Source/tasks.c **** 			#else
3573:base/os/FreeRTOS/Source/tasks.c **** 			{
3574:base/os/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:base/os/FreeRTOS/Source/tasks.c **** 			}
3576:base/os/FreeRTOS/Source/tasks.c **** 			#endif
3577:base/os/FreeRTOS/Source/tasks.c **** 		}
3578:base/os/FreeRTOS/Source/tasks.c **** 		else
3579:base/os/FreeRTOS/Source/tasks.c **** 		{
3580:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:base/os/FreeRTOS/Source/tasks.c **** 		}
3582:base/os/FreeRTOS/Source/tasks.c **** 	}
3583:base/os/FreeRTOS/Source/tasks.c **** 
3584:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:base/os/FreeRTOS/Source/tasks.c **** 
3587:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:base/os/FreeRTOS/Source/tasks.c **** 
3589:base/os/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:base/os/FreeRTOS/Source/tasks.c **** 	{
3591:base/os/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:base/os/FreeRTOS/Source/tasks.c **** 
3594:base/os/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:base/os/FreeRTOS/Source/tasks.c **** 		{
3596:base/os/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:base/os/FreeRTOS/Source/tasks.c **** 
3598:base/os/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:base/os/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:base/os/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:base/os/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:base/os/FreeRTOS/Source/tasks.c **** 			do
3603:base/os/FreeRTOS/Source/tasks.c **** 			{
3604:base/os/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:base/os/FreeRTOS/Source/tasks.c **** 				uxTask++;
ARM GAS  /tmp/cchwbchh.s 			page 70


3607:base/os/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:base/os/FreeRTOS/Source/tasks.c **** 		}
3609:base/os/FreeRTOS/Source/tasks.c **** 		else
3610:base/os/FreeRTOS/Source/tasks.c **** 		{
3611:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:base/os/FreeRTOS/Source/tasks.c **** 		}
3613:base/os/FreeRTOS/Source/tasks.c **** 
3614:base/os/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:base/os/FreeRTOS/Source/tasks.c **** 	}
3616:base/os/FreeRTOS/Source/tasks.c **** 
3617:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:base/os/FreeRTOS/Source/tasks.c **** 
3620:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:base/os/FreeRTOS/Source/tasks.c **** 
3622:base/os/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:base/os/FreeRTOS/Source/tasks.c **** 	{
 127              		.loc 1 3623 2 is_stmt 1 view -0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
3624:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 132              		.loc 1 3624 2 view .LVU31
3625:base/os/FreeRTOS/Source/tasks.c **** 
3626:base/os/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 133              		.loc 1 3626 3 view .LVU32
3624:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 134              		.loc 1 3624 11 is_stmt 0 view .LVU33
 135 0000 0023     		movs	r3, #0
 136              		.loc 1 3626 8 view .LVU34
 137 0002 01E0     		b	.L13
 138              	.LVL10:
 139              	.L14:
3627:base/os/FreeRTOS/Source/tasks.c **** 		{
3628:base/os/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 140              		.loc 1 3628 4 is_stmt 1 view .LVU35
 141              		.loc 1 3628 17 is_stmt 0 view .LVU36
 142 0004 0130     		adds	r0, r0, #1
 143              	.LVL11:
3629:base/os/FreeRTOS/Source/tasks.c **** 			ulCount++;
 144              		.loc 1 3629 4 is_stmt 1 view .LVU37
 145              		.loc 1 3629 11 is_stmt 0 view .LVU38
 146 0006 0133     		adds	r3, r3, #1
 147              	.LVL12:
 148              	.L13:
3626:base/os/FreeRTOS/Source/tasks.c **** 		{
 149              		.loc 1 3626 24 is_stmt 1 view .LVU39
3626:base/os/FreeRTOS/Source/tasks.c **** 		{
 150              		.loc 1 3626 10 is_stmt 0 view .LVU40
 151 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3626:base/os/FreeRTOS/Source/tasks.c **** 		{
 152              		.loc 1 3626 24 view .LVU41
 153 000a A52A     		cmp	r2, #165
 154 000c FAD0     		beq	.L14
3630:base/os/FreeRTOS/Source/tasks.c **** 		}
3631:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 71


3632:base/os/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 155              		.loc 1 3632 3 is_stmt 1 view .LVU42
 156              	.LVL13:
3633:base/os/FreeRTOS/Source/tasks.c **** 
3634:base/os/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 157              		.loc 1 3634 3 view .LVU43
3635:base/os/FreeRTOS/Source/tasks.c **** 	}
 158              		.loc 1 3635 2 is_stmt 0 view .LVU44
 159 000e C3F38F00 		ubfx	r0, r3, #2, #16
 160              	.LVL14:
 161              		.loc 1 3635 2 view .LVU45
 162 0012 7047     		bx	lr
 163              		.cfi_endproc
 164              	.LFE46:
 166              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 167              		.align	1
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu softvfp
 173              	prvResetNextTaskUnblockTime:
 174              	.LFB49:
3636:base/os/FreeRTOS/Source/tasks.c **** 
3637:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:base/os/FreeRTOS/Source/tasks.c **** 
3640:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:base/os/FreeRTOS/Source/tasks.c **** 
3642:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:base/os/FreeRTOS/Source/tasks.c **** 	{
3644:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:base/os/FreeRTOS/Source/tasks.c **** 
3648:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:base/os/FreeRTOS/Source/tasks.c **** 
3650:base/os/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:base/os/FreeRTOS/Source/tasks.c **** 		{
3652:base/os/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:base/os/FreeRTOS/Source/tasks.c **** 		}
3654:base/os/FreeRTOS/Source/tasks.c **** 		#else
3655:base/os/FreeRTOS/Source/tasks.c **** 		{
3656:base/os/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:base/os/FreeRTOS/Source/tasks.c **** 		}
3658:base/os/FreeRTOS/Source/tasks.c **** 		#endif
3659:base/os/FreeRTOS/Source/tasks.c **** 
3660:base/os/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:base/os/FreeRTOS/Source/tasks.c **** 
3662:base/os/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:base/os/FreeRTOS/Source/tasks.c **** 	}
3664:base/os/FreeRTOS/Source/tasks.c **** 
3665:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:base/os/FreeRTOS/Source/tasks.c **** 
3668:base/os/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:base/os/FreeRTOS/Source/tasks.c **** 
3670:base/os/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
ARM GAS  /tmp/cchwbchh.s 			page 72


3671:base/os/FreeRTOS/Source/tasks.c **** 	{
3672:base/os/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:base/os/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:base/os/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:base/os/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:base/os/FreeRTOS/Source/tasks.c **** 
3677:base/os/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:base/os/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:base/os/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:base/os/FreeRTOS/Source/tasks.c **** 		{
3681:base/os/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:base/os/FreeRTOS/Source/tasks.c **** 		}
3683:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:base/os/FreeRTOS/Source/tasks.c **** 
3685:base/os/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:base/os/FreeRTOS/Source/tasks.c **** 		{
3687:base/os/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:base/os/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:base/os/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:base/os/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:base/os/FreeRTOS/Source/tasks.c **** 		}
3692:base/os/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:base/os/FreeRTOS/Source/tasks.c **** 		{
3694:base/os/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:base/os/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:base/os/FreeRTOS/Source/tasks.c **** 			memory. */
3697:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:base/os/FreeRTOS/Source/tasks.c **** 			{
3699:base/os/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:base/os/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:base/os/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:base/os/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:base/os/FreeRTOS/Source/tasks.c **** 			}
3704:base/os/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:base/os/FreeRTOS/Source/tasks.c **** 			{
3706:base/os/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:base/os/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:base/os/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:base/os/FreeRTOS/Source/tasks.c **** 			}
3710:base/os/FreeRTOS/Source/tasks.c **** 			else
3711:base/os/FreeRTOS/Source/tasks.c **** 			{
3712:base/os/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:base/os/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:base/os/FreeRTOS/Source/tasks.c **** 			}
3717:base/os/FreeRTOS/Source/tasks.c **** 		}
3718:base/os/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:base/os/FreeRTOS/Source/tasks.c **** 	}
3720:base/os/FreeRTOS/Source/tasks.c **** 
3721:base/os/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:base/os/FreeRTOS/Source/tasks.c **** 
3724:base/os/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:base/os/FreeRTOS/Source/tasks.c **** {
 175              		.loc 1 3725 1 is_stmt 1 view -0
 176              		.cfi_startproc
ARM GAS  /tmp/cchwbchh.s 			page 73


 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
3726:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 180              		.loc 1 3726 1 view .LVU47
3727:base/os/FreeRTOS/Source/tasks.c **** 
3728:base/os/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 181              		.loc 1 3728 2 view .LVU48
 182              		.loc 1 3728 6 is_stmt 0 view .LVU49
 183 0000 084B     		ldr	r3, .L18
 184 0002 1B68     		ldr	r3, [r3]
 185 0004 1B68     		ldr	r3, [r3]
 186              		.loc 1 3728 45 view .LVU50
 187 0006 23B9     		cbnz	r3, .L16
3729:base/os/FreeRTOS/Source/tasks.c **** 	{
3730:base/os/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:base/os/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:base/os/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:base/os/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:base/os/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 188              		.loc 1 3734 3 is_stmt 1 view .LVU51
 189              		.loc 1 3734 24 is_stmt 0 view .LVU52
 190 0008 074B     		ldr	r3, .L18+4
 191 000a 4FF0FF32 		mov	r2, #-1
 192 000e 1A60     		str	r2, [r3]
 193 0010 7047     		bx	lr
 194              	.L16:
3735:base/os/FreeRTOS/Source/tasks.c **** 	}
3736:base/os/FreeRTOS/Source/tasks.c **** 	else
3737:base/os/FreeRTOS/Source/tasks.c **** 	{
3738:base/os/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:base/os/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:base/os/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:base/os/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:base/os/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 195              		.loc 1 3742 3 is_stmt 1 view .LVU53
 196              		.loc 1 3742 27 is_stmt 0 view .LVU54
 197 0012 044B     		ldr	r3, .L18
 198 0014 1B68     		ldr	r3, [r3]
 199 0016 DB68     		ldr	r3, [r3, #12]
 200              		.loc 1 3742 13 view .LVU55
 201 0018 DB68     		ldr	r3, [r3, #12]
 202              	.LVL15:
3743:base/os/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 203              		.loc 1 3743 3 is_stmt 1 view .LVU56
 204              		.loc 1 3743 26 is_stmt 0 view .LVU57
 205 001a 5A68     		ldr	r2, [r3, #4]
 206              		.loc 1 3743 24 view .LVU58
 207 001c 024B     		ldr	r3, .L18+4
 208              	.LVL16:
 209              		.loc 1 3743 24 view .LVU59
 210 001e 1A60     		str	r2, [r3]
3744:base/os/FreeRTOS/Source/tasks.c **** 	}
3745:base/os/FreeRTOS/Source/tasks.c **** }
 211              		.loc 1 3745 1 view .LVU60
 212 0020 7047     		bx	lr
 213              	.L19:
ARM GAS  /tmp/cchwbchh.s 			page 74


 214 0022 00BF     		.align	2
 215              	.L18:
 216 0024 00000000 		.word	.LANCHOR2
 217 0028 00000000 		.word	.LANCHOR3
 218              		.cfi_endproc
 219              	.LFE49:
 221              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 222              		.align	1
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	prvInitialiseNewTask:
 229              	.LVL17:
 230              	.LFB6:
 825:base/os/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 231              		.loc 1 825 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 16, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 825:base/os/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 235              		.loc 1 825 1 is_stmt 0 view .LVU62
 236 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 237              	.LCFI0:
 238              		.cfi_def_cfa_offset 32
 239              		.cfi_offset 4, -32
 240              		.cfi_offset 5, -28
 241              		.cfi_offset 6, -24
 242              		.cfi_offset 7, -20
 243              		.cfi_offset 8, -16
 244              		.cfi_offset 9, -12
 245              		.cfi_offset 10, -8
 246              		.cfi_offset 14, -4
 247 0004 8046     		mov	r8, r0
 248 0006 0D46     		mov	r5, r1
 249 0008 1746     		mov	r7, r2
 250 000a 9946     		mov	r9, r3
 251 000c 089E     		ldr	r6, [sp, #32]
 252 000e DDF824A0 		ldr	r10, [sp, #36]
 253 0012 0A9C     		ldr	r4, [sp, #40]
 826:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 254              		.loc 1 826 1 is_stmt 1 view .LVU63
 827:base/os/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 827 1 view .LVU64
 847:base/os/FreeRTOS/Source/tasks.c **** 	}
 256              		.loc 1 847 3 view .LVU65
 847:base/os/FreeRTOS/Source/tasks.c **** 	}
 257              		.loc 1 847 12 is_stmt 0 view .LVU66
 258 0014 9200     		lsls	r2, r2, #2
 259              	.LVL18:
 847:base/os/FreeRTOS/Source/tasks.c **** 	}
 260              		.loc 1 847 12 view .LVU67
 261 0016 A521     		movs	r1, #165
 262              	.LVL19:
 847:base/os/FreeRTOS/Source/tasks.c **** 	}
 263              		.loc 1 847 12 view .LVU68
 264 0018 206B     		ldr	r0, [r4, #48]
ARM GAS  /tmp/cchwbchh.s 			page 75


 265              	.LVL20:
 847:base/os/FreeRTOS/Source/tasks.c **** 	}
 266              		.loc 1 847 12 view .LVU69
 267 001a FFF7FEFF 		bl	memset
 268              	.LVL21:
 857:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 269              		.loc 1 857 3 is_stmt 1 view .LVU70
 857:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 270              		.loc 1 857 26 is_stmt 0 view .LVU71
 271 001e 236B     		ldr	r3, [r4, #48]
 857:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 272              		.loc 1 857 36 view .LVU72
 273 0020 07F18042 		add	r2, r7, #1073741824
 274 0024 013A     		subs	r2, r2, #1
 857:base/os/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 275              		.loc 1 857 16 view .LVU73
 276 0026 03EB8207 		add	r7, r3, r2, lsl #2
 277              	.LVL22:
 858:base/os/FreeRTOS/Source/tasks.c **** 
 278              		.loc 1 858 3 is_stmt 1 view .LVU74
 858:base/os/FreeRTOS/Source/tasks.c **** 
 279              		.loc 1 858 81 is_stmt 0 view .LVU75
 280 002a 27F00707 		bic	r7, r7, #7
 281              	.LVL23:
 861:base/os/FreeRTOS/Source/tasks.c **** 
 282              		.loc 1 861 3 is_stmt 1 view .LVU76
 861:base/os/FreeRTOS/Source/tasks.c **** 
 283              		.loc 1 861 124 view .LVU77
 885:base/os/FreeRTOS/Source/tasks.c **** 	{
 284              		.loc 1 885 2 view .LVU78
 885:base/os/FreeRTOS/Source/tasks.c **** 	{
 285              		.loc 1 885 9 is_stmt 0 view .LVU79
 286 002e 4FF0000C 		mov	ip, #0
 287              	.LVL24:
 288              	.L21:
 885:base/os/FreeRTOS/Source/tasks.c **** 	{
 289              		.loc 1 885 32 is_stmt 1 discriminator 1 view .LVU80
 290 0032 BCF10F0F 		cmp	ip, #15
 291 0036 09D8     		bhi	.L22
 887:base/os/FreeRTOS/Source/tasks.c **** 
 292              		.loc 1 887 3 view .LVU81
 887:base/os/FreeRTOS/Source/tasks.c **** 
 293              		.loc 1 887 37 is_stmt 0 view .LVU82
 294 0038 15F80C30 		ldrb	r3, [r5, ip]	@ zero_extendqisi2
 887:base/os/FreeRTOS/Source/tasks.c **** 
 295              		.loc 1 887 29 view .LVU83
 296 003c 04EB0C02 		add	r2, r4, ip
 297 0040 82F83430 		strb	r3, [r2, #52]
 892:base/os/FreeRTOS/Source/tasks.c **** 		{
 298              		.loc 1 892 3 is_stmt 1 view .LVU84
 892:base/os/FreeRTOS/Source/tasks.c **** 		{
 299              		.loc 1 892 5 is_stmt 0 view .LVU85
 300 0044 13B1     		cbz	r3, .L22
 898:base/os/FreeRTOS/Source/tasks.c **** 		}
 301              		.loc 1 898 28 is_stmt 1 discriminator 2 view .LVU86
 885:base/os/FreeRTOS/Source/tasks.c **** 	{
 302              		.loc 1 885 76 discriminator 2 view .LVU87
ARM GAS  /tmp/cchwbchh.s 			page 76


 303 0046 0CF1010C 		add	ip, ip, #1
 304              	.LVL25:
 885:base/os/FreeRTOS/Source/tasks.c **** 	{
 305              		.loc 1 885 76 is_stmt 0 discriminator 2 view .LVU88
 306 004a F2E7     		b	.L21
 307              	.L22:
 904:base/os/FreeRTOS/Source/tasks.c **** 
 308              		.loc 1 904 2 is_stmt 1 view .LVU89
 904:base/os/FreeRTOS/Source/tasks.c **** 
 309              		.loc 1 904 54 is_stmt 0 view .LVU90
 310 004c 0023     		movs	r3, #0
 311 004e 84F84330 		strb	r3, [r4, #67]
 908:base/os/FreeRTOS/Source/tasks.c **** 	{
 312              		.loc 1 908 2 is_stmt 1 view .LVU91
 908:base/os/FreeRTOS/Source/tasks.c **** 	{
 313              		.loc 1 908 4 is_stmt 0 view .LVU92
 314 0052 372E     		cmp	r6, #55
 315 0054 00D9     		bls	.L24
 910:base/os/FreeRTOS/Source/tasks.c **** 	}
 316              		.loc 1 910 14 view .LVU93
 317 0056 3726     		movs	r6, #55
 318              	.L24:
 319              	.LVL26:
 914:base/os/FreeRTOS/Source/tasks.c **** 	}
 320              		.loc 1 914 27 is_stmt 1 view .LVU94
 917:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321              		.loc 1 917 2 view .LVU95
 917:base/os/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 322              		.loc 1 917 23 is_stmt 0 view .LVU96
 323 0058 E662     		str	r6, [r4, #44]
 920:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 324              		.loc 1 920 3 is_stmt 1 view .LVU97
 920:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 325              		.loc 1 920 28 is_stmt 0 view .LVU98
 326 005a E664     		str	r6, [r4, #76]
 921:base/os/FreeRTOS/Source/tasks.c **** 	}
 327              		.loc 1 921 3 is_stmt 1 view .LVU99
 921:base/os/FreeRTOS/Source/tasks.c **** 	}
 328              		.loc 1 921 27 is_stmt 0 view .LVU100
 329 005c 0025     		movs	r5, #0
 330              	.LVL27:
 921:base/os/FreeRTOS/Source/tasks.c **** 	}
 331              		.loc 1 921 27 view .LVU101
 332 005e 2565     		str	r5, [r4, #80]
 925:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 333              		.loc 1 925 2 is_stmt 1 view .LVU102
 334 0060 201D     		adds	r0, r4, #4
 335 0062 FFF7FEFF 		bl	vListInitialiseItem
 336              	.LVL28:
 926:base/os/FreeRTOS/Source/tasks.c **** 
 337              		.loc 1 926 2 view .LVU103
 338 0066 04F11800 		add	r0, r4, #24
 339 006a FFF7FEFF 		bl	vListInitialiseItem
 340              	.LVL29:
 930:base/os/FreeRTOS/Source/tasks.c **** 
 341              		.loc 1 930 2 view .LVU104
 342 006e 2461     		str	r4, [r4, #16]
ARM GAS  /tmp/cchwbchh.s 			page 77


 933:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 343              		.loc 1 933 2 view .LVU105
 344 0070 C6F13806 		rsb	r6, r6, #56
 345              	.LVL30:
 933:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 346              		.loc 1 933 2 is_stmt 0 view .LVU106
 347 0074 A661     		str	r6, [r4, #24]
 934:base/os/FreeRTOS/Source/tasks.c **** 
 348              		.loc 1 934 2 is_stmt 1 view .LVU107
 349 0076 6462     		str	r4, [r4, #36]
 961:base/os/FreeRTOS/Source/tasks.c **** 	}
 350              		.loc 1 961 3 view .LVU108
 976:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 351              		.loc 1 976 3 view .LVU109
 976:base/os/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 352              		.loc 1 976 29 is_stmt 0 view .LVU110
 353 0078 6565     		str	r5, [r4, #84]
 977:base/os/FreeRTOS/Source/tasks.c **** 	}
 354              		.loc 1 977 3 is_stmt 1 view .LVU111
 977:base/os/FreeRTOS/Source/tasks.c **** 	}
 355              		.loc 1 977 27 is_stmt 0 view .LVU112
 356 007a 84F85850 		strb	r5, [r4, #88]
1004:base/os/FreeRTOS/Source/tasks.c **** 	}
 357              		.loc 1 1004 3 is_stmt 1 view .LVU113
1004:base/os/FreeRTOS/Source/tasks.c **** 	}
 358              		.loc 1 1004 28 is_stmt 0 view .LVU114
 359 007e 4A46     		mov	r2, r9
 360 0080 4146     		mov	r1, r8
 361 0082 3846     		mov	r0, r7
 362 0084 FFF7FEFF 		bl	pxPortInitialiseStack
 363              	.LVL31:
1004:base/os/FreeRTOS/Source/tasks.c **** 	}
 364              		.loc 1 1004 26 view .LVU115
 365 0088 2060     		str	r0, [r4]
1008:base/os/FreeRTOS/Source/tasks.c **** 	{
 366              		.loc 1 1008 2 is_stmt 1 view .LVU116
1008:base/os/FreeRTOS/Source/tasks.c **** 	{
 367              		.loc 1 1008 4 is_stmt 0 view .LVU117
 368 008a BAF1000F 		cmp	r10, #0
 369 008e 01D0     		beq	.L20
1012:base/os/FreeRTOS/Source/tasks.c **** 	}
 370              		.loc 1 1012 3 is_stmt 1 view .LVU118
1012:base/os/FreeRTOS/Source/tasks.c **** 	}
 371              		.loc 1 1012 18 is_stmt 0 view .LVU119
 372 0090 CAF80040 		str	r4, [r10]
1016:base/os/FreeRTOS/Source/tasks.c **** 	}
 373              		.loc 1 1016 27 is_stmt 1 view .LVU120
 374              	.L20:
1018:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 375              		.loc 1 1018 1 is_stmt 0 view .LVU121
 376 0094 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
1018:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 377              		.loc 1 1018 1 view .LVU122
 378              		.cfi_endproc
 379              	.LFE6:
 381              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 382              		.align	1
ARM GAS  /tmp/cchwbchh.s 			page 78


 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu softvfp
 388              	prvInitialiseTaskLists:
 389              	.LFB42:
3431:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 390              		.loc 1 3431 1 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394 0000 38B5     		push	{r3, r4, r5, lr}
 395              	.LCFI1:
 396              		.cfi_def_cfa_offset 16
 397              		.cfi_offset 3, -16
 398              		.cfi_offset 4, -12
 399              		.cfi_offset 5, -8
 400              		.cfi_offset 14, -4
3432:base/os/FreeRTOS/Source/tasks.c **** 
 401              		.loc 1 3432 1 view .LVU124
3434:base/os/FreeRTOS/Source/tasks.c **** 	{
 402              		.loc 1 3434 2 view .LVU125
 403              	.LVL32:
3434:base/os/FreeRTOS/Source/tasks.c **** 	{
 404              		.loc 1 3434 18 is_stmt 0 view .LVU126
 405 0002 0024     		movs	r4, #0
3434:base/os/FreeRTOS/Source/tasks.c **** 	{
 406              		.loc 1 3434 2 view .LVU127
 407 0004 07E0     		b	.L29
 408              	.LVL33:
 409              	.L30:
3436:base/os/FreeRTOS/Source/tasks.c **** 	}
 410              		.loc 1 3436 3 is_stmt 1 discriminator 3 view .LVU128
 411 0006 04EB8402 		add	r2, r4, r4, lsl #2
 412 000a 9300     		lsls	r3, r2, #2
 413 000c 0E48     		ldr	r0, .L32
 414 000e 1844     		add	r0, r0, r3
 415 0010 FFF7FEFF 		bl	vListInitialise
 416              	.LVL34:
3434:base/os/FreeRTOS/Source/tasks.c **** 	{
 417              		.loc 1 3434 101 discriminator 3 view .LVU129
 418 0014 0134     		adds	r4, r4, #1
 419              	.LVL35:
 420              	.L29:
3434:base/os/FreeRTOS/Source/tasks.c **** 	{
 421              		.loc 1 3434 51 discriminator 1 view .LVU130
 422 0016 372C     		cmp	r4, #55
 423 0018 F5D9     		bls	.L30
3439:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 424              		.loc 1 3439 2 view .LVU131
 425 001a 0C4D     		ldr	r5, .L32+4
 426 001c 2846     		mov	r0, r5
 427 001e FFF7FEFF 		bl	vListInitialise
 428              	.LVL36:
3440:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 429              		.loc 1 3440 2 view .LVU132
 430 0022 0B4C     		ldr	r4, .L32+8
ARM GAS  /tmp/cchwbchh.s 			page 79


 431              	.LVL37:
3440:base/os/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 432              		.loc 1 3440 2 is_stmt 0 view .LVU133
 433 0024 2046     		mov	r0, r4
 434 0026 FFF7FEFF 		bl	vListInitialise
 435              	.LVL38:
3441:base/os/FreeRTOS/Source/tasks.c **** 
 436              		.loc 1 3441 2 is_stmt 1 view .LVU134
 437 002a 0A48     		ldr	r0, .L32+12
 438 002c FFF7FEFF 		bl	vListInitialise
 439              	.LVL39:
3445:base/os/FreeRTOS/Source/tasks.c **** 	}
 440              		.loc 1 3445 3 view .LVU135
 441 0030 0948     		ldr	r0, .L32+16
 442 0032 FFF7FEFF 		bl	vListInitialise
 443              	.LVL40:
3451:base/os/FreeRTOS/Source/tasks.c **** 	}
 444              		.loc 1 3451 3 view .LVU136
 445 0036 0948     		ldr	r0, .L32+20
 446 0038 FFF7FEFF 		bl	vListInitialise
 447              	.LVL41:
3457:base/os/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 448              		.loc 1 3457 2 view .LVU137
3457:base/os/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 449              		.loc 1 3457 20 is_stmt 0 view .LVU138
 450 003c 084B     		ldr	r3, .L32+24
 451 003e 1D60     		str	r5, [r3]
3458:base/os/FreeRTOS/Source/tasks.c **** }
 452              		.loc 1 3458 2 is_stmt 1 view .LVU139
3458:base/os/FreeRTOS/Source/tasks.c **** }
 453              		.loc 1 3458 28 is_stmt 0 view .LVU140
 454 0040 084B     		ldr	r3, .L32+28
 455 0042 1C60     		str	r4, [r3]
3459:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 456              		.loc 1 3459 1 view .LVU141
 457 0044 38BD     		pop	{r3, r4, r5, pc}
 458              	.L33:
 459 0046 00BF     		.align	2
 460              	.L32:
 461 0048 00000000 		.word	.LANCHOR4
 462 004c 00000000 		.word	.LANCHOR5
 463 0050 00000000 		.word	.LANCHOR6
 464 0054 00000000 		.word	.LANCHOR1
 465 0058 00000000 		.word	.LANCHOR7
 466 005c 00000000 		.word	.LANCHOR0
 467 0060 00000000 		.word	.LANCHOR2
 468 0064 00000000 		.word	.LANCHOR8
 469              		.cfi_endproc
 470              	.LFE42:
 472              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 473              		.align	1
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu softvfp
 479              	prvAddNewTaskToReadyList:
 480              	.LVL42:
ARM GAS  /tmp/cchwbchh.s 			page 80


 481              	.LFB7:
1022:base/os/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 482              		.loc 1 1022 1 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
1022:base/os/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 486              		.loc 1 1022 1 is_stmt 0 view .LVU143
 487 0000 10B5     		push	{r4, lr}
 488              	.LCFI2:
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 4, -8
 491              		.cfi_offset 14, -4
 492 0002 0446     		mov	r4, r0
1025:base/os/FreeRTOS/Source/tasks.c **** 	{
 493              		.loc 1 1025 2 is_stmt 1 view .LVU144
 494 0004 FFF7FEFF 		bl	vPortEnterCritical
 495              	.LVL43:
1027:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 496              		.loc 1 1027 3 view .LVU145
1027:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 497              		.loc 1 1027 25 is_stmt 0 view .LVU146
 498 0008 224A     		ldr	r2, .L42
 499 000a 1368     		ldr	r3, [r2]
 500 000c 0133     		adds	r3, r3, #1
 501 000e 1360     		str	r3, [r2]
1028:base/os/FreeRTOS/Source/tasks.c **** 		{
 502              		.loc 1 1028 3 is_stmt 1 view .LVU147
1028:base/os/FreeRTOS/Source/tasks.c **** 		{
 503              		.loc 1 1028 20 is_stmt 0 view .LVU148
 504 0010 214B     		ldr	r3, .L42+4
 505 0012 1B68     		ldr	r3, [r3]
1028:base/os/FreeRTOS/Source/tasks.c **** 		{
 506              		.loc 1 1028 5 view .LVU149
 507 0014 5BB1     		cbz	r3, .L40
1051:base/os/FreeRTOS/Source/tasks.c **** 			{
 508              		.loc 1 1051 4 is_stmt 1 view .LVU150
1051:base/os/FreeRTOS/Source/tasks.c **** 			{
 509              		.loc 1 1051 26 is_stmt 0 view .LVU151
 510 0016 214B     		ldr	r3, .L42+8
 511 0018 1B68     		ldr	r3, [r3]
1051:base/os/FreeRTOS/Source/tasks.c **** 			{
 512              		.loc 1 1051 6 view .LVU152
 513 001a 6BB9     		cbnz	r3, .L36
1053:base/os/FreeRTOS/Source/tasks.c **** 				{
 514              		.loc 1 1053 5 is_stmt 1 view .LVU153
1053:base/os/FreeRTOS/Source/tasks.c **** 				{
 515              		.loc 1 1053 21 is_stmt 0 view .LVU154
 516 001c 1E4B     		ldr	r3, .L42+4
 517 001e 1B68     		ldr	r3, [r3]
 518 0020 DA6A     		ldr	r2, [r3, #44]
1053:base/os/FreeRTOS/Source/tasks.c **** 				{
 519              		.loc 1 1053 45 view .LVU155
 520 0022 E36A     		ldr	r3, [r4, #44]
1053:base/os/FreeRTOS/Source/tasks.c **** 				{
 521              		.loc 1 1053 7 view .LVU156
 522 0024 9A42     		cmp	r2, r3
ARM GAS  /tmp/cchwbchh.s 			page 81


 523 0026 07D8     		bhi	.L36
1055:base/os/FreeRTOS/Source/tasks.c **** 				}
 524              		.loc 1 1055 6 is_stmt 1 view .LVU157
1055:base/os/FreeRTOS/Source/tasks.c **** 				}
 525              		.loc 1 1055 19 is_stmt 0 view .LVU158
 526 0028 1B4B     		ldr	r3, .L42+4
 527 002a 1C60     		str	r4, [r3]
 528 002c 04E0     		b	.L36
 529              	.L40:
1032:base/os/FreeRTOS/Source/tasks.c **** 
 530              		.loc 1 1032 4 is_stmt 1 view .LVU159
1032:base/os/FreeRTOS/Source/tasks.c **** 
 531              		.loc 1 1032 17 is_stmt 0 view .LVU160
 532 002e 1A4B     		ldr	r3, .L42+4
 533 0030 1C60     		str	r4, [r3]
1034:base/os/FreeRTOS/Source/tasks.c **** 			{
 534              		.loc 1 1034 4 is_stmt 1 view .LVU161
1034:base/os/FreeRTOS/Source/tasks.c **** 			{
 535              		.loc 1 1034 31 is_stmt 0 view .LVU162
 536 0032 1368     		ldr	r3, [r2]
1034:base/os/FreeRTOS/Source/tasks.c **** 			{
 537              		.loc 1 1034 6 view .LVU163
 538 0034 012B     		cmp	r3, #1
 539 0036 29D0     		beq	.L41
 540              	.L36:
1064:base/os/FreeRTOS/Source/tasks.c **** 			}
 541              		.loc 1 1064 29 is_stmt 1 view .LVU164
1068:base/os/FreeRTOS/Source/tasks.c **** 
 542              		.loc 1 1068 3 view .LVU165
1068:base/os/FreeRTOS/Source/tasks.c **** 
 543              		.loc 1 1068 15 is_stmt 0 view .LVU166
 544 0038 194A     		ldr	r2, .L42+12
 545 003a 1368     		ldr	r3, [r2]
 546 003c 0133     		adds	r3, r3, #1
 547 003e 1360     		str	r3, [r2]
1073:base/os/FreeRTOS/Source/tasks.c **** 		}
 548              		.loc 1 1073 4 is_stmt 1 view .LVU167
1073:base/os/FreeRTOS/Source/tasks.c **** 		}
 549              		.loc 1 1073 26 is_stmt 0 view .LVU168
 550 0040 6364     		str	r3, [r4, #68]
1076:base/os/FreeRTOS/Source/tasks.c **** 
 551              		.loc 1 1076 31 is_stmt 1 view .LVU169
1078:base/os/FreeRTOS/Source/tasks.c **** 
 552              		.loc 1 1078 3 view .LVU170
1078:base/os/FreeRTOS/Source/tasks.c **** 
 553              		.loc 1 1078 3 view .LVU171
 554 0042 E06A     		ldr	r0, [r4, #44]
 555 0044 174B     		ldr	r3, .L42+16
 556 0046 1B68     		ldr	r3, [r3]
 557 0048 9842     		cmp	r0, r3
 558 004a 01D9     		bls	.L37
1078:base/os/FreeRTOS/Source/tasks.c **** 
 559              		.loc 1 1078 3 discriminator 1 view .LVU172
 560 004c 154B     		ldr	r3, .L42+16
 561 004e 1860     		str	r0, [r3]
 562              	.L37:
1078:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 82


 563              		.loc 1 1078 3 discriminator 3 view .LVU173
1078:base/os/FreeRTOS/Source/tasks.c **** 
 564              		.loc 1 1078 3 discriminator 3 view .LVU174
 565 0050 00EB8000 		add	r0, r0, r0, lsl #2
 566 0054 211D     		adds	r1, r4, #4
 567 0056 144B     		ldr	r3, .L42+20
 568 0058 03EB8000 		add	r0, r3, r0, lsl #2
 569 005c FFF7FEFF 		bl	vListInsertEnd
 570              	.LVL44:
1078:base/os/FreeRTOS/Source/tasks.c **** 
 571              		.loc 1 1078 36 discriminator 3 view .LVU175
1080:base/os/FreeRTOS/Source/tasks.c **** 	}
 572              		.loc 1 1080 3 discriminator 3 view .LVU176
1082:base/os/FreeRTOS/Source/tasks.c **** 
 573              		.loc 1 1082 2 discriminator 3 view .LVU177
 574 0060 FFF7FEFF 		bl	vPortExitCritical
 575              	.LVL45:
1084:base/os/FreeRTOS/Source/tasks.c **** 	{
 576              		.loc 1 1084 2 discriminator 3 view .LVU178
1084:base/os/FreeRTOS/Source/tasks.c **** 	{
 577              		.loc 1 1084 24 is_stmt 0 discriminator 3 view .LVU179
 578 0064 0D4B     		ldr	r3, .L42+8
 579 0066 1B68     		ldr	r3, [r3]
1084:base/os/FreeRTOS/Source/tasks.c **** 	{
 580              		.loc 1 1084 4 discriminator 3 view .LVU180
 581 0068 7BB1     		cbz	r3, .L34
1088:base/os/FreeRTOS/Source/tasks.c **** 		{
 582              		.loc 1 1088 3 is_stmt 1 view .LVU181
1088:base/os/FreeRTOS/Source/tasks.c **** 		{
 583              		.loc 1 1088 19 is_stmt 0 view .LVU182
 584 006a 0B4B     		ldr	r3, .L42+4
 585 006c 1B68     		ldr	r3, [r3]
 586 006e DA6A     		ldr	r2, [r3, #44]
1088:base/os/FreeRTOS/Source/tasks.c **** 		{
 587              		.loc 1 1088 42 view .LVU183
 588 0070 E36A     		ldr	r3, [r4, #44]
1088:base/os/FreeRTOS/Source/tasks.c **** 		{
 589              		.loc 1 1088 5 view .LVU184
 590 0072 9A42     		cmp	r2, r3
 591 0074 09D2     		bcs	.L34
1090:base/os/FreeRTOS/Source/tasks.c **** 		}
 592              		.loc 1 1090 4 is_stmt 1 view .LVU185
 593 0076 4FF0E023 		mov	r3, #-536813568
 594 007a 4FF08052 		mov	r2, #268435456
 595 007e C3F8042D 		str	r2, [r3, #3332]
1090:base/os/FreeRTOS/Source/tasks.c **** 		}
 596              		.loc 1 1090 4 view .LVU186
 597              		.syntax unified
 598              	@ 1090 "base/os/FreeRTOS/Source/tasks.c" 1
 599 0082 BFF34F8F 		dsb
 600              	@ 0 "" 2
1090:base/os/FreeRTOS/Source/tasks.c **** 		}
 601              		.loc 1 1090 4 view .LVU187
 602              	@ 1090 "base/os/FreeRTOS/Source/tasks.c" 1
 603 0086 BFF36F8F 		isb
 604              	@ 0 "" 2
1090:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 83


 605              		.loc 1 1090 35 view .LVU188
1099:base/os/FreeRTOS/Source/tasks.c **** 	}
 606              		.loc 1 1099 27 view .LVU189
 607              		.thumb
 608              		.syntax unified
 609              	.L34:
1101:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 610              		.loc 1 1101 1 is_stmt 0 view .LVU190
 611 008a 10BD     		pop	{r4, pc}
 612              	.LVL46:
 613              	.L41:
1039:base/os/FreeRTOS/Source/tasks.c **** 			}
 614              		.loc 1 1039 5 is_stmt 1 view .LVU191
 615 008c FFF7FEFF 		bl	prvInitialiseTaskLists
 616              	.LVL47:
 617 0090 D2E7     		b	.L36
 618              	.L43:
 619 0092 00BF     		.align	2
 620              	.L42:
 621 0094 00000000 		.word	.LANCHOR9
 622 0098 00000000 		.word	.LANCHOR10
 623 009c 00000000 		.word	.LANCHOR11
 624 00a0 00000000 		.word	.LANCHOR12
 625 00a4 00000000 		.word	.LANCHOR13
 626 00a8 00000000 		.word	.LANCHOR4
 627              		.cfi_endproc
 628              	.LFE7:
 630              		.section	.text.prvDeleteTCB,"ax",%progbits
 631              		.align	1
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu softvfp
 637              	prvDeleteTCB:
 638              	.LVL48:
 639              	.LFB48:
3671:base/os/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 640              		.loc 1 3671 2 view -0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
3671:base/os/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 644              		.loc 1 3671 2 is_stmt 0 view .LVU193
 645 0000 10B5     		push	{r4, lr}
 646              	.LCFI3:
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 4, -8
 649              		.cfi_offset 14, -4
 650 0002 0446     		mov	r4, r0
3675:base/os/FreeRTOS/Source/tasks.c **** 
 651              		.loc 1 3675 3 is_stmt 1 view .LVU194
3697:base/os/FreeRTOS/Source/tasks.c **** 			{
 652              		.loc 1 3697 4 view .LVU195
3697:base/os/FreeRTOS/Source/tasks.c **** 			{
 653              		.loc 1 3697 13 is_stmt 0 view .LVU196
 654 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
3697:base/os/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cchwbchh.s 			page 84


 655              		.loc 1 3697 6 view .LVU197
 656 0008 63B1     		cbz	r3, .L50
3704:base/os/FreeRTOS/Source/tasks.c **** 			{
 657              		.loc 1 3704 9 is_stmt 1 view .LVU198
3704:base/os/FreeRTOS/Source/tasks.c **** 			{
 658              		.loc 1 3704 11 is_stmt 0 view .LVU199
 659 000a 012B     		cmp	r3, #1
 660 000c 11D0     		beq	.L51
3714:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 661              		.loc 1 3714 5 is_stmt 1 view .LVU200
 662 000e 022B     		cmp	r3, #2
 663 0010 0ED0     		beq	.L44
3714:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 664              		.loc 1 3714 5 view .LVU201
 665              	.LBB115:
 666              	.LBI115:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 667              		.loc 2 191 30 view .LVU202
 668              	.LBB116:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 669              		.loc 2 193 1 view .LVU203
 670              		.loc 2 195 2 view .LVU204
 671              		.syntax unified
 672              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 673 0012 4FF05003 			mov r3, #80												
 674 0016 83F31188 		msr basepri, r3											
 675 001a BFF36F8F 		isb														
 676 001e BFF34F8F 		dsb														
 677              	
 678              	@ 0 "" 2
 679              	.LVL49:
 680              		.thumb
 681              		.syntax unified
 682              	.L48:
 683              		.loc 2 195 2 is_stmt 0 view .LVU205
 684              	.LBE116:
 685              	.LBE115:
3714:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 686              		.loc 1 3714 5 is_stmt 1 discriminator 1 view .LVU206
3714:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 687              		.loc 1 3714 5 discriminator 1 view .LVU207
 688 0022 FEE7     		b	.L48
 689              	.L50:
3701:base/os/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 690              		.loc 1 3701 5 view .LVU208
 691 0024 006B     		ldr	r0, [r0, #48]
 692              	.LVL50:
3701:base/os/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 693              		.loc 1 3701 5 is_stmt 0 view .LVU209
 694 0026 FFF7FEFF 		bl	vPortFree
 695              	.LVL51:
3702:base/os/FreeRTOS/Source/tasks.c **** 			}
 696              		.loc 1 3702 5 is_stmt 1 view .LVU210
 697 002a 2046     		mov	r0, r4
 698 002c FFF7FEFF 		bl	vPortFree
 699              	.LVL52:
 700              	.L44:
ARM GAS  /tmp/cchwbchh.s 			page 85


3719:base/os/FreeRTOS/Source/tasks.c **** 
 701              		.loc 1 3719 2 is_stmt 0 view .LVU211
 702 0030 10BD     		pop	{r4, pc}
 703              	.LVL53:
 704              	.L51:
3708:base/os/FreeRTOS/Source/tasks.c **** 			}
 705              		.loc 1 3708 5 is_stmt 1 view .LVU212
 706 0032 FFF7FEFF 		bl	vPortFree
 707              	.LVL54:
3708:base/os/FreeRTOS/Source/tasks.c **** 			}
 708              		.loc 1 3708 5 is_stmt 0 view .LVU213
 709 0036 FBE7     		b	.L44
 710              		.cfi_endproc
 711              	.LFE48:
 713              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 714              		.align	1
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 718              		.fpu softvfp
 720              	prvCheckTasksWaitingTermination:
 721              	.LFB43:
3463:base/os/FreeRTOS/Source/tasks.c **** 
 722              		.loc 1 3463 1 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              	.LBB117:
3469:base/os/FreeRTOS/Source/tasks.c **** 
 727              		.loc 1 3469 3 view .LVU215
3473:base/os/FreeRTOS/Source/tasks.c **** 		{
 728              		.loc 1 3473 3 view .LVU216
3473:base/os/FreeRTOS/Source/tasks.c **** 		{
 729              		.loc 1 3473 39 view .LVU217
 730 0000 0F4B     		ldr	r3, .L59
 731 0002 1B68     		ldr	r3, [r3]
 732 0004 D3B1     		cbz	r3, .L58
 733              	.LBE117:
3463:base/os/FreeRTOS/Source/tasks.c **** 
 734              		.loc 1 3463 1 is_stmt 0 view .LVU218
 735 0006 10B5     		push	{r4, lr}
 736              	.LCFI4:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 4, -8
 739              		.cfi_offset 14, -4
 740              	.L54:
 741              	.LBB118:
3475:base/os/FreeRTOS/Source/tasks.c **** 			{
 742              		.loc 1 3475 4 is_stmt 1 view .LVU219
 743 0008 FFF7FEFF 		bl	vPortEnterCritical
 744              	.LVL55:
3477:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 745              		.loc 1 3477 5 view .LVU220
3477:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 746              		.loc 1 3477 25 is_stmt 0 view .LVU221
 747 000c 0D4B     		ldr	r3, .L59+4
 748 000e DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cchwbchh.s 			page 86


3477:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 749              		.loc 1 3477 11 view .LVU222
 750 0010 DC68     		ldr	r4, [r3, #12]
 751              	.LVL56:
3478:base/os/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 752              		.loc 1 3478 5 is_stmt 1 view .LVU223
3478:base/os/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 753              		.loc 1 3478 14 is_stmt 0 view .LVU224
 754 0012 201D     		adds	r0, r4, #4
 755 0014 FFF7FEFF 		bl	uxListRemove
 756              	.LVL57:
3479:base/os/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 757              		.loc 1 3479 5 is_stmt 1 view .LVU225
 758 0018 0B4A     		ldr	r2, .L59+8
 759 001a 1368     		ldr	r3, [r2]
 760 001c 013B     		subs	r3, r3, #1
 761 001e 1360     		str	r3, [r2]
3480:base/os/FreeRTOS/Source/tasks.c **** 			}
 762              		.loc 1 3480 5 view .LVU226
 763 0020 074A     		ldr	r2, .L59
 764 0022 1368     		ldr	r3, [r2]
 765 0024 013B     		subs	r3, r3, #1
 766 0026 1360     		str	r3, [r2]
3482:base/os/FreeRTOS/Source/tasks.c **** 
 767              		.loc 1 3482 4 view .LVU227
 768 0028 FFF7FEFF 		bl	vPortExitCritical
 769              	.LVL58:
3484:base/os/FreeRTOS/Source/tasks.c **** 		}
 770              		.loc 1 3484 4 view .LVU228
 771 002c 2046     		mov	r0, r4
 772 002e FFF7FEFF 		bl	prvDeleteTCB
 773              	.LVL59:
3473:base/os/FreeRTOS/Source/tasks.c **** 		{
 774              		.loc 1 3473 39 view .LVU229
 775 0032 034B     		ldr	r3, .L59
 776 0034 1B68     		ldr	r3, [r3]
 777 0036 002B     		cmp	r3, #0
 778 0038 E6D1     		bne	.L54
 779              	.LBE118:
3488:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 780              		.loc 1 3488 1 is_stmt 0 view .LVU230
 781 003a 10BD     		pop	{r4, pc}
 782              	.LVL60:
 783              	.L58:
 784              	.LCFI5:
 785              		.cfi_def_cfa_offset 0
 786              		.cfi_restore 4
 787              		.cfi_restore 14
3488:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 788              		.loc 1 3488 1 view .LVU231
 789 003c 7047     		bx	lr
 790              	.L60:
 791 003e 00BF     		.align	2
 792              	.L59:
 793 0040 00000000 		.word	.LANCHOR14
 794 0044 00000000 		.word	.LANCHOR7
 795 0048 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/cchwbchh.s 			page 87


 796              		.cfi_endproc
 797              	.LFE43:
 799              		.section	.text.prvIdleTask,"ax",%progbits
 800              		.align	1
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu softvfp
 806              	prvIdleTask:
 807              	.LFB41:
3219:base/os/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 808              		.loc 1 3219 1 is_stmt 1 view -0
 809              		.cfi_startproc
 810              		@ Volatile: function does not return.
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL61:
3219:base/os/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 814              		.loc 1 3219 1 is_stmt 0 view .LVU233
 815 0000 08B5     		push	{r3, lr}
 816              	.LCFI6:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 3, -8
 819              		.cfi_offset 14, -4
 820              	.LVL62:
 821              	.L62:
3221:base/os/FreeRTOS/Source/tasks.c **** 
 822              		.loc 1 3221 2 is_stmt 1 view .LVU234
3229:base/os/FreeRTOS/Source/tasks.c **** 
 823              		.loc 1 3229 35 view .LVU235
3231:base/os/FreeRTOS/Source/tasks.c **** 	{
 824              		.loc 1 3231 2 view .LVU236
3235:base/os/FreeRTOS/Source/tasks.c **** 
 825              		.loc 1 3235 3 view .LVU237
 826 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 827              	.LVL63:
3258:base/os/FreeRTOS/Source/tasks.c **** 			{
 828              		.loc 1 3258 4 view .LVU238
3258:base/os/FreeRTOS/Source/tasks.c **** 			{
 829              		.loc 1 3258 8 is_stmt 0 view .LVU239
 830 0006 074B     		ldr	r3, .L65
 831 0008 1B68     		ldr	r3, [r3]
3258:base/os/FreeRTOS/Source/tasks.c **** 			{
 832              		.loc 1 3258 6 view .LVU240
 833 000a 012B     		cmp	r3, #1
 834 000c F9D9     		bls	.L62
3260:base/os/FreeRTOS/Source/tasks.c **** 			}
 835              		.loc 1 3260 5 is_stmt 1 view .LVU241
 836 000e 4FF0E023 		mov	r3, #-536813568
 837 0012 4FF08052 		mov	r2, #268435456
 838 0016 C3F8042D 		str	r2, [r3, #3332]
3260:base/os/FreeRTOS/Source/tasks.c **** 			}
 839              		.loc 1 3260 5 view .LVU242
 840              		.syntax unified
 841              	@ 3260 "base/os/FreeRTOS/Source/tasks.c" 1
 842 001a BFF34F8F 		dsb
 843              	@ 0 "" 2
ARM GAS  /tmp/cchwbchh.s 			page 88


3260:base/os/FreeRTOS/Source/tasks.c **** 			}
 844              		.loc 1 3260 5 view .LVU243
 845              	@ 3260 "base/os/FreeRTOS/Source/tasks.c" 1
 846 001e BFF36F8F 		isb
 847              	@ 0 "" 2
3260:base/os/FreeRTOS/Source/tasks.c **** 			}
 848              		.loc 1 3260 16 view .LVU244
 849              		.thumb
 850              		.syntax unified
 851 0022 EEE7     		b	.L62
 852              	.L66:
 853              		.align	2
 854              	.L65:
 855 0024 00000000 		.word	.LANCHOR4
 856              		.cfi_endproc
 857              	.LFE41:
 859              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 860              		.align	1
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu softvfp
 866              	prvAddCurrentTaskToDelayedList:
 867              	.LVL64:
 868              	.LFB63:
3746:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:base/os/FreeRTOS/Source/tasks.c **** 
3748:base/os/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:base/os/FreeRTOS/Source/tasks.c **** 
3750:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:base/os/FreeRTOS/Source/tasks.c **** 	{
3752:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:base/os/FreeRTOS/Source/tasks.c **** 
3754:base/os/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:base/os/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:base/os/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:base/os/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:base/os/FreeRTOS/Source/tasks.c **** 
3759:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:base/os/FreeRTOS/Source/tasks.c **** 	}
3761:base/os/FreeRTOS/Source/tasks.c **** 
3762:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:base/os/FreeRTOS/Source/tasks.c **** 
3765:base/os/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:base/os/FreeRTOS/Source/tasks.c **** 
3767:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:base/os/FreeRTOS/Source/tasks.c **** 	{
3769:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:base/os/FreeRTOS/Source/tasks.c **** 
3771:base/os/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:base/os/FreeRTOS/Source/tasks.c **** 		{
3773:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:base/os/FreeRTOS/Source/tasks.c **** 		}
3775:base/os/FreeRTOS/Source/tasks.c **** 		else
3776:base/os/FreeRTOS/Source/tasks.c **** 		{
3777:base/os/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /tmp/cchwbchh.s 			page 89


3778:base/os/FreeRTOS/Source/tasks.c **** 			{
3779:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:base/os/FreeRTOS/Source/tasks.c **** 			}
3781:base/os/FreeRTOS/Source/tasks.c **** 			else
3782:base/os/FreeRTOS/Source/tasks.c **** 			{
3783:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:base/os/FreeRTOS/Source/tasks.c **** 			}
3785:base/os/FreeRTOS/Source/tasks.c **** 		}
3786:base/os/FreeRTOS/Source/tasks.c **** 
3787:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:base/os/FreeRTOS/Source/tasks.c **** 	}
3789:base/os/FreeRTOS/Source/tasks.c **** 
3790:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:base/os/FreeRTOS/Source/tasks.c **** 
3793:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:base/os/FreeRTOS/Source/tasks.c **** 
3795:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:base/os/FreeRTOS/Source/tasks.c **** 	{
3797:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:base/os/FreeRTOS/Source/tasks.c **** 
3800:base/os/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:base/os/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:base/os/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:base/os/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:base/os/FreeRTOS/Source/tasks.c **** 		{
3805:base/os/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:base/os/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:base/os/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:base/os/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:base/os/FreeRTOS/Source/tasks.c **** 			{
3810:base/os/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:base/os/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:base/os/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:base/os/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:base/os/FreeRTOS/Source/tasks.c **** 				{
3815:base/os/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:base/os/FreeRTOS/Source/tasks.c **** 				}
3817:base/os/FreeRTOS/Source/tasks.c **** 				else
3818:base/os/FreeRTOS/Source/tasks.c **** 				{
3819:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:base/os/FreeRTOS/Source/tasks.c **** 				}
3821:base/os/FreeRTOS/Source/tasks.c **** 
3822:base/os/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:base/os/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:base/os/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:base/os/FreeRTOS/Source/tasks.c **** 				{
3826:base/os/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:base/os/FreeRTOS/Source/tasks.c **** 					{
3828:base/os/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:base/os/FreeRTOS/Source/tasks.c **** 					}
3830:base/os/FreeRTOS/Source/tasks.c **** 					else
3831:base/os/FreeRTOS/Source/tasks.c **** 					{
3832:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:base/os/FreeRTOS/Source/tasks.c **** 					}
3834:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 90


3835:base/os/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:base/os/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:base/os/FreeRTOS/Source/tasks.c **** 				}
3839:base/os/FreeRTOS/Source/tasks.c **** 				else
3840:base/os/FreeRTOS/Source/tasks.c **** 				{
3841:base/os/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:base/os/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:base/os/FreeRTOS/Source/tasks.c **** 				}
3844:base/os/FreeRTOS/Source/tasks.c **** 
3845:base/os/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:base/os/FreeRTOS/Source/tasks.c **** 
3847:base/os/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:base/os/FreeRTOS/Source/tasks.c **** 			}
3850:base/os/FreeRTOS/Source/tasks.c **** 			else
3851:base/os/FreeRTOS/Source/tasks.c **** 			{
3852:base/os/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:base/os/FreeRTOS/Source/tasks.c **** 				{
3854:base/os/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:base/os/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:base/os/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:base/os/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:base/os/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:base/os/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:base/os/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:base/os/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:base/os/FreeRTOS/Source/tasks.c **** 				}
3863:base/os/FreeRTOS/Source/tasks.c **** 				else
3864:base/os/FreeRTOS/Source/tasks.c **** 				{
3865:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:base/os/FreeRTOS/Source/tasks.c **** 				}
3867:base/os/FreeRTOS/Source/tasks.c **** 			}
3868:base/os/FreeRTOS/Source/tasks.c **** 		}
3869:base/os/FreeRTOS/Source/tasks.c **** 		else
3870:base/os/FreeRTOS/Source/tasks.c **** 		{
3871:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:base/os/FreeRTOS/Source/tasks.c **** 		}
3873:base/os/FreeRTOS/Source/tasks.c **** 
3874:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:base/os/FreeRTOS/Source/tasks.c **** 	}
3876:base/os/FreeRTOS/Source/tasks.c **** 
3877:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:base/os/FreeRTOS/Source/tasks.c **** 
3880:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:base/os/FreeRTOS/Source/tasks.c **** 
3882:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:base/os/FreeRTOS/Source/tasks.c **** 	{
3884:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:base/os/FreeRTOS/Source/tasks.c **** 
3887:base/os/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:base/os/FreeRTOS/Source/tasks.c **** 		{
3889:base/os/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:base/os/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:base/os/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
ARM GAS  /tmp/cchwbchh.s 			page 91


3892:base/os/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:base/os/FreeRTOS/Source/tasks.c **** 
3897:base/os/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:base/os/FreeRTOS/Source/tasks.c **** 			task? */
3899:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:base/os/FreeRTOS/Source/tasks.c **** 			{
3901:base/os/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:base/os/FreeRTOS/Source/tasks.c **** 				{
3904:base/os/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:base/os/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:base/os/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:base/os/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:base/os/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:base/os/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:base/os/FreeRTOS/Source/tasks.c **** 					{
3911:base/os/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:base/os/FreeRTOS/Source/tasks.c **** 					}
3913:base/os/FreeRTOS/Source/tasks.c **** 					else
3914:base/os/FreeRTOS/Source/tasks.c **** 					{
3915:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:base/os/FreeRTOS/Source/tasks.c **** 					}
3917:base/os/FreeRTOS/Source/tasks.c **** 
3918:base/os/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:base/os/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:base/os/FreeRTOS/Source/tasks.c **** 
3923:base/os/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:base/os/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:base/os/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:base/os/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:base/os/FreeRTOS/Source/tasks.c **** 
3929:base/os/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:base/os/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:base/os/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:base/os/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:base/os/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:base/os/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:base/os/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:base/os/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:base/os/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:base/os/FreeRTOS/Source/tasks.c **** 				}
3939:base/os/FreeRTOS/Source/tasks.c **** 				else
3940:base/os/FreeRTOS/Source/tasks.c **** 				{
3941:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:base/os/FreeRTOS/Source/tasks.c **** 				}
3943:base/os/FreeRTOS/Source/tasks.c **** 			}
3944:base/os/FreeRTOS/Source/tasks.c **** 			else
3945:base/os/FreeRTOS/Source/tasks.c **** 			{
3946:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:base/os/FreeRTOS/Source/tasks.c **** 			}
3948:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 92


3949:base/os/FreeRTOS/Source/tasks.c **** 		else
3950:base/os/FreeRTOS/Source/tasks.c **** 		{
3951:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:base/os/FreeRTOS/Source/tasks.c **** 		}
3953:base/os/FreeRTOS/Source/tasks.c **** 
3954:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:base/os/FreeRTOS/Source/tasks.c **** 	}
3956:base/os/FreeRTOS/Source/tasks.c **** 
3957:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:base/os/FreeRTOS/Source/tasks.c **** 
3960:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:base/os/FreeRTOS/Source/tasks.c **** 
3962:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:base/os/FreeRTOS/Source/tasks.c **** 	{
3964:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:base/os/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:base/os/FreeRTOS/Source/tasks.c **** 
3968:base/os/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:base/os/FreeRTOS/Source/tasks.c **** 		{
3970:base/os/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:base/os/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:base/os/FreeRTOS/Source/tasks.c **** 
3974:base/os/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:base/os/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:base/os/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:base/os/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:base/os/FreeRTOS/Source/tasks.c **** 			{
3980:base/os/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:base/os/FreeRTOS/Source/tasks.c **** 			}
3982:base/os/FreeRTOS/Source/tasks.c **** 			else
3983:base/os/FreeRTOS/Source/tasks.c **** 			{
3984:base/os/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:base/os/FreeRTOS/Source/tasks.c **** 			}
3986:base/os/FreeRTOS/Source/tasks.c **** 
3987:base/os/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:base/os/FreeRTOS/Source/tasks.c **** 			{
3990:base/os/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:base/os/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:base/os/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:base/os/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:base/os/FreeRTOS/Source/tasks.c **** 				{
3996:base/os/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:base/os/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:base/os/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:base/os/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:base/os/FreeRTOS/Source/tasks.c **** 
4001:base/os/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:base/os/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:base/os/FreeRTOS/Source/tasks.c **** 					state. */
4004:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:base/os/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
ARM GAS  /tmp/cchwbchh.s 			page 93


4006:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:base/os/FreeRTOS/Source/tasks.c **** 
4008:base/os/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:base/os/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:base/os/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:base/os/FreeRTOS/Source/tasks.c **** 					{
4012:base/os/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:base/os/FreeRTOS/Source/tasks.c **** 					}
4014:base/os/FreeRTOS/Source/tasks.c **** 					else
4015:base/os/FreeRTOS/Source/tasks.c **** 					{
4016:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:base/os/FreeRTOS/Source/tasks.c **** 					}
4018:base/os/FreeRTOS/Source/tasks.c **** 
4019:base/os/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:base/os/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:base/os/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:base/os/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:base/os/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:base/os/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:base/os/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:base/os/FreeRTOS/Source/tasks.c **** 					{
4027:base/os/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:base/os/FreeRTOS/Source/tasks.c **** 						{
4029:base/os/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:base/os/FreeRTOS/Source/tasks.c **** 						}
4031:base/os/FreeRTOS/Source/tasks.c **** 						else
4032:base/os/FreeRTOS/Source/tasks.c **** 						{
4033:base/os/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:base/os/FreeRTOS/Source/tasks.c **** 						}
4035:base/os/FreeRTOS/Source/tasks.c **** 
4036:base/os/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:base/os/FreeRTOS/Source/tasks.c **** 					}
4038:base/os/FreeRTOS/Source/tasks.c **** 					else
4039:base/os/FreeRTOS/Source/tasks.c **** 					{
4040:base/os/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:base/os/FreeRTOS/Source/tasks.c **** 					}
4042:base/os/FreeRTOS/Source/tasks.c **** 				}
4043:base/os/FreeRTOS/Source/tasks.c **** 				else
4044:base/os/FreeRTOS/Source/tasks.c **** 				{
4045:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:base/os/FreeRTOS/Source/tasks.c **** 				}
4047:base/os/FreeRTOS/Source/tasks.c **** 			}
4048:base/os/FreeRTOS/Source/tasks.c **** 			else
4049:base/os/FreeRTOS/Source/tasks.c **** 			{
4050:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:base/os/FreeRTOS/Source/tasks.c **** 			}
4052:base/os/FreeRTOS/Source/tasks.c **** 		}
4053:base/os/FreeRTOS/Source/tasks.c **** 		else
4054:base/os/FreeRTOS/Source/tasks.c **** 		{
4055:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:base/os/FreeRTOS/Source/tasks.c **** 		}
4057:base/os/FreeRTOS/Source/tasks.c **** 	}
4058:base/os/FreeRTOS/Source/tasks.c **** 
4059:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:base/os/FreeRTOS/Source/tasks.c **** 
4062:base/os/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  /tmp/cchwbchh.s 			page 94


4063:base/os/FreeRTOS/Source/tasks.c **** 
4064:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:base/os/FreeRTOS/Source/tasks.c **** 	{
4066:base/os/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:base/os/FreeRTOS/Source/tasks.c **** 
4068:base/os/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:base/os/FreeRTOS/Source/tasks.c **** 		{
4070:base/os/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:base/os/FreeRTOS/Source/tasks.c **** 
4072:base/os/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:base/os/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:base/os/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:base/os/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:base/os/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:base/os/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:base/os/FreeRTOS/Source/tasks.c **** 			{
4080:base/os/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:base/os/FreeRTOS/Source/tasks.c **** 			}
4082:base/os/FreeRTOS/Source/tasks.c **** 		}
4083:base/os/FreeRTOS/Source/tasks.c **** 		else
4084:base/os/FreeRTOS/Source/tasks.c **** 		{
4085:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:base/os/FreeRTOS/Source/tasks.c **** 		}
4087:base/os/FreeRTOS/Source/tasks.c **** 	}
4088:base/os/FreeRTOS/Source/tasks.c **** 
4089:base/os/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:base/os/FreeRTOS/Source/tasks.c **** 
4092:base/os/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:base/os/FreeRTOS/Source/tasks.c **** 
4094:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:base/os/FreeRTOS/Source/tasks.c **** 	{
4096:base/os/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:base/os/FreeRTOS/Source/tasks.c **** 		{
4098:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:base/os/FreeRTOS/Source/tasks.c **** 			{
4100:base/os/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:base/os/FreeRTOS/Source/tasks.c **** 
4102:base/os/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:base/os/FreeRTOS/Source/tasks.c **** 				{
4104:base/os/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:base/os/FreeRTOS/Source/tasks.c **** 				}
4106:base/os/FreeRTOS/Source/tasks.c **** 				else
4107:base/os/FreeRTOS/Source/tasks.c **** 				{
4108:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:base/os/FreeRTOS/Source/tasks.c **** 				}
4110:base/os/FreeRTOS/Source/tasks.c **** 			}
4111:base/os/FreeRTOS/Source/tasks.c **** 			else
4112:base/os/FreeRTOS/Source/tasks.c **** 			{
4113:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:base/os/FreeRTOS/Source/tasks.c **** 			}
4115:base/os/FreeRTOS/Source/tasks.c **** 		}
4116:base/os/FreeRTOS/Source/tasks.c **** 		else
4117:base/os/FreeRTOS/Source/tasks.c **** 		{
4118:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 95


4120:base/os/FreeRTOS/Source/tasks.c **** 	}
4121:base/os/FreeRTOS/Source/tasks.c **** 
4122:base/os/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:base/os/FreeRTOS/Source/tasks.c **** 
4125:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:base/os/FreeRTOS/Source/tasks.c **** 
4127:base/os/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:base/os/FreeRTOS/Source/tasks.c **** 	{
4129:base/os/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:base/os/FreeRTOS/Source/tasks.c **** 
4131:base/os/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:base/os/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:base/os/FreeRTOS/Source/tasks.c **** 
4134:base/os/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:base/os/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:base/os/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:base/os/FreeRTOS/Source/tasks.c **** 		{
4138:base/os/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:base/os/FreeRTOS/Source/tasks.c **** 		}
4140:base/os/FreeRTOS/Source/tasks.c **** 
4141:base/os/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:base/os/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:base/os/FreeRTOS/Source/tasks.c **** 
4144:base/os/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:base/os/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:base/os/FreeRTOS/Source/tasks.c **** 	}
4147:base/os/FreeRTOS/Source/tasks.c **** 
4148:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:base/os/FreeRTOS/Source/tasks.c **** 
4151:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:base/os/FreeRTOS/Source/tasks.c **** 
4153:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:base/os/FreeRTOS/Source/tasks.c **** 	{
4155:base/os/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:base/os/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:base/os/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:base/os/FreeRTOS/Source/tasks.c **** 
4159:base/os/FreeRTOS/Source/tasks.c **** 		/*
4160:base/os/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:base/os/FreeRTOS/Source/tasks.c **** 		 *
4162:base/os/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:base/os/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:base/os/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:base/os/FreeRTOS/Source/tasks.c **** 		 *
4166:base/os/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:base/os/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:base/os/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:base/os/FreeRTOS/Source/tasks.c **** 		 *
4170:base/os/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:base/os/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:base/os/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:base/os/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:base/os/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:base/os/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:base/os/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
ARM GAS  /tmp/cchwbchh.s 			page 96


4177:base/os/FreeRTOS/Source/tasks.c **** 		 *
4178:base/os/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:base/os/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:base/os/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:base/os/FreeRTOS/Source/tasks.c **** 		 */
4182:base/os/FreeRTOS/Source/tasks.c **** 
4183:base/os/FreeRTOS/Source/tasks.c **** 
4184:base/os/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:base/os/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:base/os/FreeRTOS/Source/tasks.c **** 
4187:base/os/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:base/os/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:base/os/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:base/os/FreeRTOS/Source/tasks.c **** 
4191:base/os/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:base/os/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:base/os/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:base/os/FreeRTOS/Source/tasks.c **** 
4196:base/os/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:base/os/FreeRTOS/Source/tasks.c **** 		{
4198:base/os/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:base/os/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:base/os/FreeRTOS/Source/tasks.c **** 
4201:base/os/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:base/os/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:base/os/FreeRTOS/Source/tasks.c **** 			{
4204:base/os/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:base/os/FreeRTOS/Source/tasks.c **** 				{
4206:base/os/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:base/os/FreeRTOS/Source/tasks.c **** 										break;
4208:base/os/FreeRTOS/Source/tasks.c **** 
4209:base/os/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:base/os/FreeRTOS/Source/tasks.c **** 										break;
4211:base/os/FreeRTOS/Source/tasks.c **** 
4212:base/os/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:base/os/FreeRTOS/Source/tasks.c **** 										break;
4214:base/os/FreeRTOS/Source/tasks.c **** 
4215:base/os/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:base/os/FreeRTOS/Source/tasks.c **** 										break;
4217:base/os/FreeRTOS/Source/tasks.c **** 
4218:base/os/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:base/os/FreeRTOS/Source/tasks.c **** 										break;
4220:base/os/FreeRTOS/Source/tasks.c **** 
4221:base/os/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:base/os/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:base/os/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:base/os/FreeRTOS/Source/tasks.c **** 										break;
4225:base/os/FreeRTOS/Source/tasks.c **** 				}
4226:base/os/FreeRTOS/Source/tasks.c **** 
4227:base/os/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:base/os/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:base/os/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:base/os/FreeRTOS/Source/tasks.c **** 
4231:base/os/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:base/os/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:base/os/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
ARM GAS  /tmp/cchwbchh.s 			page 97


4234:base/os/FreeRTOS/Source/tasks.c **** 			}
4235:base/os/FreeRTOS/Source/tasks.c **** 
4236:base/os/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:base/os/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:base/os/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:base/os/FreeRTOS/Source/tasks.c **** 		}
4240:base/os/FreeRTOS/Source/tasks.c **** 		else
4241:base/os/FreeRTOS/Source/tasks.c **** 		{
4242:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:base/os/FreeRTOS/Source/tasks.c **** 		}
4244:base/os/FreeRTOS/Source/tasks.c **** 	}
4245:base/os/FreeRTOS/Source/tasks.c **** 
4246:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:base/os/FreeRTOS/Source/tasks.c **** 
4249:base/os/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:base/os/FreeRTOS/Source/tasks.c **** 
4251:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:base/os/FreeRTOS/Source/tasks.c **** 	{
4253:base/os/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:base/os/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:base/os/FreeRTOS/Source/tasks.c **** 
4257:base/os/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:base/os/FreeRTOS/Source/tasks.c **** 		{
4259:base/os/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:base/os/FreeRTOS/Source/tasks.c **** 		}
4261:base/os/FreeRTOS/Source/tasks.c **** 		#endif
4262:base/os/FreeRTOS/Source/tasks.c **** 
4263:base/os/FreeRTOS/Source/tasks.c **** 		/*
4264:base/os/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:base/os/FreeRTOS/Source/tasks.c **** 		 *
4266:base/os/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:base/os/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:base/os/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:base/os/FreeRTOS/Source/tasks.c **** 		 *
4270:base/os/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:base/os/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:base/os/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:base/os/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:base/os/FreeRTOS/Source/tasks.c **** 		 *
4275:base/os/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:base/os/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:base/os/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:base/os/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:base/os/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:base/os/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:base/os/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:base/os/FreeRTOS/Source/tasks.c **** 		 *
4283:base/os/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:base/os/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:base/os/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:base/os/FreeRTOS/Source/tasks.c **** 		 */
4287:base/os/FreeRTOS/Source/tasks.c **** 
4288:base/os/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:base/os/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 98


4291:base/os/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:base/os/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:base/os/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:base/os/FreeRTOS/Source/tasks.c **** 
4295:base/os/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:base/os/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:base/os/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:base/os/FreeRTOS/Source/tasks.c **** 
4300:base/os/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:base/os/FreeRTOS/Source/tasks.c **** 		{
4302:base/os/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:base/os/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:base/os/FreeRTOS/Source/tasks.c **** 
4305:base/os/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:base/os/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:base/os/FreeRTOS/Source/tasks.c **** 
4308:base/os/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:base/os/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:base/os/FreeRTOS/Source/tasks.c **** 			{
4311:base/os/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:base/os/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:base/os/FreeRTOS/Source/tasks.c **** 				{
4314:base/os/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:base/os/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:base/os/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:base/os/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:base/os/FreeRTOS/Source/tasks.c **** 
4319:base/os/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:base/os/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:base/os/FreeRTOS/Source/tasks.c **** 					easily. */
4322:base/os/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:base/os/FreeRTOS/Source/tasks.c **** 
4324:base/os/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:base/os/FreeRTOS/Source/tasks.c **** 					{
4326:base/os/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:base/os/FreeRTOS/Source/tasks.c **** 						{
4328:base/os/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:base/os/FreeRTOS/Source/tasks.c **** 						}
4330:base/os/FreeRTOS/Source/tasks.c **** 						#else
4331:base/os/FreeRTOS/Source/tasks.c **** 						{
4332:base/os/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:base/os/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:base/os/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:base/os/FreeRTOS/Source/tasks.c **** 						}
4336:base/os/FreeRTOS/Source/tasks.c **** 						#endif
4337:base/os/FreeRTOS/Source/tasks.c **** 					}
4338:base/os/FreeRTOS/Source/tasks.c **** 					else
4339:base/os/FreeRTOS/Source/tasks.c **** 					{
4340:base/os/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:base/os/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:base/os/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:base/os/FreeRTOS/Source/tasks.c **** 						{
4344:base/os/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:base/os/FreeRTOS/Source/tasks.c **** 						}
4346:base/os/FreeRTOS/Source/tasks.c **** 						#else
4347:base/os/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/cchwbchh.s 			page 99


4348:base/os/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:base/os/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:base/os/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:base/os/FreeRTOS/Source/tasks.c **** 						}
4352:base/os/FreeRTOS/Source/tasks.c **** 						#endif
4353:base/os/FreeRTOS/Source/tasks.c **** 					}
4354:base/os/FreeRTOS/Source/tasks.c **** 
4355:base/os/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:base/os/FreeRTOS/Source/tasks.c **** 				}
4357:base/os/FreeRTOS/Source/tasks.c **** 			}
4358:base/os/FreeRTOS/Source/tasks.c **** 			else
4359:base/os/FreeRTOS/Source/tasks.c **** 			{
4360:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:base/os/FreeRTOS/Source/tasks.c **** 			}
4362:base/os/FreeRTOS/Source/tasks.c **** 
4363:base/os/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:base/os/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:base/os/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:base/os/FreeRTOS/Source/tasks.c **** 		}
4367:base/os/FreeRTOS/Source/tasks.c **** 		else
4368:base/os/FreeRTOS/Source/tasks.c **** 		{
4369:base/os/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:base/os/FreeRTOS/Source/tasks.c **** 		}
4371:base/os/FreeRTOS/Source/tasks.c **** 	}
4372:base/os/FreeRTOS/Source/tasks.c **** 
4373:base/os/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:base/os/FreeRTOS/Source/tasks.c **** 
4376:base/os/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:base/os/FreeRTOS/Source/tasks.c **** {
4378:base/os/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:base/os/FreeRTOS/Source/tasks.c **** 
4380:base/os/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:base/os/FreeRTOS/Source/tasks.c **** 
4382:base/os/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:base/os/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:base/os/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:base/os/FreeRTOS/Source/tasks.c **** 
4386:base/os/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:base/os/FreeRTOS/Source/tasks.c **** }
4388:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:base/os/FreeRTOS/Source/tasks.c **** 
4390:base/os/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:base/os/FreeRTOS/Source/tasks.c **** 
4392:base/os/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:base/os/FreeRTOS/Source/tasks.c **** 	{
4394:base/os/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:base/os/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:base/os/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:base/os/FreeRTOS/Source/tasks.c **** 		{
4398:base/os/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:base/os/FreeRTOS/Source/tasks.c **** 		}
4400:base/os/FreeRTOS/Source/tasks.c **** 
4401:base/os/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:base/os/FreeRTOS/Source/tasks.c **** 	}
4403:base/os/FreeRTOS/Source/tasks.c **** 
4404:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/cchwbchh.s 			page 100


4405:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:base/os/FreeRTOS/Source/tasks.c **** 
4407:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:base/os/FreeRTOS/Source/tasks.c **** 
4409:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:base/os/FreeRTOS/Source/tasks.c **** 	{
4411:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:base/os/FreeRTOS/Source/tasks.c **** 
4413:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:base/os/FreeRTOS/Source/tasks.c **** 		{
4415:base/os/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:base/os/FreeRTOS/Source/tasks.c **** 			{
4418:base/os/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:base/os/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:base/os/FreeRTOS/Source/tasks.c **** 
4421:base/os/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:base/os/FreeRTOS/Source/tasks.c **** 				{
4423:base/os/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:base/os/FreeRTOS/Source/tasks.c **** 
4426:base/os/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:base/os/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:base/os/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:base/os/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:base/os/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:base/os/FreeRTOS/Source/tasks.c **** 				}
4432:base/os/FreeRTOS/Source/tasks.c **** 				else
4433:base/os/FreeRTOS/Source/tasks.c **** 				{
4434:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:base/os/FreeRTOS/Source/tasks.c **** 				}
4436:base/os/FreeRTOS/Source/tasks.c **** 			}
4437:base/os/FreeRTOS/Source/tasks.c **** 			else
4438:base/os/FreeRTOS/Source/tasks.c **** 			{
4439:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:base/os/FreeRTOS/Source/tasks.c **** 			}
4441:base/os/FreeRTOS/Source/tasks.c **** 		}
4442:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:base/os/FreeRTOS/Source/tasks.c **** 
4444:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:base/os/FreeRTOS/Source/tasks.c **** 		{
4446:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:base/os/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:base/os/FreeRTOS/Source/tasks.c **** 
4449:base/os/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:base/os/FreeRTOS/Source/tasks.c **** 			{
4451:base/os/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:base/os/FreeRTOS/Source/tasks.c **** 				{
4453:base/os/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:base/os/FreeRTOS/Source/tasks.c **** 				}
4455:base/os/FreeRTOS/Source/tasks.c **** 				else
4456:base/os/FreeRTOS/Source/tasks.c **** 				{
4457:base/os/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:base/os/FreeRTOS/Source/tasks.c **** 				}
4459:base/os/FreeRTOS/Source/tasks.c **** 			}
4460:base/os/FreeRTOS/Source/tasks.c **** 			else
4461:base/os/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cchwbchh.s 			page 101


4462:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:base/os/FreeRTOS/Source/tasks.c **** 			}
4464:base/os/FreeRTOS/Source/tasks.c **** 
4465:base/os/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:base/os/FreeRTOS/Source/tasks.c **** 		}
4467:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:base/os/FreeRTOS/Source/tasks.c **** 
4469:base/os/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:base/os/FreeRTOS/Source/tasks.c **** 	}
4471:base/os/FreeRTOS/Source/tasks.c **** 
4472:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:base/os/FreeRTOS/Source/tasks.c **** 
4475:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:base/os/FreeRTOS/Source/tasks.c **** 
4477:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:base/os/FreeRTOS/Source/tasks.c **** 	{
4479:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:base/os/FreeRTOS/Source/tasks.c **** 
4481:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:base/os/FreeRTOS/Source/tasks.c **** 		{
4483:base/os/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:base/os/FreeRTOS/Source/tasks.c **** 			{
4486:base/os/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:base/os/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:base/os/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:base/os/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:base/os/FreeRTOS/Source/tasks.c **** 
4491:base/os/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:base/os/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:base/os/FreeRTOS/Source/tasks.c **** 
4494:base/os/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:base/os/FreeRTOS/Source/tasks.c **** 				{
4496:base/os/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:base/os/FreeRTOS/Source/tasks.c **** 
4499:base/os/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:base/os/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:base/os/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:base/os/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:base/os/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:base/os/FreeRTOS/Source/tasks.c **** 				}
4505:base/os/FreeRTOS/Source/tasks.c **** 				else
4506:base/os/FreeRTOS/Source/tasks.c **** 				{
4507:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:base/os/FreeRTOS/Source/tasks.c **** 				}
4509:base/os/FreeRTOS/Source/tasks.c **** 			}
4510:base/os/FreeRTOS/Source/tasks.c **** 			else
4511:base/os/FreeRTOS/Source/tasks.c **** 			{
4512:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:base/os/FreeRTOS/Source/tasks.c **** 			}
4514:base/os/FreeRTOS/Source/tasks.c **** 		}
4515:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:base/os/FreeRTOS/Source/tasks.c **** 
4517:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:base/os/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cchwbchh.s 			page 102


4519:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:base/os/FreeRTOS/Source/tasks.c **** 
4521:base/os/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:base/os/FreeRTOS/Source/tasks.c **** 			{
4523:base/os/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:base/os/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:base/os/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:base/os/FreeRTOS/Source/tasks.c **** 			}
4527:base/os/FreeRTOS/Source/tasks.c **** 
4528:base/os/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:base/os/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:base/os/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:base/os/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:base/os/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:base/os/FreeRTOS/Source/tasks.c **** 			{
4534:base/os/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:base/os/FreeRTOS/Source/tasks.c **** 			}
4537:base/os/FreeRTOS/Source/tasks.c **** 			else
4538:base/os/FreeRTOS/Source/tasks.c **** 			{
4539:base/os/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:base/os/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:base/os/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:base/os/FreeRTOS/Source/tasks.c **** 			}
4544:base/os/FreeRTOS/Source/tasks.c **** 
4545:base/os/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:base/os/FreeRTOS/Source/tasks.c **** 		}
4547:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:base/os/FreeRTOS/Source/tasks.c **** 
4549:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:base/os/FreeRTOS/Source/tasks.c **** 	}
4551:base/os/FreeRTOS/Source/tasks.c **** 
4552:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:base/os/FreeRTOS/Source/tasks.c **** 
4555:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:base/os/FreeRTOS/Source/tasks.c **** 
4557:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:base/os/FreeRTOS/Source/tasks.c **** 	{
4559:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:base/os/FreeRTOS/Source/tasks.c **** 
4563:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:base/os/FreeRTOS/Source/tasks.c **** 
4566:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:base/os/FreeRTOS/Source/tasks.c **** 		{
4568:base/os/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:base/os/FreeRTOS/Source/tasks.c **** 			{
4570:base/os/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:base/os/FreeRTOS/Source/tasks.c **** 			}
4572:base/os/FreeRTOS/Source/tasks.c **** 
4573:base/os/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:base/os/FreeRTOS/Source/tasks.c **** 
4575:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/cchwbchh.s 			page 103


4576:base/os/FreeRTOS/Source/tasks.c **** 
4577:base/os/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:base/os/FreeRTOS/Source/tasks.c **** 			{
4579:base/os/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:base/os/FreeRTOS/Source/tasks.c **** 					break;
4582:base/os/FreeRTOS/Source/tasks.c **** 
4583:base/os/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:base/os/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:base/os/FreeRTOS/Source/tasks.c **** 					break;
4586:base/os/FreeRTOS/Source/tasks.c **** 
4587:base/os/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:base/os/FreeRTOS/Source/tasks.c **** 					break;
4590:base/os/FreeRTOS/Source/tasks.c **** 
4591:base/os/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:base/os/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:base/os/FreeRTOS/Source/tasks.c **** 					{
4594:base/os/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:base/os/FreeRTOS/Source/tasks.c **** 					}
4596:base/os/FreeRTOS/Source/tasks.c **** 					else
4597:base/os/FreeRTOS/Source/tasks.c **** 					{
4598:base/os/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:base/os/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:base/os/FreeRTOS/Source/tasks.c **** 					}
4601:base/os/FreeRTOS/Source/tasks.c **** 					break;
4602:base/os/FreeRTOS/Source/tasks.c **** 
4603:base/os/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:base/os/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:base/os/FreeRTOS/Source/tasks.c **** 					updated. */
4606:base/os/FreeRTOS/Source/tasks.c **** 					break;
4607:base/os/FreeRTOS/Source/tasks.c **** 			}
4608:base/os/FreeRTOS/Source/tasks.c **** 
4609:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:base/os/FreeRTOS/Source/tasks.c **** 
4611:base/os/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:base/os/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:base/os/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:base/os/FreeRTOS/Source/tasks.c **** 			{
4615:base/os/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:base/os/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:base/os/FreeRTOS/Source/tasks.c **** 
4618:base/os/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:base/os/FreeRTOS/Source/tasks.c **** 
4621:base/os/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:base/os/FreeRTOS/Source/tasks.c **** 				{
4623:base/os/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:base/os/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:base/os/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:base/os/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:base/os/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:base/os/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:base/os/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:base/os/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:base/os/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:base/os/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
ARM GAS  /tmp/cchwbchh.s 			page 104


4633:base/os/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:base/os/FreeRTOS/Source/tasks.c **** 				}
4635:base/os/FreeRTOS/Source/tasks.c **** 				#endif
4636:base/os/FreeRTOS/Source/tasks.c **** 
4637:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:base/os/FreeRTOS/Source/tasks.c **** 				{
4639:base/os/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:base/os/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:base/os/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:base/os/FreeRTOS/Source/tasks.c **** 				}
4643:base/os/FreeRTOS/Source/tasks.c **** 				else
4644:base/os/FreeRTOS/Source/tasks.c **** 				{
4645:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:base/os/FreeRTOS/Source/tasks.c **** 				}
4647:base/os/FreeRTOS/Source/tasks.c **** 			}
4648:base/os/FreeRTOS/Source/tasks.c **** 			else
4649:base/os/FreeRTOS/Source/tasks.c **** 			{
4650:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:base/os/FreeRTOS/Source/tasks.c **** 			}
4652:base/os/FreeRTOS/Source/tasks.c **** 		}
4653:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:base/os/FreeRTOS/Source/tasks.c **** 
4655:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:base/os/FreeRTOS/Source/tasks.c **** 	}
4657:base/os/FreeRTOS/Source/tasks.c **** 
4658:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:base/os/FreeRTOS/Source/tasks.c **** 
4661:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:base/os/FreeRTOS/Source/tasks.c **** 
4663:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:base/os/FreeRTOS/Source/tasks.c **** 	{
4665:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:base/os/FreeRTOS/Source/tasks.c **** 
4670:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:base/os/FreeRTOS/Source/tasks.c **** 
4672:base/os/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:base/os/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:base/os/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:base/os/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:base/os/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:base/os/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:base/os/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:base/os/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:base/os/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:base/os/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:base/os/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:base/os/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:base/os/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:base/os/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:base/os/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 105


4690:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:base/os/FreeRTOS/Source/tasks.c **** 
4692:base/os/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:base/os/FreeRTOS/Source/tasks.c **** 		{
4694:base/os/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:base/os/FreeRTOS/Source/tasks.c **** 			{
4696:base/os/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:base/os/FreeRTOS/Source/tasks.c **** 			}
4698:base/os/FreeRTOS/Source/tasks.c **** 
4699:base/os/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:base/os/FreeRTOS/Source/tasks.c **** 
4702:base/os/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:base/os/FreeRTOS/Source/tasks.c **** 			{
4704:base/os/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:base/os/FreeRTOS/Source/tasks.c **** 					break;
4707:base/os/FreeRTOS/Source/tasks.c **** 
4708:base/os/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:base/os/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:base/os/FreeRTOS/Source/tasks.c **** 					break;
4711:base/os/FreeRTOS/Source/tasks.c **** 
4712:base/os/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:base/os/FreeRTOS/Source/tasks.c **** 					break;
4715:base/os/FreeRTOS/Source/tasks.c **** 
4716:base/os/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:base/os/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:base/os/FreeRTOS/Source/tasks.c **** 					{
4719:base/os/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:base/os/FreeRTOS/Source/tasks.c **** 					}
4721:base/os/FreeRTOS/Source/tasks.c **** 					else
4722:base/os/FreeRTOS/Source/tasks.c **** 					{
4723:base/os/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:base/os/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:base/os/FreeRTOS/Source/tasks.c **** 					}
4726:base/os/FreeRTOS/Source/tasks.c **** 					break;
4727:base/os/FreeRTOS/Source/tasks.c **** 
4728:base/os/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:base/os/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:base/os/FreeRTOS/Source/tasks.c **** 					updated. */
4731:base/os/FreeRTOS/Source/tasks.c **** 					break;
4732:base/os/FreeRTOS/Source/tasks.c **** 			}
4733:base/os/FreeRTOS/Source/tasks.c **** 
4734:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:base/os/FreeRTOS/Source/tasks.c **** 
4736:base/os/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:base/os/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:base/os/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:base/os/FreeRTOS/Source/tasks.c **** 			{
4740:base/os/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:base/os/FreeRTOS/Source/tasks.c **** 
4743:base/os/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:base/os/FreeRTOS/Source/tasks.c **** 				{
4745:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cchwbchh.s 			page 106


4747:base/os/FreeRTOS/Source/tasks.c **** 				}
4748:base/os/FreeRTOS/Source/tasks.c **** 				else
4749:base/os/FreeRTOS/Source/tasks.c **** 				{
4750:base/os/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:base/os/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:base/os/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:base/os/FreeRTOS/Source/tasks.c **** 				}
4754:base/os/FreeRTOS/Source/tasks.c **** 
4755:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:base/os/FreeRTOS/Source/tasks.c **** 				{
4757:base/os/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:base/os/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:base/os/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:base/os/FreeRTOS/Source/tasks.c **** 					{
4761:base/os/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:base/os/FreeRTOS/Source/tasks.c **** 					}
4763:base/os/FreeRTOS/Source/tasks.c **** 					else
4764:base/os/FreeRTOS/Source/tasks.c **** 					{
4765:base/os/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:base/os/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:base/os/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:base/os/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:base/os/FreeRTOS/Source/tasks.c **** 					}
4770:base/os/FreeRTOS/Source/tasks.c **** 				}
4771:base/os/FreeRTOS/Source/tasks.c **** 				else
4772:base/os/FreeRTOS/Source/tasks.c **** 				{
4773:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:base/os/FreeRTOS/Source/tasks.c **** 				}
4775:base/os/FreeRTOS/Source/tasks.c **** 			}
4776:base/os/FreeRTOS/Source/tasks.c **** 		}
4777:base/os/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:base/os/FreeRTOS/Source/tasks.c **** 
4779:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:base/os/FreeRTOS/Source/tasks.c **** 	}
4781:base/os/FreeRTOS/Source/tasks.c **** 
4782:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:base/os/FreeRTOS/Source/tasks.c **** 
4785:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:base/os/FreeRTOS/Source/tasks.c **** 
4787:base/os/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:base/os/FreeRTOS/Source/tasks.c **** 	{
4789:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:base/os/FreeRTOS/Source/tasks.c **** 
4793:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:base/os/FreeRTOS/Source/tasks.c **** 
4795:base/os/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:base/os/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:base/os/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:base/os/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:base/os/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:base/os/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:base/os/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:base/os/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  /tmp/cchwbchh.s 			page 107


4804:base/os/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:base/os/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:base/os/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:base/os/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:base/os/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:base/os/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:base/os/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:base/os/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:base/os/FreeRTOS/Source/tasks.c **** 
4813:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:base/os/FreeRTOS/Source/tasks.c **** 
4815:base/os/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:base/os/FreeRTOS/Source/tasks.c **** 		{
4817:base/os/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:base/os/FreeRTOS/Source/tasks.c **** 
4820:base/os/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:base/os/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:base/os/FreeRTOS/Source/tasks.c **** 
4824:base/os/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:base/os/FreeRTOS/Source/tasks.c **** 
4826:base/os/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:base/os/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:base/os/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:base/os/FreeRTOS/Source/tasks.c **** 			{
4830:base/os/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:base/os/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:base/os/FreeRTOS/Source/tasks.c **** 
4833:base/os/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:base/os/FreeRTOS/Source/tasks.c **** 				{
4835:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:base/os/FreeRTOS/Source/tasks.c **** 				}
4838:base/os/FreeRTOS/Source/tasks.c **** 				else
4839:base/os/FreeRTOS/Source/tasks.c **** 				{
4840:base/os/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:base/os/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:base/os/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:base/os/FreeRTOS/Source/tasks.c **** 				}
4844:base/os/FreeRTOS/Source/tasks.c **** 
4845:base/os/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:base/os/FreeRTOS/Source/tasks.c **** 				{
4847:base/os/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:base/os/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:base/os/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:base/os/FreeRTOS/Source/tasks.c **** 					{
4851:base/os/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:base/os/FreeRTOS/Source/tasks.c **** 					}
4853:base/os/FreeRTOS/Source/tasks.c **** 					else
4854:base/os/FreeRTOS/Source/tasks.c **** 					{
4855:base/os/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:base/os/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:base/os/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:base/os/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:base/os/FreeRTOS/Source/tasks.c **** 					}
4860:base/os/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cchwbchh.s 			page 108


4861:base/os/FreeRTOS/Source/tasks.c **** 				else
4862:base/os/FreeRTOS/Source/tasks.c **** 				{
4863:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:base/os/FreeRTOS/Source/tasks.c **** 				}
4865:base/os/FreeRTOS/Source/tasks.c **** 			}
4866:base/os/FreeRTOS/Source/tasks.c **** 		}
4867:base/os/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:base/os/FreeRTOS/Source/tasks.c **** 	}
4869:base/os/FreeRTOS/Source/tasks.c **** 
4870:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:base/os/FreeRTOS/Source/tasks.c **** 
4872:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:base/os/FreeRTOS/Source/tasks.c **** 
4874:base/os/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:base/os/FreeRTOS/Source/tasks.c **** 
4876:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:base/os/FreeRTOS/Source/tasks.c **** 	{
4878:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:base/os/FreeRTOS/Source/tasks.c **** 
4881:base/os/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:base/os/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:base/os/FreeRTOS/Source/tasks.c **** 
4885:base/os/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:base/os/FreeRTOS/Source/tasks.c **** 		{
4887:base/os/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:base/os/FreeRTOS/Source/tasks.c **** 			{
4889:base/os/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:base/os/FreeRTOS/Source/tasks.c **** 			}
4892:base/os/FreeRTOS/Source/tasks.c **** 			else
4893:base/os/FreeRTOS/Source/tasks.c **** 			{
4894:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:base/os/FreeRTOS/Source/tasks.c **** 			}
4896:base/os/FreeRTOS/Source/tasks.c **** 		}
4897:base/os/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:base/os/FreeRTOS/Source/tasks.c **** 
4899:base/os/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:base/os/FreeRTOS/Source/tasks.c **** 	}
4901:base/os/FreeRTOS/Source/tasks.c **** 
4902:base/os/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:base/os/FreeRTOS/Source/tasks.c **** 
4905:base/os/FreeRTOS/Source/tasks.c **** 
4906:base/os/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:base/os/FreeRTOS/Source/tasks.c **** {
 869              		.loc 1 4907 1 view -0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		.loc 1 4907 1 is_stmt 0 view .LVU246
 874 0000 70B5     		push	{r4, r5, r6, lr}
 875              	.LCFI7:
 876              		.cfi_def_cfa_offset 16
 877              		.cfi_offset 4, -16
 878              		.cfi_offset 5, -12
ARM GAS  /tmp/cchwbchh.s 			page 109


 879              		.cfi_offset 6, -8
 880              		.cfi_offset 14, -4
 881 0002 0446     		mov	r4, r0
 882 0004 0D46     		mov	r5, r1
4908:base/os/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 883              		.loc 1 4908 1 is_stmt 1 view .LVU247
4909:base/os/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 884              		.loc 1 4909 1 view .LVU248
 885              		.loc 1 4909 18 is_stmt 0 view .LVU249
 886 0006 174B     		ldr	r3, .L73
 887 0008 1E68     		ldr	r6, [r3]
 888              	.LVL65:
4910:base/os/FreeRTOS/Source/tasks.c **** 
4911:base/os/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:base/os/FreeRTOS/Source/tasks.c **** 	{
4913:base/os/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:base/os/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:base/os/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:base/os/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:base/os/FreeRTOS/Source/tasks.c **** 	}
4918:base/os/FreeRTOS/Source/tasks.c **** 	#endif
4919:base/os/FreeRTOS/Source/tasks.c **** 
4920:base/os/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:base/os/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:base/os/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 889              		.loc 1 4922 2 is_stmt 1 view .LVU250
 890              		.loc 1 4922 35 is_stmt 0 view .LVU251
 891 000a 174B     		ldr	r3, .L73+4
 892 000c 1868     		ldr	r0, [r3]
 893              	.LVL66:
 894              		.loc 1 4922 6 view .LVU252
 895 000e 0430     		adds	r0, r0, #4
 896 0010 FFF7FEFF 		bl	uxListRemove
 897              	.LVL67:
4923:base/os/FreeRTOS/Source/tasks.c **** 	{
4924:base/os/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:base/os/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:base/os/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:base/os/FreeRTOS/Source/tasks.c **** 	}
4928:base/os/FreeRTOS/Source/tasks.c **** 	else
4929:base/os/FreeRTOS/Source/tasks.c **** 	{
4930:base/os/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 898              		.loc 1 4930 27 is_stmt 1 view .LVU253
4931:base/os/FreeRTOS/Source/tasks.c **** 	}
4932:base/os/FreeRTOS/Source/tasks.c **** 
4933:base/os/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:base/os/FreeRTOS/Source/tasks.c **** 	{
4935:base/os/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 899              		.loc 1 4935 3 view .LVU254
 900              		.loc 1 4935 5 is_stmt 0 view .LVU255
 901 0014 B4F1FF3F 		cmp	r4, #-1
 902 0018 0DD0     		beq	.L72
 903              	.L68:
4936:base/os/FreeRTOS/Source/tasks.c **** 		{
4937:base/os/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:base/os/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:base/os/FreeRTOS/Source/tasks.c **** 			indefinitely. */
ARM GAS  /tmp/cchwbchh.s 			page 110


4940:base/os/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:base/os/FreeRTOS/Source/tasks.c **** 		}
4942:base/os/FreeRTOS/Source/tasks.c **** 		else
4943:base/os/FreeRTOS/Source/tasks.c **** 		{
4944:base/os/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:base/os/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:base/os/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:base/os/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 904              		.loc 1 4947 4 is_stmt 1 view .LVU256
 905              		.loc 1 4947 16 is_stmt 0 view .LVU257
 906 001a 3444     		add	r4, r4, r6
 907              	.LVL68:
4948:base/os/FreeRTOS/Source/tasks.c **** 
4949:base/os/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:base/os/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 908              		.loc 1 4950 4 is_stmt 1 view .LVU258
 909 001c 124B     		ldr	r3, .L73+4
 910 001e 1B68     		ldr	r3, [r3]
 911 0020 5C60     		str	r4, [r3, #4]
4951:base/os/FreeRTOS/Source/tasks.c **** 
4952:base/os/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 912              		.loc 1 4952 4 view .LVU259
 913              		.loc 1 4952 6 is_stmt 0 view .LVU260
 914 0022 A642     		cmp	r6, r4
 915 0024 10D9     		bls	.L70
4953:base/os/FreeRTOS/Source/tasks.c **** 			{
4954:base/os/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:base/os/FreeRTOS/Source/tasks.c **** 				list. */
4956:base/os/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 916              		.loc 1 4956 5 is_stmt 1 view .LVU261
 917 0026 114B     		ldr	r3, .L73+8
 918 0028 1868     		ldr	r0, [r3]
 919              		.loc 1 4956 60 is_stmt 0 view .LVU262
 920 002a 0F4B     		ldr	r3, .L73+4
 921 002c 1968     		ldr	r1, [r3]
 922              		.loc 1 4956 5 view .LVU263
 923 002e 0431     		adds	r1, r1, #4
 924 0030 FFF7FEFF 		bl	vListInsert
 925              	.LVL69:
 926              	.L67:
4957:base/os/FreeRTOS/Source/tasks.c **** 			}
4958:base/os/FreeRTOS/Source/tasks.c **** 			else
4959:base/os/FreeRTOS/Source/tasks.c **** 			{
4960:base/os/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:base/os/FreeRTOS/Source/tasks.c **** 				is used. */
4962:base/os/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4963:base/os/FreeRTOS/Source/tasks.c **** 
4964:base/os/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:base/os/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:base/os/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:base/os/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4968:base/os/FreeRTOS/Source/tasks.c **** 				{
4969:base/os/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4970:base/os/FreeRTOS/Source/tasks.c **** 				}
4971:base/os/FreeRTOS/Source/tasks.c **** 				else
4972:base/os/FreeRTOS/Source/tasks.c **** 				{
4973:base/os/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cchwbchh.s 			page 111


4974:base/os/FreeRTOS/Source/tasks.c **** 				}
4975:base/os/FreeRTOS/Source/tasks.c **** 			}
4976:base/os/FreeRTOS/Source/tasks.c **** 		}
4977:base/os/FreeRTOS/Source/tasks.c **** 	}
4978:base/os/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4979:base/os/FreeRTOS/Source/tasks.c **** 	{
4980:base/os/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4981:base/os/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4982:base/os/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4983:base/os/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4984:base/os/FreeRTOS/Source/tasks.c **** 
4985:base/os/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4986:base/os/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4987:base/os/FreeRTOS/Source/tasks.c **** 
4988:base/os/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4989:base/os/FreeRTOS/Source/tasks.c **** 		{
4990:base/os/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4991:base/os/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4992:base/os/FreeRTOS/Source/tasks.c **** 		}
4993:base/os/FreeRTOS/Source/tasks.c **** 		else
4994:base/os/FreeRTOS/Source/tasks.c **** 		{
4995:base/os/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4996:base/os/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4997:base/os/FreeRTOS/Source/tasks.c **** 
4998:base/os/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4999:base/os/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5000:base/os/FreeRTOS/Source/tasks.c **** 			too. */
5001:base/os/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5002:base/os/FreeRTOS/Source/tasks.c **** 			{
5003:base/os/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5004:base/os/FreeRTOS/Source/tasks.c **** 			}
5005:base/os/FreeRTOS/Source/tasks.c **** 			else
5006:base/os/FreeRTOS/Source/tasks.c **** 			{
5007:base/os/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5008:base/os/FreeRTOS/Source/tasks.c **** 			}
5009:base/os/FreeRTOS/Source/tasks.c **** 		}
5010:base/os/FreeRTOS/Source/tasks.c **** 
5011:base/os/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5012:base/os/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5013:base/os/FreeRTOS/Source/tasks.c **** 	}
5014:base/os/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5015:base/os/FreeRTOS/Source/tasks.c **** }
 927              		.loc 1 5015 1 view .LVU264
 928 0034 70BD     		pop	{r4, r5, r6, pc}
 929              	.LVL70:
 930              	.L72:
4935:base/os/FreeRTOS/Source/tasks.c **** 		{
 931              		.loc 1 4935 41 discriminator 1 view .LVU265
 932 0036 002D     		cmp	r5, #0
 933 0038 EFD0     		beq	.L68
4940:base/os/FreeRTOS/Source/tasks.c **** 		}
 934              		.loc 1 4940 4 is_stmt 1 view .LVU266
4940:base/os/FreeRTOS/Source/tasks.c **** 		}
 935              		.loc 1 4940 56 is_stmt 0 view .LVU267
 936 003a 0B4B     		ldr	r3, .L73+4
 937 003c 1968     		ldr	r1, [r3]
4940:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 112


 938              		.loc 1 4940 4 view .LVU268
 939 003e 0431     		adds	r1, r1, #4
 940 0040 0B48     		ldr	r0, .L73+12
 941 0042 FFF7FEFF 		bl	vListInsertEnd
 942              	.LVL71:
 943 0046 F5E7     		b	.L67
 944              	.LVL72:
 945              	.L70:
4962:base/os/FreeRTOS/Source/tasks.c **** 
 946              		.loc 1 4962 5 is_stmt 1 view .LVU269
 947 0048 0A4B     		ldr	r3, .L73+16
 948 004a 1868     		ldr	r0, [r3]
4962:base/os/FreeRTOS/Source/tasks.c **** 
 949              		.loc 1 4962 52 is_stmt 0 view .LVU270
 950 004c 064B     		ldr	r3, .L73+4
 951 004e 1968     		ldr	r1, [r3]
4962:base/os/FreeRTOS/Source/tasks.c **** 
 952              		.loc 1 4962 5 view .LVU271
 953 0050 0431     		adds	r1, r1, #4
 954 0052 FFF7FEFF 		bl	vListInsert
 955              	.LVL73:
4967:base/os/FreeRTOS/Source/tasks.c **** 				{
 956              		.loc 1 4967 5 is_stmt 1 view .LVU272
4967:base/os/FreeRTOS/Source/tasks.c **** 				{
 957              		.loc 1 4967 21 is_stmt 0 view .LVU273
 958 0056 084B     		ldr	r3, .L73+20
 959 0058 1B68     		ldr	r3, [r3]
4967:base/os/FreeRTOS/Source/tasks.c **** 				{
 960              		.loc 1 4967 7 view .LVU274
 961 005a A342     		cmp	r3, r4
 962 005c EAD9     		bls	.L67
4969:base/os/FreeRTOS/Source/tasks.c **** 				}
 963              		.loc 1 4969 6 is_stmt 1 view .LVU275
4969:base/os/FreeRTOS/Source/tasks.c **** 				}
 964              		.loc 1 4969 27 is_stmt 0 view .LVU276
 965 005e 064B     		ldr	r3, .L73+20
 966 0060 1C60     		str	r4, [r3]
4973:base/os/FreeRTOS/Source/tasks.c **** 				}
 967              		.loc 1 4973 30 is_stmt 1 view .LVU277
 968              		.loc 1 5015 1 is_stmt 0 view .LVU278
 969 0062 E7E7     		b	.L67
 970              	.L74:
 971              		.align	2
 972              	.L73:
 973 0064 00000000 		.word	.LANCHOR15
 974 0068 00000000 		.word	.LANCHOR10
 975 006c 00000000 		.word	.LANCHOR8
 976 0070 00000000 		.word	.LANCHOR0
 977 0074 00000000 		.word	.LANCHOR2
 978 0078 00000000 		.word	.LANCHOR3
 979              		.cfi_endproc
 980              	.LFE63:
 982              		.section	.text.xTaskCreateStatic,"ax",%progbits
 983              		.align	1
 984              		.global	xTaskCreateStatic
 985              		.syntax unified
 986              		.thumb
ARM GAS  /tmp/cchwbchh.s 			page 113


 987              		.thumb_func
 988              		.fpu softvfp
 990              	xTaskCreateStatic:
 991              	.LVL74:
 992              	.LFB4:
 582:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 993              		.loc 1 582 2 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 12, pretend = 0, frame = 8
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 582:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 997              		.loc 1 582 2 is_stmt 0 view .LVU280
 998 0000 30B5     		push	{r4, r5, lr}
 999              	.LCFI8:
 1000              		.cfi_def_cfa_offset 12
 1001              		.cfi_offset 4, -12
 1002              		.cfi_offset 5, -8
 1003              		.cfi_offset 14, -4
 1004 0002 87B0     		sub	sp, sp, #28
 1005              	.LCFI9:
 1006              		.cfi_def_cfa_offset 40
 1007 0004 0B9C     		ldr	r4, [sp, #44]
 583:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 1008              		.loc 1 583 2 is_stmt 1 view .LVU281
 584:base/os/FreeRTOS/Source/tasks.c **** 
 1009              		.loc 1 584 2 view .LVU282
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1010              		.loc 1 586 3 view .LVU283
 1011 0006 7CB1     		cbz	r4, .L83
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1012              		.loc 1 586 41 discriminator 2 view .LVU284
 587:base/os/FreeRTOS/Source/tasks.c **** 
 1013              		.loc 1 587 3 discriminator 2 view .LVU285
 1014 0008 0C9D     		ldr	r5, [sp, #48]
 1015 000a B5B1     		cbz	r5, .L84
 587:base/os/FreeRTOS/Source/tasks.c **** 
 1016              		.loc 1 587 39 discriminator 2 view .LVU286
 1017              	.LBB119:
 594:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 1018              		.loc 1 594 4 discriminator 2 view .LVU287
 594:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 1019              		.loc 1 594 20 is_stmt 0 discriminator 2 view .LVU288
 1020 000c 5C25     		movs	r5, #92
 1021 000e 0495     		str	r5, [sp, #16]
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1022              		.loc 1 595 4 is_stmt 1 discriminator 2 view .LVU289
 1023 0010 049D     		ldr	r5, [sp, #16]
 1024 0012 5C2D     		cmp	r5, #92
 1025 0014 1AD0     		beq	.L80
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1026              		.loc 1 595 4 view .LVU290
 1027              	.LBB120:
 1028              	.LBI120:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1029              		.loc 2 191 30 view .LVU291
 1030              	.LBB121:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cchwbchh.s 			page 114


 1031              		.loc 2 193 1 view .LVU292
 1032              		.loc 2 195 2 view .LVU293
 1033              		.syntax unified
 1034              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1035 0016 4FF05003 			mov r3, #80												
 1036 001a 83F31188 		msr basepri, r3											
 1037 001e BFF36F8F 		isb														
 1038 0022 BFF34F8F 		dsb														
 1039              	
 1040              	@ 0 "" 2
 1041              	.LVL75:
 1042              		.thumb
 1043              		.syntax unified
 1044              	.L81:
 1045              		.loc 2 195 2 is_stmt 0 view .LVU294
 1046              	.LBE121:
 1047              	.LBE120:
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1048              		.loc 1 595 4 is_stmt 1 discriminator 3 view .LVU295
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1049              		.loc 1 595 4 discriminator 3 view .LVU296
 1050 0026 FEE7     		b	.L81
 1051              	.LVL76:
 1052              	.L83:
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1053              		.loc 1 595 4 is_stmt 0 discriminator 3 view .LVU297
 1054              	.LBE119:
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1055              		.loc 1 586 3 is_stmt 1 view .LVU298
 1056              	.LBB122:
 1057              	.LBI122:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1058              		.loc 2 191 30 view .LVU299
 1059              	.LBB123:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1060              		.loc 2 193 1 view .LVU300
 1061              		.loc 2 195 2 view .LVU301
 1062              		.syntax unified
 1063              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1064 0028 4FF05003 			mov r3, #80												
 1065 002c 83F31188 		msr basepri, r3											
 1066 0030 BFF36F8F 		isb														
 1067 0034 BFF34F8F 		dsb														
 1068              	
 1069              	@ 0 "" 2
 1070              	.LVL77:
 1071              		.thumb
 1072              		.syntax unified
 1073              	.L77:
 1074              		.loc 2 195 2 is_stmt 0 view .LVU302
 1075              	.LBE123:
 1076              	.LBE122:
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1077              		.loc 1 586 3 is_stmt 1 discriminator 1 view .LVU303
 586:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1078              		.loc 1 586 3 discriminator 1 view .LVU304
 1079 0038 FEE7     		b	.L77
ARM GAS  /tmp/cchwbchh.s 			page 115


 1080              	.LVL78:
 1081              	.L84:
 587:base/os/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 587 3 view .LVU305
 1083              	.LBB124:
 1084              	.LBI124:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1085              		.loc 2 191 30 view .LVU306
 1086              	.LBB125:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1087              		.loc 2 193 1 view .LVU307
 1088              		.loc 2 195 2 view .LVU308
 1089              		.syntax unified
 1090              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1091 003a 4FF05003 			mov r3, #80												
 1092 003e 83F31188 		msr basepri, r3											
 1093 0042 BFF36F8F 		isb														
 1094 0046 BFF34F8F 		dsb														
 1095              	
 1096              	@ 0 "" 2
 1097              	.LVL79:
 1098              		.thumb
 1099              		.syntax unified
 1100              	.L79:
 1101              		.loc 2 195 2 is_stmt 0 view .LVU309
 1102              	.LBE125:
 1103              	.LBE124:
 587:base/os/FreeRTOS/Source/tasks.c **** 
 1104              		.loc 1 587 3 is_stmt 1 discriminator 2 view .LVU310
 587:base/os/FreeRTOS/Source/tasks.c **** 
 1105              		.loc 1 587 3 discriminator 2 view .LVU311
 1106 004a FEE7     		b	.L79
 1107              	.LVL80:
 1108              	.L80:
 1109              	.LBB126:
 595:base/os/FreeRTOS/Source/tasks.c **** 		}
 1110              		.loc 1 595 44 view .LVU312
 1111              	.LBE126:
 600:base/os/FreeRTOS/Source/tasks.c **** 		{
 1112              		.loc 1 600 3 view .LVU313
 604:base/os/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 1113              		.loc 1 604 4 view .LVU314
 605:base/os/FreeRTOS/Source/tasks.c **** 
 1114              		.loc 1 605 4 view .LVU315
 605:base/os/FreeRTOS/Source/tasks.c **** 
 1115              		.loc 1 605 22 is_stmt 0 view .LVU316
 1116 004c 0C9D     		ldr	r5, [sp, #48]
 1117 004e 2C63     		str	r4, [r5, #48]
 611:base/os/FreeRTOS/Source/tasks.c **** 			}
 1118              		.loc 1 611 5 is_stmt 1 view .LVU317
 611:base/os/FreeRTOS/Source/tasks.c **** 			}
 1119              		.loc 1 611 37 is_stmt 0 view .LVU318
 1120 0050 0224     		movs	r4, #2
 1121 0052 85F85940 		strb	r4, [r5, #89]
 615:base/os/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1122              		.loc 1 615 4 is_stmt 1 view .LVU319
 1123 0056 0024     		movs	r4, #0
ARM GAS  /tmp/cchwbchh.s 			page 116


 1124 0058 0394     		str	r4, [sp, #12]
 1125 005a 0295     		str	r5, [sp, #8]
 1126 005c 05AC     		add	r4, sp, #20
 1127 005e 0194     		str	r4, [sp, #4]
 1128 0060 0A9C     		ldr	r4, [sp, #40]
 1129 0062 0094     		str	r4, [sp]
 1130 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 1131              	.LVL81:
 616:base/os/FreeRTOS/Source/tasks.c **** 		}
 1132              		.loc 1 616 4 view .LVU320
 1133 0068 0C98     		ldr	r0, [sp, #48]
 1134 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1135              	.LVL82:
 623:base/os/FreeRTOS/Source/tasks.c **** 	}
 1136              		.loc 1 623 3 view .LVU321
 624:base/os/FreeRTOS/Source/tasks.c **** 
 1137              		.loc 1 624 2 is_stmt 0 view .LVU322
 1138 006e 0598     		ldr	r0, [sp, #20]
 1139 0070 07B0     		add	sp, sp, #28
 1140              	.LCFI10:
 1141              		.cfi_def_cfa_offset 12
 1142              		@ sp needed
 1143 0072 30BD     		pop	{r4, r5, pc}
 624:base/os/FreeRTOS/Source/tasks.c **** 
 1144              		.loc 1 624 2 view .LVU323
 1145              		.cfi_endproc
 1146              	.LFE4:
 1148              		.section	.text.xTaskCreate,"ax",%progbits
 1149              		.align	1
 1150              		.global	xTaskCreate
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu softvfp
 1156              	xTaskCreate:
 1157              	.LVL83:
 1158              	.LFB5:
 732:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1159              		.loc 1 732 2 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 8, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 732:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1163              		.loc 1 732 2 is_stmt 0 view .LVU325
 1164 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1165              	.LCFI11:
 1166              		.cfi_def_cfa_offset 28
 1167              		.cfi_offset 4, -28
 1168              		.cfi_offset 5, -24
 1169              		.cfi_offset 6, -20
 1170              		.cfi_offset 7, -16
 1171              		.cfi_offset 8, -12
 1172              		.cfi_offset 9, -8
 1173              		.cfi_offset 14, -4
 1174 0004 85B0     		sub	sp, sp, #20
 1175              	.LCFI12:
 1176              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cchwbchh.s 			page 117


 1177 0006 0746     		mov	r7, r0
 1178 0008 8846     		mov	r8, r1
 1179 000a 1446     		mov	r4, r2
 1180 000c 1E46     		mov	r6, r3
 733:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 1181              		.loc 1 733 2 is_stmt 1 view .LVU326
 734:base/os/FreeRTOS/Source/tasks.c **** 
 1182              		.loc 1 734 2 view .LVU327
 1183              	.LBB127:
 763:base/os/FreeRTOS/Source/tasks.c **** 
 1184              		.loc 1 763 3 view .LVU328
 766:base/os/FreeRTOS/Source/tasks.c **** 
 1185              		.loc 1 766 4 view .LVU329
 766:base/os/FreeRTOS/Source/tasks.c **** 
 1186              		.loc 1 766 32 is_stmt 0 view .LVU330
 1187 000e 9000     		lsls	r0, r2, #2
 1188              	.LVL84:
 766:base/os/FreeRTOS/Source/tasks.c **** 
 1189              		.loc 1 766 32 view .LVU331
 1190 0010 FFF7FEFF 		bl	pvPortMalloc
 1191              	.LVL85:
 768:base/os/FreeRTOS/Source/tasks.c **** 			{
 1192              		.loc 1 768 4 is_stmt 1 view .LVU332
 768:base/os/FreeRTOS/Source/tasks.c **** 			{
 1193              		.loc 1 768 6 is_stmt 0 view .LVU333
 1194 0014 00B3     		cbz	r0, .L89
 1195 0016 8146     		mov	r9, r0
 771:base/os/FreeRTOS/Source/tasks.c **** 
 1196              		.loc 1 771 5 is_stmt 1 view .LVU334
 771:base/os/FreeRTOS/Source/tasks.c **** 
 1197              		.loc 1 771 28 is_stmt 0 view .LVU335
 1198 0018 5C20     		movs	r0, #92
 1199              	.LVL86:
 771:base/os/FreeRTOS/Source/tasks.c **** 
 1200              		.loc 1 771 28 view .LVU336
 1201 001a FFF7FEFF 		bl	pvPortMalloc
 1202              	.LVL87:
 773:base/os/FreeRTOS/Source/tasks.c **** 				{
 1203              		.loc 1 773 5 is_stmt 1 view .LVU337
 773:base/os/FreeRTOS/Source/tasks.c **** 				{
 1204              		.loc 1 773 7 is_stmt 0 view .LVU338
 1205 001e 0546     		mov	r5, r0
 1206 0020 B0B1     		cbz	r0, .L87
 776:base/os/FreeRTOS/Source/tasks.c **** 				}
 1207              		.loc 1 776 6 is_stmt 1 view .LVU339
 776:base/os/FreeRTOS/Source/tasks.c **** 				}
 1208              		.loc 1 776 24 is_stmt 0 view .LVU340
 1209 0022 C0F83090 		str	r9, [r0, #48]
 1210              	.LVL88:
 1211              	.L88:
 776:base/os/FreeRTOS/Source/tasks.c **** 				}
 1212              		.loc 1 776 24 view .LVU341
 1213              	.LBE127:
 792:base/os/FreeRTOS/Source/tasks.c **** 		{
 1214              		.loc 1 792 3 is_stmt 1 view .LVU342
 792:base/os/FreeRTOS/Source/tasks.c **** 		{
 1215              		.loc 1 792 5 is_stmt 0 view .LVU343
ARM GAS  /tmp/cchwbchh.s 			page 118


 1216 0026 E5B1     		cbz	r5, .L90
 798:base/os/FreeRTOS/Source/tasks.c **** 			}
 1217              		.loc 1 798 5 is_stmt 1 view .LVU344
 798:base/os/FreeRTOS/Source/tasks.c **** 			}
 1218              		.loc 1 798 37 is_stmt 0 view .LVU345
 1219 0028 0023     		movs	r3, #0
 1220 002a 85F85930 		strb	r3, [r5, #89]
 802:base/os/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1221              		.loc 1 802 4 is_stmt 1 view .LVU346
 1222 002e 0393     		str	r3, [sp, #12]
 1223 0030 0295     		str	r5, [sp, #8]
 1224 0032 0D9B     		ldr	r3, [sp, #52]
 1225 0034 0193     		str	r3, [sp, #4]
 1226 0036 0C9B     		ldr	r3, [sp, #48]
 1227 0038 0093     		str	r3, [sp]
 1228 003a 3346     		mov	r3, r6
 1229 003c 2246     		mov	r2, r4
 1230 003e 4146     		mov	r1, r8
 1231 0040 3846     		mov	r0, r7
 1232 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1233              	.LVL89:
 803:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1234              		.loc 1 803 4 view .LVU347
 1235 0046 2846     		mov	r0, r5
 1236 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1237              	.LVL90:
 804:base/os/FreeRTOS/Source/tasks.c **** 		}
 1238              		.loc 1 804 4 view .LVU348
 804:base/os/FreeRTOS/Source/tasks.c **** 		}
 1239              		.loc 1 804 12 is_stmt 0 view .LVU349
 1240 004c 0120     		movs	r0, #1
 1241 004e 05E0     		b	.L85
 1242              	.LVL91:
 1243              	.L87:
 1244              	.LBB128:
 782:base/os/FreeRTOS/Source/tasks.c **** 				}
 1245              		.loc 1 782 6 is_stmt 1 view .LVU350
 1246 0050 4846     		mov	r0, r9
 1247              	.LVL92:
 782:base/os/FreeRTOS/Source/tasks.c **** 				}
 1248              		.loc 1 782 6 is_stmt 0 view .LVU351
 1249 0052 FFF7FEFF 		bl	vPortFree
 1250              	.LVL93:
 1251 0056 E6E7     		b	.L88
 1252              	.LVL94:
 1253              	.L89:
 782:base/os/FreeRTOS/Source/tasks.c **** 				}
 1254              		.loc 1 782 6 view .LVU352
 1255              	.LBE128:
 808:base/os/FreeRTOS/Source/tasks.c **** 		}
 1256              		.loc 1 808 12 view .LVU353
 1257 0058 4FF0FF30 		mov	r0, #-1
 1258              	.LVL95:
 1259              	.L85:
 812:base/os/FreeRTOS/Source/tasks.c **** 
 1260              		.loc 1 812 2 view .LVU354
 1261 005c 05B0     		add	sp, sp, #20
ARM GAS  /tmp/cchwbchh.s 			page 119


 1262              	.LCFI13:
 1263              		.cfi_remember_state
 1264              		.cfi_def_cfa_offset 28
 1265              		@ sp needed
 1266 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1267              	.LVL96:
 1268              	.L90:
 1269              	.LCFI14:
 1270              		.cfi_restore_state
 808:base/os/FreeRTOS/Source/tasks.c **** 		}
 1271              		.loc 1 808 12 view .LVU355
 1272 0062 4FF0FF30 		mov	r0, #-1
 1273              	.LVL97:
 811:base/os/FreeRTOS/Source/tasks.c **** 	}
 1274              		.loc 1 811 3 is_stmt 1 view .LVU356
 811:base/os/FreeRTOS/Source/tasks.c **** 	}
 1275              		.loc 1 811 10 is_stmt 0 view .LVU357
 1276 0066 F9E7     		b	.L85
 1277              		.cfi_endproc
 1278              	.LFE5:
 1280              		.section	.text.vTaskDelete,"ax",%progbits
 1281              		.align	1
 1282              		.global	vTaskDelete
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1286              		.fpu softvfp
 1288              	vTaskDelete:
 1289              	.LVL98:
 1290              	.LFB8:
1107:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1291              		.loc 1 1107 2 is_stmt 1 view -0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
1107:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1295              		.loc 1 1107 2 is_stmt 0 view .LVU359
 1296 0000 38B5     		push	{r3, r4, r5, lr}
 1297              	.LCFI15:
 1298              		.cfi_def_cfa_offset 16
 1299              		.cfi_offset 3, -16
 1300              		.cfi_offset 4, -12
 1301              		.cfi_offset 5, -8
 1302              		.cfi_offset 14, -4
 1303 0002 0446     		mov	r4, r0
1108:base/os/FreeRTOS/Source/tasks.c **** 
 1304              		.loc 1 1108 2 is_stmt 1 view .LVU360
1110:base/os/FreeRTOS/Source/tasks.c **** 		{
 1305              		.loc 1 1110 3 view .LVU361
 1306 0004 FFF7FEFF 		bl	vPortEnterCritical
 1307              	.LVL99:
1114:base/os/FreeRTOS/Source/tasks.c **** 
 1308              		.loc 1 1114 4 view .LVU362
1114:base/os/FreeRTOS/Source/tasks.c **** 
 1309              		.loc 1 1114 12 is_stmt 0 view .LVU363
 1310 0008 24B3     		cbz	r4, .L101
 1311              	.LVL100:
ARM GAS  /tmp/cchwbchh.s 			page 120


 1312              	.L93:
1117:base/os/FreeRTOS/Source/tasks.c **** 			{
 1313              		.loc 1 1117 4 is_stmt 1 discriminator 4 view .LVU364
1117:base/os/FreeRTOS/Source/tasks.c **** 			{
 1314              		.loc 1 1117 8 is_stmt 0 discriminator 4 view .LVU365
 1315 000a 251D     		adds	r5, r4, #4
 1316 000c 2846     		mov	r0, r5
 1317 000e FFF7FEFF 		bl	uxListRemove
 1318              	.LVL101:
1123:base/os/FreeRTOS/Source/tasks.c **** 			}
 1319              		.loc 1 1123 29 is_stmt 1 discriminator 4 view .LVU366
1127:base/os/FreeRTOS/Source/tasks.c **** 			{
 1320              		.loc 1 1127 4 discriminator 4 view .LVU367
1127:base/os/FreeRTOS/Source/tasks.c **** 			{
 1321              		.loc 1 1127 8 is_stmt 0 discriminator 4 view .LVU368
 1322 0012 A36A     		ldr	r3, [r4, #40]
1127:base/os/FreeRTOS/Source/tasks.c **** 			{
 1323              		.loc 1 1127 6 discriminator 4 view .LVU369
 1324 0014 1BB1     		cbz	r3, .L94
1129:base/os/FreeRTOS/Source/tasks.c **** 			}
 1325              		.loc 1 1129 5 is_stmt 1 view .LVU370
1129:base/os/FreeRTOS/Source/tasks.c **** 			}
 1326              		.loc 1 1129 14 is_stmt 0 view .LVU371
 1327 0016 04F11800 		add	r0, r4, #24
 1328 001a FFF7FEFF 		bl	uxListRemove
 1329              	.LVL102:
 1330              	.L94:
1133:base/os/FreeRTOS/Source/tasks.c **** 			}
 1331              		.loc 1 1133 29 is_stmt 1 view .LVU372
1140:base/os/FreeRTOS/Source/tasks.c **** 
 1332              		.loc 1 1140 4 view .LVU373
1140:base/os/FreeRTOS/Source/tasks.c **** 
 1333              		.loc 1 1140 16 is_stmt 0 view .LVU374
 1334 001e 1F4A     		ldr	r2, .L104
 1335 0020 1368     		ldr	r3, [r2]
 1336 0022 0133     		adds	r3, r3, #1
 1337 0024 1360     		str	r3, [r2]
1142:base/os/FreeRTOS/Source/tasks.c **** 			{
 1338              		.loc 1 1142 4 is_stmt 1 view .LVU375
1142:base/os/FreeRTOS/Source/tasks.c **** 			{
 1339              		.loc 1 1142 14 is_stmt 0 view .LVU376
 1340 0026 1E4B     		ldr	r3, .L104+4
 1341 0028 1B68     		ldr	r3, [r3]
1142:base/os/FreeRTOS/Source/tasks.c **** 			{
 1342              		.loc 1 1142 6 view .LVU377
 1343 002a A342     		cmp	r3, r4
 1344 002c 15D0     		beq	.L102
1165:base/os/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1345              		.loc 1 1165 5 is_stmt 1 view .LVU378
 1346 002e 1D4A     		ldr	r2, .L104+8
 1347 0030 1368     		ldr	r3, [r2]
 1348 0032 013B     		subs	r3, r3, #1
 1349 0034 1360     		str	r3, [r2]
1166:base/os/FreeRTOS/Source/tasks.c **** 
 1350              		.loc 1 1166 5 view .LVU379
 1351 0036 2046     		mov	r0, r4
 1352 0038 FFF7FEFF 		bl	prvDeleteTCB
ARM GAS  /tmp/cchwbchh.s 			page 121


 1353              	.LVL103:
1170:base/os/FreeRTOS/Source/tasks.c **** 			}
 1354              		.loc 1 1170 5 view .LVU380
 1355 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1356              	.LVL104:
 1357              	.L96:
1173:base/os/FreeRTOS/Source/tasks.c **** 		}
 1358              		.loc 1 1173 29 view .LVU381
1175:base/os/FreeRTOS/Source/tasks.c **** 
 1359              		.loc 1 1175 3 view .LVU382
 1360 0040 FFF7FEFF 		bl	vPortExitCritical
 1361              	.LVL105:
1179:base/os/FreeRTOS/Source/tasks.c **** 		{
 1362              		.loc 1 1179 3 view .LVU383
1179:base/os/FreeRTOS/Source/tasks.c **** 		{
 1363              		.loc 1 1179 25 is_stmt 0 view .LVU384
 1364 0044 184B     		ldr	r3, .L104+12
 1365 0046 1B68     		ldr	r3, [r3]
1179:base/os/FreeRTOS/Source/tasks.c **** 		{
 1366              		.loc 1 1179 5 view .LVU385
 1367 0048 1BB1     		cbz	r3, .L92
1181:base/os/FreeRTOS/Source/tasks.c **** 			{
 1368              		.loc 1 1181 4 is_stmt 1 view .LVU386
1181:base/os/FreeRTOS/Source/tasks.c **** 			{
 1369              		.loc 1 1181 14 is_stmt 0 view .LVU387
 1370 004a 154B     		ldr	r3, .L104+4
 1371 004c 1B68     		ldr	r3, [r3]
1181:base/os/FreeRTOS/Source/tasks.c **** 			{
 1372              		.loc 1 1181 6 view .LVU388
 1373 004e A342     		cmp	r3, r4
 1374 0050 0CD0     		beq	.L103
 1375              	.L92:
1191:base/os/FreeRTOS/Source/tasks.c **** 
 1376              		.loc 1 1191 2 view .LVU389
 1377 0052 38BD     		pop	{r3, r4, r5, pc}
 1378              	.LVL106:
 1379              	.L101:
1114:base/os/FreeRTOS/Source/tasks.c **** 
 1380              		.loc 1 1114 12 discriminator 1 view .LVU390
 1381 0054 124B     		ldr	r3, .L104+4
 1382 0056 1C68     		ldr	r4, [r3]
 1383              	.LVL107:
1114:base/os/FreeRTOS/Source/tasks.c **** 
 1384              		.loc 1 1114 12 discriminator 1 view .LVU391
 1385 0058 D7E7     		b	.L93
 1386              	.LVL108:
 1387              	.L102:
1149:base/os/FreeRTOS/Source/tasks.c **** 
 1388              		.loc 1 1149 5 is_stmt 1 view .LVU392
 1389 005a 2946     		mov	r1, r5
 1390 005c 1348     		ldr	r0, .L104+16
 1391 005e FFF7FEFF 		bl	vListInsertEnd
 1392              	.LVL109:
1154:base/os/FreeRTOS/Source/tasks.c **** 
 1393              		.loc 1 1154 5 view .LVU393
 1394 0062 134A     		ldr	r2, .L104+20
 1395 0064 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cchwbchh.s 			page 122


 1396 0066 0133     		adds	r3, r3, #1
 1397 0068 1360     		str	r3, [r2]
1161:base/os/FreeRTOS/Source/tasks.c **** 			}
 1398              		.loc 1 1161 54 view .LVU394
 1399 006a E9E7     		b	.L96
 1400              	.L103:
1183:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1401              		.loc 1 1183 5 view .LVU395
 1402 006c 114B     		ldr	r3, .L104+24
 1403 006e 1B68     		ldr	r3, [r3]
 1404 0070 43B1     		cbz	r3, .L98
1183:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1405              		.loc 1 1183 5 view .LVU396
 1406              	.LBB129:
 1407              	.LBI129:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1408              		.loc 2 191 30 view .LVU397
 1409              	.LBB130:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1410              		.loc 2 193 1 view .LVU398
 1411              		.loc 2 195 2 view .LVU399
 1412              		.syntax unified
 1413              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1414 0072 4FF05003 			mov r3, #80												
 1415 0076 83F31188 		msr basepri, r3											
 1416 007a BFF36F8F 		isb														
 1417 007e BFF34F8F 		dsb														
 1418              	
 1419              	@ 0 "" 2
 1420              	.LVL110:
 1421              		.thumb
 1422              		.syntax unified
 1423              	.L99:
 1424              		.loc 2 195 2 is_stmt 0 view .LVU400
 1425              	.LBE130:
 1426              	.LBE129:
1183:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1427              		.loc 1 1183 5 is_stmt 1 discriminator 1 view .LVU401
1183:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1428              		.loc 1 1183 5 discriminator 1 view .LVU402
 1429 0082 FEE7     		b	.L99
 1430              	.L98:
1183:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1431              		.loc 1 1183 46 discriminator 2 view .LVU403
1184:base/os/FreeRTOS/Source/tasks.c **** 			}
 1432              		.loc 1 1184 5 discriminator 2 view .LVU404
 1433 0084 4FF0E023 		mov	r3, #-536813568
 1434 0088 4FF08052 		mov	r2, #268435456
 1435 008c C3F8042D 		str	r2, [r3, #3332]
1184:base/os/FreeRTOS/Source/tasks.c **** 			}
 1436              		.loc 1 1184 5 discriminator 2 view .LVU405
 1437              		.syntax unified
 1438              	@ 1184 "base/os/FreeRTOS/Source/tasks.c" 1
 1439 0090 BFF34F8F 		dsb
 1440              	@ 0 "" 2
1184:base/os/FreeRTOS/Source/tasks.c **** 			}
 1441              		.loc 1 1184 5 discriminator 2 view .LVU406
ARM GAS  /tmp/cchwbchh.s 			page 123


 1442              	@ 1184 "base/os/FreeRTOS/Source/tasks.c" 1
 1443 0094 BFF36F8F 		isb
 1444              	@ 0 "" 2
1184:base/os/FreeRTOS/Source/tasks.c **** 			}
 1445              		.loc 1 1184 27 discriminator 2 view .LVU407
1188:base/os/FreeRTOS/Source/tasks.c **** 			}
 1446              		.loc 1 1188 29 discriminator 2 view .LVU408
1191:base/os/FreeRTOS/Source/tasks.c **** 
 1447              		.loc 1 1191 2 is_stmt 0 discriminator 2 view .LVU409
 1448              		.thumb
 1449              		.syntax unified
 1450 0098 DBE7     		b	.L92
 1451              	.L105:
 1452 009a 00BF     		.align	2
 1453              	.L104:
 1454 009c 00000000 		.word	.LANCHOR12
 1455 00a0 00000000 		.word	.LANCHOR10
 1456 00a4 00000000 		.word	.LANCHOR9
 1457 00a8 00000000 		.word	.LANCHOR11
 1458 00ac 00000000 		.word	.LANCHOR7
 1459 00b0 00000000 		.word	.LANCHOR14
 1460 00b4 00000000 		.word	.LANCHOR16
 1461              		.cfi_endproc
 1462              	.LFE8:
 1464              		.section	.text.eTaskGetState,"ax",%progbits
 1465              		.align	1
 1466              		.global	eTaskGetState
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu softvfp
 1472              	eTaskGetState:
 1473              	.LVL111:
 1474              	.LFB11:
1328:base/os/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1475              		.loc 1 1328 2 is_stmt 1 view -0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
1328:base/os/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1479              		.loc 1 1328 2 is_stmt 0 view .LVU411
 1480 0000 38B5     		push	{r3, r4, r5, lr}
 1481              	.LCFI16:
 1482              		.cfi_def_cfa_offset 16
 1483              		.cfi_offset 3, -16
 1484              		.cfi_offset 4, -12
 1485              		.cfi_offset 5, -8
 1486              		.cfi_offset 14, -4
1329:base/os/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
 1487              		.loc 1 1329 2 is_stmt 1 view .LVU412
1330:base/os/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1488              		.loc 1 1330 2 view .LVU413
1331:base/os/FreeRTOS/Source/tasks.c **** 
 1489              		.loc 1 1331 2 view .LVU414
 1490              	.LVL112:
1333:base/os/FreeRTOS/Source/tasks.c **** 
 1491              		.loc 1 1333 3 view .LVU415
ARM GAS  /tmp/cchwbchh.s 			page 124


 1492 0002 D0B1     		cbz	r0, .L118
 1493 0004 0446     		mov	r4, r0
1333:base/os/FreeRTOS/Source/tasks.c **** 
 1494              		.loc 1 1333 24 discriminator 2 view .LVU416
1335:base/os/FreeRTOS/Source/tasks.c **** 		{
 1495              		.loc 1 1335 3 discriminator 2 view .LVU417
1335:base/os/FreeRTOS/Source/tasks.c **** 		{
 1496              		.loc 1 1335 13 is_stmt 0 discriminator 2 view .LVU418
 1497 0006 194B     		ldr	r3, .L122
 1498 0008 1B68     		ldr	r3, [r3]
1335:base/os/FreeRTOS/Source/tasks.c **** 		{
 1499              		.loc 1 1335 5 discriminator 2 view .LVU419
 1500 000a 8342     		cmp	r3, r0
 1501 000c 26D0     		beq	.L111
1342:base/os/FreeRTOS/Source/tasks.c **** 			{
 1502              		.loc 1 1342 4 is_stmt 1 view .LVU420
 1503 000e FFF7FEFF 		bl	vPortEnterCritical
 1504              	.LVL113:
1344:base/os/FreeRTOS/Source/tasks.c **** 			}
 1505              		.loc 1 1344 5 view .LVU421
1344:base/os/FreeRTOS/Source/tasks.c **** 			}
 1506              		.loc 1 1344 17 is_stmt 0 view .LVU422
 1507 0012 6569     		ldr	r5, [r4, #20]
 1508              	.LVL114:
1346:base/os/FreeRTOS/Source/tasks.c **** 
 1509              		.loc 1 1346 4 is_stmt 1 view .LVU423
 1510 0014 FFF7FEFF 		bl	vPortExitCritical
 1511              	.LVL115:
1348:base/os/FreeRTOS/Source/tasks.c **** 			{
 1512              		.loc 1 1348 4 view .LVU424
1348:base/os/FreeRTOS/Source/tasks.c **** 			{
 1513              		.loc 1 1348 22 is_stmt 0 view .LVU425
 1514 0018 154B     		ldr	r3, .L122+4
 1515 001a 1B68     		ldr	r3, [r3]
1348:base/os/FreeRTOS/Source/tasks.c **** 			{
 1516              		.loc 1 1348 6 view .LVU426
 1517 001c AB42     		cmp	r3, r5
 1518 001e 1FD0     		beq	.L112
1348:base/os/FreeRTOS/Source/tasks.c **** 			{
 1519              		.loc 1 1348 62 discriminator 1 view .LVU427
 1520 0020 144B     		ldr	r3, .L122+8
 1521 0022 1B68     		ldr	r3, [r3]
1348:base/os/FreeRTOS/Source/tasks.c **** 			{
 1522              		.loc 1 1348 45 discriminator 1 view .LVU428
 1523 0024 AB42     		cmp	r3, r5
 1524 0026 1DD0     		beq	.L113
1356:base/os/FreeRTOS/Source/tasks.c **** 				{
 1525              		.loc 1 1356 10 is_stmt 1 view .LVU429
1356:base/os/FreeRTOS/Source/tasks.c **** 				{
 1526              		.loc 1 1356 12 is_stmt 0 view .LVU430
 1527 0028 134B     		ldr	r3, .L122+12
 1528 002a 9D42     		cmp	r5, r3
 1529 002c 0ED0     		beq	.L119
1373:base/os/FreeRTOS/Source/tasks.c **** 				{
 1530              		.loc 1 1373 10 is_stmt 1 view .LVU431
1373:base/os/FreeRTOS/Source/tasks.c **** 				{
 1531              		.loc 1 1373 12 is_stmt 0 view .LVU432
ARM GAS  /tmp/cchwbchh.s 			page 125


 1532 002e 134B     		ldr	r3, .L122+16
 1533 0030 9D42     		cmp	r5, r3
 1534 0032 19D0     		beq	.L115
1373:base/os/FreeRTOS/Source/tasks.c **** 				{
 1535              		.loc 1 1373 59 discriminator 1 view .LVU433
 1536 0034 85B1     		cbz	r5, .L120
1386:base/os/FreeRTOS/Source/tasks.c **** 			}
 1537              		.loc 1 1386 13 view .LVU434
 1538 0036 0120     		movs	r0, #1
 1539 0038 11E0     		b	.L109
 1540              	.LVL116:
 1541              	.L118:
1333:base/os/FreeRTOS/Source/tasks.c **** 
 1542              		.loc 1 1333 3 is_stmt 1 view .LVU435
 1543              	.LBB131:
 1544              	.LBI131:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1545              		.loc 2 191 30 view .LVU436
 1546              	.LBB132:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1547              		.loc 2 193 1 view .LVU437
 1548              		.loc 2 195 2 view .LVU438
 1549              		.syntax unified
 1550              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1551 003a 4FF05003 			mov r3, #80												
 1552 003e 83F31188 		msr basepri, r3											
 1553 0042 BFF36F8F 		isb														
 1554 0046 BFF34F8F 		dsb														
 1555              	
 1556              	@ 0 "" 2
 1557              	.LVL117:
 1558              		.thumb
 1559              		.syntax unified
 1560              	.L108:
 1561              		.loc 2 195 2 is_stmt 0 view .LVU439
 1562              	.LBE132:
 1563              	.LBE131:
1333:base/os/FreeRTOS/Source/tasks.c **** 
 1564              		.loc 1 1333 3 is_stmt 1 discriminator 1 view .LVU440
1333:base/os/FreeRTOS/Source/tasks.c **** 
 1565              		.loc 1 1333 3 discriminator 1 view .LVU441
 1566 004a FEE7     		b	.L108
 1567              	.LVL118:
 1568              	.L119:
1361:base/os/FreeRTOS/Source/tasks.c **** 					{
 1569              		.loc 1 1361 6 view .LVU442
1361:base/os/FreeRTOS/Source/tasks.c **** 					{
 1570              		.loc 1 1361 10 is_stmt 0 view .LVU443
 1571 004c A36A     		ldr	r3, [r4, #40]
1361:base/os/FreeRTOS/Source/tasks.c **** 					{
 1572              		.loc 1 1361 8 view .LVU444
 1573 004e 0BB1     		cbz	r3, .L121
1367:base/os/FreeRTOS/Source/tasks.c **** 					}
 1574              		.loc 1 1367 15 view .LVU445
 1575 0050 0220     		movs	r0, #2
 1576 0052 04E0     		b	.L109
 1577              	.L121:
ARM GAS  /tmp/cchwbchh.s 			page 126


1363:base/os/FreeRTOS/Source/tasks.c **** 					}
 1578              		.loc 1 1363 15 view .LVU446
 1579 0054 0320     		movs	r0, #3
 1580 0056 02E0     		b	.L109
 1581              	.L120:
1378:base/os/FreeRTOS/Source/tasks.c **** 				}
 1582              		.loc 1 1378 14 view .LVU447
 1583 0058 0420     		movs	r0, #4
 1584 005a 00E0     		b	.L109
 1585              	.LVL119:
 1586              	.L111:
1338:base/os/FreeRTOS/Source/tasks.c **** 		}
 1587              		.loc 1 1338 12 view .LVU448
 1588 005c 0020     		movs	r0, #0
 1589              	.LVL120:
 1590              	.L109:
1390:base/os/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1591              		.loc 1 1390 3 is_stmt 1 view .LVU449
1391:base/os/FreeRTOS/Source/tasks.c **** 
 1592              		.loc 1 1391 2 is_stmt 0 view .LVU450
 1593 005e 38BD     		pop	{r3, r4, r5, pc}
 1594              	.LVL121:
 1595              	.L112:
1352:base/os/FreeRTOS/Source/tasks.c **** 			}
 1596              		.loc 1 1352 13 view .LVU451
 1597 0060 0220     		movs	r0, #2
 1598 0062 FCE7     		b	.L109
 1599              	.L113:
 1600 0064 0220     		movs	r0, #2
 1601 0066 FAE7     		b	.L109
 1602              	.L115:
1378:base/os/FreeRTOS/Source/tasks.c **** 				}
 1603              		.loc 1 1378 14 view .LVU452
 1604 0068 0420     		movs	r0, #4
 1605 006a F8E7     		b	.L109
 1606              	.L123:
 1607              		.align	2
 1608              	.L122:
 1609 006c 00000000 		.word	.LANCHOR10
 1610 0070 00000000 		.word	.LANCHOR2
 1611 0074 00000000 		.word	.LANCHOR8
 1612 0078 00000000 		.word	.LANCHOR0
 1613 007c 00000000 		.word	.LANCHOR7
 1614              		.cfi_endproc
 1615              	.LFE11:
 1617              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1618              		.align	1
 1619              		.global	uxTaskPriorityGet
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu softvfp
 1625              	uxTaskPriorityGet:
 1626              	.LVL122:
 1627              	.LFB12:
1399:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1628              		.loc 1 1399 2 is_stmt 1 view -0
ARM GAS  /tmp/cchwbchh.s 			page 127


 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
1399:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1632              		.loc 1 1399 2 is_stmt 0 view .LVU454
 1633 0000 10B5     		push	{r4, lr}
 1634              	.LCFI17:
 1635              		.cfi_def_cfa_offset 8
 1636              		.cfi_offset 4, -8
 1637              		.cfi_offset 14, -4
 1638 0002 0446     		mov	r4, r0
1400:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 1639              		.loc 1 1400 2 is_stmt 1 view .LVU455
1401:base/os/FreeRTOS/Source/tasks.c **** 
 1640              		.loc 1 1401 2 view .LVU456
1403:base/os/FreeRTOS/Source/tasks.c **** 		{
 1641              		.loc 1 1403 3 view .LVU457
 1642 0004 FFF7FEFF 		bl	vPortEnterCritical
 1643              	.LVL123:
1407:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1644              		.loc 1 1407 4 view .LVU458
1407:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1645              		.loc 1 1407 12 is_stmt 0 view .LVU459
 1646 0008 24B1     		cbz	r4, .L127
 1647              	.LVL124:
 1648              	.L125:
1408:base/os/FreeRTOS/Source/tasks.c **** 		}
 1649              		.loc 1 1408 4 is_stmt 1 discriminator 4 view .LVU460
1408:base/os/FreeRTOS/Source/tasks.c **** 		}
 1650              		.loc 1 1408 13 is_stmt 0 discriminator 4 view .LVU461
 1651 000a E46A     		ldr	r4, [r4, #44]
 1652              	.LVL125:
1410:base/os/FreeRTOS/Source/tasks.c **** 
 1653              		.loc 1 1410 3 is_stmt 1 discriminator 4 view .LVU462
 1654 000c FFF7FEFF 		bl	vPortExitCritical
 1655              	.LVL126:
1412:base/os/FreeRTOS/Source/tasks.c **** 	}
 1656              		.loc 1 1412 3 discriminator 4 view .LVU463
1413:base/os/FreeRTOS/Source/tasks.c **** 
 1657              		.loc 1 1413 2 is_stmt 0 discriminator 4 view .LVU464
 1658 0010 2046     		mov	r0, r4
 1659 0012 10BD     		pop	{r4, pc}
 1660              	.LVL127:
 1661              	.L127:
1407:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1662              		.loc 1 1407 12 discriminator 1 view .LVU465
 1663 0014 014B     		ldr	r3, .L128
 1664 0016 1C68     		ldr	r4, [r3]
 1665              	.LVL128:
1407:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1666              		.loc 1 1407 12 discriminator 1 view .LVU466
 1667 0018 F7E7     		b	.L125
 1668              	.L129:
 1669 001a 00BF     		.align	2
 1670              	.L128:
 1671 001c 00000000 		.word	.LANCHOR10
 1672              		.cfi_endproc
ARM GAS  /tmp/cchwbchh.s 			page 128


 1673              	.LFE12:
 1675              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1676              		.align	1
 1677              		.global	uxTaskPriorityGetFromISR
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu softvfp
 1683              	uxTaskPriorityGetFromISR:
 1684              	.LVL129:
 1685              	.LFB13:
1421:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1686              		.loc 1 1421 2 is_stmt 1 view -0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
1421:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1690              		.loc 1 1421 2 is_stmt 0 view .LVU468
 1691 0000 10B5     		push	{r4, lr}
 1692              	.LCFI18:
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 4, -8
 1695              		.cfi_offset 14, -4
 1696 0002 0446     		mov	r4, r0
1422:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1697              		.loc 1 1422 2 is_stmt 1 view .LVU469
1423:base/os/FreeRTOS/Source/tasks.c **** 
 1698              		.loc 1 1423 2 view .LVU470
1441:base/os/FreeRTOS/Source/tasks.c **** 
 1699              		.loc 1 1441 3 view .LVU471
 1700 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1701              	.LVL130:
1443:base/os/FreeRTOS/Source/tasks.c **** 		{
 1702              		.loc 1 1443 3 view .LVU472
 1703              	.LBB133:
 1704              	.LBI133:
 196:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1705              		.loc 2 207 34 view .LVU473
 1706              	.LBB134:
 208:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1707              		.loc 2 209 1 view .LVU474
 210:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1708              		.loc 2 211 2 view .LVU475
 1709              		.syntax unified
ARM GAS  /tmp/cchwbchh.s 			page 129


 1710              	@ 211 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1711 0008 EFF31183 			mrs r3, basepri											
 1712 000c 4FF05002 		mov r2, #80												
 1713 0010 82F31188 		msr basepri, r2											
 1714 0014 BFF36F8F 		isb														
 1715 0018 BFF34F8F 		dsb														
 1716              	
 1717              	@ 0 "" 2
 1718              	.LVL131:
 212:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1719              		.loc 2 223 2 view .LVU476
 1720              		.loc 2 223 2 is_stmt 0 view .LVU477
 1721              		.thumb
 1722              		.syntax unified
 1723              	.LBE134:
 1724              	.LBE133:
1447:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1725              		.loc 1 1447 4 is_stmt 1 view .LVU478
1447:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1726              		.loc 1 1447 12 is_stmt 0 view .LVU479
 1727 001c 1CB1     		cbz	r4, .L133
 1728              	.LVL132:
 1729              	.L131:
1448:base/os/FreeRTOS/Source/tasks.c **** 		}
 1730              		.loc 1 1448 4 is_stmt 1 discriminator 4 view .LVU480
1448:base/os/FreeRTOS/Source/tasks.c **** 		}
 1731              		.loc 1 1448 13 is_stmt 0 discriminator 4 view .LVU481
 1732 001e E06A     		ldr	r0, [r4, #44]
 1733              	.LVL133:
1450:base/os/FreeRTOS/Source/tasks.c **** 
 1734              		.loc 1 1450 3 is_stmt 1 discriminator 4 view .LVU482
 1735              	.LBB135:
 1736              	.LBI135:
 224:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1737              		.loc 2 227 30 discriminator 4 view .LVU483
 1738              	.LBB136:
 228:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1739              		.loc 2 229 2 discriminator 4 view .LVU484
 1740              		.syntax unified
 1741              	@ 229 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1742 0020 83F31188 			msr basepri, r3	
 1743              	@ 0 "" 2
ARM GAS  /tmp/cchwbchh.s 			page 130


 1744              		.thumb
 1745              		.syntax unified
 1746              	.LBE136:
 1747              	.LBE135:
1452:base/os/FreeRTOS/Source/tasks.c **** 	}
 1748              		.loc 1 1452 3 discriminator 4 view .LVU485
1453:base/os/FreeRTOS/Source/tasks.c **** 
 1749              		.loc 1 1453 2 is_stmt 0 discriminator 4 view .LVU486
 1750 0024 10BD     		pop	{r4, pc}
 1751              	.LVL134:
 1752              	.L133:
1447:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1753              		.loc 1 1447 12 discriminator 1 view .LVU487
 1754 0026 014A     		ldr	r2, .L134
 1755 0028 1468     		ldr	r4, [r2]
 1756              	.LVL135:
1447:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1757              		.loc 1 1447 12 discriminator 1 view .LVU488
 1758 002a F8E7     		b	.L131
 1759              	.L135:
 1760              		.align	2
 1761              	.L134:
 1762 002c 00000000 		.word	.LANCHOR10
 1763              		.cfi_endproc
 1764              	.LFE13:
 1766              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1767              		.align	1
 1768              		.global	vTaskPrioritySet
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1772              		.fpu softvfp
 1774              	vTaskPrioritySet:
 1775              	.LVL136:
 1776              	.LFB14:
1461:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1777              		.loc 1 1461 2 is_stmt 1 view -0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
1462:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1781              		.loc 1 1462 2 view .LVU490
1463:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1782              		.loc 1 1463 2 view .LVU491
1464:base/os/FreeRTOS/Source/tasks.c **** 
 1783              		.loc 1 1464 2 view .LVU492
1466:base/os/FreeRTOS/Source/tasks.c **** 
 1784              		.loc 1 1466 3 view .LVU493
 1785 0000 3729     		cmp	r1, #55
 1786 0002 08D9     		bls	.L137
1466:base/os/FreeRTOS/Source/tasks.c **** 
 1787              		.loc 1 1466 3 view .LVU494
 1788              	.LBB137:
 1789              	.LBI137:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 1790              		.loc 2 191 30 view .LVU495
 1791              	.LBB138:
ARM GAS  /tmp/cchwbchh.s 			page 131


 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1792              		.loc 2 193 1 view .LVU496
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1793              		.loc 2 195 2 view .LVU497
 1794              		.syntax unified
 1795              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1796 0004 4FF05003 			mov r3, #80												
 1797 0008 83F31188 		msr basepri, r3											
 1798 000c BFF36F8F 		isb														
 1799 0010 BFF34F8F 		dsb														
 1800              	
 1801              	@ 0 "" 2
 1802              	.LVL137:
 1803              		.thumb
 1804              		.syntax unified
 1805              	.L138:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1806              		.loc 2 195 2 is_stmt 0 view .LVU498
 1807              	.LBE138:
 1808              	.LBE137:
1466:base/os/FreeRTOS/Source/tasks.c **** 
 1809              		.loc 1 1466 3 is_stmt 1 discriminator 1 view .LVU499
1466:base/os/FreeRTOS/Source/tasks.c **** 
 1810              		.loc 1 1466 3 discriminator 1 view .LVU500
 1811 0014 FEE7     		b	.L138
 1812              	.L137:
1461:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1813              		.loc 1 1461 2 is_stmt 0 view .LVU501
 1814 0016 70B5     		push	{r4, r5, r6, lr}
 1815              	.LCFI19:
 1816              		.cfi_def_cfa_offset 16
 1817              		.cfi_offset 4, -16
 1818              		.cfi_offset 5, -12
 1819              		.cfi_offset 6, -8
 1820              		.cfi_offset 14, -4
 1821 0018 0546     		mov	r5, r0
 1822 001a 0C46     		mov	r4, r1
1466:base/os/FreeRTOS/Source/tasks.c **** 
 1823              		.loc 1 1466 59 is_stmt 1 view .LVU502
1469:base/os/FreeRTOS/Source/tasks.c **** 		{
 1824              		.loc 1 1469 3 view .LVU503
 1825              	.LVL138:
1475:base/os/FreeRTOS/Source/tasks.c **** 		}
 1826              		.loc 1 1475 28 view .LVU504
1478:base/os/FreeRTOS/Source/tasks.c **** 		{
 1827              		.loc 1 1478 3 view .LVU505
 1828 001c FFF7FEFF 		bl	vPortEnterCritical
 1829              	.LVL139:
1482:base/os/FreeRTOS/Source/tasks.c **** 
 1830              		.loc 1 1482 4 view .LVU506
1482:base/os/FreeRTOS/Source/tasks.c **** 
 1831              		.loc 1 1482 12 is_stmt 0 view .LVU507
 1832 0020 75B1     		cbz	r5, .L152
 1833              	.LVL140:
 1834              	.L139:
1484:base/os/FreeRTOS/Source/tasks.c **** 
 1835              		.loc 1 1484 50 is_stmt 1 discriminator 4 view .LVU508
ARM GAS  /tmp/cchwbchh.s 			page 132


1488:base/os/FreeRTOS/Source/tasks.c **** 			}
 1836              		.loc 1 1488 5 discriminator 4 view .LVU509
1488:base/os/FreeRTOS/Source/tasks.c **** 			}
 1837              		.loc 1 1488 27 is_stmt 0 discriminator 4 view .LVU510
 1838 0022 EA6C     		ldr	r2, [r5, #76]
 1839              	.LVL141:
1496:base/os/FreeRTOS/Source/tasks.c **** 			{
 1840              		.loc 1 1496 4 is_stmt 1 discriminator 4 view .LVU511
1496:base/os/FreeRTOS/Source/tasks.c **** 			{
 1841              		.loc 1 1496 6 is_stmt 0 discriminator 4 view .LVU512
 1842 0024 9442     		cmp	r4, r2
 1843 0026 30D0     		beq	.L140
1500:base/os/FreeRTOS/Source/tasks.c **** 				{
 1844              		.loc 1 1500 5 is_stmt 1 view .LVU513
1500:base/os/FreeRTOS/Source/tasks.c **** 				{
 1845              		.loc 1 1500 7 is_stmt 0 view .LVU514
 1846 0028 0DD9     		bls	.L141
1502:base/os/FreeRTOS/Source/tasks.c **** 					{
 1847              		.loc 1 1502 6 is_stmt 1 view .LVU515
1502:base/os/FreeRTOS/Source/tasks.c **** 					{
 1848              		.loc 1 1502 16 is_stmt 0 view .LVU516
 1849 002a 274B     		ldr	r3, .L155
 1850 002c 1B68     		ldr	r3, [r3]
1502:base/os/FreeRTOS/Source/tasks.c **** 					{
 1851              		.loc 1 1502 8 view .LVU517
 1852 002e AB42     		cmp	r3, r5
 1853 0030 2ED0     		beq	.L147
1507:base/os/FreeRTOS/Source/tasks.c **** 						{
 1854              		.loc 1 1507 7 is_stmt 1 view .LVU518
1507:base/os/FreeRTOS/Source/tasks.c **** 						{
 1855              		.loc 1 1507 40 is_stmt 0 view .LVU519
 1856 0032 254B     		ldr	r3, .L155
 1857 0034 1B68     		ldr	r3, [r3]
 1858 0036 DB6A     		ldr	r3, [r3, #44]
1507:base/os/FreeRTOS/Source/tasks.c **** 						{
 1859              		.loc 1 1507 9 view .LVU520
 1860 0038 A342     		cmp	r3, r4
 1861 003a 2BD9     		bls	.L148
1464:base/os/FreeRTOS/Source/tasks.c **** 
 1862              		.loc 1 1464 13 view .LVU521
 1863 003c 0026     		movs	r6, #0
 1864 003e 07E0     		b	.L142
 1865              	.LVL142:
 1866              	.L152:
1482:base/os/FreeRTOS/Source/tasks.c **** 
 1867              		.loc 1 1482 12 discriminator 1 view .LVU522
 1868 0040 214B     		ldr	r3, .L155
 1869 0042 1D68     		ldr	r5, [r3]
 1870              	.LVL143:
1482:base/os/FreeRTOS/Source/tasks.c **** 
 1871              		.loc 1 1482 12 discriminator 1 view .LVU523
 1872 0044 EDE7     		b	.L139
 1873              	.LVL144:
 1874              	.L141:
1523:base/os/FreeRTOS/Source/tasks.c **** 				{
 1875              		.loc 1 1523 10 is_stmt 1 view .LVU524
1523:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 133


 1876              		.loc 1 1523 20 is_stmt 0 view .LVU525
 1877 0046 204B     		ldr	r3, .L155
 1878 0048 1B68     		ldr	r3, [r3]
1523:base/os/FreeRTOS/Source/tasks.c **** 				{
 1879              		.loc 1 1523 12 view .LVU526
 1880 004a AB42     		cmp	r3, r5
 1881 004c 24D0     		beq	.L149
1464:base/os/FreeRTOS/Source/tasks.c **** 
 1882              		.loc 1 1464 13 view .LVU527
 1883 004e 0026     		movs	r6, #0
 1884              	.L142:
 1885              	.LVL145:
1535:base/os/FreeRTOS/Source/tasks.c **** 
 1886              		.loc 1 1535 5 is_stmt 1 view .LVU528
1540:base/os/FreeRTOS/Source/tasks.c **** 
 1887              		.loc 1 1540 5 view .LVU529
1540:base/os/FreeRTOS/Source/tasks.c **** 
 1888              		.loc 1 1540 27 is_stmt 0 view .LVU530
 1889 0050 EB6A     		ldr	r3, [r5, #44]
 1890              	.LVL146:
1546:base/os/FreeRTOS/Source/tasks.c **** 					{
 1891              		.loc 1 1546 6 is_stmt 1 view .LVU531
1546:base/os/FreeRTOS/Source/tasks.c **** 					{
 1892              		.loc 1 1546 8 is_stmt 0 view .LVU532
 1893 0052 9A42     		cmp	r2, r3
 1894 0054 22D0     		beq	.L153
 1895              	.L143:
1552:base/os/FreeRTOS/Source/tasks.c **** 					}
 1896              		.loc 1 1552 31 is_stmt 1 view .LVU533
1556:base/os/FreeRTOS/Source/tasks.c **** 				}
 1897              		.loc 1 1556 6 view .LVU534
1556:base/os/FreeRTOS/Source/tasks.c **** 				}
 1898              		.loc 1 1556 28 is_stmt 0 view .LVU535
 1899 0056 EC64     		str	r4, [r5, #76]
1566:base/os/FreeRTOS/Source/tasks.c **** 				{
 1900              		.loc 1 1566 5 is_stmt 1 view .LVU536
1566:base/os/FreeRTOS/Source/tasks.c **** 				{
 1901              		.loc 1 1566 11 is_stmt 0 view .LVU537
 1902 0058 AA69     		ldr	r2, [r5, #24]
 1903              	.LVL147:
1566:base/os/FreeRTOS/Source/tasks.c **** 				{
 1904              		.loc 1 1566 7 view .LVU538
 1905 005a 002A     		cmp	r2, #0
 1906 005c 02DB     		blt	.L144
1568:base/os/FreeRTOS/Source/tasks.c **** 				}
 1907              		.loc 1 1568 6 is_stmt 1 view .LVU539
 1908 005e C4F13804 		rsb	r4, r4, #56
 1909              	.LVL148:
1568:base/os/FreeRTOS/Source/tasks.c **** 				}
 1910              		.loc 1 1568 6 is_stmt 0 view .LVU540
 1911 0062 AC61     		str	r4, [r5, #24]
 1912              	.L144:
1572:base/os/FreeRTOS/Source/tasks.c **** 				}
 1913              		.loc 1 1572 30 is_stmt 1 view .LVU541
1579:base/os/FreeRTOS/Source/tasks.c **** 				{
 1914              		.loc 1 1579 5 view .LVU542
1579:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 134


 1915              		.loc 1 1579 9 is_stmt 0 view .LVU543
 1916 0064 6969     		ldr	r1, [r5, #20]
 1917 0066 03EB8303 		add	r3, r3, r3, lsl #2
 1918              	.LVL149:
1579:base/os/FreeRTOS/Source/tasks.c **** 				{
 1919              		.loc 1 1579 9 view .LVU544
 1920 006a 184A     		ldr	r2, .L155+4
 1921 006c 02EB8303 		add	r3, r2, r3, lsl #2
1579:base/os/FreeRTOS/Source/tasks.c **** 				{
 1922              		.loc 1 1579 112 view .LVU545
 1923 0070 9942     		cmp	r1, r3
 1924 0072 15D0     		beq	.L154
 1925              	.LVL150:
 1926              	.L145:
1599:base/os/FreeRTOS/Source/tasks.c **** 				}
 1927              		.loc 1 1599 30 is_stmt 1 view .LVU546
1602:base/os/FreeRTOS/Source/tasks.c **** 				{
 1928              		.loc 1 1602 5 view .LVU547
1602:base/os/FreeRTOS/Source/tasks.c **** 				{
 1929              		.loc 1 1602 7 is_stmt 0 view .LVU548
 1930 0074 4EB1     		cbz	r6, .L140
1604:base/os/FreeRTOS/Source/tasks.c **** 				}
 1931              		.loc 1 1604 6 is_stmt 1 view .LVU549
 1932 0076 4FF0E023 		mov	r3, #-536813568
 1933 007a 4FF08052 		mov	r2, #268435456
 1934 007e C3F8042D 		str	r2, [r3, #3332]
1604:base/os/FreeRTOS/Source/tasks.c **** 				}
 1935              		.loc 1 1604 6 view .LVU550
 1936              		.syntax unified
 1937              	@ 1604 "base/os/FreeRTOS/Source/tasks.c" 1
 1938 0082 BFF34F8F 		dsb
 1939              	@ 0 "" 2
1604:base/os/FreeRTOS/Source/tasks.c **** 				}
 1940              		.loc 1 1604 6 view .LVU551
 1941              	@ 1604 "base/os/FreeRTOS/Source/tasks.c" 1
 1942 0086 BFF36F8F 		isb
 1943              	@ 0 "" 2
1604:base/os/FreeRTOS/Source/tasks.c **** 				}
 1944              		.loc 1 1604 37 view .LVU552
 1945              	.LVL151:
 1946              		.thumb
 1947              		.syntax unified
 1948              	.L140:
1608:base/os/FreeRTOS/Source/tasks.c **** 				}
 1949              		.loc 1 1608 30 view .LVU553
1613:base/os/FreeRTOS/Source/tasks.c **** 			}
 1950              		.loc 1 1613 5 view .LVU554
1616:base/os/FreeRTOS/Source/tasks.c **** 	}
 1951              		.loc 1 1616 3 view .LVU555
 1952 008a FFF7FEFF 		bl	vPortExitCritical
 1953              	.LVL152:
1617:base/os/FreeRTOS/Source/tasks.c **** 
 1954              		.loc 1 1617 2 is_stmt 0 view .LVU556
 1955 008e 70BD     		pop	{r4, r5, r6, pc}
 1956              	.LVL153:
 1957              	.L147:
1464:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 135


 1958              		.loc 1 1464 13 view .LVU557
 1959 0090 0026     		movs	r6, #0
 1960 0092 DDE7     		b	.L142
 1961              	.L148:
1509:base/os/FreeRTOS/Source/tasks.c **** 						}
 1962              		.loc 1 1509 23 view .LVU558
 1963 0094 0126     		movs	r6, #1
 1964 0096 DBE7     		b	.L142
 1965              	.L149:
1528:base/os/FreeRTOS/Source/tasks.c **** 				}
 1966              		.loc 1 1528 21 view .LVU559
 1967 0098 0126     		movs	r6, #1
 1968 009a D9E7     		b	.L142
 1969              	.LVL154:
 1970              	.L153:
1548:base/os/FreeRTOS/Source/tasks.c **** 					}
 1971              		.loc 1 1548 7 is_stmt 1 view .LVU560
1548:base/os/FreeRTOS/Source/tasks.c **** 					}
 1972              		.loc 1 1548 25 is_stmt 0 view .LVU561
 1973 009c EC62     		str	r4, [r5, #44]
 1974 009e DAE7     		b	.L143
 1975              	.LVL155:
 1976              	.L154:
1584:base/os/FreeRTOS/Source/tasks.c **** 					{
 1977              		.loc 1 1584 6 is_stmt 1 view .LVU562
1584:base/os/FreeRTOS/Source/tasks.c **** 					{
 1978              		.loc 1 1584 10 is_stmt 0 view .LVU563
 1979 00a0 2C1D     		adds	r4, r5, #4
 1980 00a2 2046     		mov	r0, r4
 1981 00a4 FFF7FEFF 		bl	uxListRemove
 1982              	.LVL156:
1593:base/os/FreeRTOS/Source/tasks.c **** 					}
 1983              		.loc 1 1593 31 is_stmt 1 view .LVU564
1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 1984              		.loc 1 1595 6 view .LVU565
1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 1985              		.loc 1 1595 6 view .LVU566
 1986 00a8 E86A     		ldr	r0, [r5, #44]
 1987 00aa 094B     		ldr	r3, .L155+8
 1988 00ac 1B68     		ldr	r3, [r3]
 1989 00ae 9842     		cmp	r0, r3
 1990 00b0 01D9     		bls	.L146
1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 1991              		.loc 1 1595 6 discriminator 1 view .LVU567
 1992 00b2 074B     		ldr	r3, .L155+8
 1993 00b4 1860     		str	r0, [r3]
 1994              	.L146:
1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 1995              		.loc 1 1595 6 discriminator 3 view .LVU568
1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 1996              		.loc 1 1595 6 discriminator 3 view .LVU569
 1997 00b6 00EB8000 		add	r0, r0, r0, lsl #2
 1998 00ba 2146     		mov	r1, r4
 1999 00bc 034B     		ldr	r3, .L155+4
 2000 00be 03EB8000 		add	r0, r3, r0, lsl #2
 2001 00c2 FFF7FEFF 		bl	vListInsertEnd
 2002              	.LVL157:
ARM GAS  /tmp/cchwbchh.s 			page 136


1595:base/os/FreeRTOS/Source/tasks.c **** 				}
 2003              		.loc 1 1595 36 discriminator 3 view .LVU570
 2004 00c6 D5E7     		b	.L145
 2005              	.L156:
 2006              		.align	2
 2007              	.L155:
 2008 00c8 00000000 		.word	.LANCHOR10
 2009 00cc 00000000 		.word	.LANCHOR4
 2010 00d0 00000000 		.word	.LANCHOR13
 2011              		.cfi_endproc
 2012              	.LFE14:
 2014              		.section	.text.vTaskResume,"ax",%progbits
 2015              		.align	1
 2016              		.global	vTaskResume
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2020              		.fpu softvfp
 2022              	vTaskResume:
 2023              	.LVL158:
 2024              	.LFB17:
1772:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2025              		.loc 1 1772 2 view -0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
1772:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2029              		.loc 1 1772 2 is_stmt 0 view .LVU572
 2030 0000 38B5     		push	{r3, r4, r5, lr}
 2031              	.LCFI20:
 2032              		.cfi_def_cfa_offset 16
 2033              		.cfi_offset 3, -16
 2034              		.cfi_offset 4, -12
 2035              		.cfi_offset 5, -8
 2036              		.cfi_offset 14, -4
1773:base/os/FreeRTOS/Source/tasks.c **** 
 2037              		.loc 1 1773 2 is_stmt 1 view .LVU573
 2038              	.LVL159:
1776:base/os/FreeRTOS/Source/tasks.c **** 
 2039              		.loc 1 1776 3 view .LVU574
 2040 0002 68B1     		cbz	r0, .L164
 2041 0004 0446     		mov	r4, r0
1776:base/os/FreeRTOS/Source/tasks.c **** 
 2042              		.loc 1 1776 32 discriminator 1 view .LVU575
1780:base/os/FreeRTOS/Source/tasks.c **** 		{
 2043              		.loc 1 1780 3 discriminator 1 view .LVU576
1780:base/os/FreeRTOS/Source/tasks.c **** 		{
 2044              		.loc 1 1780 36 is_stmt 0 discriminator 1 view .LVU577
 2045 0006 1D4B     		ldr	r3, .L166
 2046 0008 1B68     		ldr	r3, [r3]
1780:base/os/FreeRTOS/Source/tasks.c **** 		{
 2047              		.loc 1 1780 25 discriminator 1 view .LVU578
 2048 000a 8342     		cmp	r3, r0
 2049 000c 07D0     		beq	.L157
1782:base/os/FreeRTOS/Source/tasks.c **** 			{
 2050              		.loc 1 1782 4 is_stmt 1 view .LVU579
 2051 000e FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/cchwbchh.s 			page 137


 2052              	.LVL160:
1784:base/os/FreeRTOS/Source/tasks.c **** 				{
 2053              		.loc 1 1784 5 view .LVU580
1784:base/os/FreeRTOS/Source/tasks.c **** 				{
 2054              		.loc 1 1784 9 is_stmt 0 view .LVU581
 2055 0012 2046     		mov	r0, r4
 2056 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2057              	.LVL161:
1784:base/os/FreeRTOS/Source/tasks.c **** 				{
 2058              		.loc 1 1784 7 view .LVU582
 2059 0018 58B9     		cbnz	r0, .L165
 2060              	.L161:
1808:base/os/FreeRTOS/Source/tasks.c **** 				}
 2061              		.loc 1 1808 30 is_stmt 1 view .LVU583
1811:base/os/FreeRTOS/Source/tasks.c **** 		}
 2062              		.loc 1 1811 4 view .LVU584
 2063 001a FFF7FEFF 		bl	vPortExitCritical
 2064              	.LVL162:
1815:base/os/FreeRTOS/Source/tasks.c **** 		}
 2065              		.loc 1 1815 28 view .LVU585
 2066              	.L157:
1817:base/os/FreeRTOS/Source/tasks.c **** 
 2067              		.loc 1 1817 2 is_stmt 0 view .LVU586
 2068 001e 38BD     		pop	{r3, r4, r5, pc}
 2069              	.LVL163:
 2070              	.L164:
1776:base/os/FreeRTOS/Source/tasks.c **** 
 2071              		.loc 1 1776 3 is_stmt 1 view .LVU587
 2072              	.LBB139:
 2073              	.LBI139:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2074              		.loc 2 191 30 view .LVU588
 2075              	.LBB140:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2076              		.loc 2 193 1 view .LVU589
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2077              		.loc 2 195 2 view .LVU590
 2078              		.syntax unified
 2079              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2080 0020 4FF05003 			mov r3, #80												
 2081 0024 83F31188 		msr basepri, r3											
 2082 0028 BFF36F8F 		isb														
 2083 002c BFF34F8F 		dsb														
 2084              	
 2085              	@ 0 "" 2
 2086              	.LVL164:
 2087              		.thumb
 2088              		.syntax unified
 2089              	.L159:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2090              		.loc 2 195 2 is_stmt 0 view .LVU591
 2091              	.LBE140:
 2092              	.LBE139:
1776:base/os/FreeRTOS/Source/tasks.c **** 
 2093              		.loc 1 1776 3 is_stmt 1 discriminator 1 view .LVU592
1776:base/os/FreeRTOS/Source/tasks.c **** 
 2094              		.loc 1 1776 3 discriminator 1 view .LVU593
ARM GAS  /tmp/cchwbchh.s 			page 138


 2095 0030 FEE7     		b	.L159
 2096              	.LVL165:
 2097              	.L165:
1786:base/os/FreeRTOS/Source/tasks.c **** 
 2098              		.loc 1 1786 31 view .LVU594
1790:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2099              		.loc 1 1790 6 view .LVU595
1790:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2100              		.loc 1 1790 15 is_stmt 0 view .LVU596
 2101 0032 251D     		adds	r5, r4, #4
 2102 0034 2846     		mov	r0, r5
 2103 0036 FFF7FEFF 		bl	uxListRemove
 2104              	.LVL166:
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2105              		.loc 1 1791 6 is_stmt 1 view .LVU597
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2106              		.loc 1 1791 6 view .LVU598
 2107 003a E06A     		ldr	r0, [r4, #44]
 2108 003c 104B     		ldr	r3, .L166+4
 2109 003e 1B68     		ldr	r3, [r3]
 2110 0040 9842     		cmp	r0, r3
 2111 0042 01D9     		bls	.L162
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2112              		.loc 1 1791 6 discriminator 1 view .LVU599
 2113 0044 0E4B     		ldr	r3, .L166+4
 2114 0046 1860     		str	r0, [r3]
 2115              	.L162:
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2116              		.loc 1 1791 6 discriminator 3 view .LVU600
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2117              		.loc 1 1791 6 discriminator 3 view .LVU601
 2118 0048 00EB8000 		add	r0, r0, r0, lsl #2
 2119 004c 2946     		mov	r1, r5
 2120 004e 0D4B     		ldr	r3, .L166+8
 2121 0050 03EB8000 		add	r0, r3, r0, lsl #2
 2122 0054 FFF7FEFF 		bl	vListInsertEnd
 2123              	.LVL167:
1791:base/os/FreeRTOS/Source/tasks.c **** 
 2124              		.loc 1 1791 36 discriminator 3 view .LVU602
1794:base/os/FreeRTOS/Source/tasks.c **** 					{
 2125              		.loc 1 1794 6 discriminator 3 view .LVU603
1794:base/os/FreeRTOS/Source/tasks.c **** 					{
 2126              		.loc 1 1794 15 is_stmt 0 discriminator 3 view .LVU604
 2127 0058 E26A     		ldr	r2, [r4, #44]
1794:base/os/FreeRTOS/Source/tasks.c **** 					{
 2128              		.loc 1 1794 43 discriminator 3 view .LVU605
 2129 005a 084B     		ldr	r3, .L166
 2130 005c 1B68     		ldr	r3, [r3]
 2131 005e DB6A     		ldr	r3, [r3, #44]
1794:base/os/FreeRTOS/Source/tasks.c **** 					{
 2132              		.loc 1 1794 8 discriminator 3 view .LVU606
 2133 0060 9A42     		cmp	r2, r3
 2134 0062 DAD3     		bcc	.L161
1799:base/os/FreeRTOS/Source/tasks.c **** 					}
 2135              		.loc 1 1799 7 is_stmt 1 view .LVU607
 2136 0064 4FF0E023 		mov	r3, #-536813568
 2137 0068 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/cchwbchh.s 			page 139


 2138 006c C3F8042D 		str	r2, [r3, #3332]
1799:base/os/FreeRTOS/Source/tasks.c **** 					}
 2139              		.loc 1 1799 7 view .LVU608
 2140              		.syntax unified
 2141              	@ 1799 "base/os/FreeRTOS/Source/tasks.c" 1
 2142 0070 BFF34F8F 		dsb
 2143              	@ 0 "" 2
1799:base/os/FreeRTOS/Source/tasks.c **** 					}
 2144              		.loc 1 1799 7 view .LVU609
 2145              	@ 1799 "base/os/FreeRTOS/Source/tasks.c" 1
 2146 0074 BFF36F8F 		isb
 2147              	@ 0 "" 2
1799:base/os/FreeRTOS/Source/tasks.c **** 					}
 2148              		.loc 1 1799 38 view .LVU610
 2149              		.thumb
 2150              		.syntax unified
 2151 0078 CFE7     		b	.L161
 2152              	.L167:
 2153 007a 00BF     		.align	2
 2154              	.L166:
 2155 007c 00000000 		.word	.LANCHOR10
 2156 0080 00000000 		.word	.LANCHOR13
 2157 0084 00000000 		.word	.LANCHOR4
 2158              		.cfi_endproc
 2159              	.LFE17:
 2161              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2162              		.align	1
 2163              		.global	xTaskResumeFromISR
 2164              		.syntax unified
 2165              		.thumb
 2166              		.thumb_func
 2167              		.fpu softvfp
 2169              	xTaskResumeFromISR:
 2170              	.LVL168:
 2171              	.LFB18:
1826:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2172              		.loc 1 1826 2 view -0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
1826:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2176              		.loc 1 1826 2 is_stmt 0 view .LVU612
 2177 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2178              	.LCFI21:
 2179              		.cfi_def_cfa_offset 24
 2180              		.cfi_offset 3, -24
 2181              		.cfi_offset 4, -20
 2182              		.cfi_offset 5, -16
 2183              		.cfi_offset 6, -12
 2184              		.cfi_offset 7, -8
 2185              		.cfi_offset 14, -4
1827:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2186              		.loc 1 1827 2 is_stmt 1 view .LVU613
 2187              	.LVL169:
1828:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 2188              		.loc 1 1828 2 view .LVU614
1829:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 140


 2189              		.loc 1 1829 2 view .LVU615
1831:base/os/FreeRTOS/Source/tasks.c **** 
 2190              		.loc 1 1831 3 view .LVU616
 2191 0002 0028     		cmp	r0, #0
 2192 0004 32D0     		beq	.L177
 2193 0006 0646     		mov	r6, r0
1831:base/os/FreeRTOS/Source/tasks.c **** 
 2194              		.loc 1 1831 32 discriminator 2 view .LVU617
1849:base/os/FreeRTOS/Source/tasks.c **** 
 2195              		.loc 1 1849 3 discriminator 2 view .LVU618
 2196 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2197              	.LVL170:
1851:base/os/FreeRTOS/Source/tasks.c **** 		{
 2198              		.loc 1 1851 3 discriminator 2 view .LVU619
 2199              	.LBB141:
 2200              	.LBI141:
 207:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2201              		.loc 2 207 34 discriminator 2 view .LVU620
 2202              	.LBB142:
 209:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2203              		.loc 2 209 1 discriminator 2 view .LVU621
 211:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2204              		.loc 2 211 2 discriminator 2 view .LVU622
 2205              		.syntax unified
 2206              	@ 211 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2207 000c EFF31184 			mrs r4, basepri											
 2208 0010 4FF05003 		mov r3, #80												
 2209 0014 83F31188 		msr basepri, r3											
 2210 0018 BFF36F8F 		isb														
 2211 001c BFF34F8F 		dsb														
 2212              	
 2213              	@ 0 "" 2
 2214              	.LVL171:
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 2215              		.loc 2 223 2 discriminator 2 view .LVU623
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 2216              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU624
 2217              		.thumb
 2218              		.syntax unified
 2219              	.LBE142:
 2220              	.LBE141:
1853:base/os/FreeRTOS/Source/tasks.c **** 			{
 2221              		.loc 1 1853 4 is_stmt 1 discriminator 2 view .LVU625
1853:base/os/FreeRTOS/Source/tasks.c **** 			{
 2222              		.loc 1 1853 8 is_stmt 0 discriminator 2 view .LVU626
 2223 0020 3046     		mov	r0, r6
 2224 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2225              	.LVL172:
1853:base/os/FreeRTOS/Source/tasks.c **** 			{
 2226              		.loc 1 1853 6 discriminator 2 view .LVU627
 2227 0026 0546     		mov	r5, r0
 2228 0028 E0B1     		cbz	r0, .L171
1855:base/os/FreeRTOS/Source/tasks.c **** 
 2229              		.loc 1 1855 39 is_stmt 1 view .LVU628
1858:base/os/FreeRTOS/Source/tasks.c **** 				{
 2230              		.loc 1 1858 5 view .LVU629
1858:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 141


 2231              		.loc 1 1858 30 is_stmt 0 view .LVU630
 2232 002a 194B     		ldr	r3, .L178
 2233 002c 1B68     		ldr	r3, [r3]
1858:base/os/FreeRTOS/Source/tasks.c **** 				{
 2234              		.loc 1 1858 7 view .LVU631
 2235 002e 43BB     		cbnz	r3, .L172
1862:base/os/FreeRTOS/Source/tasks.c **** 					{
 2236              		.loc 1 1862 6 is_stmt 1 view .LVU632
1862:base/os/FreeRTOS/Source/tasks.c **** 					{
 2237              		.loc 1 1862 15 is_stmt 0 view .LVU633
 2238 0030 F26A     		ldr	r2, [r6, #44]
1862:base/os/FreeRTOS/Source/tasks.c **** 					{
 2239              		.loc 1 1862 43 view .LVU634
 2240 0032 184B     		ldr	r3, .L178+4
 2241 0034 1B68     		ldr	r3, [r3]
 2242 0036 DB6A     		ldr	r3, [r3, #44]
1862:base/os/FreeRTOS/Source/tasks.c **** 					{
 2243              		.loc 1 1862 8 view .LVU635
 2244 0038 9A42     		cmp	r2, r3
 2245 003a 20D2     		bcs	.L175
1827:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2246              		.loc 1 1827 13 view .LVU636
 2247 003c 0025     		movs	r5, #0
 2248              	.L173:
 2249              	.LVL173:
1868:base/os/FreeRTOS/Source/tasks.c **** 					}
 2250              		.loc 1 1868 31 is_stmt 1 view .LVU637
1871:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2251              		.loc 1 1871 6 view .LVU638
1871:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2252              		.loc 1 1871 15 is_stmt 0 view .LVU639
 2253 003e 371D     		adds	r7, r6, #4
 2254 0040 3846     		mov	r0, r7
 2255 0042 FFF7FEFF 		bl	uxListRemove
 2256              	.LVL174:
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2257              		.loc 1 1872 6 is_stmt 1 view .LVU640
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2258              		.loc 1 1872 6 view .LVU641
 2259 0046 F06A     		ldr	r0, [r6, #44]
 2260 0048 134B     		ldr	r3, .L178+8
 2261 004a 1B68     		ldr	r3, [r3]
 2262 004c 9842     		cmp	r0, r3
 2263 004e 01D9     		bls	.L174
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2264              		.loc 1 1872 6 discriminator 1 view .LVU642
 2265 0050 114B     		ldr	r3, .L178+8
 2266 0052 1860     		str	r0, [r3]
 2267              	.L174:
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2268              		.loc 1 1872 6 discriminator 3 view .LVU643
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2269              		.loc 1 1872 6 discriminator 3 view .LVU644
 2270 0054 00EB8000 		add	r0, r0, r0, lsl #2
 2271 0058 3946     		mov	r1, r7
 2272 005a 104B     		ldr	r3, .L178+12
 2273 005c 03EB8000 		add	r0, r3, r0, lsl #2
ARM GAS  /tmp/cchwbchh.s 			page 142


 2274 0060 FFF7FEFF 		bl	vListInsertEnd
 2275              	.LVL175:
1872:base/os/FreeRTOS/Source/tasks.c **** 				}
 2276              		.loc 1 1872 36 discriminator 3 view .LVU645
 2277              	.L171:
1884:base/os/FreeRTOS/Source/tasks.c **** 			}
 2278              		.loc 1 1884 29 view .LVU646
1887:base/os/FreeRTOS/Source/tasks.c **** 
 2279              		.loc 1 1887 3 view .LVU647
 2280              	.LBB143:
 2281              	.LBI143:
 227:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2282              		.loc 2 227 30 view .LVU648
 2283              	.LBB144:
 2284              		.loc 2 229 2 view .LVU649
 2285              		.syntax unified
 2286              	@ 229 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2287 0064 84F31188 			msr basepri, r4	
 2288              	@ 0 "" 2
 2289              		.thumb
 2290              		.syntax unified
 2291              	.LBE144:
 2292              	.LBE143:
1889:base/os/FreeRTOS/Source/tasks.c **** 	}
 2293              		.loc 1 1889 3 view .LVU650
1890:base/os/FreeRTOS/Source/tasks.c **** 
 2294              		.loc 1 1890 2 is_stmt 0 view .LVU651
 2295 0068 2846     		mov	r0, r5
 2296 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2297              	.LVL176:
 2298              	.L177:
1831:base/os/FreeRTOS/Source/tasks.c **** 
 2299              		.loc 1 1831 3 is_stmt 1 view .LVU652
 2300              	.LBB145:
 2301              	.LBI145:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2302              		.loc 2 191 30 view .LVU653
 2303              	.LBB146:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2304              		.loc 2 193 1 view .LVU654
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2305              		.loc 2 195 2 view .LVU655
 2306              		.syntax unified
 2307              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2308 006c 4FF05003 			mov r3, #80												
 2309 0070 83F31188 		msr basepri, r3											
 2310 0074 BFF36F8F 		isb														
 2311 0078 BFF34F8F 		dsb														
 2312              	
 2313              	@ 0 "" 2
 2314              	.LVL177:
 2315              		.thumb
 2316              		.syntax unified
 2317              	.L170:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2318              		.loc 2 195 2 is_stmt 0 view .LVU656
 2319              	.LBE146:
ARM GAS  /tmp/cchwbchh.s 			page 143


 2320              	.LBE145:
1831:base/os/FreeRTOS/Source/tasks.c **** 
 2321              		.loc 1 1831 3 is_stmt 1 discriminator 1 view .LVU657
1831:base/os/FreeRTOS/Source/tasks.c **** 
 2322              		.loc 1 1831 3 discriminator 1 view .LVU658
 2323 007c FEE7     		b	.L170
 2324              	.LVL178:
 2325              	.L175:
1864:base/os/FreeRTOS/Source/tasks.c **** 					}
 2326              		.loc 1 1864 22 is_stmt 0 view .LVU659
 2327 007e 0125     		movs	r5, #1
 2328 0080 DDE7     		b	.L173
 2329              	.L172:
1879:base/os/FreeRTOS/Source/tasks.c **** 				}
 2330              		.loc 1 1879 6 is_stmt 1 view .LVU660
 2331 0082 06F11801 		add	r1, r6, #24
 2332 0086 0648     		ldr	r0, .L178+16
 2333 0088 FFF7FEFF 		bl	vListInsertEnd
 2334              	.LVL179:
1827:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2335              		.loc 1 1827 13 is_stmt 0 view .LVU661
 2336 008c 0025     		movs	r5, #0
 2337 008e E9E7     		b	.L171
 2338              	.L179:
 2339              		.align	2
 2340              	.L178:
 2341 0090 00000000 		.word	.LANCHOR16
 2342 0094 00000000 		.word	.LANCHOR10
 2343 0098 00000000 		.word	.LANCHOR13
 2344 009c 00000000 		.word	.LANCHOR4
 2345 00a0 00000000 		.word	.LANCHOR1
 2346              		.cfi_endproc
 2347              	.LFE18:
 2349              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2350              		.align	2
 2351              	.LC0:
 2352 0000 49444C45 		.ascii	"IDLE\000"
 2352      00
 2353              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2354              		.align	1
 2355              		.global	vTaskStartScheduler
 2356              		.syntax unified
 2357              		.thumb
 2358              		.thumb_func
 2359              		.fpu softvfp
 2361              	vTaskStartScheduler:
 2362              	.LFB19:
1896:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2363              		.loc 1 1896 1 is_stmt 1 view -0
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 16
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
 2367 0000 10B5     		push	{r4, lr}
 2368              	.LCFI22:
 2369              		.cfi_def_cfa_offset 8
 2370              		.cfi_offset 4, -8
 2371              		.cfi_offset 14, -4
ARM GAS  /tmp/cchwbchh.s 			page 144


 2372 0002 88B0     		sub	sp, sp, #32
 2373              	.LCFI23:
 2374              		.cfi_def_cfa_offset 40
1897:base/os/FreeRTOS/Source/tasks.c **** 
 2375              		.loc 1 1897 1 view .LVU663
 2376              	.LBB147:
1902:base/os/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2377              		.loc 1 1902 3 view .LVU664
1902:base/os/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2378              		.loc 1 1902 17 is_stmt 0 view .LVU665
 2379 0004 0024     		movs	r4, #0
 2380 0006 0594     		str	r4, [sp, #20]
1903:base/os/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2381              		.loc 1 1903 3 is_stmt 1 view .LVU666
1903:base/os/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2382              		.loc 1 1903 16 is_stmt 0 view .LVU667
 2383 0008 0694     		str	r4, [sp, #24]
1904:base/os/FreeRTOS/Source/tasks.c **** 
 2384              		.loc 1 1904 3 is_stmt 1 view .LVU668
1908:base/os/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2385              		.loc 1 1908 3 view .LVU669
 2386 000a 07AA     		add	r2, sp, #28
 2387 000c 06A9     		add	r1, sp, #24
 2388 000e 05A8     		add	r0, sp, #20
 2389 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2390              	.LVL180:
1909:base/os/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2391              		.loc 1 1909 3 view .LVU670
1909:base/os/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2392              		.loc 1 1909 21 is_stmt 0 view .LVU671
 2393 0014 059B     		ldr	r3, [sp, #20]
 2394 0016 0293     		str	r3, [sp, #8]
 2395 0018 069B     		ldr	r3, [sp, #24]
 2396 001a 0193     		str	r3, [sp, #4]
 2397 001c 0094     		str	r4, [sp]
 2398 001e 2346     		mov	r3, r4
 2399 0020 079A     		ldr	r2, [sp, #28]
 2400 0022 1849     		ldr	r1, .L189
 2401 0024 1848     		ldr	r0, .L189+4
 2402 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2403              	.LVL181:
1909:base/os/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2404              		.loc 1 1909 19 view .LVU672
 2405 002a 184B     		ldr	r3, .L189+8
 2406 002c 1860     		str	r0, [r3]
1917:base/os/FreeRTOS/Source/tasks.c **** 		{
 2407              		.loc 1 1917 3 is_stmt 1 view .LVU673
1917:base/os/FreeRTOS/Source/tasks.c **** 		{
 2408              		.loc 1 1917 5 is_stmt 0 view .LVU674
 2409 002e 40B1     		cbz	r0, .L181
 2410              	.LVL182:
1917:base/os/FreeRTOS/Source/tasks.c **** 		{
 2411              		.loc 1 1917 5 view .LVU675
 2412              	.LBE147:
1940:base/os/FreeRTOS/Source/tasks.c **** 		{
 2413              		.loc 1 1940 3 is_stmt 1 view .LVU676
1942:base/os/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cchwbchh.s 			page 145


 2414              		.loc 1 1942 4 view .LVU677
1942:base/os/FreeRTOS/Source/tasks.c **** 		}
 2415              		.loc 1 1942 14 is_stmt 0 view .LVU678
 2416 0030 FFF7FEFF 		bl	xTimerCreateTimerTask
 2417              	.LVL183:
 2418              	.L182:
1946:base/os/FreeRTOS/Source/tasks.c **** 		}
 2419              		.loc 1 1946 28 is_stmt 1 view .LVU679
1951:base/os/FreeRTOS/Source/tasks.c **** 	{
 2420              		.loc 1 1951 2 view .LVU680
1951:base/os/FreeRTOS/Source/tasks.c **** 	{
 2421              		.loc 1 1951 4 is_stmt 0 view .LVU681
 2422 0034 0128     		cmp	r0, #1
 2423 0036 06D0     		beq	.L187
2006:base/os/FreeRTOS/Source/tasks.c **** 	}
 2424              		.loc 1 2006 3 is_stmt 1 view .LVU682
 2425 0038 B0F1FF3F 		cmp	r0, #-1
 2426 003c 18D0     		beq	.L188
 2427              	.LVL184:
 2428              	.L180:
2012:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2429              		.loc 1 2012 1 is_stmt 0 view .LVU683
 2430 003e 08B0     		add	sp, sp, #32
 2431              	.LCFI24:
 2432              		.cfi_remember_state
 2433              		.cfi_def_cfa_offset 8
 2434              		@ sp needed
 2435 0040 10BD     		pop	{r4, pc}
 2436              	.L181:
 2437              	.LCFI25:
 2438              		.cfi_restore_state
 2439              	.LBB148:
1923:base/os/FreeRTOS/Source/tasks.c **** 		}
 2440              		.loc 1 1923 4 is_stmt 1 view .LVU684
 2441              	.LVL185:
1923:base/os/FreeRTOS/Source/tasks.c **** 		}
 2442              		.loc 1 1923 4 is_stmt 0 view .LVU685
 2443              	.LBE148:
1940:base/os/FreeRTOS/Source/tasks.c **** 		{
 2444              		.loc 1 1940 3 is_stmt 1 view .LVU686
 2445              	.LBB149:
1923:base/os/FreeRTOS/Source/tasks.c **** 		}
 2446              		.loc 1 1923 12 is_stmt 0 view .LVU687
 2447 0042 0020     		movs	r0, #0
 2448 0044 F6E7     		b	.L182
 2449              	.LVL186:
 2450              	.L187:
1923:base/os/FreeRTOS/Source/tasks.c **** 		}
 2451              		.loc 1 1923 12 view .LVU688
 2452              	.LBE149:
1967:base/os/FreeRTOS/Source/tasks.c **** 
 2453              		.loc 1 1967 3 is_stmt 1 view .LVU689
 2454              	.LBB150:
 2455              	.LBI150:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2456              		.loc 2 191 30 view .LVU690
 2457              	.LBB151:
ARM GAS  /tmp/cchwbchh.s 			page 146


 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2458              		.loc 2 193 1 view .LVU691
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2459              		.loc 2 195 2 view .LVU692
 2460              		.syntax unified
 2461              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2462 0046 4FF05003 			mov r3, #80												
 2463 004a 83F31188 		msr basepri, r3											
 2464 004e BFF36F8F 		isb														
 2465 0052 BFF34F8F 		dsb														
 2466              	
 2467              	@ 0 "" 2
 2468              		.thumb
 2469              		.syntax unified
 2470              	.LBE151:
 2471              	.LBE150:
1977:base/os/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2472              		.loc 1 1977 3 view .LVU693
1977:base/os/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2473              		.loc 1 1977 24 is_stmt 0 view .LVU694
 2474 0056 0E4B     		ldr	r3, .L189+12
 2475 0058 4FF0FF32 		mov	r2, #-1
 2476 005c 1A60     		str	r2, [r3]
1978:base/os/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2477              		.loc 1 1978 3 is_stmt 1 view .LVU695
1978:base/os/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2478              		.loc 1 1978 21 is_stmt 0 view .LVU696
 2479 005e 0D4B     		ldr	r3, .L189+16
 2480 0060 0122     		movs	r2, #1
 2481 0062 1A60     		str	r2, [r3]
1979:base/os/FreeRTOS/Source/tasks.c **** 
 2482              		.loc 1 1979 3 is_stmt 1 view .LVU697
1979:base/os/FreeRTOS/Source/tasks.c **** 
 2483              		.loc 1 1979 14 is_stmt 0 view .LVU698
 2484 0064 0C4B     		ldr	r3, .L189+20
 2485 0066 0022     		movs	r2, #0
 2486 0068 1A60     		str	r2, [r3]
1987:base/os/FreeRTOS/Source/tasks.c **** 
 2487              		.loc 1 1987 43 is_stmt 1 view .LVU699
1991:base/os/FreeRTOS/Source/tasks.c **** 		{
 2488              		.loc 1 1991 3 view .LVU700
1991:base/os/FreeRTOS/Source/tasks.c **** 		{
 2489              		.loc 1 1991 7 is_stmt 0 view .LVU701
 2490 006a FFF7FEFF 		bl	xPortStartScheduler
 2491              	.LVL187:
1991:base/os/FreeRTOS/Source/tasks.c **** 		{
 2492              		.loc 1 1991 7 view .LVU702
 2493 006e E6E7     		b	.L180
 2494              	.LVL188:
 2495              	.L188:
2006:base/os/FreeRTOS/Source/tasks.c **** 	}
 2496              		.loc 1 2006 3 is_stmt 1 view .LVU703
 2497              	.LBB152:
 2498              	.LBI152:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2499              		.loc 2 191 30 view .LVU704
 2500              	.LBB153:
ARM GAS  /tmp/cchwbchh.s 			page 147


 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2501              		.loc 2 193 1 view .LVU705
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2502              		.loc 2 195 2 view .LVU706
 2503              		.syntax unified
 2504              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2505 0070 4FF05003 			mov r3, #80												
 2506 0074 83F31188 		msr basepri, r3											
 2507 0078 BFF36F8F 		isb														
 2508 007c BFF34F8F 		dsb														
 2509              	
 2510              	@ 0 "" 2
 2511              	.LVL189:
 2512              		.thumb
 2513              		.syntax unified
 2514              	.L185:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2515              		.loc 2 195 2 is_stmt 0 view .LVU707
 2516              	.LBE153:
 2517              	.LBE152:
2006:base/os/FreeRTOS/Source/tasks.c **** 	}
 2518              		.loc 1 2006 3 is_stmt 1 discriminator 2 view .LVU708
2006:base/os/FreeRTOS/Source/tasks.c **** 	}
 2519              		.loc 1 2006 3 discriminator 2 view .LVU709
 2520 0080 FEE7     		b	.L185
 2521              	.L190:
 2522 0082 00BF     		.align	2
 2523              	.L189:
 2524 0084 00000000 		.word	.LC0
 2525 0088 00000000 		.word	prvIdleTask
 2526 008c 00000000 		.word	.LANCHOR17
 2527 0090 00000000 		.word	.LANCHOR3
 2528 0094 00000000 		.word	.LANCHOR11
 2529 0098 00000000 		.word	.LANCHOR15
 2530              		.cfi_endproc
 2531              	.LFE19:
 2533              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2534              		.align	1
 2535              		.global	vTaskEndScheduler
 2536              		.syntax unified
 2537              		.thumb
 2538              		.thumb_func
 2539              		.fpu softvfp
 2541              	vTaskEndScheduler:
 2542              	.LFB20:
2016:base/os/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2543              		.loc 1 2016 1 view -0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 0, uses_anonymous_args = 0
 2547 0000 08B5     		push	{r3, lr}
 2548              	.LCFI26:
 2549              		.cfi_def_cfa_offset 8
 2550              		.cfi_offset 3, -8
 2551              		.cfi_offset 14, -4
2020:base/os/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2552              		.loc 1 2020 2 view .LVU711
ARM GAS  /tmp/cchwbchh.s 			page 148


 2553              	.LBB154:
 2554              	.LBI154:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2555              		.loc 2 191 30 view .LVU712
 2556              	.LBB155:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2557              		.loc 2 193 1 view .LVU713
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2558              		.loc 2 195 2 view .LVU714
 2559              		.syntax unified
 2560              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2561 0002 4FF05003 			mov r3, #80												
 2562 0006 83F31188 		msr basepri, r3											
 2563 000a BFF36F8F 		isb														
 2564 000e BFF34F8F 		dsb														
 2565              	
 2566              	@ 0 "" 2
 2567              		.thumb
 2568              		.syntax unified
 2569              	.LBE155:
 2570              	.LBE154:
2021:base/os/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2571              		.loc 1 2021 2 view .LVU715
2021:base/os/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2572              		.loc 1 2021 20 is_stmt 0 view .LVU716
 2573 0012 034B     		ldr	r3, .L193
 2574 0014 0022     		movs	r2, #0
 2575 0016 1A60     		str	r2, [r3]
2022:base/os/FreeRTOS/Source/tasks.c **** }
 2576              		.loc 1 2022 2 is_stmt 1 view .LVU717
 2577 0018 FFF7FEFF 		bl	vPortEndScheduler
 2578              	.LVL190:
2023:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2579              		.loc 1 2023 1 is_stmt 0 view .LVU718
 2580 001c 08BD     		pop	{r3, pc}
 2581              	.L194:
 2582 001e 00BF     		.align	2
 2583              	.L193:
 2584 0020 00000000 		.word	.LANCHOR11
 2585              		.cfi_endproc
 2586              	.LFE20:
 2588              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2589              		.align	1
 2590              		.global	vTaskSuspendAll
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2594              		.fpu softvfp
 2596              	vTaskSuspendAll:
 2597              	.LFB21:
2027:base/os/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2598              		.loc 1 2027 1 is_stmt 1 view -0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602              		@ link register save eliminated.
2032:base/os/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cchwbchh.s 			page 149


 2603              		.loc 1 2032 2 view .LVU720
 2604 0000 024A     		ldr	r2, .L196
 2605 0002 1368     		ldr	r3, [r2]
 2606 0004 0133     		adds	r3, r3, #1
 2607 0006 1360     		str	r3, [r2]
2033:base/os/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2608              		.loc 1 2033 1 is_stmt 0 view .LVU721
 2609 0008 7047     		bx	lr
 2610              	.L197:
 2611 000a 00BF     		.align	2
 2612              	.L196:
 2613 000c 00000000 		.word	.LANCHOR16
 2614              		.cfi_endproc
 2615              	.LFE21:
 2617              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2618              		.align	1
 2619              		.global	xTaskGetTickCount
 2620              		.syntax unified
 2621              		.thumb
 2622              		.thumb_func
 2623              		.fpu softvfp
 2625              	xTaskGetTickCount:
 2626              	.LFB23:
2210:base/os/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2627              		.loc 1 2210 1 is_stmt 1 view -0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 0
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
 2631              		@ link register save eliminated.
2211:base/os/FreeRTOS/Source/tasks.c **** 
 2632              		.loc 1 2211 1 view .LVU723
2214:base/os/FreeRTOS/Source/tasks.c **** 	{
 2633              		.loc 1 2214 32 view .LVU724
2216:base/os/FreeRTOS/Source/tasks.c **** 	}
 2634              		.loc 1 2216 3 view .LVU725
2216:base/os/FreeRTOS/Source/tasks.c **** 	}
 2635              		.loc 1 2216 10 is_stmt 0 view .LVU726
 2636 0000 014B     		ldr	r3, .L199
 2637 0002 1868     		ldr	r0, [r3]
 2638              	.LVL191:
2218:base/os/FreeRTOS/Source/tasks.c **** 
 2639              		.loc 1 2218 31 is_stmt 1 view .LVU727
2220:base/os/FreeRTOS/Source/tasks.c **** }
 2640              		.loc 1 2220 2 view .LVU728
2221:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2641              		.loc 1 2221 1 is_stmt 0 view .LVU729
 2642 0004 7047     		bx	lr
 2643              	.L200:
 2644 0006 00BF     		.align	2
 2645              	.L199:
 2646 0008 00000000 		.word	.LANCHOR15
 2647              		.cfi_endproc
 2648              	.LFE23:
 2650              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2651              		.align	1
 2652              		.global	xTaskGetTickCountFromISR
 2653              		.syntax unified
ARM GAS  /tmp/cchwbchh.s 			page 150


 2654              		.thumb
 2655              		.thumb_func
 2656              		.fpu softvfp
 2658              	xTaskGetTickCountFromISR:
 2659              	.LFB24:
2225:base/os/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2660              		.loc 1 2225 1 is_stmt 1 view -0
 2661              		.cfi_startproc
 2662              		@ args = 0, pretend = 0, frame = 0
 2663              		@ frame_needed = 0, uses_anonymous_args = 0
 2664 0000 08B5     		push	{r3, lr}
 2665              	.LCFI27:
 2666              		.cfi_def_cfa_offset 8
 2667              		.cfi_offset 3, -8
 2668              		.cfi_offset 14, -4
2226:base/os/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 2669              		.loc 1 2226 1 view .LVU731
2227:base/os/FreeRTOS/Source/tasks.c **** 
 2670              		.loc 1 2227 1 view .LVU732
2243:base/os/FreeRTOS/Source/tasks.c **** 
 2671              		.loc 1 2243 2 view .LVU733
 2672 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2673              	.LVL192:
2245:base/os/FreeRTOS/Source/tasks.c **** 	{
 2674              		.loc 1 2245 2 view .LVU734
2247:base/os/FreeRTOS/Source/tasks.c **** 	}
 2675              		.loc 1 2247 3 view .LVU735
2247:base/os/FreeRTOS/Source/tasks.c **** 	}
 2676              		.loc 1 2247 11 is_stmt 0 view .LVU736
 2677 0006 014B     		ldr	r3, .L203
 2678 0008 1868     		ldr	r0, [r3]
 2679              	.LVL193:
2249:base/os/FreeRTOS/Source/tasks.c **** 
 2680              		.loc 1 2249 2 is_stmt 1 view .LVU737
2251:base/os/FreeRTOS/Source/tasks.c **** }
 2681              		.loc 1 2251 2 view .LVU738
2252:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2682              		.loc 1 2252 1 is_stmt 0 view .LVU739
 2683 000a 08BD     		pop	{r3, pc}
 2684              	.L204:
 2685              		.align	2
 2686              	.L203:
 2687 000c 00000000 		.word	.LANCHOR15
 2688              		.cfi_endproc
 2689              	.LFE24:
 2691              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2692              		.align	1
 2693              		.global	uxTaskGetNumberOfTasks
 2694              		.syntax unified
 2695              		.thumb
 2696              		.thumb_func
 2697              		.fpu softvfp
 2699              	uxTaskGetNumberOfTasks:
 2700              	.LFB25:
2256:base/os/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2701              		.loc 1 2256 1 is_stmt 1 view -0
 2702              		.cfi_startproc
ARM GAS  /tmp/cchwbchh.s 			page 151


 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 2705              		@ link register save eliminated.
2259:base/os/FreeRTOS/Source/tasks.c **** }
 2706              		.loc 1 2259 2 view .LVU741
2259:base/os/FreeRTOS/Source/tasks.c **** }
 2707              		.loc 1 2259 9 is_stmt 0 view .LVU742
 2708 0000 014B     		ldr	r3, .L206
 2709 0002 1868     		ldr	r0, [r3]
2260:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2710              		.loc 1 2260 1 view .LVU743
 2711 0004 7047     		bx	lr
 2712              	.L207:
 2713 0006 00BF     		.align	2
 2714              	.L206:
 2715 0008 00000000 		.word	.LANCHOR9
 2716              		.cfi_endproc
 2717              	.LFE25:
 2719              		.section	.text.pcTaskGetName,"ax",%progbits
 2720              		.align	1
 2721              		.global	pcTaskGetName
 2722              		.syntax unified
 2723              		.thumb
 2724              		.thumb_func
 2725              		.fpu softvfp
 2727              	pcTaskGetName:
 2728              	.LVL194:
 2729              	.LFB26:
2264:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2730              		.loc 1 2264 1 is_stmt 1 view -0
 2731              		.cfi_startproc
 2732              		@ args = 0, pretend = 0, frame = 0
 2733              		@ frame_needed = 0, uses_anonymous_args = 0
 2734              		@ link register save eliminated.
2265:base/os/FreeRTOS/Source/tasks.c **** 
 2735              		.loc 1 2265 1 view .LVU745
2269:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2736              		.loc 1 2269 2 view .LVU746
2269:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2737              		.loc 1 2269 10 is_stmt 0 view .LVU747
 2738 0000 0346     		mov	r3, r0
 2739 0002 18B1     		cbz	r0, .L212
 2740              	.LVL195:
 2741              	.L209:
2270:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2742              		.loc 1 2270 2 is_stmt 1 discriminator 4 view .LVU748
 2743 0004 2BB1     		cbz	r3, .L213
2270:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2744              		.loc 1 2270 23 discriminator 2 view .LVU749
2271:base/os/FreeRTOS/Source/tasks.c **** }
 2745              		.loc 1 2271 2 discriminator 2 view .LVU750
2272:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2746              		.loc 1 2272 1 is_stmt 0 discriminator 2 view .LVU751
 2747 0006 03F13400 		add	r0, r3, #52
 2748 000a 7047     		bx	lr
 2749              	.LVL196:
 2750              	.L212:
ARM GAS  /tmp/cchwbchh.s 			page 152


2269:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2751              		.loc 1 2269 10 discriminator 1 view .LVU752
 2752 000c 054B     		ldr	r3, .L214
 2753 000e 1B68     		ldr	r3, [r3]
 2754              	.LVL197:
2269:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2755              		.loc 1 2269 10 discriminator 1 view .LVU753
 2756 0010 F8E7     		b	.L209
 2757              	.LVL198:
 2758              	.L213:
2270:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2759              		.loc 1 2270 2 is_stmt 1 view .LVU754
 2760              	.LBB156:
 2761              	.LBI156:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2762              		.loc 2 191 30 view .LVU755
 2763              	.LBB157:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2764              		.loc 2 193 1 view .LVU756
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2765              		.loc 2 195 2 view .LVU757
 2766              		.syntax unified
 2767              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2768 0012 4FF05003 			mov r3, #80												
 2769 0016 83F31188 		msr basepri, r3											
 2770 001a BFF36F8F 		isb														
 2771 001e BFF34F8F 		dsb														
 2772              	
 2773              	@ 0 "" 2
 2774              	.LVL199:
 2775              		.thumb
 2776              		.syntax unified
 2777              	.L211:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2778              		.loc 2 195 2 is_stmt 0 view .LVU758
 2779              	.LBE157:
 2780              	.LBE156:
2270:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2781              		.loc 1 2270 2 is_stmt 1 discriminator 1 view .LVU759
2270:base/os/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2782              		.loc 1 2270 2 discriminator 1 view .LVU760
 2783 0022 FEE7     		b	.L211
 2784              	.L215:
 2785              		.align	2
 2786              	.L214:
 2787 0024 00000000 		.word	.LANCHOR10
 2788              		.cfi_endproc
 2789              	.LFE26:
 2791              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2792              		.align	1
 2793              		.global	xTaskIncrementTick
 2794              		.syntax unified
 2795              		.thumb
 2796              		.thumb_func
 2797              		.fpu softvfp
 2799              	xTaskIncrementTick:
 2800              	.LFB28:
ARM GAS  /tmp/cchwbchh.s 			page 153


2584:base/os/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2801              		.loc 1 2584 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 2805 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2806              	.LCFI28:
 2807              		.cfi_def_cfa_offset 24
 2808              		.cfi_offset 3, -24
 2809              		.cfi_offset 4, -20
 2810              		.cfi_offset 5, -16
 2811              		.cfi_offset 6, -12
 2812              		.cfi_offset 7, -8
 2813              		.cfi_offset 14, -4
2585:base/os/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
 2814              		.loc 1 2585 1 view .LVU762
2586:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2815              		.loc 1 2586 1 view .LVU763
2587:base/os/FreeRTOS/Source/tasks.c **** 
 2816              		.loc 1 2587 1 view .LVU764
 2817              	.LVL200:
2592:base/os/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2818              		.loc 1 2592 40 view .LVU765
2593:base/os/FreeRTOS/Source/tasks.c **** 	{
 2819              		.loc 1 2593 2 view .LVU766
2593:base/os/FreeRTOS/Source/tasks.c **** 	{
 2820              		.loc 1 2593 27 is_stmt 0 view .LVU767
 2821 0002 3A4B     		ldr	r3, .L238
 2822 0004 1B68     		ldr	r3, [r3]
2593:base/os/FreeRTOS/Source/tasks.c **** 	{
 2823              		.loc 1 2593 4 view .LVU768
 2824 0006 002B     		cmp	r3, #0
 2825 0008 64D1     		bne	.L217
 2826              	.LBB158:
2597:base/os/FreeRTOS/Source/tasks.c **** 
 2827              		.loc 1 2597 3 is_stmt 1 view .LVU769
2597:base/os/FreeRTOS/Source/tasks.c **** 
 2828              		.loc 1 2597 49 is_stmt 0 view .LVU770
 2829 000a 394B     		ldr	r3, .L238+4
 2830 000c 1D68     		ldr	r5, [r3]
2597:base/os/FreeRTOS/Source/tasks.c **** 
 2831              		.loc 1 2597 20 view .LVU771
 2832 000e 0135     		adds	r5, r5, #1
 2833              	.LVL201:
2601:base/os/FreeRTOS/Source/tasks.c **** 
 2834              		.loc 1 2601 3 is_stmt 1 view .LVU772
2601:base/os/FreeRTOS/Source/tasks.c **** 
 2835              		.loc 1 2601 14 is_stmt 0 view .LVU773
 2836 0010 1D60     		str	r5, [r3]
2603:base/os/FreeRTOS/Source/tasks.c **** 		{
 2837              		.loc 1 2603 3 is_stmt 1 view .LVU774
2603:base/os/FreeRTOS/Source/tasks.c **** 		{
 2838              		.loc 1 2603 5 is_stmt 0 view .LVU775
 2839 0012 C5B9     		cbnz	r5, .L218
 2840              	.LBB159:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2841              		.loc 1 2605 4 is_stmt 1 view .LVU776
ARM GAS  /tmp/cchwbchh.s 			page 154


2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2842              		.loc 1 2605 4 view .LVU777
 2843 0014 374B     		ldr	r3, .L238+8
 2844 0016 1B68     		ldr	r3, [r3]
 2845 0018 1B68     		ldr	r3, [r3]
 2846 001a 43B1     		cbz	r3, .L219
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2847              		.loc 1 2605 4 view .LVU778
 2848              	.LBB160:
 2849              	.LBI160:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 2850              		.loc 2 191 30 view .LVU779
 2851              	.LBB161:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2852              		.loc 2 193 1 view .LVU780
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2853              		.loc 2 195 2 view .LVU781
 2854              		.syntax unified
 2855              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2856 001c 4FF05003 			mov r3, #80												
 2857 0020 83F31188 		msr basepri, r3											
 2858 0024 BFF36F8F 		isb														
 2859 0028 BFF34F8F 		dsb														
 2860              	
 2861              	@ 0 "" 2
 2862              	.LVL202:
 2863              		.thumb
 2864              		.syntax unified
 2865              	.L220:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2866              		.loc 2 195 2 is_stmt 0 view .LVU782
 2867              	.LBE161:
 2868              	.LBE160:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2869              		.loc 1 2605 4 is_stmt 1 discriminator 1 view .LVU783
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2870              		.loc 1 2605 4 discriminator 1 view .LVU784
 2871 002c FEE7     		b	.L220
 2872              	.L219:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2873              		.loc 1 2605 4 discriminator 2 view .LVU785
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2874              		.loc 1 2605 4 discriminator 2 view .LVU786
 2875 002e 314A     		ldr	r2, .L238+8
 2876 0030 1168     		ldr	r1, [r2]
 2877              	.LVL203:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2878              		.loc 1 2605 4 discriminator 2 view .LVU787
 2879 0032 314B     		ldr	r3, .L238+12
 2880 0034 1868     		ldr	r0, [r3]
 2881 0036 1060     		str	r0, [r2]
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2882              		.loc 1 2605 4 discriminator 2 view .LVU788
 2883 0038 1960     		str	r1, [r3]
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2884              		.loc 1 2605 4 discriminator 2 view .LVU789
 2885 003a 304A     		ldr	r2, .L238+16
ARM GAS  /tmp/cchwbchh.s 			page 155


 2886 003c 1368     		ldr	r3, [r2]
 2887 003e 0133     		adds	r3, r3, #1
 2888 0040 1360     		str	r3, [r2]
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2889              		.loc 1 2605 4 discriminator 2 view .LVU790
 2890 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2891              	.LVL204:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2892              		.loc 1 2605 4 is_stmt 0 discriminator 2 view .LVU791
 2893              	.LBE159:
2605:base/os/FreeRTOS/Source/tasks.c **** 		}
 2894              		.loc 1 2605 30 is_stmt 1 discriminator 2 view .LVU792
 2895              	.L218:
2609:base/os/FreeRTOS/Source/tasks.c **** 		}
 2896              		.loc 1 2609 28 view .LVU793
2616:base/os/FreeRTOS/Source/tasks.c **** 		{
 2897              		.loc 1 2616 3 view .LVU794
2616:base/os/FreeRTOS/Source/tasks.c **** 		{
 2898              		.loc 1 2616 23 is_stmt 0 view .LVU795
 2899 0046 2E4B     		ldr	r3, .L238+20
 2900 0048 1B68     		ldr	r3, [r3]
2616:base/os/FreeRTOS/Source/tasks.c **** 		{
 2901              		.loc 1 2616 5 view .LVU796
 2902 004a AB42     		cmp	r3, r5
 2903 004c 38D9     		bls	.L231
 2904              	.LBE158:
2587:base/os/FreeRTOS/Source/tasks.c **** 
 2905              		.loc 1 2587 12 view .LVU797
 2906 004e 0027     		movs	r7, #0
 2907              	.LVL205:
 2908              	.L222:
 2909              	.LBB162:
2699:base/os/FreeRTOS/Source/tasks.c **** 			{
 2910              		.loc 1 2699 4 is_stmt 1 view .LVU798
2699:base/os/FreeRTOS/Source/tasks.c **** 			{
 2911              		.loc 1 2699 8 is_stmt 0 view .LVU799
 2912 0050 2C4B     		ldr	r3, .L238+24
 2913 0052 1B68     		ldr	r3, [r3]
 2914 0054 DB6A     		ldr	r3, [r3, #44]
 2915 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2916 005a 9A00     		lsls	r2, r3, #2
 2917 005c 2A4B     		ldr	r3, .L238+28
 2918 005e 9B58     		ldr	r3, [r3, r2]
2699:base/os/FreeRTOS/Source/tasks.c **** 			{
 2919              		.loc 1 2699 6 view .LVU800
 2920 0060 012B     		cmp	r3, #1
 2921 0062 3CD9     		bls	.L229
2701:base/os/FreeRTOS/Source/tasks.c **** 			}
 2922              		.loc 1 2701 21 view .LVU801
 2923 0064 0127     		movs	r7, #1
 2924              	.LVL206:
2701:base/os/FreeRTOS/Source/tasks.c **** 			}
 2925              		.loc 1 2701 21 view .LVU802
 2926 0066 3AE0     		b	.L229
 2927              	.LVL207:
 2928              	.L232:
2682:base/os/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cchwbchh.s 			page 156


 2929              		.loc 1 2682 24 view .LVU803
 2930 0068 0127     		movs	r7, #1
 2931              	.LVL208:
 2932              	.L221:
2618:base/os/FreeRTOS/Source/tasks.c **** 			{
 2933              		.loc 1 2618 4 is_stmt 1 view .LVU804
2620:base/os/FreeRTOS/Source/tasks.c **** 				{
 2934              		.loc 1 2620 5 view .LVU805
2620:base/os/FreeRTOS/Source/tasks.c **** 				{
 2935              		.loc 1 2620 9 is_stmt 0 view .LVU806
 2936 006a 224B     		ldr	r3, .L238+8
 2937 006c 1B68     		ldr	r3, [r3]
 2938 006e 1B68     		ldr	r3, [r3]
2620:base/os/FreeRTOS/Source/tasks.c **** 				{
 2939              		.loc 1 2620 48 view .LVU807
 2940 0070 43B3     		cbz	r3, .L236
2636:base/os/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2941              		.loc 1 2636 6 is_stmt 1 view .LVU808
2636:base/os/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2942              		.loc 1 2636 26 is_stmt 0 view .LVU809
 2943 0072 204B     		ldr	r3, .L238+8
 2944 0074 1B68     		ldr	r3, [r3]
 2945 0076 DB68     		ldr	r3, [r3, #12]
2636:base/os/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2946              		.loc 1 2636 12 view .LVU810
 2947 0078 DC68     		ldr	r4, [r3, #12]
 2948              	.LVL209:
2637:base/os/FreeRTOS/Source/tasks.c **** 
 2949              		.loc 1 2637 6 is_stmt 1 view .LVU811
2637:base/os/FreeRTOS/Source/tasks.c **** 
 2950              		.loc 1 2637 17 is_stmt 0 view .LVU812
 2951 007a 6368     		ldr	r3, [r4, #4]
 2952              	.LVL210:
2639:base/os/FreeRTOS/Source/tasks.c **** 					{
 2953              		.loc 1 2639 6 is_stmt 1 view .LVU813
2639:base/os/FreeRTOS/Source/tasks.c **** 					{
 2954              		.loc 1 2639 8 is_stmt 0 view .LVU814
 2955 007c 9D42     		cmp	r5, r3
 2956 007e 26D3     		bcc	.L237
2651:base/os/FreeRTOS/Source/tasks.c **** 					}
 2957              		.loc 1 2651 31 is_stmt 1 view .LVU815
2655:base/os/FreeRTOS/Source/tasks.c **** 
 2958              		.loc 1 2655 6 view .LVU816
2655:base/os/FreeRTOS/Source/tasks.c **** 
 2959              		.loc 1 2655 15 is_stmt 0 view .LVU817
 2960 0080 261D     		adds	r6, r4, #4
 2961 0082 3046     		mov	r0, r6
 2962 0084 FFF7FEFF 		bl	uxListRemove
 2963              	.LVL211:
2659:base/os/FreeRTOS/Source/tasks.c **** 					{
 2964              		.loc 1 2659 6 is_stmt 1 view .LVU818
2659:base/os/FreeRTOS/Source/tasks.c **** 					{
 2965              		.loc 1 2659 10 is_stmt 0 view .LVU819
 2966 0088 A36A     		ldr	r3, [r4, #40]
2659:base/os/FreeRTOS/Source/tasks.c **** 					{
 2967              		.loc 1 2659 8 view .LVU820
 2968 008a 1BB1     		cbz	r3, .L225
ARM GAS  /tmp/cchwbchh.s 			page 157


2661:base/os/FreeRTOS/Source/tasks.c **** 					}
 2969              		.loc 1 2661 7 is_stmt 1 view .LVU821
2661:base/os/FreeRTOS/Source/tasks.c **** 					}
 2970              		.loc 1 2661 16 is_stmt 0 view .LVU822
 2971 008c 04F11800 		add	r0, r4, #24
 2972 0090 FFF7FEFF 		bl	uxListRemove
 2973              	.LVL212:
 2974              	.L225:
2665:base/os/FreeRTOS/Source/tasks.c **** 					}
 2975              		.loc 1 2665 31 is_stmt 1 view .LVU823
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2976              		.loc 1 2670 6 view .LVU824
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2977              		.loc 1 2670 6 view .LVU825
 2978 0094 E36A     		ldr	r3, [r4, #44]
 2979 0096 1D4A     		ldr	r2, .L238+32
 2980 0098 1268     		ldr	r2, [r2]
 2981 009a 9342     		cmp	r3, r2
 2982 009c 01D9     		bls	.L226
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2983              		.loc 1 2670 6 discriminator 1 view .LVU826
 2984 009e 1B4A     		ldr	r2, .L238+32
 2985 00a0 1360     		str	r3, [r2]
 2986              	.L226:
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2987              		.loc 1 2670 6 discriminator 3 view .LVU827
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2988              		.loc 1 2670 6 discriminator 3 view .LVU828
 2989 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2990 00a6 9A00     		lsls	r2, r3, #2
 2991 00a8 3146     		mov	r1, r6
 2992 00aa 1748     		ldr	r0, .L238+28
 2993 00ac 1044     		add	r0, r0, r2
 2994 00ae FFF7FEFF 		bl	vListInsertEnd
 2995              	.LVL213:
2670:base/os/FreeRTOS/Source/tasks.c **** 
 2996              		.loc 1 2670 36 discriminator 3 view .LVU829
2680:base/os/FreeRTOS/Source/tasks.c **** 						{
 2997              		.loc 1 2680 7 discriminator 3 view .LVU830
2680:base/os/FreeRTOS/Source/tasks.c **** 						{
 2998              		.loc 1 2680 16 is_stmt 0 discriminator 3 view .LVU831
 2999 00b2 E26A     		ldr	r2, [r4, #44]
2680:base/os/FreeRTOS/Source/tasks.c **** 						{
 3000              		.loc 1 2680 44 discriminator 3 view .LVU832
 3001 00b4 134B     		ldr	r3, .L238+24
 3002 00b6 1B68     		ldr	r3, [r3]
 3003 00b8 DB6A     		ldr	r3, [r3, #44]
2680:base/os/FreeRTOS/Source/tasks.c **** 						{
 3004              		.loc 1 2680 9 discriminator 3 view .LVU833
 3005 00ba 9A42     		cmp	r2, r3
 3006 00bc D4D2     		bcs	.L232
 3007 00be D4E7     		b	.L221
 3008              	.LVL214:
 3009              	.L231:
2680:base/os/FreeRTOS/Source/tasks.c **** 						{
 3010              		.loc 1 2680 9 discriminator 3 view .LVU834
 3011              	.LBE162:
ARM GAS  /tmp/cchwbchh.s 			page 158


2587:base/os/FreeRTOS/Source/tasks.c **** 
 3012              		.loc 1 2587 12 view .LVU835
 3013 00c0 0027     		movs	r7, #0
 3014 00c2 D2E7     		b	.L221
 3015              	.LVL215:
 3016              	.L236:
 3017              	.LBB163:
2627:base/os/FreeRTOS/Source/tasks.c **** 					break;
 3018              		.loc 1 2627 6 is_stmt 1 view .LVU836
2627:base/os/FreeRTOS/Source/tasks.c **** 					break;
 3019              		.loc 1 2627 27 is_stmt 0 view .LVU837
 3020 00c4 0E4B     		ldr	r3, .L238+20
 3021 00c6 4FF0FF32 		mov	r2, #-1
 3022 00ca 1A60     		str	r2, [r3]
2628:base/os/FreeRTOS/Source/tasks.c **** 				}
 3023              		.loc 1 2628 6 is_stmt 1 view .LVU838
 3024 00cc C0E7     		b	.L222
 3025              	.LVL216:
 3026              	.L237:
2646:base/os/FreeRTOS/Source/tasks.c **** 						break;
 3027              		.loc 1 2646 7 view .LVU839
2646:base/os/FreeRTOS/Source/tasks.c **** 						break;
 3028              		.loc 1 2646 28 is_stmt 0 view .LVU840
 3029 00ce 0C4A     		ldr	r2, .L238+20
 3030 00d0 1360     		str	r3, [r2]
2647:base/os/FreeRTOS/Source/tasks.c **** 					}
 3031              		.loc 1 2647 7 is_stmt 1 view .LVU841
 3032 00d2 BDE7     		b	.L222
 3033              	.LVL217:
 3034              	.L217:
2647:base/os/FreeRTOS/Source/tasks.c **** 					}
 3035              		.loc 1 2647 7 is_stmt 0 view .LVU842
 3036              	.LBE163:
2727:base/os/FreeRTOS/Source/tasks.c **** 
 3037              		.loc 1 2727 3 is_stmt 1 view .LVU843
 3038 00d4 0E4A     		ldr	r2, .L238+36
 3039 00d6 1368     		ldr	r3, [r2]
 3040 00d8 0133     		adds	r3, r3, #1
 3041 00da 1360     		str	r3, [r2]
2587:base/os/FreeRTOS/Source/tasks.c **** 
 3042              		.loc 1 2587 12 is_stmt 0 view .LVU844
 3043 00dc 0027     		movs	r7, #0
 3044              	.LVL218:
 3045              	.L229:
2740:base/os/FreeRTOS/Source/tasks.c **** 		{
 3046              		.loc 1 2740 3 is_stmt 1 view .LVU845
2740:base/os/FreeRTOS/Source/tasks.c **** 		{
 3047              		.loc 1 2740 21 is_stmt 0 view .LVU846
 3048 00de 0D4B     		ldr	r3, .L238+40
 3049 00e0 1B68     		ldr	r3, [r3]
2740:base/os/FreeRTOS/Source/tasks.c **** 		{
 3050              		.loc 1 2740 5 view .LVU847
 3051 00e2 03B1     		cbz	r3, .L216
2742:base/os/FreeRTOS/Source/tasks.c **** 		}
 3052              		.loc 1 2742 20 view .LVU848
 3053 00e4 0127     		movs	r7, #1
 3054              	.LVL219:
ARM GAS  /tmp/cchwbchh.s 			page 159


2746:base/os/FreeRTOS/Source/tasks.c **** 		}
 3055              		.loc 1 2746 28 is_stmt 1 view .LVU849
2751:base/os/FreeRTOS/Source/tasks.c **** }
 3056              		.loc 1 2751 2 view .LVU850
 3057              	.L216:
2752:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3058              		.loc 1 2752 1 is_stmt 0 view .LVU851
 3059 00e6 3846     		mov	r0, r7
 3060 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3061              	.L239:
 3062 00ea 00BF     		.align	2
 3063              	.L238:
 3064 00ec 00000000 		.word	.LANCHOR16
 3065 00f0 00000000 		.word	.LANCHOR15
 3066 00f4 00000000 		.word	.LANCHOR2
 3067 00f8 00000000 		.word	.LANCHOR8
 3068 00fc 00000000 		.word	.LANCHOR18
 3069 0100 00000000 		.word	.LANCHOR3
 3070 0104 00000000 		.word	.LANCHOR10
 3071 0108 00000000 		.word	.LANCHOR4
 3072 010c 00000000 		.word	.LANCHOR13
 3073 0110 00000000 		.word	.LANCHOR19
 3074 0114 00000000 		.word	.LANCHOR20
 3075              		.cfi_endproc
 3076              	.LFE28:
 3078              		.section	.text.xTaskResumeAll,"ax",%progbits
 3079              		.align	1
 3080              		.global	xTaskResumeAll
 3081              		.syntax unified
 3082              		.thumb
 3083              		.thumb_func
 3084              		.fpu softvfp
 3086              	xTaskResumeAll:
 3087              	.LFB22:
2100:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 3088              		.loc 1 2100 1 is_stmt 1 view -0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 0
 3091              		@ frame_needed = 0, uses_anonymous_args = 0
 3092 0000 38B5     		push	{r3, r4, r5, lr}
 3093              	.LCFI29:
 3094              		.cfi_def_cfa_offset 16
 3095              		.cfi_offset 3, -16
 3096              		.cfi_offset 4, -12
 3097              		.cfi_offset 5, -8
 3098              		.cfi_offset 14, -4
2101:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 3099              		.loc 1 2101 1 view .LVU853
 3100              	.LVL220:
2102:base/os/FreeRTOS/Source/tasks.c **** 
 3101              		.loc 1 2102 1 view .LVU854
2106:base/os/FreeRTOS/Source/tasks.c **** 
 3102              		.loc 1 2106 2 view .LVU855
 3103 0002 354B     		ldr	r3, .L257
 3104 0004 1B68     		ldr	r3, [r3]
 3105 0006 43B9     		cbnz	r3, .L241
2106:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 160


 3106              		.loc 1 2106 2 view .LVU856
 3107              	.LBB164:
 3108              	.LBI164:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3109              		.loc 2 191 30 view .LVU857
 3110              	.LBB165:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3111              		.loc 2 193 1 view .LVU858
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3112              		.loc 2 195 2 view .LVU859
 3113              		.syntax unified
 3114              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3115 0008 4FF05003 			mov r3, #80												
 3116 000c 83F31188 		msr basepri, r3											
 3117 0010 BFF36F8F 		isb														
 3118 0014 BFF34F8F 		dsb														
 3119              	
 3120              	@ 0 "" 2
 3121              	.LVL221:
 3122              		.thumb
 3123              		.syntax unified
 3124              	.L242:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3125              		.loc 2 195 2 is_stmt 0 view .LVU860
 3126              	.LBE165:
 3127              	.LBE164:
2106:base/os/FreeRTOS/Source/tasks.c **** 
 3128              		.loc 1 2106 2 is_stmt 1 discriminator 1 view .LVU861
2106:base/os/FreeRTOS/Source/tasks.c **** 
 3129              		.loc 1 2106 2 discriminator 1 view .LVU862
 3130 0018 FEE7     		b	.L242
 3131              	.L241:
2106:base/os/FreeRTOS/Source/tasks.c **** 
 3132              		.loc 1 2106 38 discriminator 2 view .LVU863
2113:base/os/FreeRTOS/Source/tasks.c **** 	{
 3133              		.loc 1 2113 2 discriminator 2 view .LVU864
 3134 001a FFF7FEFF 		bl	vPortEnterCritical
 3135              	.LVL222:
2115:base/os/FreeRTOS/Source/tasks.c **** 
 3136              		.loc 1 2115 3 discriminator 2 view .LVU865
 3137 001e 2E4B     		ldr	r3, .L257
 3138 0020 1A68     		ldr	r2, [r3]
 3139 0022 013A     		subs	r2, r2, #1
 3140 0024 1A60     		str	r2, [r3]
2117:base/os/FreeRTOS/Source/tasks.c **** 		{
 3141              		.loc 1 2117 3 discriminator 2 view .LVU866
2117:base/os/FreeRTOS/Source/tasks.c **** 		{
 3142              		.loc 1 2117 28 is_stmt 0 discriminator 2 view .LVU867
 3143 0026 1B68     		ldr	r3, [r3]
2117:base/os/FreeRTOS/Source/tasks.c **** 		{
 3144              		.loc 1 2117 5 discriminator 2 view .LVU868
 3145 0028 002B     		cmp	r3, #0
 3146 002a 4FD1     		bne	.L252
2119:base/os/FreeRTOS/Source/tasks.c **** 			{
 3147              		.loc 1 2119 4 is_stmt 1 view .LVU869
2119:base/os/FreeRTOS/Source/tasks.c **** 			{
 3148              		.loc 1 2119 31 is_stmt 0 view .LVU870
ARM GAS  /tmp/cchwbchh.s 			page 161


 3149 002c 2B4B     		ldr	r3, .L257+4
 3150 002e 1B68     		ldr	r3, [r3]
2119:base/os/FreeRTOS/Source/tasks.c **** 			{
 3151              		.loc 1 2119 6 view .LVU871
 3152 0030 0BB9     		cbnz	r3, .L253
2102:base/os/FreeRTOS/Source/tasks.c **** 
 3153              		.loc 1 2102 12 view .LVU872
 3154 0032 0024     		movs	r4, #0
 3155 0034 4BE0     		b	.L243
 3156              	.L253:
2101:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 3157              		.loc 1 2101 8 view .LVU873
 3158 0036 0024     		movs	r4, #0
 3159              	.LVL223:
 3160              	.L244:
2138:base/os/FreeRTOS/Source/tasks.c **** 					}
 3161              		.loc 1 2138 31 is_stmt 1 view .LVU874
2123:base/os/FreeRTOS/Source/tasks.c **** 				{
 3162              		.loc 1 2123 52 view .LVU875
2123:base/os/FreeRTOS/Source/tasks.c **** 				{
 3163              		.loc 1 2123 12 is_stmt 0 view .LVU876
 3164 0038 294B     		ldr	r3, .L257+8
 3165 003a 1B68     		ldr	r3, [r3]
2123:base/os/FreeRTOS/Source/tasks.c **** 				{
 3166              		.loc 1 2123 52 view .LVU877
 3167 003c 1BB3     		cbz	r3, .L255
2125:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3168              		.loc 1 2125 6 is_stmt 1 view .LVU878
2125:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3169              		.loc 1 2125 26 is_stmt 0 view .LVU879
 3170 003e 284B     		ldr	r3, .L257+8
 3171 0040 DB68     		ldr	r3, [r3, #12]
2125:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3172              		.loc 1 2125 12 view .LVU880
 3173 0042 DC68     		ldr	r4, [r3, #12]
 3174              	.LVL224:
2126:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3175              		.loc 1 2126 6 is_stmt 1 view .LVU881
2126:base/os/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3176              		.loc 1 2126 15 is_stmt 0 view .LVU882
 3177 0044 04F11800 		add	r0, r4, #24
 3178 0048 FFF7FEFF 		bl	uxListRemove
 3179              	.LVL225:
2127:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3180              		.loc 1 2127 6 is_stmt 1 view .LVU883
2127:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3181              		.loc 1 2127 15 is_stmt 0 view .LVU884
 3182 004c 251D     		adds	r5, r4, #4
 3183 004e 2846     		mov	r0, r5
 3184 0050 FFF7FEFF 		bl	uxListRemove
 3185              	.LVL226:
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3186              		.loc 1 2128 6 is_stmt 1 view .LVU885
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3187              		.loc 1 2128 6 view .LVU886
 3188 0054 E06A     		ldr	r0, [r4, #44]
 3189 0056 234B     		ldr	r3, .L257+12
ARM GAS  /tmp/cchwbchh.s 			page 162


 3190 0058 1B68     		ldr	r3, [r3]
 3191 005a 9842     		cmp	r0, r3
 3192 005c 01D9     		bls	.L245
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3193              		.loc 1 2128 6 discriminator 1 view .LVU887
 3194 005e 214B     		ldr	r3, .L257+12
 3195 0060 1860     		str	r0, [r3]
 3196              	.L245:
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3197              		.loc 1 2128 6 discriminator 3 view .LVU888
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3198              		.loc 1 2128 6 discriminator 3 view .LVU889
 3199 0062 00EB8000 		add	r0, r0, r0, lsl #2
 3200 0066 2946     		mov	r1, r5
 3201 0068 1F4B     		ldr	r3, .L257+16
 3202 006a 03EB8000 		add	r0, r3, r0, lsl #2
 3203 006e FFF7FEFF 		bl	vListInsertEnd
 3204              	.LVL227:
2128:base/os/FreeRTOS/Source/tasks.c **** 
 3205              		.loc 1 2128 36 discriminator 3 view .LVU890
2132:base/os/FreeRTOS/Source/tasks.c **** 					{
 3206              		.loc 1 2132 6 discriminator 3 view .LVU891
2132:base/os/FreeRTOS/Source/tasks.c **** 					{
 3207              		.loc 1 2132 15 is_stmt 0 discriminator 3 view .LVU892
 3208 0072 E26A     		ldr	r2, [r4, #44]
2132:base/os/FreeRTOS/Source/tasks.c **** 					{
 3209              		.loc 1 2132 43 discriminator 3 view .LVU893
 3210 0074 1D4B     		ldr	r3, .L257+20
 3211 0076 1B68     		ldr	r3, [r3]
 3212 0078 DB6A     		ldr	r3, [r3, #44]
2132:base/os/FreeRTOS/Source/tasks.c **** 					{
 3213              		.loc 1 2132 8 discriminator 3 view .LVU894
 3214 007a 9A42     		cmp	r2, r3
 3215 007c DCD3     		bcc	.L244
2134:base/os/FreeRTOS/Source/tasks.c **** 					}
 3216              		.loc 1 2134 7 is_stmt 1 view .LVU895
2134:base/os/FreeRTOS/Source/tasks.c **** 					}
 3217              		.loc 1 2134 21 is_stmt 0 view .LVU896
 3218 007e 1C4B     		ldr	r3, .L257+24
 3219 0080 0122     		movs	r2, #1
 3220 0082 1A60     		str	r2, [r3]
 3221 0084 D8E7     		b	.L244
 3222              	.L255:
2142:base/os/FreeRTOS/Source/tasks.c **** 				{
 3223              		.loc 1 2142 5 is_stmt 1 view .LVU897
2142:base/os/FreeRTOS/Source/tasks.c **** 				{
 3224              		.loc 1 2142 7 is_stmt 0 view .LVU898
 3225 0086 0CB1     		cbz	r4, .L248
2150:base/os/FreeRTOS/Source/tasks.c **** 				}
 3226              		.loc 1 2150 6 is_stmt 1 view .LVU899
 3227 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3228              	.LVL228:
 3229              	.L248:
 3230              	.LBB166:
2158:base/os/FreeRTOS/Source/tasks.c **** 
 3231              		.loc 1 2158 6 view .LVU900
2158:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 163


 3232              		.loc 1 2158 18 is_stmt 0 view .LVU901
 3233 008c 194B     		ldr	r3, .L257+28
 3234 008e 1C68     		ldr	r4, [r3]
 3235              	.LVL229:
2160:base/os/FreeRTOS/Source/tasks.c **** 					{
 3236              		.loc 1 2160 6 is_stmt 1 view .LVU902
2160:base/os/FreeRTOS/Source/tasks.c **** 					{
 3237              		.loc 1 2160 8 is_stmt 0 view .LVU903
 3238 0090 84B9     		cbnz	r4, .L251
 3239              	.L249:
2179:base/os/FreeRTOS/Source/tasks.c **** 					}
 3240              		.loc 1 2179 31 is_stmt 1 view .LVU904
 3241              	.LBE166:
2183:base/os/FreeRTOS/Source/tasks.c **** 				{
 3242              		.loc 1 2183 5 view .LVU905
2183:base/os/FreeRTOS/Source/tasks.c **** 				{
 3243              		.loc 1 2183 23 is_stmt 0 view .LVU906
 3244 0092 174B     		ldr	r3, .L257+24
 3245 0094 1C68     		ldr	r4, [r3]
 3246              	.LVL230:
2183:base/os/FreeRTOS/Source/tasks.c **** 				{
 3247              		.loc 1 2183 7 view .LVU907
 3248 0096 D4B1     		cbz	r4, .L243
2187:base/os/FreeRTOS/Source/tasks.c **** 					}
 3249              		.loc 1 2187 7 is_stmt 1 view .LVU908
 3250              	.LVL231:
2190:base/os/FreeRTOS/Source/tasks.c **** 				}
 3251              		.loc 1 2190 6 view .LVU909
 3252 0098 4FF0E023 		mov	r3, #-536813568
 3253 009c 4FF08052 		mov	r2, #268435456
 3254 00a0 C3F8042D 		str	r2, [r3, #3332]
2190:base/os/FreeRTOS/Source/tasks.c **** 				}
 3255              		.loc 1 2190 6 view .LVU910
 3256              		.syntax unified
 3257              	@ 2190 "base/os/FreeRTOS/Source/tasks.c" 1
 3258 00a4 BFF34F8F 		dsb
 3259              	@ 0 "" 2
2190:base/os/FreeRTOS/Source/tasks.c **** 				}
 3260              		.loc 1 2190 6 view .LVU911
 3261              	@ 2190 "base/os/FreeRTOS/Source/tasks.c" 1
 3262 00a8 BFF36F8F 		isb
 3263              	@ 0 "" 2
2190:base/os/FreeRTOS/Source/tasks.c **** 				}
 3264              		.loc 1 2190 37 view .LVU912
2187:base/os/FreeRTOS/Source/tasks.c **** 					}
 3265              		.loc 1 2187 23 is_stmt 0 view .LVU913
 3266              		.thumb
 3267              		.syntax unified
 3268 00ac 0124     		movs	r4, #1
 3269 00ae 0EE0     		b	.L243
 3270              	.LVL232:
 3271              	.L250:
 3272              	.LBB167:
2170:base/os/FreeRTOS/Source/tasks.c **** 							}
 3273              		.loc 1 2170 33 is_stmt 1 view .LVU914
2172:base/os/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 3274              		.loc 1 2172 8 view .LVU915
ARM GAS  /tmp/cchwbchh.s 			page 164


2173:base/os/FreeRTOS/Source/tasks.c **** 
 3275              		.loc 1 2173 31 view .LVU916
 3276 00b0 013C     		subs	r4, r4, #1
 3277              	.LVL233:
2173:base/os/FreeRTOS/Source/tasks.c **** 
 3278              		.loc 1 2173 31 is_stmt 0 view .LVU917
 3279 00b2 07D0     		beq	.L256
 3280              	.L251:
2162:base/os/FreeRTOS/Source/tasks.c **** 						{
 3281              		.loc 1 2162 7 is_stmt 1 view .LVU918
2164:base/os/FreeRTOS/Source/tasks.c **** 							{
 3282              		.loc 1 2164 8 view .LVU919
2164:base/os/FreeRTOS/Source/tasks.c **** 							{
 3283              		.loc 1 2164 12 is_stmt 0 view .LVU920
 3284 00b4 FFF7FEFF 		bl	xTaskIncrementTick
 3285              	.LVL234:
2164:base/os/FreeRTOS/Source/tasks.c **** 							{
 3286              		.loc 1 2164 10 view .LVU921
 3287 00b8 0028     		cmp	r0, #0
 3288 00ba F9D0     		beq	.L250
2166:base/os/FreeRTOS/Source/tasks.c **** 							}
 3289              		.loc 1 2166 9 is_stmt 1 view .LVU922
2166:base/os/FreeRTOS/Source/tasks.c **** 							}
 3290              		.loc 1 2166 23 is_stmt 0 view .LVU923
 3291 00bc 0C4B     		ldr	r3, .L257+24
 3292 00be 0122     		movs	r2, #1
 3293 00c0 1A60     		str	r2, [r3]
 3294 00c2 F5E7     		b	.L250
 3295              	.L256:
2175:base/os/FreeRTOS/Source/tasks.c **** 					}
 3296              		.loc 1 2175 7 is_stmt 1 view .LVU924
2175:base/os/FreeRTOS/Source/tasks.c **** 					}
 3297              		.loc 1 2175 21 is_stmt 0 view .LVU925
 3298 00c4 0B4B     		ldr	r3, .L257+28
 3299 00c6 0022     		movs	r2, #0
 3300 00c8 1A60     		str	r2, [r3]
 3301 00ca E2E7     		b	.L249
 3302              	.LVL235:
 3303              	.L252:
2175:base/os/FreeRTOS/Source/tasks.c **** 					}
 3304              		.loc 1 2175 21 view .LVU926
 3305              	.LBE167:
2102:base/os/FreeRTOS/Source/tasks.c **** 
 3306              		.loc 1 2102 12 view .LVU927
 3307 00cc 0024     		movs	r4, #0
 3308              	.LVL236:
 3309              	.L243:
2200:base/os/FreeRTOS/Source/tasks.c **** 		}
 3310              		.loc 1 2200 28 is_stmt 1 view .LVU928
2203:base/os/FreeRTOS/Source/tasks.c **** 
 3311              		.loc 1 2203 2 view .LVU929
 3312 00ce FFF7FEFF 		bl	vPortExitCritical
 3313              	.LVL237:
2205:base/os/FreeRTOS/Source/tasks.c **** }
 3314              		.loc 1 2205 2 view .LVU930
2206:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3315              		.loc 1 2206 1 is_stmt 0 view .LVU931
ARM GAS  /tmp/cchwbchh.s 			page 165


 3316 00d2 2046     		mov	r0, r4
 3317 00d4 38BD     		pop	{r3, r4, r5, pc}
 3318              	.LVL238:
 3319              	.L258:
2206:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3320              		.loc 1 2206 1 view .LVU932
 3321 00d6 00BF     		.align	2
 3322              	.L257:
 3323 00d8 00000000 		.word	.LANCHOR16
 3324 00dc 00000000 		.word	.LANCHOR9
 3325 00e0 00000000 		.word	.LANCHOR1
 3326 00e4 00000000 		.word	.LANCHOR13
 3327 00e8 00000000 		.word	.LANCHOR4
 3328 00ec 00000000 		.word	.LANCHOR10
 3329 00f0 00000000 		.word	.LANCHOR20
 3330 00f4 00000000 		.word	.LANCHOR19
 3331              		.cfi_endproc
 3332              	.LFE22:
 3334              		.section	.text.vTaskDelayUntil,"ax",%progbits
 3335              		.align	1
 3336              		.global	vTaskDelayUntil
 3337              		.syntax unified
 3338              		.thumb
 3339              		.thumb_func
 3340              		.fpu softvfp
 3342              	vTaskDelayUntil:
 3343              	.LVL239:
 3344              	.LFB9:
1199:base/os/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3345              		.loc 1 1199 2 is_stmt 1 view -0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
1199:base/os/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3349              		.loc 1 1199 2 is_stmt 0 view .LVU934
 3350 0000 38B5     		push	{r3, r4, r5, lr}
 3351              	.LCFI30:
 3352              		.cfi_def_cfa_offset 16
 3353              		.cfi_offset 3, -16
 3354              		.cfi_offset 4, -12
 3355              		.cfi_offset 5, -8
 3356              		.cfi_offset 14, -4
1200:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3357              		.loc 1 1200 2 is_stmt 1 view .LVU935
1201:base/os/FreeRTOS/Source/tasks.c **** 
 3358              		.loc 1 1201 2 view .LVU936
 3359              	.LVL240:
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3360              		.loc 1 1203 3 view .LVU937
 3361 0002 58B1     		cbz	r0, .L275
 3362 0004 0C46     		mov	r4, r1
 3363 0006 0546     		mov	r5, r0
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3364              		.loc 1 1203 37 discriminator 2 view .LVU938
1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3365              		.loc 1 1204 3 discriminator 2 view .LVU939
 3366 0008 89B9     		cbnz	r1, .L262
ARM GAS  /tmp/cchwbchh.s 			page 166


1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3367              		.loc 1 1204 3 view .LVU940
 3368              	.LBB168:
 3369              	.LBI168:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3370              		.loc 2 191 30 view .LVU941
 3371              	.LBB169:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3372              		.loc 2 193 1 view .LVU942
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3373              		.loc 2 195 2 view .LVU943
 3374              		.syntax unified
 3375              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3376 000a 4FF05003 			mov r3, #80												
 3377 000e 83F31188 		msr basepri, r3											
 3378 0012 BFF36F8F 		isb														
 3379 0016 BFF34F8F 		dsb														
 3380              	
 3381              	@ 0 "" 2
 3382              	.LVL241:
 3383              		.thumb
 3384              		.syntax unified
 3385              	.L263:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3386              		.loc 2 195 2 is_stmt 0 view .LVU944
 3387              	.LBE169:
 3388              	.LBE168:
1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3389              		.loc 1 1204 3 is_stmt 1 discriminator 2 view .LVU945
1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3390              		.loc 1 1204 3 discriminator 2 view .LVU946
 3391 001a FEE7     		b	.L263
 3392              	.L275:
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3393              		.loc 1 1203 3 view .LVU947
 3394              	.LBB170:
 3395              	.LBI170:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3396              		.loc 2 191 30 view .LVU948
 3397              	.LBB171:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3398              		.loc 2 193 1 view .LVU949
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3399              		.loc 2 195 2 view .LVU950
 3400              		.syntax unified
 3401              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3402 001c 4FF05003 			mov r3, #80												
 3403 0020 83F31188 		msr basepri, r3											
 3404 0024 BFF36F8F 		isb														
 3405 0028 BFF34F8F 		dsb														
 3406              	
 3407              	@ 0 "" 2
 3408              	.LVL242:
 3409              		.thumb
 3410              		.syntax unified
 3411              	.L261:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/cchwbchh.s 			page 167


 3412              		.loc 2 195 2 is_stmt 0 view .LVU951
 3413              	.LBE171:
 3414              	.LBE170:
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3415              		.loc 1 1203 3 is_stmt 1 discriminator 1 view .LVU952
1203:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3416              		.loc 1 1203 3 discriminator 1 view .LVU953
 3417 002c FEE7     		b	.L261
 3418              	.L262:
1204:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3419              		.loc 1 1204 42 discriminator 2 view .LVU954
1205:base/os/FreeRTOS/Source/tasks.c **** 
 3420              		.loc 1 1205 3 discriminator 2 view .LVU955
 3421 002e 1B4B     		ldr	r3, .L276
 3422 0030 1B68     		ldr	r3, [r3]
 3423 0032 43B1     		cbz	r3, .L264
1205:base/os/FreeRTOS/Source/tasks.c **** 
 3424              		.loc 1 1205 3 view .LVU956
 3425              	.LBB172:
 3426              	.LBI172:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3427              		.loc 2 191 30 view .LVU957
 3428              	.LBB173:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3429              		.loc 2 193 1 view .LVU958
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3430              		.loc 2 195 2 view .LVU959
 3431              		.syntax unified
 3432              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3433 0034 4FF05003 			mov r3, #80												
 3434 0038 83F31188 		msr basepri, r3											
 3435 003c BFF36F8F 		isb														
 3436 0040 BFF34F8F 		dsb														
 3437              	
 3438              	@ 0 "" 2
 3439              	.LVL243:
 3440              		.thumb
 3441              		.syntax unified
 3442              	.L265:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3443              		.loc 2 195 2 is_stmt 0 view .LVU960
 3444              	.LBE173:
 3445              	.LBE172:
1205:base/os/FreeRTOS/Source/tasks.c **** 
 3446              		.loc 1 1205 3 is_stmt 1 discriminator 3 view .LVU961
1205:base/os/FreeRTOS/Source/tasks.c **** 
 3447              		.loc 1 1205 3 discriminator 3 view .LVU962
 3448 0044 FEE7     		b	.L265
 3449              	.L264:
1205:base/os/FreeRTOS/Source/tasks.c **** 
 3450              		.loc 1 1205 44 discriminator 2 view .LVU963
1207:base/os/FreeRTOS/Source/tasks.c **** 		{
 3451              		.loc 1 1207 3 discriminator 2 view .LVU964
 3452 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3453              	.LVL244:
 3454              	.LBB174:
1211:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 168


 3455              		.loc 1 1211 4 discriminator 2 view .LVU965
1211:base/os/FreeRTOS/Source/tasks.c **** 
 3456              		.loc 1 1211 21 is_stmt 0 discriminator 2 view .LVU966
 3457 004a 154B     		ldr	r3, .L276+4
 3458 004c 1868     		ldr	r0, [r3]
 3459              	.LVL245:
1214:base/os/FreeRTOS/Source/tasks.c **** 
 3460              		.loc 1 1214 4 is_stmt 1 discriminator 2 view .LVU967
1214:base/os/FreeRTOS/Source/tasks.c **** 
 3461              		.loc 1 1214 18 is_stmt 0 discriminator 2 view .LVU968
 3462 004e 2B68     		ldr	r3, [r5]
1214:base/os/FreeRTOS/Source/tasks.c **** 
 3463              		.loc 1 1214 16 discriminator 2 view .LVU969
 3464 0050 1C44     		add	r4, r4, r3
 3465              	.LVL246:
1216:base/os/FreeRTOS/Source/tasks.c **** 			{
 3466              		.loc 1 1216 4 is_stmt 1 discriminator 2 view .LVU970
1216:base/os/FreeRTOS/Source/tasks.c **** 			{
 3467              		.loc 1 1216 6 is_stmt 0 discriminator 2 view .LVU971
 3468 0052 8342     		cmp	r3, r0
 3469 0054 09D9     		bls	.L266
1223:base/os/FreeRTOS/Source/tasks.c **** 				{
 3470              		.loc 1 1223 5 is_stmt 1 view .LVU972
1223:base/os/FreeRTOS/Source/tasks.c **** 				{
 3471              		.loc 1 1223 7 is_stmt 0 view .LVU973
 3472 0056 A342     		cmp	r3, r4
 3473 0058 01D8     		bhi	.L267
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3474              		.loc 1 1248 4 is_stmt 1 view .LVU974
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3475              		.loc 1 1248 24 is_stmt 0 view .LVU975
 3476 005a 2C60     		str	r4, [r5]
1250:base/os/FreeRTOS/Source/tasks.c **** 			{
 3477              		.loc 1 1250 4 is_stmt 1 view .LVU976
 3478 005c 0EE0     		b	.L268
 3479              	.L267:
1223:base/os/FreeRTOS/Source/tasks.c **** 				{
 3480              		.loc 1 1223 47 is_stmt 0 discriminator 1 view .LVU977
 3481 005e A042     		cmp	r0, r4
 3482 0060 01D3     		bcc	.L269
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3483              		.loc 1 1248 4 is_stmt 1 view .LVU978
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3484              		.loc 1 1248 24 is_stmt 0 view .LVU979
 3485 0062 2C60     		str	r4, [r5]
1250:base/os/FreeRTOS/Source/tasks.c **** 			{
 3486              		.loc 1 1250 4 is_stmt 1 view .LVU980
 3487 0064 0AE0     		b	.L268
 3488              	.L269:
1225:base/os/FreeRTOS/Source/tasks.c **** 				}
 3489              		.loc 1 1225 6 view .LVU981
 3490              	.LVL247:
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3491              		.loc 1 1248 4 view .LVU982
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3492              		.loc 1 1248 24 is_stmt 0 view .LVU983
 3493 0066 2C60     		str	r4, [r5]
ARM GAS  /tmp/cchwbchh.s 			page 169


1250:base/os/FreeRTOS/Source/tasks.c **** 			{
 3494              		.loc 1 1250 4 is_stmt 1 view .LVU984
 3495 0068 04E0     		b	.L270
 3496              	.LVL248:
 3497              	.L266:
1237:base/os/FreeRTOS/Source/tasks.c **** 				{
 3498              		.loc 1 1237 5 view .LVU985
1237:base/os/FreeRTOS/Source/tasks.c **** 				{
 3499              		.loc 1 1237 7 is_stmt 0 view .LVU986
 3500 006a A342     		cmp	r3, r4
 3501 006c 01D8     		bhi	.L271
1237:base/os/FreeRTOS/Source/tasks.c **** 				{
 3502              		.loc 1 1237 47 discriminator 1 view .LVU987
 3503 006e A042     		cmp	r0, r4
 3504 0070 12D2     		bcs	.L272
 3505              	.L271:
1239:base/os/FreeRTOS/Source/tasks.c **** 				}
 3506              		.loc 1 1239 6 is_stmt 1 view .LVU988
 3507              	.LVL249:
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3508              		.loc 1 1248 4 view .LVU989
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3509              		.loc 1 1248 24 is_stmt 0 view .LVU990
 3510 0072 2C60     		str	r4, [r5]
1250:base/os/FreeRTOS/Source/tasks.c **** 			{
 3511              		.loc 1 1250 4 is_stmt 1 view .LVU991
 3512              	.L270:
1252:base/os/FreeRTOS/Source/tasks.c **** 
 3513              		.loc 1 1252 41 view .LVU992
1256:base/os/FreeRTOS/Source/tasks.c **** 			}
 3514              		.loc 1 1256 5 view .LVU993
 3515 0074 0021     		movs	r1, #0
 3516 0076 201A     		subs	r0, r4, r0
 3517              	.LVL250:
1256:base/os/FreeRTOS/Source/tasks.c **** 			}
 3518              		.loc 1 1256 5 is_stmt 0 view .LVU994
 3519 0078 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3520              	.LVL251:
 3521              	.L268:
1260:base/os/FreeRTOS/Source/tasks.c **** 			}
 3522              		.loc 1 1260 29 is_stmt 1 view .LVU995
 3523              	.LBE174:
1263:base/os/FreeRTOS/Source/tasks.c **** 
 3524              		.loc 1 1263 3 view .LVU996
1263:base/os/FreeRTOS/Source/tasks.c **** 
 3525              		.loc 1 1263 21 is_stmt 0 view .LVU997
 3526 007c FFF7FEFF 		bl	xTaskResumeAll
 3527              	.LVL252:
1267:base/os/FreeRTOS/Source/tasks.c **** 		{
 3528              		.loc 1 1267 3 is_stmt 1 view .LVU998
1267:base/os/FreeRTOS/Source/tasks.c **** 		{
 3529              		.loc 1 1267 5 is_stmt 0 view .LVU999
 3530 0080 48B9     		cbnz	r0, .L259
1269:base/os/FreeRTOS/Source/tasks.c **** 		}
 3531              		.loc 1 1269 4 is_stmt 1 view .LVU1000
 3532 0082 4FF0E023 		mov	r3, #-536813568
 3533 0086 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/cchwbchh.s 			page 170


 3534 008a C3F8042D 		str	r2, [r3, #3332]
1269:base/os/FreeRTOS/Source/tasks.c **** 		}
 3535              		.loc 1 1269 4 view .LVU1001
 3536              		.syntax unified
 3537              	@ 1269 "base/os/FreeRTOS/Source/tasks.c" 1
 3538 008e BFF34F8F 		dsb
 3539              	@ 0 "" 2
1269:base/os/FreeRTOS/Source/tasks.c **** 		}
 3540              		.loc 1 1269 4 view .LVU1002
 3541              	@ 1269 "base/os/FreeRTOS/Source/tasks.c" 1
 3542 0092 BFF36F8F 		isb
 3543              	@ 0 "" 2
1269:base/os/FreeRTOS/Source/tasks.c **** 		}
 3544              		.loc 1 1269 26 view .LVU1003
1273:base/os/FreeRTOS/Source/tasks.c **** 		}
 3545              		.loc 1 1273 28 view .LVU1004
 3546              		.thumb
 3547              		.syntax unified
 3548              	.L259:
1275:base/os/FreeRTOS/Source/tasks.c **** 
 3549              		.loc 1 1275 2 is_stmt 0 view .LVU1005
 3550 0096 38BD     		pop	{r3, r4, r5, pc}
 3551              	.LVL253:
 3552              	.L272:
 3553              	.LBB175:
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3554              		.loc 1 1248 4 is_stmt 1 view .LVU1006
1248:base/os/FreeRTOS/Source/tasks.c **** 
 3555              		.loc 1 1248 24 is_stmt 0 view .LVU1007
 3556 0098 2C60     		str	r4, [r5]
1250:base/os/FreeRTOS/Source/tasks.c **** 			{
 3557              		.loc 1 1250 4 is_stmt 1 view .LVU1008
 3558 009a EFE7     		b	.L268
 3559              	.L277:
 3560              		.align	2
 3561              	.L276:
 3562 009c 00000000 		.word	.LANCHOR16
 3563 00a0 00000000 		.word	.LANCHOR15
 3564              	.LBE175:
 3565              		.cfi_endproc
 3566              	.LFE9:
 3568              		.section	.text.vTaskDelay,"ax",%progbits
 3569              		.align	1
 3570              		.global	vTaskDelay
 3571              		.syntax unified
 3572              		.thumb
 3573              		.thumb_func
 3574              		.fpu softvfp
 3576              	vTaskDelay:
 3577              	.LVL254:
 3578              	.LFB10:
1283:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3579              		.loc 1 1283 2 view -0
 3580              		.cfi_startproc
 3581              		@ args = 0, pretend = 0, frame = 0
 3582              		@ frame_needed = 0, uses_anonymous_args = 0
1283:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  /tmp/cchwbchh.s 			page 171


 3583              		.loc 1 1283 2 is_stmt 0 view .LVU1010
 3584 0000 10B5     		push	{r4, lr}
 3585              	.LCFI31:
 3586              		.cfi_def_cfa_offset 8
 3587              		.cfi_offset 4, -8
 3588              		.cfi_offset 14, -4
1284:base/os/FreeRTOS/Source/tasks.c **** 
 3589              		.loc 1 1284 2 is_stmt 1 view .LVU1011
 3590              	.LVL255:
1287:base/os/FreeRTOS/Source/tasks.c **** 		{
 3591              		.loc 1 1287 3 view .LVU1012
1287:base/os/FreeRTOS/Source/tasks.c **** 		{
 3592              		.loc 1 1287 5 is_stmt 0 view .LVU1013
 3593 0002 A8B1     		cbz	r0, .L279
 3594 0004 0446     		mov	r4, r0
1289:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3595              		.loc 1 1289 4 is_stmt 1 view .LVU1014
 3596 0006 104B     		ldr	r3, .L284
 3597 0008 1B68     		ldr	r3, [r3]
 3598 000a 43B1     		cbz	r3, .L280
1289:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3599              		.loc 1 1289 4 view .LVU1015
 3600              	.LBB176:
 3601              	.LBI176:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3602              		.loc 2 191 30 view .LVU1016
 3603              	.LBB177:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3604              		.loc 2 193 1 view .LVU1017
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3605              		.loc 2 195 2 view .LVU1018
 3606              		.syntax unified
 3607              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3608 000c 4FF05003 			mov r3, #80												
 3609 0010 83F31188 		msr basepri, r3											
 3610 0014 BFF36F8F 		isb														
 3611 0018 BFF34F8F 		dsb														
 3612              	
 3613              	@ 0 "" 2
 3614              	.LVL256:
 3615              		.thumb
 3616              		.syntax unified
 3617              	.L281:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3618              		.loc 2 195 2 is_stmt 0 view .LVU1019
 3619              	.LBE177:
 3620              	.LBE176:
1289:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3621              		.loc 1 1289 4 is_stmt 1 discriminator 1 view .LVU1020
1289:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3622              		.loc 1 1289 4 discriminator 1 view .LVU1021
 3623 001c FEE7     		b	.L281
 3624              	.L280:
1289:base/os/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3625              		.loc 1 1289 45 discriminator 2 view .LVU1022
1290:base/os/FreeRTOS/Source/tasks.c **** 			{
 3626              		.loc 1 1290 4 discriminator 2 view .LVU1023
ARM GAS  /tmp/cchwbchh.s 			page 172


 3627 001e FFF7FEFF 		bl	vTaskSuspendAll
 3628              	.LVL257:
1292:base/os/FreeRTOS/Source/tasks.c **** 
 3629              		.loc 1 1292 22 discriminator 2 view .LVU1024
1301:base/os/FreeRTOS/Source/tasks.c **** 			}
 3630              		.loc 1 1301 5 discriminator 2 view .LVU1025
 3631 0022 0021     		movs	r1, #0
 3632 0024 2046     		mov	r0, r4
 3633 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3634              	.LVL258:
1303:base/os/FreeRTOS/Source/tasks.c **** 		}
 3635              		.loc 1 1303 4 discriminator 2 view .LVU1026
1303:base/os/FreeRTOS/Source/tasks.c **** 		}
 3636              		.loc 1 1303 22 is_stmt 0 discriminator 2 view .LVU1027
 3637 002a FFF7FEFF 		bl	xTaskResumeAll
 3638              	.LVL259:
1307:base/os/FreeRTOS/Source/tasks.c **** 		}
 3639              		.loc 1 1307 28 is_stmt 1 discriminator 2 view .LVU1028
1312:base/os/FreeRTOS/Source/tasks.c **** 		{
 3640              		.loc 1 1312 3 discriminator 2 view .LVU1029
1312:base/os/FreeRTOS/Source/tasks.c **** 		{
 3641              		.loc 1 1312 5 is_stmt 0 discriminator 2 view .LVU1030
 3642 002e 48B9     		cbnz	r0, .L278
 3643              	.LVL260:
 3644              	.L279:
1314:base/os/FreeRTOS/Source/tasks.c **** 		}
 3645              		.loc 1 1314 4 is_stmt 1 view .LVU1031
 3646 0030 4FF0E023 		mov	r3, #-536813568
 3647 0034 4FF08052 		mov	r2, #268435456
 3648 0038 C3F8042D 		str	r2, [r3, #3332]
1314:base/os/FreeRTOS/Source/tasks.c **** 		}
 3649              		.loc 1 1314 4 view .LVU1032
 3650              		.syntax unified
 3651              	@ 1314 "base/os/FreeRTOS/Source/tasks.c" 1
 3652 003c BFF34F8F 		dsb
 3653              	@ 0 "" 2
1314:base/os/FreeRTOS/Source/tasks.c **** 		}
 3654              		.loc 1 1314 4 view .LVU1033
 3655              	@ 1314 "base/os/FreeRTOS/Source/tasks.c" 1
 3656 0040 BFF36F8F 		isb
 3657              	@ 0 "" 2
1314:base/os/FreeRTOS/Source/tasks.c **** 		}
 3658              		.loc 1 1314 26 view .LVU1034
1318:base/os/FreeRTOS/Source/tasks.c **** 		}
 3659              		.loc 1 1318 28 view .LVU1035
 3660              		.thumb
 3661              		.syntax unified
 3662              	.L278:
1320:base/os/FreeRTOS/Source/tasks.c **** 
 3663              		.loc 1 1320 2 is_stmt 0 view .LVU1036
 3664 0044 10BD     		pop	{r4, pc}
 3665              	.L285:
 3666 0046 00BF     		.align	2
 3667              	.L284:
 3668 0048 00000000 		.word	.LANCHOR16
 3669              		.cfi_endproc
 3670              	.LFE10:
ARM GAS  /tmp/cchwbchh.s 			page 173


 3672              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3673              		.align	1
 3674              		.global	vTaskSwitchContext
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu softvfp
 3680              	vTaskSwitchContext:
 3681              	.LFB29:
2846:base/os/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3682              		.loc 1 2846 1 is_stmt 1 view -0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 0
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
 3686              		@ link register save eliminated.
2847:base/os/FreeRTOS/Source/tasks.c **** 	{
 3687              		.loc 1 2847 2 view .LVU1038
2847:base/os/FreeRTOS/Source/tasks.c **** 	{
 3688              		.loc 1 2847 27 is_stmt 0 view .LVU1039
 3689 0000 1F4B     		ldr	r3, .L297
 3690 0002 1B68     		ldr	r3, [r3]
2847:base/os/FreeRTOS/Source/tasks.c **** 	{
 3691              		.loc 1 2847 4 view .LVU1040
 3692 0004 1BB1     		cbz	r3, .L287
2851:base/os/FreeRTOS/Source/tasks.c **** 	}
 3693              		.loc 1 2851 3 is_stmt 1 view .LVU1041
2851:base/os/FreeRTOS/Source/tasks.c **** 	}
 3694              		.loc 1 2851 17 is_stmt 0 view .LVU1042
 3695 0006 1F4B     		ldr	r3, .L297+4
 3696 0008 0122     		movs	r2, #1
 3697 000a 1A60     		str	r2, [r3]
 3698 000c 7047     		bx	lr
 3699              	.L287:
2855:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3700              		.loc 1 2855 3 is_stmt 1 view .LVU1043
2855:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3701              		.loc 1 2855 17 is_stmt 0 view .LVU1044
 3702 000e 1D4B     		ldr	r3, .L297+4
 3703 0010 0022     		movs	r2, #0
 3704 0012 1A60     		str	r2, [r3]
2856:base/os/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 2856 27 is_stmt 1 view .LVU1045
2886:base/os/FreeRTOS/Source/tasks.c **** 
 3706              		.loc 1 2886 33 view .LVU1046
 3707              	.LBB178:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3708              		.loc 1 2890 3 view .LVU1047
 3709 0014 1C4B     		ldr	r3, .L297+8
 3710 0016 1B68     		ldr	r3, [r3]
 3711              	.LVL261:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3712              		.loc 1 2890 3 view .LVU1048
 3713              	.L289:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3714              		.loc 1 2890 3 discriminator 5 view .LVU1049
 3715 0018 03EB8301 		add	r1, r3, r3, lsl #2
 3716 001c 8A00     		lsls	r2, r1, #2
ARM GAS  /tmp/cchwbchh.s 			page 174


 3717 001e 1B49     		ldr	r1, .L297+12
 3718 0020 8A58     		ldr	r2, [r1, r2]
 3719 0022 5AB9     		cbnz	r2, .L294
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3720              		.loc 1 2890 3 discriminator 6 view .LVU1050
 3721 0024 0BB1     		cbz	r3, .L295
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3722              		.loc 1 2890 3 discriminator 3 view .LVU1051
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3723              		.loc 1 2890 3 discriminator 3 view .LVU1052
 3724 0026 013B     		subs	r3, r3, #1
 3725              	.LVL262:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3726              		.loc 1 2890 3 is_stmt 0 discriminator 3 view .LVU1053
 3727 0028 F6E7     		b	.L289
 3728              	.L295:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3729              		.loc 1 2890 3 is_stmt 1 view .LVU1054
 3730              	.LBB179:
 3731              	.LBI179:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3732              		.loc 2 191 30 view .LVU1055
 3733              	.LBB180:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3734              		.loc 2 193 1 view .LVU1056
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3735              		.loc 2 195 2 view .LVU1057
 3736              		.syntax unified
 3737              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3738 002a 4FF05003 			mov r3, #80												
 3739 002e 83F31188 		msr basepri, r3											
 3740 0032 BFF36F8F 		isb														
 3741 0036 BFF34F8F 		dsb														
 3742              	
 3743              	@ 0 "" 2
 3744              	.LVL263:
 3745              		.thumb
 3746              		.syntax unified
 3747              	.L291:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3748              		.loc 2 195 2 is_stmt 0 view .LVU1058
 3749              	.LBE180:
 3750              	.LBE179:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3751              		.loc 1 2890 3 is_stmt 1 discriminator 1 view .LVU1059
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3752              		.loc 1 2890 3 discriminator 1 view .LVU1060
 3753 003a FEE7     		b	.L291
 3754              	.LVL264:
 3755              	.L294:
 3756              	.LBB181:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3757              		.loc 1 2890 3 discriminator 7 view .LVU1061
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3758              		.loc 1 2890 3 discriminator 7 view .LVU1062
 3759 003c 03EB8300 		add	r0, r3, r3, lsl #2
 3760 0040 8200     		lsls	r2, r0, #2
ARM GAS  /tmp/cchwbchh.s 			page 175


 3761 0042 0A44     		add	r2, r2, r1
 3762 0044 5068     		ldr	r0, [r2, #4]
 3763 0046 4068     		ldr	r0, [r0, #4]
 3764 0048 5060     		str	r0, [r2, #4]
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3765              		.loc 1 2890 3 discriminator 7 view .LVU1063
 3766 004a 03EB830C 		add	ip, r3, r3, lsl #2
 3767 004e 4FEA8C02 		lsl	r2, ip, #2
 3768 0052 0832     		adds	r2, r2, #8
 3769 0054 1144     		add	r1, r1, r2
 3770 0056 8842     		cmp	r0, r1
 3771 0058 0BD0     		beq	.L296
 3772              	.L293:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3773              		.loc 1 2890 3 discriminator 10 view .LVU1064
 3774 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3775 005e 9100     		lsls	r1, r2, #2
 3776 0060 0A4A     		ldr	r2, .L297+12
 3777 0062 0A44     		add	r2, r2, r1
 3778 0064 5268     		ldr	r2, [r2, #4]
 3779 0066 D168     		ldr	r1, [r2, #12]
 3780 0068 094A     		ldr	r2, .L297+16
 3781 006a 1160     		str	r1, [r2]
 3782              	.LBE181:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3783              		.loc 1 2890 3 discriminator 10 view .LVU1065
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3784              		.loc 1 2890 3 discriminator 10 view .LVU1066
 3785 006c 064A     		ldr	r2, .L297+8
 3786 006e 1360     		str	r3, [r2]
 3787              	.LBE178:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3788              		.loc 1 2890 37 discriminator 10 view .LVU1067
2891:base/os/FreeRTOS/Source/tasks.c **** 
 3789              		.loc 1 2891 26 discriminator 10 view .LVU1068
2901:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3790              		.loc 1 2901 1 is_stmt 0 discriminator 10 view .LVU1069
 3791 0070 7047     		bx	lr
 3792              	.L296:
 3793              	.LBB183:
 3794              	.LBB182:
2890:base/os/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3795              		.loc 1 2890 3 is_stmt 1 discriminator 8 view .LVU1070
 3796 0072 4068     		ldr	r0, [r0, #4]
 3797 0074 6246     		mov	r2, ip
 3798 0076 9100     		lsls	r1, r2, #2
 3799 0078 044A     		ldr	r2, .L297+12
 3800 007a 0A44     		add	r2, r2, r1
 3801 007c 5060     		str	r0, [r2, #4]
 3802 007e ECE7     		b	.L293
 3803              	.L298:
 3804              		.align	2
 3805              	.L297:
 3806 0080 00000000 		.word	.LANCHOR16
 3807 0084 00000000 		.word	.LANCHOR20
 3808 0088 00000000 		.word	.LANCHOR13
 3809 008c 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/cchwbchh.s 			page 176


 3810 0090 00000000 		.word	.LANCHOR10
 3811              	.LBE182:
 3812              	.LBE183:
 3813              		.cfi_endproc
 3814              	.LFE29:
 3816              		.section	.text.vTaskSuspend,"ax",%progbits
 3817              		.align	1
 3818              		.global	vTaskSuspend
 3819              		.syntax unified
 3820              		.thumb
 3821              		.thumb_func
 3822              		.fpu softvfp
 3824              	vTaskSuspend:
 3825              	.LVL265:
 3826              	.LFB15:
1625:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3827              		.loc 1 1625 2 view -0
 3828              		.cfi_startproc
 3829              		@ args = 0, pretend = 0, frame = 0
 3830              		@ frame_needed = 0, uses_anonymous_args = 0
1625:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3831              		.loc 1 1625 2 is_stmt 0 view .LVU1072
 3832 0000 38B5     		push	{r3, r4, r5, lr}
 3833              	.LCFI32:
 3834              		.cfi_def_cfa_offset 16
 3835              		.cfi_offset 3, -16
 3836              		.cfi_offset 4, -12
 3837              		.cfi_offset 5, -8
 3838              		.cfi_offset 14, -4
 3839 0002 0446     		mov	r4, r0
1626:base/os/FreeRTOS/Source/tasks.c **** 
 3840              		.loc 1 1626 2 is_stmt 1 view .LVU1073
1628:base/os/FreeRTOS/Source/tasks.c **** 		{
 3841              		.loc 1 1628 3 view .LVU1074
 3842 0004 FFF7FEFF 		bl	vPortEnterCritical
 3843              	.LVL266:
1632:base/os/FreeRTOS/Source/tasks.c **** 
 3844              		.loc 1 1632 4 view .LVU1075
1632:base/os/FreeRTOS/Source/tasks.c **** 
 3845              		.loc 1 1632 12 is_stmt 0 view .LVU1076
 3846 0008 E4B1     		cbz	r4, .L310
 3847              	.LVL267:
 3848              	.L300:
1634:base/os/FreeRTOS/Source/tasks.c **** 
 3849              		.loc 1 1634 30 is_stmt 1 discriminator 4 view .LVU1077
1638:base/os/FreeRTOS/Source/tasks.c **** 			{
 3850              		.loc 1 1638 4 discriminator 4 view .LVU1078
1638:base/os/FreeRTOS/Source/tasks.c **** 			{
 3851              		.loc 1 1638 8 is_stmt 0 discriminator 4 view .LVU1079
 3852 000a 251D     		adds	r5, r4, #4
 3853 000c 2846     		mov	r0, r5
 3854 000e FFF7FEFF 		bl	uxListRemove
 3855              	.LVL268:
1644:base/os/FreeRTOS/Source/tasks.c **** 			}
 3856              		.loc 1 1644 29 is_stmt 1 discriminator 4 view .LVU1080
1648:base/os/FreeRTOS/Source/tasks.c **** 			{
 3857              		.loc 1 1648 4 discriminator 4 view .LVU1081
ARM GAS  /tmp/cchwbchh.s 			page 177


1648:base/os/FreeRTOS/Source/tasks.c **** 			{
 3858              		.loc 1 1648 8 is_stmt 0 discriminator 4 view .LVU1082
 3859 0012 A36A     		ldr	r3, [r4, #40]
1648:base/os/FreeRTOS/Source/tasks.c **** 			{
 3860              		.loc 1 1648 6 discriminator 4 view .LVU1083
 3861 0014 1BB1     		cbz	r3, .L301
1650:base/os/FreeRTOS/Source/tasks.c **** 			}
 3862              		.loc 1 1650 5 is_stmt 1 view .LVU1084
1650:base/os/FreeRTOS/Source/tasks.c **** 			}
 3863              		.loc 1 1650 14 is_stmt 0 view .LVU1085
 3864 0016 04F11800 		add	r0, r4, #24
 3865 001a FFF7FEFF 		bl	uxListRemove
 3866              	.LVL269:
 3867              	.L301:
1654:base/os/FreeRTOS/Source/tasks.c **** 			}
 3868              		.loc 1 1654 29 is_stmt 1 view .LVU1086
1657:base/os/FreeRTOS/Source/tasks.c **** 
 3869              		.loc 1 1657 4 view .LVU1087
 3870 001e 2946     		mov	r1, r5
 3871 0020 2348     		ldr	r0, .L314
 3872 0022 FFF7FEFF 		bl	vListInsertEnd
 3873              	.LVL270:
1661:base/os/FreeRTOS/Source/tasks.c **** 				{
 3874              		.loc 1 1661 5 view .LVU1088
1661:base/os/FreeRTOS/Source/tasks.c **** 				{
 3875              		.loc 1 1661 14 is_stmt 0 view .LVU1089
 3876 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3877 002a DBB2     		uxtb	r3, r3
1661:base/os/FreeRTOS/Source/tasks.c **** 				{
 3878              		.loc 1 1661 7 view .LVU1090
 3879 002c 012B     		cmp	r3, #1
 3880 002e 0CD0     		beq	.L311
 3881              	.L302:
1670:base/os/FreeRTOS/Source/tasks.c **** 
 3882              		.loc 1 1670 3 is_stmt 1 view .LVU1091
 3883 0030 FFF7FEFF 		bl	vPortExitCritical
 3884              	.LVL271:
1672:base/os/FreeRTOS/Source/tasks.c **** 		{
 3885              		.loc 1 1672 3 view .LVU1092
1672:base/os/FreeRTOS/Source/tasks.c **** 		{
 3886              		.loc 1 1672 25 is_stmt 0 view .LVU1093
 3887 0034 1F4B     		ldr	r3, .L314+4
 3888 0036 1B68     		ldr	r3, [r3]
1672:base/os/FreeRTOS/Source/tasks.c **** 		{
 3889              		.loc 1 1672 5 view .LVU1094
 3890 0038 5BB9     		cbnz	r3, .L312
 3891              	.L303:
1684:base/os/FreeRTOS/Source/tasks.c **** 		}
 3892              		.loc 1 1684 28 is_stmt 1 view .LVU1095
1687:base/os/FreeRTOS/Source/tasks.c **** 		{
 3893              		.loc 1 1687 3 view .LVU1096
1687:base/os/FreeRTOS/Source/tasks.c **** 		{
 3894              		.loc 1 1687 13 is_stmt 0 view .LVU1097
 3895 003a 1F4B     		ldr	r3, .L314+8
 3896 003c 1B68     		ldr	r3, [r3]
1687:base/os/FreeRTOS/Source/tasks.c **** 		{
 3897              		.loc 1 1687 5 view .LVU1098
ARM GAS  /tmp/cchwbchh.s 			page 178


 3898 003e A342     		cmp	r3, r4
 3899 0040 0ED0     		beq	.L313
 3900              	.L299:
1718:base/os/FreeRTOS/Source/tasks.c **** 
 3901              		.loc 1 1718 2 view .LVU1099
 3902 0042 38BD     		pop	{r3, r4, r5, pc}
 3903              	.LVL272:
 3904              	.L310:
1632:base/os/FreeRTOS/Source/tasks.c **** 
 3905              		.loc 1 1632 12 discriminator 1 view .LVU1100
 3906 0044 1C4B     		ldr	r3, .L314+8
 3907 0046 1C68     		ldr	r4, [r3]
 3908              	.LVL273:
1632:base/os/FreeRTOS/Source/tasks.c **** 
 3909              		.loc 1 1632 12 discriminator 1 view .LVU1101
 3910 0048 DFE7     		b	.L300
 3911              	.LVL274:
 3912              	.L311:
1665:base/os/FreeRTOS/Source/tasks.c **** 				}
 3913              		.loc 1 1665 6 is_stmt 1 view .LVU1102
1665:base/os/FreeRTOS/Source/tasks.c **** 				}
 3914              		.loc 1 1665 27 is_stmt 0 view .LVU1103
 3915 004a 0023     		movs	r3, #0
 3916 004c 84F85830 		strb	r3, [r4, #88]
 3917 0050 EEE7     		b	.L302
 3918              	.L312:
1676:base/os/FreeRTOS/Source/tasks.c **** 			{
 3919              		.loc 1 1676 4 is_stmt 1 view .LVU1104
 3920 0052 FFF7FEFF 		bl	vPortEnterCritical
 3921              	.LVL275:
1678:base/os/FreeRTOS/Source/tasks.c **** 			}
 3922              		.loc 1 1678 5 view .LVU1105
 3923 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3924              	.LVL276:
1680:base/os/FreeRTOS/Source/tasks.c **** 		}
 3925              		.loc 1 1680 4 view .LVU1106
 3926 005a FFF7FEFF 		bl	vPortExitCritical
 3927              	.LVL277:
 3928 005e ECE7     		b	.L303
 3929              	.L313:
1689:base/os/FreeRTOS/Source/tasks.c **** 			{
 3930              		.loc 1 1689 4 view .LVU1107
1689:base/os/FreeRTOS/Source/tasks.c **** 			{
 3931              		.loc 1 1689 26 is_stmt 0 view .LVU1108
 3932 0060 144B     		ldr	r3, .L314+4
 3933 0062 1B68     		ldr	r3, [r3]
1689:base/os/FreeRTOS/Source/tasks.c **** 			{
 3934              		.loc 1 1689 6 view .LVU1109
 3935 0064 B3B1     		cbz	r3, .L305
1692:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3936              		.loc 1 1692 5 is_stmt 1 view .LVU1110
 3937 0066 154B     		ldr	r3, .L314+12
 3938 0068 1B68     		ldr	r3, [r3]
 3939 006a 43B1     		cbz	r3, .L306
1692:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3940              		.loc 1 1692 5 view .LVU1111
 3941              	.LBB184:
ARM GAS  /tmp/cchwbchh.s 			page 179


 3942              	.LBI184:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 3943              		.loc 2 191 30 view .LVU1112
 3944              	.LBB185:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3945              		.loc 2 193 1 view .LVU1113
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3946              		.loc 2 195 2 view .LVU1114
 3947              		.syntax unified
 3948              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3949 006c 4FF05003 			mov r3, #80												
 3950 0070 83F31188 		msr basepri, r3											
 3951 0074 BFF36F8F 		isb														
 3952 0078 BFF34F8F 		dsb														
 3953              	
 3954              	@ 0 "" 2
 3955              	.LVL278:
 3956              		.thumb
 3957              		.syntax unified
 3958              	.L307:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3959              		.loc 2 195 2 is_stmt 0 view .LVU1115
 3960              	.LBE185:
 3961              	.LBE184:
1692:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3962              		.loc 1 1692 5 is_stmt 1 discriminator 1 view .LVU1116
1692:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3963              		.loc 1 1692 5 discriminator 1 view .LVU1117
 3964 007c FEE7     		b	.L307
 3965              	.L306:
1692:base/os/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3966              		.loc 1 1692 46 discriminator 2 view .LVU1118
1693:base/os/FreeRTOS/Source/tasks.c **** 			}
 3967              		.loc 1 1693 5 discriminator 2 view .LVU1119
 3968 007e 4FF0E023 		mov	r3, #-536813568
 3969 0082 4FF08052 		mov	r2, #268435456
 3970 0086 C3F8042D 		str	r2, [r3, #3332]
1693:base/os/FreeRTOS/Source/tasks.c **** 			}
 3971              		.loc 1 1693 5 discriminator 2 view .LVU1120
 3972              		.syntax unified
 3973              	@ 1693 "base/os/FreeRTOS/Source/tasks.c" 1
 3974 008a BFF34F8F 		dsb
 3975              	@ 0 "" 2
1693:base/os/FreeRTOS/Source/tasks.c **** 			}
 3976              		.loc 1 1693 5 discriminator 2 view .LVU1121
 3977              	@ 1693 "base/os/FreeRTOS/Source/tasks.c" 1
 3978 008e BFF36F8F 		isb
 3979              	@ 0 "" 2
1693:base/os/FreeRTOS/Source/tasks.c **** 			}
 3980              		.loc 1 1693 27 discriminator 2 view .LVU1122
 3981              		.thumb
 3982              		.syntax unified
 3983 0092 D6E7     		b	.L299
 3984              	.L305:
1700:base/os/FreeRTOS/Source/tasks.c **** 				{
 3985              		.loc 1 1700 5 view .LVU1123
1700:base/os/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cchwbchh.s 			page 180


 3986              		.loc 1 1700 9 is_stmt 0 view .LVU1124
 3987 0094 064B     		ldr	r3, .L314
 3988 0096 1A68     		ldr	r2, [r3]
1700:base/os/FreeRTOS/Source/tasks.c **** 				{
 3989              		.loc 1 1700 56 view .LVU1125
 3990 0098 094B     		ldr	r3, .L314+16
 3991 009a 1B68     		ldr	r3, [r3]
1700:base/os/FreeRTOS/Source/tasks.c **** 				{
 3992              		.loc 1 1700 7 view .LVU1126
 3993 009c 9A42     		cmp	r2, r3
 3994 009e 03D1     		bne	.L308
1706:base/os/FreeRTOS/Source/tasks.c **** 				}
 3995              		.loc 1 1706 6 is_stmt 1 view .LVU1127
1706:base/os/FreeRTOS/Source/tasks.c **** 				}
 3996              		.loc 1 1706 19 is_stmt 0 view .LVU1128
 3997 00a0 054B     		ldr	r3, .L314+8
 3998 00a2 0022     		movs	r2, #0
 3999 00a4 1A60     		str	r2, [r3]
 4000 00a6 CCE7     		b	.L299
 4001              	.L308:
1710:base/os/FreeRTOS/Source/tasks.c **** 				}
 4002              		.loc 1 1710 6 is_stmt 1 view .LVU1129
 4003 00a8 FFF7FEFF 		bl	vTaskSwitchContext
 4004              	.LVL279:
1716:base/os/FreeRTOS/Source/tasks.c **** 		}
 4005              		.loc 1 1716 28 view .LVU1130
1718:base/os/FreeRTOS/Source/tasks.c **** 
 4006              		.loc 1 1718 2 is_stmt 0 view .LVU1131
 4007 00ac C9E7     		b	.L299
 4008              	.L315:
 4009 00ae 00BF     		.align	2
 4010              	.L314:
 4011 00b0 00000000 		.word	.LANCHOR0
 4012 00b4 00000000 		.word	.LANCHOR11
 4013 00b8 00000000 		.word	.LANCHOR10
 4014 00bc 00000000 		.word	.LANCHOR16
 4015 00c0 00000000 		.word	.LANCHOR9
 4016              		.cfi_endproc
 4017              	.LFE15:
 4019              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4020              		.align	1
 4021              		.global	vTaskPlaceOnEventList
 4022              		.syntax unified
 4023              		.thumb
 4024              		.thumb_func
 4025              		.fpu softvfp
 4027              	vTaskPlaceOnEventList:
 4028              	.LVL280:
 4029              	.LFB30:
2905:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4030              		.loc 1 2905 1 is_stmt 1 view -0
 4031              		.cfi_startproc
 4032              		@ args = 0, pretend = 0, frame = 0
 4033              		@ frame_needed = 0, uses_anonymous_args = 0
2906:base/os/FreeRTOS/Source/tasks.c **** 
 4034              		.loc 1 2906 2 view .LVU1133
 4035 0000 58B1     		cbz	r0, .L321
ARM GAS  /tmp/cchwbchh.s 			page 181


2905:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4036              		.loc 1 2905 1 is_stmt 0 discriminator 2 view .LVU1134
 4037 0002 10B5     		push	{r4, lr}
 4038              	.LCFI33:
 4039              		.cfi_def_cfa_offset 8
 4040              		.cfi_offset 4, -8
 4041              		.cfi_offset 14, -4
 4042 0004 0C46     		mov	r4, r1
2906:base/os/FreeRTOS/Source/tasks.c **** 
 4043              		.loc 1 2906 29 is_stmt 1 discriminator 2 view .LVU1135
2915:base/os/FreeRTOS/Source/tasks.c **** 
 4044              		.loc 1 2915 2 discriminator 2 view .LVU1136
2915:base/os/FreeRTOS/Source/tasks.c **** 
 4045              		.loc 1 2915 43 is_stmt 0 discriminator 2 view .LVU1137
 4046 0006 094A     		ldr	r2, .L322
 4047 0008 1168     		ldr	r1, [r2]
 4048              	.LVL281:
2915:base/os/FreeRTOS/Source/tasks.c **** 
 4049              		.loc 1 2915 2 discriminator 2 view .LVU1138
 4050 000a 1831     		adds	r1, r1, #24
 4051 000c FFF7FEFF 		bl	vListInsert
 4052              	.LVL282:
2917:base/os/FreeRTOS/Source/tasks.c **** }
 4053              		.loc 1 2917 2 is_stmt 1 discriminator 2 view .LVU1139
 4054 0010 0121     		movs	r1, #1
 4055 0012 2046     		mov	r0, r4
 4056 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4057              	.LVL283:
2918:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4058              		.loc 1 2918 1 is_stmt 0 discriminator 2 view .LVU1140
 4059 0018 10BD     		pop	{r4, pc}
 4060              	.LVL284:
 4061              	.L321:
 4062              	.LCFI34:
 4063              		.cfi_def_cfa_offset 0
 4064              		.cfi_restore 4
 4065              		.cfi_restore 14
2906:base/os/FreeRTOS/Source/tasks.c **** 
 4066              		.loc 1 2906 2 is_stmt 1 view .LVU1141
 4067              	.LBB186:
 4068              	.LBI186:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4069              		.loc 2 191 30 view .LVU1142
 4070              	.LBB187:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4071              		.loc 2 193 1 view .LVU1143
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4072              		.loc 2 195 2 view .LVU1144
 4073              		.syntax unified
 4074              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4075 001a 4FF05003 			mov r3, #80												
 4076 001e 83F31188 		msr basepri, r3											
 4077 0022 BFF36F8F 		isb														
 4078 0026 BFF34F8F 		dsb														
 4079              	
 4080              	@ 0 "" 2
 4081              	.LVL285:
ARM GAS  /tmp/cchwbchh.s 			page 182


 4082              		.thumb
 4083              		.syntax unified
 4084              	.L318:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4085              		.loc 2 195 2 is_stmt 0 view .LVU1145
 4086              	.LBE187:
 4087              	.LBE186:
2906:base/os/FreeRTOS/Source/tasks.c **** 
 4088              		.loc 1 2906 2 is_stmt 1 discriminator 1 view .LVU1146
2906:base/os/FreeRTOS/Source/tasks.c **** 
 4089              		.loc 1 2906 2 discriminator 1 view .LVU1147
 4090 002a FEE7     		b	.L318
 4091              	.L323:
 4092              		.align	2
 4093              	.L322:
 4094 002c 00000000 		.word	.LANCHOR10
 4095              		.cfi_endproc
 4096              	.LFE30:
 4098              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4099              		.align	1
 4100              		.global	vTaskPlaceOnUnorderedEventList
 4101              		.syntax unified
 4102              		.thumb
 4103              		.thumb_func
 4104              		.fpu softvfp
 4106              	vTaskPlaceOnUnorderedEventList:
 4107              	.LVL286:
 4108              	.LFB31:
2922:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4109              		.loc 1 2922 1 view -0
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 0
 4112              		@ frame_needed = 0, uses_anonymous_args = 0
2923:base/os/FreeRTOS/Source/tasks.c **** 
 4113              		.loc 1 2923 2 view .LVU1149
 4114 0000 70B1     		cbz	r0, .L331
2922:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4115              		.loc 1 2922 1 is_stmt 0 discriminator 2 view .LVU1150
 4116 0002 10B5     		push	{r4, lr}
 4117              	.LCFI35:
 4118              		.cfi_def_cfa_offset 8
 4119              		.cfi_offset 4, -8
 4120              		.cfi_offset 14, -4
 4121 0004 1446     		mov	r4, r2
 4122 0006 0246     		mov	r2, r0
 4123              	.LVL287:
2923:base/os/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 2923 29 is_stmt 1 discriminator 2 view .LVU1151
2927:base/os/FreeRTOS/Source/tasks.c **** 
 4125              		.loc 1 2927 2 discriminator 2 view .LVU1152
 4126 0008 114B     		ldr	r3, .L332
 4127 000a 1B68     		ldr	r3, [r3]
 4128 000c 8BB9     		cbnz	r3, .L327
2927:base/os/FreeRTOS/Source/tasks.c **** 
 4129              		.loc 1 2927 2 view .LVU1153
 4130              	.LBB188:
 4131              	.LBI188:
ARM GAS  /tmp/cchwbchh.s 			page 183


 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4132              		.loc 2 191 30 view .LVU1154
 4133              	.LBB189:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4134              		.loc 2 193 1 view .LVU1155
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4135              		.loc 2 195 2 view .LVU1156
 4136              		.syntax unified
 4137              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4138 000e 4FF05003 			mov r3, #80												
 4139 0012 83F31188 		msr basepri, r3											
 4140 0016 BFF36F8F 		isb														
 4141 001a BFF34F8F 		dsb														
 4142              	
 4143              	@ 0 "" 2
 4144              	.LVL288:
 4145              		.thumb
 4146              		.syntax unified
 4147              	.L328:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4148              		.loc 2 195 2 is_stmt 0 view .LVU1157
 4149              	.LBE189:
 4150              	.LBE188:
2927:base/os/FreeRTOS/Source/tasks.c **** 
 4151              		.loc 1 2927 2 is_stmt 1 discriminator 2 view .LVU1158
2927:base/os/FreeRTOS/Source/tasks.c **** 
 4152              		.loc 1 2927 2 discriminator 2 view .LVU1159
 4153 001e FEE7     		b	.L328
 4154              	.LVL289:
 4155              	.L331:
 4156              	.LCFI36:
 4157              		.cfi_def_cfa_offset 0
 4158              		.cfi_restore 4
 4159              		.cfi_restore 14
2923:base/os/FreeRTOS/Source/tasks.c **** 
 4160              		.loc 1 2923 2 view .LVU1160
 4161              	.LBB190:
 4162              	.LBI190:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4163              		.loc 2 191 30 view .LVU1161
 4164              	.LBB191:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4165              		.loc 2 193 1 view .LVU1162
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4166              		.loc 2 195 2 view .LVU1163
 4167              		.syntax unified
 4168              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4169 0020 4FF05003 			mov r3, #80												
 4170 0024 83F31188 		msr basepri, r3											
 4171 0028 BFF36F8F 		isb														
 4172 002c BFF34F8F 		dsb														
 4173              	
 4174              	@ 0 "" 2
 4175              	.LVL290:
 4176              		.thumb
 4177              		.syntax unified
 4178              	.L326:
ARM GAS  /tmp/cchwbchh.s 			page 184


 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4179              		.loc 2 195 2 is_stmt 0 view .LVU1164
 4180              	.LBE191:
 4181              	.LBE190:
2923:base/os/FreeRTOS/Source/tasks.c **** 
 4182              		.loc 1 2923 2 is_stmt 1 discriminator 1 view .LVU1165
2923:base/os/FreeRTOS/Source/tasks.c **** 
 4183              		.loc 1 2923 2 discriminator 1 view .LVU1166
 4184 0030 FEE7     		b	.L326
 4185              	.LVL291:
 4186              	.L327:
 4187              	.LCFI37:
 4188              		.cfi_def_cfa_offset 8
 4189              		.cfi_offset 4, -8
 4190              		.cfi_offset 14, -4
2927:base/os/FreeRTOS/Source/tasks.c **** 
 4191              		.loc 1 2927 43 discriminator 2 view .LVU1167
2932:base/os/FreeRTOS/Source/tasks.c **** 
 4192              		.loc 1 2932 2 discriminator 2 view .LVU1168
 4193 0032 084B     		ldr	r3, .L332+4
 4194 0034 1868     		ldr	r0, [r3]
 4195              	.LVL292:
2932:base/os/FreeRTOS/Source/tasks.c **** 
 4196              		.loc 1 2932 2 is_stmt 0 discriminator 2 view .LVU1169
 4197 0036 41F00041 		orr	r1, r1, #-2147483648
 4198              	.LVL293:
2932:base/os/FreeRTOS/Source/tasks.c **** 
 4199              		.loc 1 2932 2 discriminator 2 view .LVU1170
 4200 003a 8161     		str	r1, [r0, #24]
2939:base/os/FreeRTOS/Source/tasks.c **** 
 4201              		.loc 1 2939 2 is_stmt 1 discriminator 2 view .LVU1171
2939:base/os/FreeRTOS/Source/tasks.c **** 
 4202              		.loc 1 2939 46 is_stmt 0 discriminator 2 view .LVU1172
 4203 003c 1968     		ldr	r1, [r3]
2939:base/os/FreeRTOS/Source/tasks.c **** 
 4204              		.loc 1 2939 2 discriminator 2 view .LVU1173
 4205 003e 1831     		adds	r1, r1, #24
 4206 0040 1046     		mov	r0, r2
 4207 0042 FFF7FEFF 		bl	vListInsertEnd
 4208              	.LVL294:
2941:base/os/FreeRTOS/Source/tasks.c **** }
 4209              		.loc 1 2941 2 is_stmt 1 discriminator 2 view .LVU1174
 4210 0046 0121     		movs	r1, #1
 4211 0048 2046     		mov	r0, r4
 4212 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4213              	.LVL295:
2942:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4214              		.loc 1 2942 1 is_stmt 0 discriminator 2 view .LVU1175
 4215 004e 10BD     		pop	{r4, pc}
 4216              	.LVL296:
 4217              	.L333:
2942:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4218              		.loc 1 2942 1 discriminator 2 view .LVU1176
 4219              		.align	2
 4220              	.L332:
 4221 0050 00000000 		.word	.LANCHOR16
 4222 0054 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cchwbchh.s 			page 185


 4223              		.cfi_endproc
 4224              	.LFE31:
 4226              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4227              		.align	1
 4228              		.global	vTaskPlaceOnEventListRestricted
 4229              		.syntax unified
 4230              		.thumb
 4231              		.thumb_func
 4232              		.fpu softvfp
 4234              	vTaskPlaceOnEventListRestricted:
 4235              	.LVL297:
 4236              	.LFB32:
2948:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4237              		.loc 1 2948 2 is_stmt 1 view -0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 0
 4240              		@ frame_needed = 0, uses_anonymous_args = 0
2948:base/os/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4241              		.loc 1 2948 2 is_stmt 0 view .LVU1178
 4242 0000 38B5     		push	{r3, r4, r5, lr}
 4243              	.LCFI38:
 4244              		.cfi_def_cfa_offset 16
 4245              		.cfi_offset 3, -16
 4246              		.cfi_offset 4, -12
 4247              		.cfi_offset 5, -8
 4248              		.cfi_offset 14, -4
2949:base/os/FreeRTOS/Source/tasks.c **** 
 4249              		.loc 1 2949 3 is_stmt 1 view .LVU1179
 4250 0002 70B1     		cbz	r0, .L340
 4251 0004 0D46     		mov	r5, r1
 4252 0006 1446     		mov	r4, r2
2949:base/os/FreeRTOS/Source/tasks.c **** 
 4253              		.loc 1 2949 30 discriminator 2 view .LVU1180
2961:base/os/FreeRTOS/Source/tasks.c **** 
 4254              		.loc 1 2961 3 discriminator 2 view .LVU1181
2961:base/os/FreeRTOS/Source/tasks.c **** 
 4255              		.loc 1 2961 47 is_stmt 0 discriminator 2 view .LVU1182
 4256 0008 0A4A     		ldr	r2, .L341
 4257              	.LVL298:
2961:base/os/FreeRTOS/Source/tasks.c **** 
 4258              		.loc 1 2961 47 discriminator 2 view .LVU1183
 4259 000a 1168     		ldr	r1, [r2]
 4260              	.LVL299:
2961:base/os/FreeRTOS/Source/tasks.c **** 
 4261              		.loc 1 2961 3 discriminator 2 view .LVU1184
 4262 000c 1831     		adds	r1, r1, #24
 4263 000e FFF7FEFF 		bl	vListInsertEnd
 4264              	.LVL300:
2966:base/os/FreeRTOS/Source/tasks.c **** 		{
 4265              		.loc 1 2966 3 is_stmt 1 discriminator 2 view .LVU1185
2966:base/os/FreeRTOS/Source/tasks.c **** 		{
 4266              		.loc 1 2966 5 is_stmt 0 discriminator 2 view .LVU1186
 4267 0012 0CB1     		cbz	r4, .L337
2968:base/os/FreeRTOS/Source/tasks.c **** 		}
 4268              		.loc 1 2968 17 view .LVU1187
 4269 0014 4FF0FF35 		mov	r5, #-1
 4270              	.LVL301:
ARM GAS  /tmp/cchwbchh.s 			page 186


 4271              	.L337:
2971:base/os/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4272              		.loc 1 2971 57 is_stmt 1 view .LVU1188
2972:base/os/FreeRTOS/Source/tasks.c **** 	}
 4273              		.loc 1 2972 3 view .LVU1189
 4274 0018 2146     		mov	r1, r4
 4275 001a 2846     		mov	r0, r5
 4276 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4277              	.LVL302:
2973:base/os/FreeRTOS/Source/tasks.c **** 
 4278              		.loc 1 2973 2 is_stmt 0 view .LVU1190
 4279 0020 38BD     		pop	{r3, r4, r5, pc}
 4280              	.LVL303:
 4281              	.L340:
2949:base/os/FreeRTOS/Source/tasks.c **** 
 4282              		.loc 1 2949 3 is_stmt 1 view .LVU1191
 4283              	.LBB192:
 4284              	.LBI192:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4285              		.loc 2 191 30 view .LVU1192
 4286              	.LBB193:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4287              		.loc 2 193 1 view .LVU1193
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4288              		.loc 2 195 2 view .LVU1194
 4289              		.syntax unified
 4290              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4291 0022 4FF05003 			mov r3, #80												
 4292 0026 83F31188 		msr basepri, r3											
 4293 002a BFF36F8F 		isb														
 4294 002e BFF34F8F 		dsb														
 4295              	
 4296              	@ 0 "" 2
 4297              	.LVL304:
 4298              		.thumb
 4299              		.syntax unified
 4300              	.L336:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4301              		.loc 2 195 2 is_stmt 0 view .LVU1195
 4302              	.LBE193:
 4303              	.LBE192:
2949:base/os/FreeRTOS/Source/tasks.c **** 
 4304              		.loc 1 2949 3 is_stmt 1 discriminator 1 view .LVU1196
2949:base/os/FreeRTOS/Source/tasks.c **** 
 4305              		.loc 1 2949 3 discriminator 1 view .LVU1197
 4306 0032 FEE7     		b	.L336
 4307              	.L342:
 4308              		.align	2
 4309              	.L341:
 4310 0034 00000000 		.word	.LANCHOR10
 4311              		.cfi_endproc
 4312              	.LFE32:
 4314              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4315              		.align	1
 4316              		.global	xTaskRemoveFromEventList
 4317              		.syntax unified
 4318              		.thumb
ARM GAS  /tmp/cchwbchh.s 			page 187


 4319              		.thumb_func
 4320              		.fpu softvfp
 4322              	xTaskRemoveFromEventList:
 4323              	.LVL305:
 4324              	.LFB33:
2979:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4325              		.loc 1 2979 1 view -0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 0
 4328              		@ frame_needed = 0, uses_anonymous_args = 0
2979:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4329              		.loc 1 2979 1 is_stmt 0 view .LVU1199
 4330 0000 38B5     		push	{r3, r4, r5, lr}
 4331              	.LCFI39:
 4332              		.cfi_def_cfa_offset 16
 4333              		.cfi_offset 3, -16
 4334              		.cfi_offset 4, -12
 4335              		.cfi_offset 5, -8
 4336              		.cfi_offset 14, -4
2980:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4337              		.loc 1 2980 1 is_stmt 1 view .LVU1200
2981:base/os/FreeRTOS/Source/tasks.c **** 
 4338              		.loc 1 2981 1 view .LVU1201
2996:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4339              		.loc 1 2996 2 view .LVU1202
2996:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4340              		.loc 1 2996 31 is_stmt 0 view .LVU1203
 4341 0002 C368     		ldr	r3, [r0, #12]
2996:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4342              		.loc 1 2996 17 view .LVU1204
 4343 0004 DC68     		ldr	r4, [r3, #12]
 4344              	.LVL306:
2997:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4345              		.loc 1 2997 2 is_stmt 1 view .LVU1205
 4346 0006 24B3     		cbz	r4, .L352
2997:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4347              		.loc 1 2997 32 discriminator 2 view .LVU1206
2998:base/os/FreeRTOS/Source/tasks.c **** 
 4348              		.loc 1 2998 2 discriminator 2 view .LVU1207
2998:base/os/FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 2998 11 is_stmt 0 discriminator 2 view .LVU1208
 4350 0008 04F11805 		add	r5, r4, #24
 4351 000c 2846     		mov	r0, r5
 4352              	.LVL307:
2998:base/os/FreeRTOS/Source/tasks.c **** 
 4353              		.loc 1 2998 11 discriminator 2 view .LVU1209
 4354 000e FFF7FEFF 		bl	uxListRemove
 4355              	.LVL308:
3000:base/os/FreeRTOS/Source/tasks.c **** 	{
 4356              		.loc 1 3000 2 is_stmt 1 discriminator 2 view .LVU1210
3000:base/os/FreeRTOS/Source/tasks.c **** 	{
 4357              		.loc 1 3000 27 is_stmt 0 discriminator 2 view .LVU1211
 4358 0012 184B     		ldr	r3, .L353
 4359 0014 1B68     		ldr	r3, [r3]
3000:base/os/FreeRTOS/Source/tasks.c **** 	{
 4360              		.loc 1 3000 4 discriminator 2 view .LVU1212
 4361 0016 2BBB     		cbnz	r3, .L346
ARM GAS  /tmp/cchwbchh.s 			page 188


3002:base/os/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4362              		.loc 1 3002 3 is_stmt 1 view .LVU1213
3002:base/os/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4363              		.loc 1 3002 12 is_stmt 0 view .LVU1214
 4364 0018 251D     		adds	r5, r4, #4
 4365 001a 2846     		mov	r0, r5
 4366 001c FFF7FEFF 		bl	uxListRemove
 4367              	.LVL309:
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4368              		.loc 1 3003 3 is_stmt 1 view .LVU1215
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4369              		.loc 1 3003 3 view .LVU1216
 4370 0020 E06A     		ldr	r0, [r4, #44]
 4371 0022 154B     		ldr	r3, .L353+4
 4372 0024 1B68     		ldr	r3, [r3]
 4373 0026 9842     		cmp	r0, r3
 4374 0028 01D9     		bls	.L347
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4375              		.loc 1 3003 3 discriminator 1 view .LVU1217
 4376 002a 134B     		ldr	r3, .L353+4
 4377 002c 1860     		str	r0, [r3]
 4378              	.L347:
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4379              		.loc 1 3003 3 discriminator 3 view .LVU1218
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4380              		.loc 1 3003 3 discriminator 3 view .LVU1219
 4381 002e 00EB8000 		add	r0, r0, r0, lsl #2
 4382 0032 2946     		mov	r1, r5
 4383 0034 114B     		ldr	r3, .L353+8
 4384 0036 03EB8000 		add	r0, r3, r0, lsl #2
 4385 003a FFF7FEFF 		bl	vListInsertEnd
 4386              	.LVL310:
3003:base/os/FreeRTOS/Source/tasks.c **** 	}
 4387              		.loc 1 3003 42 discriminator 3 view .LVU1220
 4388              	.L348:
3012:base/os/FreeRTOS/Source/tasks.c **** 	{
 4389              		.loc 1 3012 2 view .LVU1221
3012:base/os/FreeRTOS/Source/tasks.c **** 	{
 4390              		.loc 1 3012 20 is_stmt 0 view .LVU1222
 4391 003e E26A     		ldr	r2, [r4, #44]
3012:base/os/FreeRTOS/Source/tasks.c **** 	{
 4392              		.loc 1 3012 47 view .LVU1223
 4393 0040 0F4B     		ldr	r3, .L353+12
 4394 0042 1B68     		ldr	r3, [r3]
 4395 0044 DB6A     		ldr	r3, [r3, #44]
3012:base/os/FreeRTOS/Source/tasks.c **** 	{
 4396              		.loc 1 3012 4 view .LVU1224
 4397 0046 9A42     		cmp	r2, r3
 4398 0048 11D9     		bls	.L350
3017:base/os/FreeRTOS/Source/tasks.c **** 
 4399              		.loc 1 3017 3 is_stmt 1 view .LVU1225
 4400              	.LVL311:
3021:base/os/FreeRTOS/Source/tasks.c **** 	}
 4401              		.loc 1 3021 3 view .LVU1226
3021:base/os/FreeRTOS/Source/tasks.c **** 	}
 4402              		.loc 1 3021 17 is_stmt 0 view .LVU1227
 4403 004a 0120     		movs	r0, #1
ARM GAS  /tmp/cchwbchh.s 			page 189


 4404 004c 0D4B     		ldr	r3, .L353+16
 4405 004e 1860     		str	r0, [r3]
 4406              	.LVL312:
 4407              	.L343:
3043:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4408              		.loc 1 3043 1 view .LVU1228
 4409 0050 38BD     		pop	{r3, r4, r5, pc}
 4410              	.LVL313:
 4411              	.L352:
2997:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4412              		.loc 1 2997 2 is_stmt 1 view .LVU1229
 4413              	.LBB194:
 4414              	.LBI194:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4415              		.loc 2 191 30 view .LVU1230
 4416              	.LBB195:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4417              		.loc 2 193 1 view .LVU1231
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4418              		.loc 2 195 2 view .LVU1232
 4419              		.syntax unified
 4420              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4421 0052 4FF05003 			mov r3, #80												
 4422 0056 83F31188 		msr basepri, r3											
 4423 005a BFF36F8F 		isb														
 4424 005e BFF34F8F 		dsb														
 4425              	
 4426              	@ 0 "" 2
 4427              	.LVL314:
 4428              		.thumb
 4429              		.syntax unified
 4430              	.L345:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4431              		.loc 2 195 2 is_stmt 0 view .LVU1233
 4432              	.LBE195:
 4433              	.LBE194:
2997:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4434              		.loc 1 2997 2 is_stmt 1 discriminator 1 view .LVU1234
2997:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4435              		.loc 1 2997 2 discriminator 1 view .LVU1235
 4436 0062 FEE7     		b	.L345
 4437              	.LVL315:
 4438              	.L346:
3009:base/os/FreeRTOS/Source/tasks.c **** 	}
 4439              		.loc 1 3009 3 view .LVU1236
 4440 0064 2946     		mov	r1, r5
 4441 0066 0848     		ldr	r0, .L353+20
 4442 0068 FFF7FEFF 		bl	vListInsertEnd
 4443              	.LVL316:
 4444 006c E7E7     		b	.L348
 4445              	.L350:
3025:base/os/FreeRTOS/Source/tasks.c **** 	}
 4446              		.loc 1 3025 11 is_stmt 0 view .LVU1237
 4447 006e 0020     		movs	r0, #0
 4448              	.LVL317:
3042:base/os/FreeRTOS/Source/tasks.c **** }
 4449              		.loc 1 3042 2 is_stmt 1 view .LVU1238
ARM GAS  /tmp/cchwbchh.s 			page 190


3042:base/os/FreeRTOS/Source/tasks.c **** }
 4450              		.loc 1 3042 9 is_stmt 0 view .LVU1239
 4451 0070 EEE7     		b	.L343
 4452              	.L354:
 4453 0072 00BF     		.align	2
 4454              	.L353:
 4455 0074 00000000 		.word	.LANCHOR16
 4456 0078 00000000 		.word	.LANCHOR13
 4457 007c 00000000 		.word	.LANCHOR4
 4458 0080 00000000 		.word	.LANCHOR10
 4459 0084 00000000 		.word	.LANCHOR20
 4460 0088 00000000 		.word	.LANCHOR1
 4461              		.cfi_endproc
 4462              	.LFE33:
 4464              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4465              		.align	1
 4466              		.global	vTaskRemoveFromUnorderedEventList
 4467              		.syntax unified
 4468              		.thumb
 4469              		.thumb_func
 4470              		.fpu softvfp
 4472              	vTaskRemoveFromUnorderedEventList:
 4473              	.LVL318:
 4474              	.LFB34:
3047:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4475              		.loc 1 3047 1 is_stmt 1 view -0
 4476              		.cfi_startproc
 4477              		@ args = 0, pretend = 0, frame = 0
 4478              		@ frame_needed = 0, uses_anonymous_args = 0
3047:base/os/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4479              		.loc 1 3047 1 is_stmt 0 view .LVU1241
 4480 0000 38B5     		push	{r3, r4, r5, lr}
 4481              	.LCFI40:
 4482              		.cfi_def_cfa_offset 16
 4483              		.cfi_offset 3, -16
 4484              		.cfi_offset 4, -12
 4485              		.cfi_offset 5, -8
 4486              		.cfi_offset 14, -4
3048:base/os/FreeRTOS/Source/tasks.c **** 
 4487              		.loc 1 3048 1 is_stmt 1 view .LVU1242
3052:base/os/FreeRTOS/Source/tasks.c **** 
 4488              		.loc 1 3052 2 view .LVU1243
 4489 0002 1C4B     		ldr	r3, .L364
 4490 0004 1B68     		ldr	r3, [r3]
 4491 0006 43B9     		cbnz	r3, .L356
3052:base/os/FreeRTOS/Source/tasks.c **** 
 4492              		.loc 1 3052 2 view .LVU1244
 4493              	.LBB196:
 4494              	.LBI196:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4495              		.loc 2 191 30 view .LVU1245
 4496              	.LBB197:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4497              		.loc 2 193 1 view .LVU1246
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4498              		.loc 2 195 2 view .LVU1247
 4499              		.syntax unified
ARM GAS  /tmp/cchwbchh.s 			page 191


 4500              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4501 0008 4FF05003 			mov r3, #80												
 4502 000c 83F31188 		msr basepri, r3											
 4503 0010 BFF36F8F 		isb														
 4504 0014 BFF34F8F 		dsb														
 4505              	
 4506              	@ 0 "" 2
 4507              	.LVL319:
 4508              		.thumb
 4509              		.syntax unified
 4510              	.L357:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4511              		.loc 2 195 2 is_stmt 0 view .LVU1248
 4512              	.LBE197:
 4513              	.LBE196:
3052:base/os/FreeRTOS/Source/tasks.c **** 
 4514              		.loc 1 3052 2 is_stmt 1 discriminator 1 view .LVU1249
3052:base/os/FreeRTOS/Source/tasks.c **** 
 4515              		.loc 1 3052 2 discriminator 1 view .LVU1250
 4516 0018 FEE7     		b	.L357
 4517              	.L356:
3052:base/os/FreeRTOS/Source/tasks.c **** 
 4518              		.loc 1 3052 49 discriminator 2 view .LVU1251
3055:base/os/FreeRTOS/Source/tasks.c **** 
 4519              		.loc 1 3055 2 discriminator 2 view .LVU1252
 4520 001a 41F00041 		orr	r1, r1, #-2147483648
 4521              	.LVL320:
3055:base/os/FreeRTOS/Source/tasks.c **** 
 4522              		.loc 1 3055 2 is_stmt 0 discriminator 2 view .LVU1253
 4523 001e 0160     		str	r1, [r0]
3059:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4524              		.loc 1 3059 2 is_stmt 1 discriminator 2 view .LVU1254
3059:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4525              		.loc 1 3059 17 is_stmt 0 discriminator 2 view .LVU1255
 4526 0020 C468     		ldr	r4, [r0, #12]
 4527              	.LVL321:
3060:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4528              		.loc 1 3060 2 is_stmt 1 discriminator 2 view .LVU1256
 4529 0022 F4B1     		cbz	r4, .L363
3060:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4530              		.loc 1 3060 32 discriminator 2 view .LVU1257
3061:base/os/FreeRTOS/Source/tasks.c **** 
 4531              		.loc 1 3061 2 discriminator 2 view .LVU1258
3061:base/os/FreeRTOS/Source/tasks.c **** 
 4532              		.loc 1 3061 11 is_stmt 0 discriminator 2 view .LVU1259
 4533 0024 FFF7FEFF 		bl	uxListRemove
 4534              	.LVL322:
3066:base/os/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4535              		.loc 1 3066 2 is_stmt 1 discriminator 2 view .LVU1260
3066:base/os/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4536              		.loc 1 3066 11 is_stmt 0 discriminator 2 view .LVU1261
 4537 0028 251D     		adds	r5, r4, #4
 4538 002a 2846     		mov	r0, r5
 4539 002c FFF7FEFF 		bl	uxListRemove
 4540              	.LVL323:
3067:base/os/FreeRTOS/Source/tasks.c **** 
 4541              		.loc 1 3067 2 is_stmt 1 discriminator 2 view .LVU1262
ARM GAS  /tmp/cchwbchh.s 			page 192


3067:base/os/FreeRTOS/Source/tasks.c **** 
 4542              		.loc 1 3067 2 discriminator 2 view .LVU1263
 4543 0030 E06A     		ldr	r0, [r4, #44]
 4544 0032 114B     		ldr	r3, .L364+4
 4545 0034 1B68     		ldr	r3, [r3]
 4546 0036 9842     		cmp	r0, r3
 4547 0038 01D9     		bls	.L360
3067:base/os/FreeRTOS/Source/tasks.c **** 
 4548              		.loc 1 3067 2 discriminator 1 view .LVU1264
 4549 003a 0F4B     		ldr	r3, .L364+4
 4550 003c 1860     		str	r0, [r3]
 4551              	.L360:
3067:base/os/FreeRTOS/Source/tasks.c **** 
 4552              		.loc 1 3067 2 discriminator 3 view .LVU1265
3067:base/os/FreeRTOS/Source/tasks.c **** 
 4553              		.loc 1 3067 2 discriminator 3 view .LVU1266
 4554 003e 00EB8000 		add	r0, r0, r0, lsl #2
 4555 0042 2946     		mov	r1, r5
 4556 0044 0D4B     		ldr	r3, .L364+8
 4557 0046 03EB8000 		add	r0, r3, r0, lsl #2
 4558 004a FFF7FEFF 		bl	vListInsertEnd
 4559              	.LVL324:
3067:base/os/FreeRTOS/Source/tasks.c **** 
 4560              		.loc 1 3067 41 discriminator 3 view .LVU1267
3069:base/os/FreeRTOS/Source/tasks.c **** 	{
 4561              		.loc 1 3069 2 discriminator 3 view .LVU1268
3069:base/os/FreeRTOS/Source/tasks.c **** 	{
 4562              		.loc 1 3069 20 is_stmt 0 discriminator 3 view .LVU1269
 4563 004e E26A     		ldr	r2, [r4, #44]
3069:base/os/FreeRTOS/Source/tasks.c **** 	{
 4564              		.loc 1 3069 47 discriminator 3 view .LVU1270
 4565 0050 0B4B     		ldr	r3, .L364+12
 4566 0052 1B68     		ldr	r3, [r3]
 4567 0054 DB6A     		ldr	r3, [r3, #44]
3069:base/os/FreeRTOS/Source/tasks.c **** 	{
 4568              		.loc 1 3069 4 discriminator 3 view .LVU1271
 4569 0056 9A42     		cmp	r2, r3
 4570 0058 02D9     		bls	.L355
3075:base/os/FreeRTOS/Source/tasks.c **** 	}
 4571              		.loc 1 3075 3 is_stmt 1 view .LVU1272
3075:base/os/FreeRTOS/Source/tasks.c **** 	}
 4572              		.loc 1 3075 17 is_stmt 0 view .LVU1273
 4573 005a 0A4B     		ldr	r3, .L364+16
 4574 005c 0122     		movs	r2, #1
 4575 005e 1A60     		str	r2, [r3]
 4576              	.L355:
3077:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4577              		.loc 1 3077 1 view .LVU1274
 4578 0060 38BD     		pop	{r3, r4, r5, pc}
 4579              	.LVL325:
 4580              	.L363:
3060:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4581              		.loc 1 3060 2 is_stmt 1 view .LVU1275
 4582              	.LBB198:
 4583              	.LBI198:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4584              		.loc 2 191 30 view .LVU1276
ARM GAS  /tmp/cchwbchh.s 			page 193


 4585              	.LBB199:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4586              		.loc 2 193 1 view .LVU1277
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4587              		.loc 2 195 2 view .LVU1278
 4588              		.syntax unified
 4589              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4590 0062 4FF05003 			mov r3, #80												
 4591 0066 83F31188 		msr basepri, r3											
 4592 006a BFF36F8F 		isb														
 4593 006e BFF34F8F 		dsb														
 4594              	
 4595              	@ 0 "" 2
 4596              	.LVL326:
 4597              		.thumb
 4598              		.syntax unified
 4599              	.L359:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4600              		.loc 2 195 2 is_stmt 0 view .LVU1279
 4601              	.LBE199:
 4602              	.LBE198:
3060:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4603              		.loc 1 3060 2 is_stmt 1 discriminator 2 view .LVU1280
3060:base/os/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4604              		.loc 1 3060 2 discriminator 2 view .LVU1281
 4605 0072 FEE7     		b	.L359
 4606              	.L365:
 4607              		.align	2
 4608              	.L364:
 4609 0074 00000000 		.word	.LANCHOR16
 4610 0078 00000000 		.word	.LANCHOR13
 4611 007c 00000000 		.word	.LANCHOR4
 4612 0080 00000000 		.word	.LANCHOR10
 4613 0084 00000000 		.word	.LANCHOR20
 4614              		.cfi_endproc
 4615              	.LFE34:
 4617              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4618              		.align	1
 4619              		.global	vTaskSetTimeOutState
 4620              		.syntax unified
 4621              		.thumb
 4622              		.thumb_func
 4623              		.fpu softvfp
 4625              	vTaskSetTimeOutState:
 4626              	.LVL327:
 4627              	.LFB35:
3081:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4628              		.loc 1 3081 1 view -0
 4629              		.cfi_startproc
 4630              		@ args = 0, pretend = 0, frame = 0
 4631              		@ frame_needed = 0, uses_anonymous_args = 0
3082:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4632              		.loc 1 3082 2 view .LVU1283
 4633 0000 60B1     		cbz	r0, .L371
3081:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4634              		.loc 1 3081 1 is_stmt 0 discriminator 2 view .LVU1284
 4635 0002 10B5     		push	{r4, lr}
ARM GAS  /tmp/cchwbchh.s 			page 194


 4636              	.LCFI41:
 4637              		.cfi_def_cfa_offset 8
 4638              		.cfi_offset 4, -8
 4639              		.cfi_offset 14, -4
 4640 0004 0446     		mov	r4, r0
3082:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4641              		.loc 1 3082 27 is_stmt 1 discriminator 2 view .LVU1285
3083:base/os/FreeRTOS/Source/tasks.c **** 	{
 4642              		.loc 1 3083 2 discriminator 2 view .LVU1286
 4643 0006 FFF7FEFF 		bl	vPortEnterCritical
 4644              	.LVL328:
3085:base/os/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4645              		.loc 1 3085 3 discriminator 2 view .LVU1287
3085:base/os/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4646              		.loc 1 3085 29 is_stmt 0 discriminator 2 view .LVU1288
 4647 000a 094B     		ldr	r3, .L372
 4648 000c 1B68     		ldr	r3, [r3]
 4649 000e 2360     		str	r3, [r4]
3086:base/os/FreeRTOS/Source/tasks.c **** 	}
 4650              		.loc 1 3086 3 is_stmt 1 discriminator 2 view .LVU1289
3086:base/os/FreeRTOS/Source/tasks.c **** 	}
 4651              		.loc 1 3086 30 is_stmt 0 discriminator 2 view .LVU1290
 4652 0010 084B     		ldr	r3, .L372+4
 4653 0012 1B68     		ldr	r3, [r3]
 4654 0014 6360     		str	r3, [r4, #4]
3088:base/os/FreeRTOS/Source/tasks.c **** }
 4655              		.loc 1 3088 2 is_stmt 1 discriminator 2 view .LVU1291
 4656 0016 FFF7FEFF 		bl	vPortExitCritical
 4657              	.LVL329:
3089:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4658              		.loc 1 3089 1 is_stmt 0 discriminator 2 view .LVU1292
 4659 001a 10BD     		pop	{r4, pc}
 4660              	.LVL330:
 4661              	.L371:
 4662              	.LCFI42:
 4663              		.cfi_def_cfa_offset 0
 4664              		.cfi_restore 4
 4665              		.cfi_restore 14
3082:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4666              		.loc 1 3082 2 is_stmt 1 view .LVU1293
 4667              	.LBB200:
 4668              	.LBI200:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4669              		.loc 2 191 30 view .LVU1294
 4670              	.LBB201:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4671              		.loc 2 193 1 view .LVU1295
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4672              		.loc 2 195 2 view .LVU1296
 4673              		.syntax unified
 4674              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4675 001c 4FF05003 			mov r3, #80												
 4676 0020 83F31188 		msr basepri, r3											
 4677 0024 BFF36F8F 		isb														
 4678 0028 BFF34F8F 		dsb														
 4679              	
 4680              	@ 0 "" 2
ARM GAS  /tmp/cchwbchh.s 			page 195


 4681              	.LVL331:
 4682              		.thumb
 4683              		.syntax unified
 4684              	.L368:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4685              		.loc 2 195 2 is_stmt 0 view .LVU1297
 4686              	.LBE201:
 4687              	.LBE200:
3082:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4688              		.loc 1 3082 2 is_stmt 1 discriminator 1 view .LVU1298
3082:base/os/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4689              		.loc 1 3082 2 discriminator 1 view .LVU1299
 4690 002c FEE7     		b	.L368
 4691              	.L373:
 4692 002e 00BF     		.align	2
 4693              	.L372:
 4694 0030 00000000 		.word	.LANCHOR18
 4695 0034 00000000 		.word	.LANCHOR15
 4696              		.cfi_endproc
 4697              	.LFE35:
 4699              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4700              		.align	1
 4701              		.global	vTaskInternalSetTimeOutState
 4702              		.syntax unified
 4703              		.thumb
 4704              		.thumb_func
 4705              		.fpu softvfp
 4707              	vTaskInternalSetTimeOutState:
 4708              	.LVL332:
 4709              	.LFB36:
3093:base/os/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 4710              		.loc 1 3093 1 view -0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 0
 4713              		@ frame_needed = 0, uses_anonymous_args = 0
 4714              		@ link register save eliminated.
3095:base/os/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4715              		.loc 1 3095 2 view .LVU1301
3095:base/os/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4716              		.loc 1 3095 28 is_stmt 0 view .LVU1302
 4717 0000 034B     		ldr	r3, .L375
 4718 0002 1B68     		ldr	r3, [r3]
 4719 0004 0360     		str	r3, [r0]
3096:base/os/FreeRTOS/Source/tasks.c **** }
 4720              		.loc 1 3096 2 is_stmt 1 view .LVU1303
3096:base/os/FreeRTOS/Source/tasks.c **** }
 4721              		.loc 1 3096 29 is_stmt 0 view .LVU1304
 4722 0006 034B     		ldr	r3, .L375+4
 4723 0008 1B68     		ldr	r3, [r3]
 4724 000a 4360     		str	r3, [r0, #4]
3097:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4725              		.loc 1 3097 1 view .LVU1305
 4726 000c 7047     		bx	lr
 4727              	.L376:
 4728 000e 00BF     		.align	2
 4729              	.L375:
 4730 0010 00000000 		.word	.LANCHOR18
ARM GAS  /tmp/cchwbchh.s 			page 196


 4731 0014 00000000 		.word	.LANCHOR15
 4732              		.cfi_endproc
 4733              	.LFE36:
 4735              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4736              		.align	1
 4737              		.global	xTaskCheckForTimeOut
 4738              		.syntax unified
 4739              		.thumb
 4740              		.thumb_func
 4741              		.fpu softvfp
 4743              	xTaskCheckForTimeOut:
 4744              	.LVL333:
 4745              	.LFB37:
3101:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4746              		.loc 1 3101 1 is_stmt 1 view -0
 4747              		.cfi_startproc
 4748              		@ args = 0, pretend = 0, frame = 0
 4749              		@ frame_needed = 0, uses_anonymous_args = 0
3102:base/os/FreeRTOS/Source/tasks.c **** 
 4750              		.loc 1 3102 1 view .LVU1307
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4751              		.loc 1 3104 2 view .LVU1308
 4752 0000 D8B1     		cbz	r0, .L389
3101:base/os/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4753              		.loc 1 3101 1 is_stmt 0 discriminator 2 view .LVU1309
 4754 0002 70B5     		push	{r4, r5, r6, lr}
 4755              	.LCFI43:
 4756              		.cfi_def_cfa_offset 16
 4757              		.cfi_offset 4, -16
 4758              		.cfi_offset 5, -12
 4759              		.cfi_offset 6, -8
 4760              		.cfi_offset 14, -4
 4761 0004 0C46     		mov	r4, r1
 4762 0006 0546     		mov	r5, r0
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4763              		.loc 1 3104 27 is_stmt 1 discriminator 2 view .LVU1310
3105:base/os/FreeRTOS/Source/tasks.c **** 
 4764              		.loc 1 3105 2 discriminator 2 view .LVU1311
 4765 0008 01B3     		cbz	r1, .L390
3105:base/os/FreeRTOS/Source/tasks.c **** 
 4766              		.loc 1 3105 31 discriminator 2 view .LVU1312
3107:base/os/FreeRTOS/Source/tasks.c **** 	{
 4767              		.loc 1 3107 2 discriminator 2 view .LVU1313
 4768 000a FFF7FEFF 		bl	vPortEnterCritical
 4769              	.LVL334:
 4770              	.LBB202:
3110:base/os/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4771              		.loc 1 3110 3 discriminator 2 view .LVU1314
3110:base/os/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4772              		.loc 1 3110 20 is_stmt 0 discriminator 2 view .LVU1315
 4773 000e 1B4B     		ldr	r3, .L392
 4774 0010 1968     		ldr	r1, [r3]
 4775              	.LVL335:
3111:base/os/FreeRTOS/Source/tasks.c **** 
 4776              		.loc 1 3111 3 is_stmt 1 discriminator 2 view .LVU1316
3111:base/os/FreeRTOS/Source/tasks.c **** 
 4777              		.loc 1 3111 62 is_stmt 0 discriminator 2 view .LVU1317
ARM GAS  /tmp/cchwbchh.s 			page 197


 4778 0012 6B68     		ldr	r3, [r5, #4]
3111:base/os/FreeRTOS/Source/tasks.c **** 
 4779              		.loc 1 3111 20 discriminator 2 view .LVU1318
 4780 0014 C81A     		subs	r0, r1, r3
 4781              	.LVL336:
3125:base/os/FreeRTOS/Source/tasks.c **** 			{
 4782              		.loc 1 3125 4 is_stmt 1 discriminator 2 view .LVU1319
3125:base/os/FreeRTOS/Source/tasks.c **** 			{
 4783              		.loc 1 3125 8 is_stmt 0 discriminator 2 view .LVU1320
 4784 0016 2268     		ldr	r2, [r4]
3125:base/os/FreeRTOS/Source/tasks.c **** 			{
 4785              		.loc 1 3125 6 discriminator 2 view .LVU1321
 4786 0018 B2F1FF3F 		cmp	r2, #-1
 4787 001c 27D0     		beq	.L385
3135:base/os/FreeRTOS/Source/tasks.c **** 		{
 4788              		.loc 1 3135 3 is_stmt 1 view .LVU1322
3135:base/os/FreeRTOS/Source/tasks.c **** 		{
 4789              		.loc 1 3135 25 is_stmt 0 view .LVU1323
 4790 001e 184E     		ldr	r6, .L392+4
 4791 0020 3668     		ldr	r6, [r6]
3135:base/os/FreeRTOS/Source/tasks.c **** 		{
 4792              		.loc 1 3135 5 view .LVU1324
 4793 0022 D5F800C0 		ldr	ip, [r5]
 4794 0026 B445     		cmp	ip, r6
 4795 0028 01D0     		beq	.L383
3135:base/os/FreeRTOS/Source/tasks.c **** 		{
 4796              		.loc 1 3135 56 discriminator 1 view .LVU1325
 4797 002a 8B42     		cmp	r3, r1
 4798 002c 24D9     		bls	.L386
 4799              	.L383:
3144:base/os/FreeRTOS/Source/tasks.c **** 		{
 4800              		.loc 1 3144 8 is_stmt 1 view .LVU1326
3144:base/os/FreeRTOS/Source/tasks.c **** 		{
 4801              		.loc 1 3144 10 is_stmt 0 view .LVU1327
 4802 002e 8242     		cmp	r2, r0
 4803 0030 15D8     		bhi	.L391
3153:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4804              		.loc 1 3153 4 is_stmt 1 view .LVU1328
3153:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4805              		.loc 1 3153 19 is_stmt 0 view .LVU1329
 4806 0032 0023     		movs	r3, #0
 4807 0034 2360     		str	r3, [r4]
3154:base/os/FreeRTOS/Source/tasks.c **** 		}
 4808              		.loc 1 3154 4 is_stmt 1 view .LVU1330
 4809              	.LVL337:
3154:base/os/FreeRTOS/Source/tasks.c **** 		}
 4810              		.loc 1 3154 12 is_stmt 0 view .LVU1331
 4811 0036 0124     		movs	r4, #1
 4812              	.LVL338:
3154:base/os/FreeRTOS/Source/tasks.c **** 		}
 4813              		.loc 1 3154 12 view .LVU1332
 4814 0038 1AE0     		b	.L382
 4815              	.LVL339:
 4816              	.L389:
 4817              	.LCFI44:
 4818              		.cfi_def_cfa_offset 0
 4819              		.cfi_restore 4
ARM GAS  /tmp/cchwbchh.s 			page 198


 4820              		.cfi_restore 5
 4821              		.cfi_restore 6
 4822              		.cfi_restore 14
3154:base/os/FreeRTOS/Source/tasks.c **** 		}
 4823              		.loc 1 3154 12 view .LVU1333
 4824              	.LBE202:
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4825              		.loc 1 3104 2 is_stmt 1 view .LVU1334
 4826              	.LBB203:
 4827              	.LBI203:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4828              		.loc 2 191 30 view .LVU1335
 4829              	.LBB204:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4830              		.loc 2 193 1 view .LVU1336
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4831              		.loc 2 195 2 view .LVU1337
 4832              		.syntax unified
 4833              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4834 003a 4FF05003 			mov r3, #80												
 4835 003e 83F31188 		msr basepri, r3											
 4836 0042 BFF36F8F 		isb														
 4837 0046 BFF34F8F 		dsb														
 4838              	
 4839              	@ 0 "" 2
 4840              	.LVL340:
 4841              		.thumb
 4842              		.syntax unified
 4843              	.L379:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4844              		.loc 2 195 2 is_stmt 0 view .LVU1338
 4845              	.LBE204:
 4846              	.LBE203:
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4847              		.loc 1 3104 2 is_stmt 1 discriminator 1 view .LVU1339
3104:base/os/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4848              		.loc 1 3104 2 discriminator 1 view .LVU1340
 4849 004a FEE7     		b	.L379
 4850              	.L390:
 4851              	.LCFI45:
 4852              		.cfi_def_cfa_offset 16
 4853              		.cfi_offset 4, -16
 4854              		.cfi_offset 5, -12
 4855              		.cfi_offset 6, -8
 4856              		.cfi_offset 14, -4
3105:base/os/FreeRTOS/Source/tasks.c **** 
 4857              		.loc 1 3105 2 view .LVU1341
 4858              	.LBB205:
 4859              	.LBI205:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 4860              		.loc 2 191 30 view .LVU1342
 4861              	.LBB206:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4862              		.loc 2 193 1 view .LVU1343
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4863              		.loc 2 195 2 view .LVU1344
 4864              		.syntax unified
ARM GAS  /tmp/cchwbchh.s 			page 199


 4865              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4866 004c 4FF05003 			mov r3, #80												
 4867 0050 83F31188 		msr basepri, r3											
 4868 0054 BFF36F8F 		isb														
 4869 0058 BFF34F8F 		dsb														
 4870              	
 4871              	@ 0 "" 2
 4872              	.LVL341:
 4873              		.thumb
 4874              		.syntax unified
 4875              	.L381:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4876              		.loc 2 195 2 is_stmt 0 view .LVU1345
 4877              	.LBE206:
 4878              	.LBE205:
3105:base/os/FreeRTOS/Source/tasks.c **** 
 4879              		.loc 1 3105 2 is_stmt 1 discriminator 2 view .LVU1346
3105:base/os/FreeRTOS/Source/tasks.c **** 
 4880              		.loc 1 3105 2 discriminator 2 view .LVU1347
 4881 005c FEE7     		b	.L381
 4882              	.LVL342:
 4883              	.L391:
 4884              	.LBB207:
3147:base/os/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4885              		.loc 1 3147 4 view .LVU1348
3147:base/os/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4886              		.loc 1 3147 19 is_stmt 0 view .LVU1349
 4887 005e 5B1A     		subs	r3, r3, r1
 4888 0060 1344     		add	r3, r3, r2
 4889 0062 2360     		str	r3, [r4]
3148:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4890              		.loc 1 3148 4 is_stmt 1 view .LVU1350
 4891 0064 2846     		mov	r0, r5
 4892              	.LVL343:
3148:base/os/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4893              		.loc 1 3148 4 is_stmt 0 view .LVU1351
 4894 0066 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4895              	.LVL344:
3149:base/os/FreeRTOS/Source/tasks.c **** 		}
 4896              		.loc 1 3149 4 is_stmt 1 view .LVU1352
3149:base/os/FreeRTOS/Source/tasks.c **** 		}
 4897              		.loc 1 3149 12 is_stmt 0 view .LVU1353
 4898 006a 0024     		movs	r4, #0
 4899              	.LVL345:
3149:base/os/FreeRTOS/Source/tasks.c **** 		}
 4900              		.loc 1 3149 12 view .LVU1354
 4901 006c 00E0     		b	.L382
 4902              	.LVL346:
 4903              	.L385:
3130:base/os/FreeRTOS/Source/tasks.c **** 			}
 4904              		.loc 1 3130 13 view .LVU1355
 4905 006e 0024     		movs	r4, #0
 4906              	.LVL347:
 4907              	.L382:
3130:base/os/FreeRTOS/Source/tasks.c **** 			}
 4908              		.loc 1 3130 13 view .LVU1356
 4909              	.LBE207:
ARM GAS  /tmp/cchwbchh.s 			page 200


3157:base/os/FreeRTOS/Source/tasks.c **** 
 4910              		.loc 1 3157 2 is_stmt 1 view .LVU1357
 4911 0070 FFF7FEFF 		bl	vPortExitCritical
 4912              	.LVL348:
3159:base/os/FreeRTOS/Source/tasks.c **** }
 4913              		.loc 1 3159 2 view .LVU1358
3160:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4914              		.loc 1 3160 1 is_stmt 0 view .LVU1359
 4915 0074 2046     		mov	r0, r4
 4916 0076 70BD     		pop	{r4, r5, r6, pc}
 4917              	.LVL349:
 4918              	.L386:
 4919              	.LBB208:
3142:base/os/FreeRTOS/Source/tasks.c **** 		}
 4920              		.loc 1 3142 12 view .LVU1360
 4921 0078 0124     		movs	r4, #1
 4922              	.LVL350:
3142:base/os/FreeRTOS/Source/tasks.c **** 		}
 4923              		.loc 1 3142 12 view .LVU1361
 4924 007a F9E7     		b	.L382
 4925              	.L393:
 4926              		.align	2
 4927              	.L392:
 4928 007c 00000000 		.word	.LANCHOR15
 4929 0080 00000000 		.word	.LANCHOR18
 4930              	.LBE208:
 4931              		.cfi_endproc
 4932              	.LFE37:
 4934              		.section	.text.vTaskMissedYield,"ax",%progbits
 4935              		.align	1
 4936              		.global	vTaskMissedYield
 4937              		.syntax unified
 4938              		.thumb
 4939              		.thumb_func
 4940              		.fpu softvfp
 4942              	vTaskMissedYield:
 4943              	.LFB38:
3164:base/os/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4944              		.loc 1 3164 1 is_stmt 1 view -0
 4945              		.cfi_startproc
 4946              		@ args = 0, pretend = 0, frame = 0
 4947              		@ frame_needed = 0, uses_anonymous_args = 0
 4948              		@ link register save eliminated.
3165:base/os/FreeRTOS/Source/tasks.c **** }
 4949              		.loc 1 3165 2 view .LVU1363
3165:base/os/FreeRTOS/Source/tasks.c **** }
 4950              		.loc 1 3165 16 is_stmt 0 view .LVU1364
 4951 0000 014B     		ldr	r3, .L395
 4952 0002 0122     		movs	r2, #1
 4953 0004 1A60     		str	r2, [r3]
3166:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4954              		.loc 1 3166 1 view .LVU1365
 4955 0006 7047     		bx	lr
 4956              	.L396:
 4957              		.align	2
 4958              	.L395:
 4959 0008 00000000 		.word	.LANCHOR20
ARM GAS  /tmp/cchwbchh.s 			page 201


 4960              		.cfi_endproc
 4961              	.LFE38:
 4963              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4964              		.align	1
 4965              		.global	uxTaskGetTaskNumber
 4966              		.syntax unified
 4967              		.thumb
 4968              		.thumb_func
 4969              		.fpu softvfp
 4971              	uxTaskGetTaskNumber:
 4972              	.LVL351:
 4973              	.LFB39:
3172:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4974              		.loc 1 3172 2 is_stmt 1 view -0
 4975              		.cfi_startproc
 4976              		@ args = 0, pretend = 0, frame = 0
 4977              		@ frame_needed = 0, uses_anonymous_args = 0
 4978              		@ link register save eliminated.
3173:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4979              		.loc 1 3173 2 view .LVU1367
3174:base/os/FreeRTOS/Source/tasks.c **** 
 4980              		.loc 1 3174 2 view .LVU1368
3176:base/os/FreeRTOS/Source/tasks.c **** 		{
 4981              		.loc 1 3176 3 view .LVU1369
3176:base/os/FreeRTOS/Source/tasks.c **** 		{
 4982              		.loc 1 3176 5 is_stmt 0 view .LVU1370
 4983 0000 08B1     		cbz	r0, .L399
3178:base/os/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4984              		.loc 1 3178 4 is_stmt 1 view .LVU1371
 4985              	.LVL352:
3179:base/os/FreeRTOS/Source/tasks.c **** 		}
 4986              		.loc 1 3179 4 view .LVU1372
3179:base/os/FreeRTOS/Source/tasks.c **** 		}
 4987              		.loc 1 3179 13 is_stmt 0 view .LVU1373
 4988 0002 806C     		ldr	r0, [r0, #72]
 4989              	.LVL353:
3179:base/os/FreeRTOS/Source/tasks.c **** 		}
 4990              		.loc 1 3179 13 view .LVU1374
 4991 0004 7047     		bx	lr
 4992              	.LVL354:
 4993              	.L399:
3183:base/os/FreeRTOS/Source/tasks.c **** 		}
 4994              		.loc 1 3183 13 view .LVU1375
 4995 0006 0020     		movs	r0, #0
 4996              	.LVL355:
3186:base/os/FreeRTOS/Source/tasks.c **** 	}
 4997              		.loc 1 3186 3 is_stmt 1 view .LVU1376
3187:base/os/FreeRTOS/Source/tasks.c **** 
 4998              		.loc 1 3187 2 is_stmt 0 view .LVU1377
 4999 0008 7047     		bx	lr
 5000              		.cfi_endproc
 5001              	.LFE39:
 5003              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5004              		.align	1
 5005              		.global	vTaskSetTaskNumber
 5006              		.syntax unified
 5007              		.thumb
ARM GAS  /tmp/cchwbchh.s 			page 202


 5008              		.thumb_func
 5009              		.fpu softvfp
 5011              	vTaskSetTaskNumber:
 5012              	.LVL356:
 5013              	.LFB40:
3195:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5014              		.loc 1 3195 2 is_stmt 1 view -0
 5015              		.cfi_startproc
 5016              		@ args = 0, pretend = 0, frame = 0
 5017              		@ frame_needed = 0, uses_anonymous_args = 0
 5018              		@ link register save eliminated.
3196:base/os/FreeRTOS/Source/tasks.c **** 
 5019              		.loc 1 3196 2 view .LVU1379
3198:base/os/FreeRTOS/Source/tasks.c **** 		{
 5020              		.loc 1 3198 3 view .LVU1380
3198:base/os/FreeRTOS/Source/tasks.c **** 		{
 5021              		.loc 1 3198 5 is_stmt 0 view .LVU1381
 5022 0000 00B1     		cbz	r0, .L400
3200:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5023              		.loc 1 3200 4 is_stmt 1 view .LVU1382
 5024              	.LVL357:
3201:base/os/FreeRTOS/Source/tasks.c **** 		}
 5025              		.loc 1 3201 4 view .LVU1383
3201:base/os/FreeRTOS/Source/tasks.c **** 		}
 5026              		.loc 1 3201 24 is_stmt 0 view .LVU1384
 5027 0002 8164     		str	r1, [r0, #72]
 5028              	.LVL358:
 5029              	.L400:
3203:base/os/FreeRTOS/Source/tasks.c **** 
 5030              		.loc 1 3203 2 view .LVU1385
 5031 0004 7047     		bx	lr
 5032              		.cfi_endproc
 5033              	.LFE40:
 5035              		.section	.text.vTaskGetInfo,"ax",%progbits
 5036              		.align	1
 5037              		.global	vTaskGetInfo
 5038              		.syntax unified
 5039              		.thumb
 5040              		.thumb_func
 5041              		.fpu softvfp
 5043              	vTaskGetInfo:
 5044              	.LVL359:
 5045              	.LFB44:
3494:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5046              		.loc 1 3494 2 is_stmt 1 view -0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 0
 5049              		@ frame_needed = 0, uses_anonymous_args = 0
3494:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5050              		.loc 1 3494 2 is_stmt 0 view .LVU1387
 5051 0000 70B5     		push	{r4, r5, r6, lr}
 5052              	.LCFI46:
 5053              		.cfi_def_cfa_offset 16
 5054              		.cfi_offset 4, -16
 5055              		.cfi_offset 5, -12
 5056              		.cfi_offset 6, -8
 5057              		.cfi_offset 14, -4
ARM GAS  /tmp/cchwbchh.s 			page 203


 5058 0002 0C46     		mov	r4, r1
 5059 0004 1646     		mov	r6, r2
3495:base/os/FreeRTOS/Source/tasks.c **** 
 5060              		.loc 1 3495 2 is_stmt 1 view .LVU1388
3498:base/os/FreeRTOS/Source/tasks.c **** 
 5061              		.loc 1 3498 3 view .LVU1389
3498:base/os/FreeRTOS/Source/tasks.c **** 
 5062              		.loc 1 3498 11 is_stmt 0 view .LVU1390
 5063 0006 0546     		mov	r5, r0
 5064 0008 D0B1     		cbz	r0, .L411
 5065              	.LVL360:
 5066              	.L403:
3500:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5067              		.loc 1 3500 3 is_stmt 1 discriminator 4 view .LVU1391
3500:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5068              		.loc 1 3500 25 is_stmt 0 discriminator 4 view .LVU1392
 5069 000a 2560     		str	r5, [r4]
3501:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5070              		.loc 1 3501 3 is_stmt 1 discriminator 4 view .LVU1393
3501:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5071              		.loc 1 3501 47 is_stmt 0 discriminator 4 view .LVU1394
 5072 000c 05F13402 		add	r2, r5, #52
3501:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5073              		.loc 1 3501 28 discriminator 4 view .LVU1395
 5074 0010 6260     		str	r2, [r4, #4]
3502:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5075              		.loc 1 3502 3 is_stmt 1 discriminator 4 view .LVU1396
3502:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5076              		.loc 1 3502 42 is_stmt 0 discriminator 4 view .LVU1397
 5077 0012 EA6A     		ldr	r2, [r5, #44]
3502:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5078              		.loc 1 3502 35 discriminator 4 view .LVU1398
 5079 0014 2261     		str	r2, [r4, #16]
3503:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5080              		.loc 1 3503 3 is_stmt 1 discriminator 4 view .LVU1399
3503:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5081              		.loc 1 3503 36 is_stmt 0 discriminator 4 view .LVU1400
 5082 0016 2A6B     		ldr	r2, [r5, #48]
3503:base/os/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5083              		.loc 1 3503 29 discriminator 4 view .LVU1401
 5084 0018 E261     		str	r2, [r4, #28]
3504:base/os/FreeRTOS/Source/tasks.c **** 
 5085              		.loc 1 3504 3 is_stmt 1 discriminator 4 view .LVU1402
3504:base/os/FreeRTOS/Source/tasks.c **** 
 5086              		.loc 1 3504 36 is_stmt 0 discriminator 4 view .LVU1403
 5087 001a 6A6C     		ldr	r2, [r5, #68]
3504:base/os/FreeRTOS/Source/tasks.c **** 
 5088              		.loc 1 3504 29 discriminator 4 view .LVU1404
 5089 001c A260     		str	r2, [r4, #8]
3508:base/os/FreeRTOS/Source/tasks.c **** 		}
 5090              		.loc 1 3508 4 is_stmt 1 discriminator 4 view .LVU1405
3508:base/os/FreeRTOS/Source/tasks.c **** 		}
 5091              		.loc 1 3508 40 is_stmt 0 discriminator 4 view .LVU1406
 5092 001e EA6C     		ldr	r2, [r5, #76]
3508:base/os/FreeRTOS/Source/tasks.c **** 		}
 5093              		.loc 1 3508 33 discriminator 4 view .LVU1407
 5094 0020 6261     		str	r2, [r4, #20]
ARM GAS  /tmp/cchwbchh.s 			page 204


3522:base/os/FreeRTOS/Source/tasks.c **** 		}
 5095              		.loc 1 3522 4 is_stmt 1 discriminator 4 view .LVU1408
3522:base/os/FreeRTOS/Source/tasks.c **** 		}
 5096              		.loc 1 3522 35 is_stmt 0 discriminator 4 view .LVU1409
 5097 0022 0022     		movs	r2, #0
 5098 0024 A261     		str	r2, [r4, #24]
3529:base/os/FreeRTOS/Source/tasks.c **** 		{
 5099              		.loc 1 3529 3 is_stmt 1 discriminator 4 view .LVU1410
3529:base/os/FreeRTOS/Source/tasks.c **** 		{
 5100              		.loc 1 3529 5 is_stmt 0 discriminator 4 view .LVU1411
 5101 0026 052B     		cmp	r3, #5
 5102 0028 19D0     		beq	.L404
3531:base/os/FreeRTOS/Source/tasks.c **** 			{
 5103              		.loc 1 3531 4 is_stmt 1 view .LVU1412
3531:base/os/FreeRTOS/Source/tasks.c **** 			{
 5104              		.loc 1 3531 14 is_stmt 0 view .LVU1413
 5105 002a 124A     		ldr	r2, .L415
 5106 002c 1268     		ldr	r2, [r2]
3531:base/os/FreeRTOS/Source/tasks.c **** 			{
 5107              		.loc 1 3531 6 view .LVU1414
 5108 002e AA42     		cmp	r2, r5
 5109 0030 09D0     		beq	.L412
3537:base/os/FreeRTOS/Source/tasks.c **** 
 5110              		.loc 1 3537 5 is_stmt 1 view .LVU1415
3537:base/os/FreeRTOS/Source/tasks.c **** 
 5111              		.loc 1 3537 33 is_stmt 0 view .LVU1416
 5112 0032 2373     		strb	r3, [r4, #12]
3544:base/os/FreeRTOS/Source/tasks.c **** 					{
 5113              		.loc 1 3544 6 is_stmt 1 view .LVU1417
3544:base/os/FreeRTOS/Source/tasks.c **** 					{
 5114              		.loc 1 3544 8 is_stmt 0 view .LVU1418
 5115 0034 032B     		cmp	r3, #3
 5116 0036 09D0     		beq	.L413
 5117              	.LVL361:
 5118              	.L406:
3566:base/os/FreeRTOS/Source/tasks.c **** 		{
 5119              		.loc 1 3566 3 is_stmt 1 view .LVU1419
3566:base/os/FreeRTOS/Source/tasks.c **** 		{
 5120              		.loc 1 3566 5 is_stmt 0 view .LVU1420
 5121 0038 B6B9     		cbnz	r6, .L414
3580:base/os/FreeRTOS/Source/tasks.c **** 		}
 5122              		.loc 1 3580 4 is_stmt 1 view .LVU1421
3580:base/os/FreeRTOS/Source/tasks.c **** 		}
 5123              		.loc 1 3580 39 is_stmt 0 view .LVU1422
 5124 003a 0023     		movs	r3, #0
 5125 003c 2384     		strh	r3, [r4, #32]	@ movhi
 5126              	.L402:
3582:base/os/FreeRTOS/Source/tasks.c **** 
 5127              		.loc 1 3582 2 view .LVU1423
 5128 003e 70BD     		pop	{r4, r5, r6, pc}
 5129              	.LVL362:
 5130              	.L411:
3498:base/os/FreeRTOS/Source/tasks.c **** 
 5131              		.loc 1 3498 11 discriminator 1 view .LVU1424
 5132 0040 0C4A     		ldr	r2, .L415
 5133              	.LVL363:
3498:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 205


 5134              		.loc 1 3498 11 discriminator 1 view .LVU1425
 5135 0042 1568     		ldr	r5, [r2]
 5136              	.LVL364:
3498:base/os/FreeRTOS/Source/tasks.c **** 
 5137              		.loc 1 3498 11 discriminator 1 view .LVU1426
 5138 0044 E1E7     		b	.L403
 5139              	.LVL365:
 5140              	.L412:
3533:base/os/FreeRTOS/Source/tasks.c **** 			}
 5141              		.loc 1 3533 5 is_stmt 1 view .LVU1427
3533:base/os/FreeRTOS/Source/tasks.c **** 			}
 5142              		.loc 1 3533 33 is_stmt 0 view .LVU1428
 5143 0046 0023     		movs	r3, #0
 5144              	.LVL366:
3533:base/os/FreeRTOS/Source/tasks.c **** 			}
 5145              		.loc 1 3533 33 view .LVU1429
 5146 0048 2373     		strb	r3, [r4, #12]
 5147 004a F5E7     		b	.L406
 5148              	.LVL367:
 5149              	.L413:
3546:base/os/FreeRTOS/Source/tasks.c **** 						{
 5150              		.loc 1 3546 7 is_stmt 1 view .LVU1430
 5151 004c FFF7FEFF 		bl	vTaskSuspendAll
 5152              	.LVL368:
3548:base/os/FreeRTOS/Source/tasks.c **** 							{
 5153              		.loc 1 3548 8 view .LVU1431
3548:base/os/FreeRTOS/Source/tasks.c **** 							{
 5154              		.loc 1 3548 12 is_stmt 0 view .LVU1432
 5155 0050 AB6A     		ldr	r3, [r5, #40]
3548:base/os/FreeRTOS/Source/tasks.c **** 							{
 5156              		.loc 1 3548 10 view .LVU1433
 5157 0052 0BB1     		cbz	r3, .L407
3550:base/os/FreeRTOS/Source/tasks.c **** 							}
 5158              		.loc 1 3550 9 is_stmt 1 view .LVU1434
3550:base/os/FreeRTOS/Source/tasks.c **** 							}
 5159              		.loc 1 3550 37 is_stmt 0 view .LVU1435
 5160 0054 0223     		movs	r3, #2
 5161 0056 2373     		strb	r3, [r4, #12]
 5162              	.L407:
3553:base/os/FreeRTOS/Source/tasks.c **** 					}
 5163              		.loc 1 3553 7 is_stmt 1 view .LVU1436
3553:base/os/FreeRTOS/Source/tasks.c **** 					}
 5164              		.loc 1 3553 16 is_stmt 0 view .LVU1437
 5165 0058 FFF7FEFF 		bl	xTaskResumeAll
 5166              	.LVL369:
 5167 005c ECE7     		b	.L406
 5168              	.LVL370:
 5169              	.L404:
3561:base/os/FreeRTOS/Source/tasks.c **** 		}
 5170              		.loc 1 3561 4 is_stmt 1 view .LVU1438
3561:base/os/FreeRTOS/Source/tasks.c **** 		}
 5171              		.loc 1 3561 34 is_stmt 0 view .LVU1439
 5172 005e 2846     		mov	r0, r5
 5173 0060 FFF7FEFF 		bl	eTaskGetState
 5174              	.LVL371:
3561:base/os/FreeRTOS/Source/tasks.c **** 		}
 5175              		.loc 1 3561 32 view .LVU1440
ARM GAS  /tmp/cchwbchh.s 			page 206


 5176 0064 2073     		strb	r0, [r4, #12]
 5177 0066 E7E7     		b	.L406
 5178              	.L414:
3574:base/os/FreeRTOS/Source/tasks.c **** 			}
 5179              		.loc 1 3574 5 is_stmt 1 view .LVU1441
3574:base/os/FreeRTOS/Source/tasks.c **** 			}
 5180              		.loc 1 3574 42 is_stmt 0 view .LVU1442
 5181 0068 286B     		ldr	r0, [r5, #48]
 5182 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5183              	.LVL372:
3574:base/os/FreeRTOS/Source/tasks.c **** 			}
 5184              		.loc 1 3574 40 view .LVU1443
 5185 006e 2084     		strh	r0, [r4, #32]	@ movhi
 5186 0070 E5E7     		b	.L402
 5187              	.L416:
 5188 0072 00BF     		.align	2
 5189              	.L415:
 5190 0074 00000000 		.word	.LANCHOR10
 5191              		.cfi_endproc
 5192              	.LFE44:
 5194              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5195              		.align	1
 5196              		.syntax unified
 5197              		.thumb
 5198              		.thumb_func
 5199              		.fpu softvfp
 5201              	prvListTasksWithinSingleList:
 5202              	.LVL373:
 5203              	.LFB45:
3590:base/os/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 5204              		.loc 1 3590 2 is_stmt 1 view -0
 5205              		.cfi_startproc
 5206              		@ args = 0, pretend = 0, frame = 0
 5207              		@ frame_needed = 0, uses_anonymous_args = 0
3590:base/os/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 5208              		.loc 1 3590 2 is_stmt 0 view .LVU1445
 5209 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5210              	.LCFI47:
 5211              		.cfi_def_cfa_offset 32
 5212              		.cfi_offset 4, -32
 5213              		.cfi_offset 5, -28
 5214              		.cfi_offset 6, -24
 5215              		.cfi_offset 7, -20
 5216              		.cfi_offset 8, -16
 5217              		.cfi_offset 9, -12
 5218              		.cfi_offset 10, -8
 5219              		.cfi_offset 14, -4
3591:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5220              		.loc 1 3591 22 is_stmt 1 view .LVU1446
3592:base/os/FreeRTOS/Source/tasks.c **** 
 5221              		.loc 1 3592 2 view .LVU1447
 5222              	.LVL374:
3594:base/os/FreeRTOS/Source/tasks.c **** 		{
 5223              		.loc 1 3594 3 view .LVU1448
3594:base/os/FreeRTOS/Source/tasks.c **** 		{
 5224              		.loc 1 3594 7 is_stmt 0 view .LVU1449
 5225 0004 0C68     		ldr	r4, [r1]
ARM GAS  /tmp/cchwbchh.s 			page 207


3594:base/os/FreeRTOS/Source/tasks.c **** 		{
 5226              		.loc 1 3594 5 view .LVU1450
 5227 0006 3CB3     		cbz	r4, .L417
 5228 0008 0746     		mov	r7, r0
 5229 000a 0D46     		mov	r5, r1
 5230 000c 9046     		mov	r8, r2
 5231              	.LBB209:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5232              		.loc 1 3596 4 is_stmt 1 view .LVU1451
 5233              	.LVL375:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5234              		.loc 1 3596 4 view .LVU1452
 5235 000e 4B68     		ldr	r3, [r1, #4]
 5236 0010 5B68     		ldr	r3, [r3, #4]
 5237 0012 4B60     		str	r3, [r1, #4]
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5238              		.loc 1 3596 4 view .LVU1453
 5239 0014 01F10809 		add	r9, r1, #8
 5240 0018 4B45     		cmp	r3, r9
 5241 001a 04D0     		beq	.L423
 5242              	.L419:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5243              		.loc 1 3596 4 discriminator 3 view .LVU1454
 5244 001c 6B68     		ldr	r3, [r5, #4]
 5245 001e D3F80CA0 		ldr	r10, [r3, #12]
 5246              	.LVL376:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5247              		.loc 1 3596 4 is_stmt 0 discriminator 3 view .LVU1455
 5248              	.LBE209:
3592:base/os/FreeRTOS/Source/tasks.c **** 
 5249              		.loc 1 3592 14 discriminator 3 view .LVU1456
 5250 0022 0024     		movs	r4, #0
 5251 0024 10E0     		b	.L421
 5252              	.LVL377:
 5253              	.L423:
 5254              	.LBB210:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5255              		.loc 1 3596 4 is_stmt 1 discriminator 1 view .LVU1457
 5256 0026 5B68     		ldr	r3, [r3, #4]
 5257 0028 4B60     		str	r3, [r1, #4]
 5258 002a F7E7     		b	.L419
 5259              	.LVL378:
 5260              	.L420:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5261              		.loc 1 3596 4 is_stmt 0 discriminator 1 view .LVU1458
 5262              	.LBE210:
 5263              	.LBB211:
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5264              		.loc 1 3604 5 is_stmt 1 discriminator 3 view .LVU1459
 5265 002c 6B68     		ldr	r3, [r5, #4]
 5266 002e DE68     		ldr	r6, [r3, #12]
 5267              	.LVL379:
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5268              		.loc 1 3604 5 is_stmt 0 discriminator 3 view .LVU1460
 5269              	.LBE211:
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5270              		.loc 1 3604 53 is_stmt 1 discriminator 3 view .LVU1461
ARM GAS  /tmp/cchwbchh.s 			page 208


3605:base/os/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5271              		.loc 1 3605 5 discriminator 3 view .LVU1462
3605:base/os/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5272              		.loc 1 3605 67 is_stmt 0 discriminator 3 view .LVU1463
 5273 0030 04EBC401 		add	r1, r4, r4, lsl #3
3605:base/os/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5274              		.loc 1 3605 5 discriminator 3 view .LVU1464
 5275 0034 4346     		mov	r3, r8
 5276 0036 0122     		movs	r2, #1
 5277 0038 07EB8101 		add	r1, r7, r1, lsl #2
 5278 003c 3046     		mov	r0, r6
 5279 003e FFF7FEFF 		bl	vTaskGetInfo
 5280              	.LVL380:
3606:base/os/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5281              		.loc 1 3606 5 is_stmt 1 discriminator 3 view .LVU1465
3606:base/os/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5282              		.loc 1 3606 11 is_stmt 0 discriminator 3 view .LVU1466
 5283 0042 0134     		adds	r4, r4, #1
 5284              	.LVL381:
3607:base/os/FreeRTOS/Source/tasks.c **** 		}
 5285              		.loc 1 3607 23 is_stmt 1 discriminator 3 view .LVU1467
 5286 0044 B245     		cmp	r10, r6
 5287 0046 07D0     		beq	.L417
 5288              	.LVL382:
 5289              	.L421:
3596:base/os/FreeRTOS/Source/tasks.c **** 
 5290              		.loc 1 3596 53 discriminator 4 view .LVU1468
3602:base/os/FreeRTOS/Source/tasks.c **** 			{
 5291              		.loc 1 3602 4 discriminator 4 view .LVU1469
 5292              	.LBB212:
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5293              		.loc 1 3604 5 discriminator 4 view .LVU1470
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5294              		.loc 1 3604 5 discriminator 4 view .LVU1471
 5295 0048 6B68     		ldr	r3, [r5, #4]
 5296 004a 5968     		ldr	r1, [r3, #4]
 5297 004c 6960     		str	r1, [r5, #4]
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5298              		.loc 1 3604 5 discriminator 4 view .LVU1472
 5299 004e 8945     		cmp	r9, r1
 5300 0050 ECD1     		bne	.L420
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5301              		.loc 1 3604 5 discriminator 1 view .LVU1473
 5302 0052 4B68     		ldr	r3, [r1, #4]
 5303 0054 6B60     		str	r3, [r5, #4]
 5304 0056 E9E7     		b	.L420
 5305              	.LVL383:
 5306              	.L417:
3604:base/os/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5307              		.loc 1 3604 5 is_stmt 0 discriminator 1 view .LVU1474
 5308              	.LBE212:
3615:base/os/FreeRTOS/Source/tasks.c **** 
 5309              		.loc 1 3615 2 view .LVU1475
 5310 0058 2046     		mov	r0, r4
 5311 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5312              		.cfi_endproc
 5313              	.LFE45:
ARM GAS  /tmp/cchwbchh.s 			page 209


 5315              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5316              		.align	1
 5317              		.global	uxTaskGetSystemState
 5318              		.syntax unified
 5319              		.thumb
 5320              		.thumb_func
 5321              		.fpu softvfp
 5323              	uxTaskGetSystemState:
 5324              	.LVL384:
 5325              	.LFB27:
2404:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5326              		.loc 1 2404 2 is_stmt 1 view -0
 5327              		.cfi_startproc
 5328              		@ args = 0, pretend = 0, frame = 0
 5329              		@ frame_needed = 0, uses_anonymous_args = 0
2404:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5330              		.loc 1 2404 2 is_stmt 0 view .LVU1477
 5331 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5332              	.LCFI48:
 5333              		.cfi_def_cfa_offset 24
 5334              		.cfi_offset 3, -24
 5335              		.cfi_offset 4, -20
 5336              		.cfi_offset 5, -16
 5337              		.cfi_offset 6, -12
 5338              		.cfi_offset 7, -8
 5339              		.cfi_offset 14, -4
 5340 0002 0746     		mov	r7, r0
 5341 0004 0C46     		mov	r4, r1
 5342 0006 1646     		mov	r6, r2
2405:base/os/FreeRTOS/Source/tasks.c **** 
 5343              		.loc 1 2405 2 is_stmt 1 view .LVU1478
 5344              	.LVL385:
2407:base/os/FreeRTOS/Source/tasks.c **** 		{
 5345              		.loc 1 2407 3 view .LVU1479
 5346 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5347              	.LVL386:
2410:base/os/FreeRTOS/Source/tasks.c **** 			{
 5348              		.loc 1 2410 4 view .LVU1480
2410:base/os/FreeRTOS/Source/tasks.c **** 			{
 5349              		.loc 1 2410 20 is_stmt 0 view .LVU1481
 5350 000c 224B     		ldr	r3, .L429
 5351 000e 1B68     		ldr	r3, [r3]
2410:base/os/FreeRTOS/Source/tasks.c **** 			{
 5352              		.loc 1 2410 6 view .LVU1482
 5353 0010 A342     		cmp	r3, r4
 5354 0012 3BD8     		bhi	.L427
2405:base/os/FreeRTOS/Source/tasks.c **** 
 5355              		.loc 1 2405 26 view .LVU1483
 5356 0014 3824     		movs	r4, #56
 5357              	.LVL387:
2405:base/os/FreeRTOS/Source/tasks.c **** 
 5358              		.loc 1 2405 14 view .LVU1484
 5359 0016 0025     		movs	r5, #0
 5360              	.LVL388:
 5361              	.L426:
2414:base/os/FreeRTOS/Source/tasks.c **** 				{
 5362              		.loc 1 2414 5 is_stmt 1 discriminator 1 view .LVU1485
ARM GAS  /tmp/cchwbchh.s 			page 210


2416:base/os/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 5363              		.loc 1 2416 6 discriminator 1 view .LVU1486
2416:base/os/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 5364              		.loc 1 2416 13 is_stmt 0 discriminator 1 view .LVU1487
 5365 0018 013C     		subs	r4, r4, #1
 5366              	.LVL389:
2417:base/os/FreeRTOS/Source/tasks.c **** 
 5367              		.loc 1 2417 6 is_stmt 1 discriminator 1 view .LVU1488
2417:base/os/FreeRTOS/Source/tasks.c **** 
 5368              		.loc 1 2417 66 is_stmt 0 discriminator 1 view .LVU1489
 5369 001a 05EBC500 		add	r0, r5, r5, lsl #3
2417:base/os/FreeRTOS/Source/tasks.c **** 
 5370              		.loc 1 2417 16 discriminator 1 view .LVU1490
 5371 001e 04EB8401 		add	r1, r4, r4, lsl #2
 5372 0022 0122     		movs	r2, #1
 5373 0024 1D4B     		ldr	r3, .L429+4
 5374 0026 03EB8101 		add	r1, r3, r1, lsl #2
 5375 002a 07EB8000 		add	r0, r7, r0, lsl #2
 5376 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5377              	.LVL390:
2417:base/os/FreeRTOS/Source/tasks.c **** 
 5378              		.loc 1 2417 13 discriminator 1 view .LVU1491
 5379 0032 0544     		add	r5, r5, r0
 5380              	.LVL391:
2419:base/os/FreeRTOS/Source/tasks.c **** 
 5381              		.loc 1 2419 22 is_stmt 1 discriminator 1 view .LVU1492
 5382 0034 002C     		cmp	r4, #0
 5383 0036 EFD1     		bne	.L426
2423:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5384              		.loc 1 2423 5 view .LVU1493
2423:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5385              		.loc 1 2423 65 is_stmt 0 view .LVU1494
 5386 0038 05EBC500 		add	r0, r5, r5, lsl #3
2423:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5387              		.loc 1 2423 15 view .LVU1495
 5388 003c 184B     		ldr	r3, .L429+8
 5389 003e 1968     		ldr	r1, [r3]
 5390 0040 0222     		movs	r2, #2
 5391 0042 07EB8000 		add	r0, r7, r0, lsl #2
 5392 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5393              	.LVL392:
2423:base/os/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5394              		.loc 1 2423 12 view .LVU1496
 5395 004a 0544     		add	r5, r5, r0
 5396              	.LVL393:
2424:base/os/FreeRTOS/Source/tasks.c **** 
 5397              		.loc 1 2424 5 is_stmt 1 view .LVU1497
2424:base/os/FreeRTOS/Source/tasks.c **** 
 5398              		.loc 1 2424 65 is_stmt 0 view .LVU1498
 5399 004c 05EBC500 		add	r0, r5, r5, lsl #3
2424:base/os/FreeRTOS/Source/tasks.c **** 
 5400              		.loc 1 2424 15 view .LVU1499
 5401 0050 144B     		ldr	r3, .L429+12
 5402 0052 1968     		ldr	r1, [r3]
 5403 0054 0222     		movs	r2, #2
 5404 0056 07EB8000 		add	r0, r7, r0, lsl #2
 5405 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
ARM GAS  /tmp/cchwbchh.s 			page 211


 5406              	.LVL394:
2424:base/os/FreeRTOS/Source/tasks.c **** 
 5407              		.loc 1 2424 12 view .LVU1500
 5408 005e 0544     		add	r5, r5, r0
 5409              	.LVL395:
2430:base/os/FreeRTOS/Source/tasks.c **** 				}
 5410              		.loc 1 2430 6 is_stmt 1 view .LVU1501
2430:base/os/FreeRTOS/Source/tasks.c **** 				}
 5411              		.loc 1 2430 66 is_stmt 0 view .LVU1502
 5412 0060 05EBC500 		add	r0, r5, r5, lsl #3
2430:base/os/FreeRTOS/Source/tasks.c **** 				}
 5413              		.loc 1 2430 16 view .LVU1503
 5414 0064 0422     		movs	r2, #4
 5415 0066 1049     		ldr	r1, .L429+16
 5416 0068 07EB8000 		add	r0, r7, r0, lsl #2
 5417 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 5418              	.LVL396:
2430:base/os/FreeRTOS/Source/tasks.c **** 				}
 5419              		.loc 1 2430 13 view .LVU1504
 5420 0070 2C18     		adds	r4, r5, r0
 5421              	.LVL397:
2438:base/os/FreeRTOS/Source/tasks.c **** 				}
 5422              		.loc 1 2438 6 is_stmt 1 view .LVU1505
2438:base/os/FreeRTOS/Source/tasks.c **** 				}
 5423              		.loc 1 2438 66 is_stmt 0 view .LVU1506
 5424 0072 04EBC400 		add	r0, r4, r4, lsl #3
2438:base/os/FreeRTOS/Source/tasks.c **** 				}
 5425              		.loc 1 2438 16 view .LVU1507
 5426 0076 0322     		movs	r2, #3
 5427 0078 0C49     		ldr	r1, .L429+20
 5428 007a 07EB8000 		add	r0, r7, r0, lsl #2
 5429 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5430              	.LVL398:
2438:base/os/FreeRTOS/Source/tasks.c **** 				}
 5431              		.loc 1 2438 13 view .LVU1508
 5432 0082 0444     		add	r4, r4, r0
 5433              	.LVL399:
2455:base/os/FreeRTOS/Source/tasks.c **** 					{
 5434              		.loc 1 2455 6 is_stmt 1 view .LVU1509
2455:base/os/FreeRTOS/Source/tasks.c **** 					{
 5435              		.loc 1 2455 8 is_stmt 0 view .LVU1510
 5436 0084 1EB1     		cbz	r6, .L425
2457:base/os/FreeRTOS/Source/tasks.c **** 					}
 5437              		.loc 1 2457 7 is_stmt 1 view .LVU1511
2457:base/os/FreeRTOS/Source/tasks.c **** 					}
 5438              		.loc 1 2457 24 is_stmt 0 view .LVU1512
 5439 0086 0023     		movs	r3, #0
 5440 0088 3360     		str	r3, [r6]
 5441 008a 00E0     		b	.L425
 5442              	.LVL400:
 5443              	.L427:
2405:base/os/FreeRTOS/Source/tasks.c **** 
 5444              		.loc 1 2405 14 view .LVU1513
 5445 008c 0024     		movs	r4, #0
 5446              	.LVL401:
 5447              	.L425:
2464:base/os/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cchwbchh.s 			page 212


 5448              		.loc 1 2464 29 is_stmt 1 view .LVU1514
2467:base/os/FreeRTOS/Source/tasks.c **** 
 5449              		.loc 1 2467 3 view .LVU1515
2467:base/os/FreeRTOS/Source/tasks.c **** 
 5450              		.loc 1 2467 12 is_stmt 0 view .LVU1516
 5451 008e FFF7FEFF 		bl	xTaskResumeAll
 5452              	.LVL402:
2469:base/os/FreeRTOS/Source/tasks.c **** 	}
 5453              		.loc 1 2469 3 is_stmt 1 view .LVU1517
2470:base/os/FreeRTOS/Source/tasks.c **** 
 5454              		.loc 1 2470 2 is_stmt 0 view .LVU1518
 5455 0092 2046     		mov	r0, r4
 5456 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5457              	.LVL403:
 5458              	.L430:
2470:base/os/FreeRTOS/Source/tasks.c **** 
 5459              		.loc 1 2470 2 view .LVU1519
 5460 0096 00BF     		.align	2
 5461              	.L429:
 5462 0098 00000000 		.word	.LANCHOR9
 5463 009c 00000000 		.word	.LANCHOR4
 5464 00a0 00000000 		.word	.LANCHOR2
 5465 00a4 00000000 		.word	.LANCHOR8
 5466 00a8 00000000 		.word	.LANCHOR7
 5467 00ac 00000000 		.word	.LANCHOR0
 5468              		.cfi_endproc
 5469              	.LFE27:
 5471              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5472              		.align	1
 5473              		.global	uxTaskGetStackHighWaterMark
 5474              		.syntax unified
 5475              		.thumb
 5476              		.thumb_func
 5477              		.fpu softvfp
 5479              	uxTaskGetStackHighWaterMark:
 5480              	.LVL404:
 5481              	.LFB47:
3643:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5482              		.loc 1 3643 2 is_stmt 1 view -0
 5483              		.cfi_startproc
 5484              		@ args = 0, pretend = 0, frame = 0
 5485              		@ frame_needed = 0, uses_anonymous_args = 0
3643:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5486              		.loc 1 3643 2 is_stmt 0 view .LVU1521
 5487 0000 08B5     		push	{r3, lr}
 5488              	.LCFI49:
 5489              		.cfi_def_cfa_offset 8
 5490              		.cfi_offset 3, -8
 5491              		.cfi_offset 14, -4
3644:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
 5492              		.loc 1 3644 2 is_stmt 1 view .LVU1522
3645:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 5493              		.loc 1 3645 2 view .LVU1523
3646:base/os/FreeRTOS/Source/tasks.c **** 
 5494              		.loc 1 3646 2 view .LVU1524
3648:base/os/FreeRTOS/Source/tasks.c **** 
 5495              		.loc 1 3648 3 view .LVU1525
ARM GAS  /tmp/cchwbchh.s 			page 213


3648:base/os/FreeRTOS/Source/tasks.c **** 
 5496              		.loc 1 3648 11 is_stmt 0 view .LVU1526
 5497 0002 0346     		mov	r3, r0
 5498 0004 18B1     		cbz	r0, .L434
 5499              	.LVL405:
 5500              	.L432:
3652:base/os/FreeRTOS/Source/tasks.c **** 		}
 5501              		.loc 1 3652 4 is_stmt 1 discriminator 4 view .LVU1527
3660:base/os/FreeRTOS/Source/tasks.c **** 
 5502              		.loc 1 3660 3 discriminator 4 view .LVU1528
3660:base/os/FreeRTOS/Source/tasks.c **** 
 5503              		.loc 1 3660 30 is_stmt 0 discriminator 4 view .LVU1529
 5504 0006 186B     		ldr	r0, [r3, #48]
 5505 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5506              	.LVL406:
3662:base/os/FreeRTOS/Source/tasks.c **** 	}
 5507              		.loc 1 3662 3 is_stmt 1 discriminator 4 view .LVU1530
3663:base/os/FreeRTOS/Source/tasks.c **** 
 5508              		.loc 1 3663 2 is_stmt 0 discriminator 4 view .LVU1531
 5509 000c 08BD     		pop	{r3, pc}
 5510              	.LVL407:
 5511              	.L434:
3648:base/os/FreeRTOS/Source/tasks.c **** 
 5512              		.loc 1 3648 11 discriminator 1 view .LVU1532
 5513 000e 014B     		ldr	r3, .L435
 5514 0010 1B68     		ldr	r3, [r3]
 5515              	.LVL408:
3648:base/os/FreeRTOS/Source/tasks.c **** 
 5516              		.loc 1 3648 11 discriminator 1 view .LVU1533
 5517 0012 F8E7     		b	.L432
 5518              	.L436:
 5519              		.align	2
 5520              	.L435:
 5521 0014 00000000 		.word	.LANCHOR10
 5522              		.cfi_endproc
 5523              	.LFE47:
 5525              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5526              		.align	1
 5527              		.global	xTaskGetCurrentTaskHandle
 5528              		.syntax unified
 5529              		.thumb
 5530              		.thumb_func
 5531              		.fpu softvfp
 5533              	xTaskGetCurrentTaskHandle:
 5534              	.LFB50:
3751:base/os/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 5535              		.loc 1 3751 2 is_stmt 1 view -0
 5536              		.cfi_startproc
 5537              		@ args = 0, pretend = 0, frame = 0
 5538              		@ frame_needed = 0, uses_anonymous_args = 0
 5539              		@ link register save eliminated.
3752:base/os/FreeRTOS/Source/tasks.c **** 
 5540              		.loc 1 3752 2 view .LVU1535
3757:base/os/FreeRTOS/Source/tasks.c **** 
 5541              		.loc 1 3757 3 view .LVU1536
3757:base/os/FreeRTOS/Source/tasks.c **** 
 5542              		.loc 1 3757 11 is_stmt 0 view .LVU1537
ARM GAS  /tmp/cchwbchh.s 			page 214


 5543 0000 014B     		ldr	r3, .L438
 5544 0002 1868     		ldr	r0, [r3]
 5545              	.LVL409:
3759:base/os/FreeRTOS/Source/tasks.c **** 	}
 5546              		.loc 1 3759 3 is_stmt 1 view .LVU1538
3760:base/os/FreeRTOS/Source/tasks.c **** 
 5547              		.loc 1 3760 2 is_stmt 0 view .LVU1539
 5548 0004 7047     		bx	lr
 5549              	.L439:
 5550 0006 00BF     		.align	2
 5551              	.L438:
 5552 0008 00000000 		.word	.LANCHOR10
 5553              		.cfi_endproc
 5554              	.LFE50:
 5556              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5557              		.align	1
 5558              		.global	xTaskGetSchedulerState
 5559              		.syntax unified
 5560              		.thumb
 5561              		.thumb_func
 5562              		.fpu softvfp
 5564              	xTaskGetSchedulerState:
 5565              	.LFB51:
3768:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5566              		.loc 1 3768 2 is_stmt 1 view -0
 5567              		.cfi_startproc
 5568              		@ args = 0, pretend = 0, frame = 0
 5569              		@ frame_needed = 0, uses_anonymous_args = 0
 5570              		@ link register save eliminated.
3769:base/os/FreeRTOS/Source/tasks.c **** 
 5571              		.loc 1 3769 2 view .LVU1541
3771:base/os/FreeRTOS/Source/tasks.c **** 		{
 5572              		.loc 1 3771 3 view .LVU1542
3771:base/os/FreeRTOS/Source/tasks.c **** 		{
 5573              		.loc 1 3771 25 is_stmt 0 view .LVU1543
 5574 0000 054B     		ldr	r3, .L445
 5575 0002 1B68     		ldr	r3, [r3]
3771:base/os/FreeRTOS/Source/tasks.c **** 		{
 5576              		.loc 1 3771 5 view .LVU1544
 5577 0004 33B1     		cbz	r3, .L442
3777:base/os/FreeRTOS/Source/tasks.c **** 			{
 5578              		.loc 1 3777 4 is_stmt 1 view .LVU1545
3777:base/os/FreeRTOS/Source/tasks.c **** 			{
 5579              		.loc 1 3777 29 is_stmt 0 view .LVU1546
 5580 0006 054B     		ldr	r3, .L445+4
 5581 0008 1B68     		ldr	r3, [r3]
3777:base/os/FreeRTOS/Source/tasks.c **** 			{
 5582              		.loc 1 3777 6 view .LVU1547
 5583 000a 0BB1     		cbz	r3, .L444
3783:base/os/FreeRTOS/Source/tasks.c **** 			}
 5584              		.loc 1 3783 13 view .LVU1548
 5585 000c 0020     		movs	r0, #0
 5586              	.LVL410:
3787:base/os/FreeRTOS/Source/tasks.c **** 	}
 5587              		.loc 1 3787 3 is_stmt 1 view .LVU1549
3788:base/os/FreeRTOS/Source/tasks.c **** 
 5588              		.loc 1 3788 2 is_stmt 0 view .LVU1550
ARM GAS  /tmp/cchwbchh.s 			page 215


 5589 000e 7047     		bx	lr
 5590              	.LVL411:
 5591              	.L444:
3779:base/os/FreeRTOS/Source/tasks.c **** 			}
 5592              		.loc 1 3779 13 view .LVU1551
 5593 0010 0220     		movs	r0, #2
 5594 0012 7047     		bx	lr
 5595              	.L442:
3773:base/os/FreeRTOS/Source/tasks.c **** 		}
 5596              		.loc 1 3773 12 view .LVU1552
 5597 0014 0120     		movs	r0, #1
 5598 0016 7047     		bx	lr
 5599              	.L446:
 5600              		.align	2
 5601              	.L445:
 5602 0018 00000000 		.word	.LANCHOR11
 5603 001c 00000000 		.word	.LANCHOR16
 5604              		.cfi_endproc
 5605              	.LFE51:
 5607              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5608              		.align	1
 5609              		.global	xTaskPriorityInherit
 5610              		.syntax unified
 5611              		.thumb
 5612              		.thumb_func
 5613              		.fpu softvfp
 5615              	xTaskPriorityInherit:
 5616              	.LVL412:
 5617              	.LFB52:
3796:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 5618              		.loc 1 3796 2 is_stmt 1 view -0
 5619              		.cfi_startproc
 5620              		@ args = 0, pretend = 0, frame = 0
 5621              		@ frame_needed = 0, uses_anonymous_args = 0
3797:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5622              		.loc 1 3797 2 view .LVU1554
3798:base/os/FreeRTOS/Source/tasks.c **** 
 5623              		.loc 1 3798 2 view .LVU1555
3803:base/os/FreeRTOS/Source/tasks.c **** 		{
 5624              		.loc 1 3803 3 view .LVU1556
3803:base/os/FreeRTOS/Source/tasks.c **** 		{
 5625              		.loc 1 3803 5 is_stmt 0 view .LVU1557
 5626 0000 0028     		cmp	r0, #0
 5627 0002 3FD0     		beq	.L454
3796:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 5628              		.loc 1 3796 2 view .LVU1558
 5629 0004 38B5     		push	{r3, r4, r5, lr}
 5630              	.LCFI50:
 5631              		.cfi_def_cfa_offset 16
 5632              		.cfi_offset 3, -16
 5633              		.cfi_offset 4, -12
 5634              		.cfi_offset 5, -8
 5635              		.cfi_offset 14, -4
 5636 0006 0446     		mov	r4, r0
3808:base/os/FreeRTOS/Source/tasks.c **** 			{
 5637              		.loc 1 3808 4 is_stmt 1 view .LVU1559
3808:base/os/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cchwbchh.s 			page 216


 5638              		.loc 1 3808 24 is_stmt 0 view .LVU1560
 5639 0008 C36A     		ldr	r3, [r0, #44]
3808:base/os/FreeRTOS/Source/tasks.c **** 			{
 5640              		.loc 1 3808 51 view .LVU1561
 5641 000a 204A     		ldr	r2, .L461
 5642 000c 1268     		ldr	r2, [r2]
 5643 000e D26A     		ldr	r2, [r2, #44]
3808:base/os/FreeRTOS/Source/tasks.c **** 			{
 5644              		.loc 1 3808 6 view .LVU1562
 5645 0010 9342     		cmp	r3, r2
 5646 0012 2FD2     		bcs	.L449
3813:base/os/FreeRTOS/Source/tasks.c **** 				{
 5647              		.loc 1 3813 5 is_stmt 1 view .LVU1563
3813:base/os/FreeRTOS/Source/tasks.c **** 				{
 5648              		.loc 1 3813 11 is_stmt 0 view .LVU1564
 5649 0014 8269     		ldr	r2, [r0, #24]
3813:base/os/FreeRTOS/Source/tasks.c **** 				{
 5650              		.loc 1 3813 7 view .LVU1565
 5651 0016 002A     		cmp	r2, #0
 5652 0018 05DB     		blt	.L450
3815:base/os/FreeRTOS/Source/tasks.c **** 				}
 5653              		.loc 1 3815 6 is_stmt 1 view .LVU1566
 5654 001a 1C4A     		ldr	r2, .L461
 5655 001c 1268     		ldr	r2, [r2]
 5656 001e D26A     		ldr	r2, [r2, #44]
 5657 0020 C2F13802 		rsb	r2, r2, #56
 5658 0024 8261     		str	r2, [r0, #24]
 5659              	.L450:
3819:base/os/FreeRTOS/Source/tasks.c **** 				}
 5660              		.loc 1 3819 30 view .LVU1567
3824:base/os/FreeRTOS/Source/tasks.c **** 				{
 5661              		.loc 1 3824 5 view .LVU1568
3824:base/os/FreeRTOS/Source/tasks.c **** 				{
 5662              		.loc 1 3824 9 is_stmt 0 view .LVU1569
 5663 0026 6169     		ldr	r1, [r4, #20]
 5664 0028 03EB8303 		add	r3, r3, r3, lsl #2
 5665 002c 184A     		ldr	r2, .L461+4
 5666 002e 02EB8303 		add	r3, r2, r3, lsl #2
3824:base/os/FreeRTOS/Source/tasks.c **** 				{
 5667              		.loc 1 3824 130 view .LVU1570
 5668 0032 9942     		cmp	r1, r3
 5669 0034 05D0     		beq	.L460
3842:base/os/FreeRTOS/Source/tasks.c **** 				}
 5670              		.loc 1 3842 6 is_stmt 1 view .LVU1571
3842:base/os/FreeRTOS/Source/tasks.c **** 				}
 5671              		.loc 1 3842 49 is_stmt 0 view .LVU1572
 5672 0036 154B     		ldr	r3, .L461
 5673 0038 1B68     		ldr	r3, [r3]
 5674 003a DB6A     		ldr	r3, [r3, #44]
3842:base/os/FreeRTOS/Source/tasks.c **** 				}
 5675              		.loc 1 3842 35 view .LVU1573
 5676 003c E362     		str	r3, [r4, #44]
3848:base/os/FreeRTOS/Source/tasks.c **** 			}
 5677              		.loc 1 3848 13 view .LVU1574
 5678 003e 0120     		movs	r0, #1
 5679              	.LVL413:
 5680              	.L447:
ARM GAS  /tmp/cchwbchh.s 			page 217


3875:base/os/FreeRTOS/Source/tasks.c **** 
 5681              		.loc 1 3875 2 view .LVU1575
 5682 0040 38BD     		pop	{r3, r4, r5, pc}
 5683              	.LVL414:
 5684              	.L460:
3826:base/os/FreeRTOS/Source/tasks.c **** 					{
 5685              		.loc 1 3826 6 is_stmt 1 view .LVU1576
3826:base/os/FreeRTOS/Source/tasks.c **** 					{
 5686              		.loc 1 3826 10 is_stmt 0 view .LVU1577
 5687 0042 251D     		adds	r5, r4, #4
 5688 0044 2846     		mov	r0, r5
 5689              	.LVL415:
3826:base/os/FreeRTOS/Source/tasks.c **** 					{
 5690              		.loc 1 3826 10 view .LVU1578
 5691 0046 FFF7FEFF 		bl	uxListRemove
 5692              	.LVL416:
3832:base/os/FreeRTOS/Source/tasks.c **** 					}
 5693              		.loc 1 3832 31 is_stmt 1 view .LVU1579
3836:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5694              		.loc 1 3836 6 view .LVU1580
3836:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5695              		.loc 1 3836 49 is_stmt 0 view .LVU1581
 5696 004a 104B     		ldr	r3, .L461
 5697 004c 1B68     		ldr	r3, [r3]
 5698 004e D86A     		ldr	r0, [r3, #44]
3836:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5699              		.loc 1 3836 35 view .LVU1582
 5700 0050 E062     		str	r0, [r4, #44]
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5701              		.loc 1 3837 6 is_stmt 1 view .LVU1583
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5702              		.loc 1 3837 6 view .LVU1584
 5703 0052 104B     		ldr	r3, .L461+8
 5704 0054 1B68     		ldr	r3, [r3]
 5705 0056 9842     		cmp	r0, r3
 5706 0058 09D8     		bhi	.L452
 5707              	.L453:
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5708              		.loc 1 3837 6 discriminator 3 view .LVU1585
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5709              		.loc 1 3837 6 discriminator 3 view .LVU1586
 5710 005a 00EB8000 		add	r0, r0, r0, lsl #2
 5711 005e 2946     		mov	r1, r5
 5712 0060 0B4B     		ldr	r3, .L461+4
 5713 0062 03EB8000 		add	r0, r3, r0, lsl #2
 5714 0066 FFF7FEFF 		bl	vListInsertEnd
 5715              	.LVL417:
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5716              		.loc 1 3837 47 discriminator 3 view .LVU1587
3848:base/os/FreeRTOS/Source/tasks.c **** 			}
 5717              		.loc 1 3848 13 is_stmt 0 discriminator 3 view .LVU1588
 5718 006a 0120     		movs	r0, #1
 5719 006c E8E7     		b	.L447
 5720              	.L452:
3837:base/os/FreeRTOS/Source/tasks.c **** 				}
 5721              		.loc 1 3837 6 is_stmt 1 discriminator 1 view .LVU1589
 5722 006e 094B     		ldr	r3, .L461+8
ARM GAS  /tmp/cchwbchh.s 			page 218


 5723 0070 1860     		str	r0, [r3]
 5724 0072 F2E7     		b	.L453
 5725              	.LVL418:
 5726              	.L449:
3852:base/os/FreeRTOS/Source/tasks.c **** 				{
 5727              		.loc 1 3852 5 view .LVU1590
3852:base/os/FreeRTOS/Source/tasks.c **** 				{
 5728              		.loc 1 3852 25 is_stmt 0 view .LVU1591
 5729 0074 C26C     		ldr	r2, [r0, #76]
3852:base/os/FreeRTOS/Source/tasks.c **** 				{
 5730              		.loc 1 3852 56 view .LVU1592
 5731 0076 054B     		ldr	r3, .L461
 5732 0078 1B68     		ldr	r3, [r3]
 5733 007a DB6A     		ldr	r3, [r3, #44]
3852:base/os/FreeRTOS/Source/tasks.c **** 				{
 5734              		.loc 1 3852 7 view .LVU1593
 5735 007c 9A42     		cmp	r2, r3
 5736 007e 03D3     		bcc	.L455
3798:base/os/FreeRTOS/Source/tasks.c **** 
 5737              		.loc 1 3798 13 view .LVU1594
 5738 0080 0020     		movs	r0, #0
 5739              	.LVL419:
3798:base/os/FreeRTOS/Source/tasks.c **** 
 5740              		.loc 1 3798 13 view .LVU1595
 5741 0082 DDE7     		b	.L447
 5742              	.LVL420:
 5743              	.L454:
 5744              	.LCFI51:
 5745              		.cfi_def_cfa_offset 0
 5746              		.cfi_restore 3
 5747              		.cfi_restore 4
 5748              		.cfi_restore 5
 5749              		.cfi_restore 14
3798:base/os/FreeRTOS/Source/tasks.c **** 
 5750              		.loc 1 3798 13 view .LVU1596
 5751 0084 0020     		movs	r0, #0
 5752              	.LVL421:
3875:base/os/FreeRTOS/Source/tasks.c **** 
 5753              		.loc 1 3875 2 view .LVU1597
 5754 0086 7047     		bx	lr
 5755              	.LVL422:
 5756              	.L455:
 5757              	.LCFI52:
 5758              		.cfi_def_cfa_offset 16
 5759              		.cfi_offset 3, -16
 5760              		.cfi_offset 4, -12
 5761              		.cfi_offset 5, -8
 5762              		.cfi_offset 14, -4
3861:base/os/FreeRTOS/Source/tasks.c **** 				}
 5763              		.loc 1 3861 14 view .LVU1598
 5764 0088 0120     		movs	r0, #1
 5765              	.LVL423:
3871:base/os/FreeRTOS/Source/tasks.c **** 		}
 5766              		.loc 1 3871 28 is_stmt 1 view .LVU1599
3874:base/os/FreeRTOS/Source/tasks.c **** 	}
 5767              		.loc 1 3874 3 view .LVU1600
3874:base/os/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cchwbchh.s 			page 219


 5768              		.loc 1 3874 10 is_stmt 0 view .LVU1601
 5769 008a D9E7     		b	.L447
 5770              	.L462:
 5771              		.align	2
 5772              	.L461:
 5773 008c 00000000 		.word	.LANCHOR10
 5774 0090 00000000 		.word	.LANCHOR4
 5775 0094 00000000 		.word	.LANCHOR13
 5776              		.cfi_endproc
 5777              	.LFE52:
 5779              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5780              		.align	1
 5781              		.global	xTaskPriorityDisinherit
 5782              		.syntax unified
 5783              		.thumb
 5784              		.thumb_func
 5785              		.fpu softvfp
 5787              	xTaskPriorityDisinherit:
 5788              	.LVL424:
 5789              	.LFB53:
3883:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5790              		.loc 1 3883 2 is_stmt 1 view -0
 5791              		.cfi_startproc
 5792              		@ args = 0, pretend = 0, frame = 0
 5793              		@ frame_needed = 0, uses_anonymous_args = 0
3884:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5794              		.loc 1 3884 2 view .LVU1603
3885:base/os/FreeRTOS/Source/tasks.c **** 
 5795              		.loc 1 3885 2 view .LVU1604
3887:base/os/FreeRTOS/Source/tasks.c **** 		{
 5796              		.loc 1 3887 3 view .LVU1605
3887:base/os/FreeRTOS/Source/tasks.c **** 		{
 5797              		.loc 1 3887 5 is_stmt 0 view .LVU1606
 5798 0000 0028     		cmp	r0, #0
 5799 0002 3BD0     		beq	.L470
3883:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5800              		.loc 1 3883 2 view .LVU1607
 5801 0004 38B5     		push	{r3, r4, r5, lr}
 5802              	.LCFI53:
 5803              		.cfi_def_cfa_offset 16
 5804              		.cfi_offset 3, -16
 5805              		.cfi_offset 4, -12
 5806              		.cfi_offset 5, -8
 5807              		.cfi_offset 14, -4
 5808 0006 0446     		mov	r4, r0
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5809              		.loc 1 3893 4 is_stmt 1 view .LVU1608
 5810 0008 1E4B     		ldr	r3, .L478
 5811 000a 1B68     		ldr	r3, [r3]
 5812 000c 8342     		cmp	r3, r0
 5813 000e 08D0     		beq	.L465
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5814              		.loc 1 3893 4 view .LVU1609
 5815              	.LBB213:
 5816              	.LBI213:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 5817              		.loc 2 191 30 view .LVU1610
ARM GAS  /tmp/cchwbchh.s 			page 220


 5818              	.LBB214:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 5819              		.loc 2 193 1 view .LVU1611
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5820              		.loc 2 195 2 view .LVU1612
 5821              		.syntax unified
 5822              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5823 0010 4FF05003 			mov r3, #80												
 5824 0014 83F31188 		msr basepri, r3											
 5825 0018 BFF36F8F 		isb														
 5826 001c BFF34F8F 		dsb														
 5827              	
 5828              	@ 0 "" 2
 5829              	.LVL425:
 5830              		.thumb
 5831              		.syntax unified
 5832              	.L466:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5833              		.loc 2 195 2 is_stmt 0 view .LVU1613
 5834              	.LBE214:
 5835              	.LBE213:
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5836              		.loc 1 3893 4 is_stmt 1 discriminator 1 view .LVU1614
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5837              		.loc 1 3893 4 discriminator 1 view .LVU1615
 5838 0020 FEE7     		b	.L466
 5839              	.L465:
3893:base/os/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5840              		.loc 1 3893 41 discriminator 2 view .LVU1616
3894:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5841              		.loc 1 3894 4 discriminator 2 view .LVU1617
 5842 0022 036D     		ldr	r3, [r0, #80]
 5843 0024 43B9     		cbnz	r3, .L467
3894:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5844              		.loc 1 3894 4 view .LVU1618
 5845              	.LBB215:
 5846              	.LBI215:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 5847              		.loc 2 191 30 view .LVU1619
 5848              	.LBB216:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 5849              		.loc 2 193 1 view .LVU1620
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5850              		.loc 2 195 2 view .LVU1621
 5851              		.syntax unified
 5852              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5853 0026 4FF05003 			mov r3, #80												
 5854 002a 83F31188 		msr basepri, r3											
 5855 002e BFF36F8F 		isb														
 5856 0032 BFF34F8F 		dsb														
 5857              	
 5858              	@ 0 "" 2
 5859              	.LVL426:
 5860              		.thumb
 5861              		.syntax unified
 5862              	.L468:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/cchwbchh.s 			page 221


 5863              		.loc 2 195 2 is_stmt 0 view .LVU1622
 5864              	.LBE216:
 5865              	.LBE215:
3894:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5866              		.loc 1 3894 4 is_stmt 1 discriminator 2 view .LVU1623
3894:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5867              		.loc 1 3894 4 discriminator 2 view .LVU1624
 5868 0036 FEE7     		b	.L468
 5869              	.L467:
3894:base/os/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5870              		.loc 1 3894 40 discriminator 2 view .LVU1625
3895:base/os/FreeRTOS/Source/tasks.c **** 
 5871              		.loc 1 3895 4 discriminator 2 view .LVU1626
3895:base/os/FreeRTOS/Source/tasks.c **** 
 5872              		.loc 1 3895 28 is_stmt 0 discriminator 2 view .LVU1627
 5873 0038 013B     		subs	r3, r3, #1
 5874 003a 0365     		str	r3, [r0, #80]
3899:base/os/FreeRTOS/Source/tasks.c **** 			{
 5875              		.loc 1 3899 4 is_stmt 1 discriminator 2 view .LVU1628
3899:base/os/FreeRTOS/Source/tasks.c **** 			{
 5876              		.loc 1 3899 13 is_stmt 0 discriminator 2 view .LVU1629
 5877 003c C16A     		ldr	r1, [r0, #44]
3899:base/os/FreeRTOS/Source/tasks.c **** 			{
 5878              		.loc 1 3899 34 discriminator 2 view .LVU1630
 5879 003e C26C     		ldr	r2, [r0, #76]
3899:base/os/FreeRTOS/Source/tasks.c **** 			{
 5880              		.loc 1 3899 6 discriminator 2 view .LVU1631
 5881 0040 9142     		cmp	r1, r2
 5882 0042 1DD0     		beq	.L471
3902:base/os/FreeRTOS/Source/tasks.c **** 				{
 5883              		.loc 1 3902 5 is_stmt 1 view .LVU1632
3902:base/os/FreeRTOS/Source/tasks.c **** 				{
 5884              		.loc 1 3902 7 is_stmt 0 view .LVU1633
 5885 0044 0BB1     		cbz	r3, .L477
3885:base/os/FreeRTOS/Source/tasks.c **** 
 5886              		.loc 1 3885 13 view .LVU1634
 5887 0046 0020     		movs	r0, #0
 5888              	.LVL427:
3951:base/os/FreeRTOS/Source/tasks.c **** 		}
 5889              		.loc 1 3951 28 is_stmt 1 view .LVU1635
3954:base/os/FreeRTOS/Source/tasks.c **** 	}
 5890              		.loc 1 3954 3 view .LVU1636
 5891              	.L463:
3955:base/os/FreeRTOS/Source/tasks.c **** 
 5892              		.loc 1 3955 2 is_stmt 0 view .LVU1637
 5893 0048 38BD     		pop	{r3, r4, r5, pc}
 5894              	.LVL428:
 5895              	.L477:
3909:base/os/FreeRTOS/Source/tasks.c **** 					{
 5896              		.loc 1 3909 6 is_stmt 1 view .LVU1638
3909:base/os/FreeRTOS/Source/tasks.c **** 					{
 5897              		.loc 1 3909 10 is_stmt 0 view .LVU1639
 5898 004a 051D     		adds	r5, r0, #4
 5899 004c 2846     		mov	r0, r5
 5900              	.LVL429:
3909:base/os/FreeRTOS/Source/tasks.c **** 					{
 5901              		.loc 1 3909 10 view .LVU1640
ARM GAS  /tmp/cchwbchh.s 			page 222


 5902 004e FFF7FEFF 		bl	uxListRemove
 5903              	.LVL430:
3915:base/os/FreeRTOS/Source/tasks.c **** 					}
 5904              		.loc 1 3915 31 is_stmt 1 view .LVU1641
3920:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5905              		.loc 1 3920 67 view .LVU1642
3921:base/os/FreeRTOS/Source/tasks.c **** 
 5906              		.loc 1 3921 6 view .LVU1643
3921:base/os/FreeRTOS/Source/tasks.c **** 
 5907              		.loc 1 3921 31 is_stmt 0 view .LVU1644
 5908 0052 E06C     		ldr	r0, [r4, #76]
3921:base/os/FreeRTOS/Source/tasks.c **** 
 5909              		.loc 1 3921 24 view .LVU1645
 5910 0054 E062     		str	r0, [r4, #44]
3926:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5911              		.loc 1 3926 6 is_stmt 1 view .LVU1646
 5912 0056 C0F13803 		rsb	r3, r0, #56
 5913 005a A361     		str	r3, [r4, #24]
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5914              		.loc 1 3927 6 view .LVU1647
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5915              		.loc 1 3927 6 view .LVU1648
 5916 005c 0A4B     		ldr	r3, .L478+4
 5917 005e 1B68     		ldr	r3, [r3]
 5918 0060 9842     		cmp	r0, r3
 5919 0062 01D9     		bls	.L469
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5920              		.loc 1 3927 6 discriminator 1 view .LVU1649
 5921 0064 084B     		ldr	r3, .L478+4
 5922 0066 1860     		str	r0, [r3]
 5923              	.L469:
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5924              		.loc 1 3927 6 discriminator 3 view .LVU1650
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5925              		.loc 1 3927 6 discriminator 3 view .LVU1651
 5926 0068 00EB8000 		add	r0, r0, r0, lsl #2
 5927 006c 2946     		mov	r1, r5
 5928 006e 074B     		ldr	r3, .L478+8
 5929 0070 03EB8000 		add	r0, r3, r0, lsl #2
 5930 0074 FFF7FEFF 		bl	vListInsertEnd
 5931              	.LVL431:
3927:base/os/FreeRTOS/Source/tasks.c **** 
 5932              		.loc 1 3927 36 discriminator 3 view .LVU1652
3937:base/os/FreeRTOS/Source/tasks.c **** 				}
 5933              		.loc 1 3937 6 discriminator 3 view .LVU1653
3937:base/os/FreeRTOS/Source/tasks.c **** 				}
 5934              		.loc 1 3937 14 is_stmt 0 discriminator 3 view .LVU1654
 5935 0078 0120     		movs	r0, #1
 5936 007a E5E7     		b	.L463
 5937              	.LVL432:
 5938              	.L470:
 5939              	.LCFI54:
 5940              		.cfi_def_cfa_offset 0
 5941              		.cfi_restore 3
 5942              		.cfi_restore 4
 5943              		.cfi_restore 5
 5944              		.cfi_restore 14
ARM GAS  /tmp/cchwbchh.s 			page 223


3885:base/os/FreeRTOS/Source/tasks.c **** 
 5945              		.loc 1 3885 13 view .LVU1655
 5946 007c 0020     		movs	r0, #0
 5947              	.LVL433:
3955:base/os/FreeRTOS/Source/tasks.c **** 
 5948              		.loc 1 3955 2 view .LVU1656
 5949 007e 7047     		bx	lr
 5950              	.LVL434:
 5951              	.L471:
 5952              	.LCFI55:
 5953              		.cfi_def_cfa_offset 16
 5954              		.cfi_offset 3, -16
 5955              		.cfi_offset 4, -12
 5956              		.cfi_offset 5, -8
 5957              		.cfi_offset 14, -4
3885:base/os/FreeRTOS/Source/tasks.c **** 
 5958              		.loc 1 3885 13 view .LVU1657
 5959 0080 0020     		movs	r0, #0
 5960              	.LVL435:
3885:base/os/FreeRTOS/Source/tasks.c **** 
 5961              		.loc 1 3885 13 view .LVU1658
 5962 0082 E1E7     		b	.L463
 5963              	.L479:
 5964              		.align	2
 5965              	.L478:
 5966 0084 00000000 		.word	.LANCHOR10
 5967 0088 00000000 		.word	.LANCHOR13
 5968 008c 00000000 		.word	.LANCHOR4
 5969              		.cfi_endproc
 5970              	.LFE53:
 5972              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5973              		.align	1
 5974              		.global	vTaskPriorityDisinheritAfterTimeout
 5975              		.syntax unified
 5976              		.thumb
 5977              		.thumb_func
 5978              		.fpu softvfp
 5980              	vTaskPriorityDisinheritAfterTimeout:
 5981              	.LVL436:
 5982              	.LFB54:
3963:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5983              		.loc 1 3963 2 is_stmt 1 view -0
 5984              		.cfi_startproc
 5985              		@ args = 0, pretend = 0, frame = 0
 5986              		@ frame_needed = 0, uses_anonymous_args = 0
3964:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5987              		.loc 1 3964 2 view .LVU1660
3965:base/os/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5988              		.loc 1 3965 2 view .LVU1661
3966:base/os/FreeRTOS/Source/tasks.c **** 
 5989              		.loc 1 3966 2 view .LVU1662
3968:base/os/FreeRTOS/Source/tasks.c **** 		{
 5990              		.loc 1 3968 3 view .LVU1663
3968:base/os/FreeRTOS/Source/tasks.c **** 		{
 5991              		.loc 1 3968 5 is_stmt 0 view .LVU1664
 5992 0000 0028     		cmp	r0, #0
 5993 0002 46D0     		beq	.L490
ARM GAS  /tmp/cchwbchh.s 			page 224


3963:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5994              		.loc 1 3963 2 view .LVU1665
 5995 0004 38B5     		push	{r3, r4, r5, lr}
 5996              	.LCFI56:
 5997              		.cfi_def_cfa_offset 16
 5998              		.cfi_offset 3, -16
 5999              		.cfi_offset 4, -12
 6000              		.cfi_offset 5, -8
 6001              		.cfi_offset 14, -4
 6002 0006 0446     		mov	r4, r0
3972:base/os/FreeRTOS/Source/tasks.c **** 
 6003              		.loc 1 3972 4 is_stmt 1 view .LVU1666
 6004 0008 036D     		ldr	r3, [r0, #80]
 6005 000a 43B9     		cbnz	r3, .L482
3972:base/os/FreeRTOS/Source/tasks.c **** 
 6006              		.loc 1 3972 4 view .LVU1667
 6007              	.LBB217:
 6008              	.LBI217:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6009              		.loc 2 191 30 view .LVU1668
 6010              	.LBB218:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6011              		.loc 2 193 1 view .LVU1669
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6012              		.loc 2 195 2 view .LVU1670
 6013              		.syntax unified
 6014              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6015 000c 4FF05003 			mov r3, #80												
 6016 0010 83F31188 		msr basepri, r3											
 6017 0014 BFF36F8F 		isb														
 6018 0018 BFF34F8F 		dsb														
 6019              	
 6020              	@ 0 "" 2
 6021              	.LVL437:
 6022              		.thumb
 6023              		.syntax unified
 6024              	.L483:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6025              		.loc 2 195 2 is_stmt 0 view .LVU1671
 6026              	.LBE218:
 6027              	.LBE217:
3972:base/os/FreeRTOS/Source/tasks.c **** 
 6028              		.loc 1 3972 4 is_stmt 1 discriminator 1 view .LVU1672
3972:base/os/FreeRTOS/Source/tasks.c **** 
 6029              		.loc 1 3972 4 discriminator 1 view .LVU1673
 6030 001c FEE7     		b	.L483
 6031              	.L482:
3972:base/os/FreeRTOS/Source/tasks.c **** 
 6032              		.loc 1 3972 40 discriminator 2 view .LVU1674
3978:base/os/FreeRTOS/Source/tasks.c **** 			{
 6033              		.loc 1 3978 4 discriminator 2 view .LVU1675
3978:base/os/FreeRTOS/Source/tasks.c **** 			{
 6034              		.loc 1 3978 13 is_stmt 0 discriminator 2 view .LVU1676
 6035 001e C26C     		ldr	r2, [r0, #76]
3978:base/os/FreeRTOS/Source/tasks.c **** 			{
 6036              		.loc 1 3978 6 discriminator 2 view .LVU1677
 6037 0020 8A42     		cmp	r2, r1
ARM GAS  /tmp/cchwbchh.s 			page 225


 6038 0022 00D2     		bcs	.L484
3980:base/os/FreeRTOS/Source/tasks.c **** 			}
 6039              		.loc 1 3980 21 view .LVU1678
 6040 0024 0A46     		mov	r2, r1
 6041              	.L484:
 6042              	.LVL438:
3988:base/os/FreeRTOS/Source/tasks.c **** 			{
 6043              		.loc 1 3988 4 is_stmt 1 view .LVU1679
3988:base/os/FreeRTOS/Source/tasks.c **** 			{
 6044              		.loc 1 3988 13 is_stmt 0 view .LVU1680
 6045 0026 E16A     		ldr	r1, [r4, #44]
 6046              	.LVL439:
3988:base/os/FreeRTOS/Source/tasks.c **** 			{
 6047              		.loc 1 3988 6 view .LVU1681
 6048 0028 9142     		cmp	r1, r2
 6049 002a 01D0     		beq	.L480
3994:base/os/FreeRTOS/Source/tasks.c **** 				{
 6050              		.loc 1 3994 5 is_stmt 1 view .LVU1682
3994:base/os/FreeRTOS/Source/tasks.c **** 				{
 6051              		.loc 1 3994 7 is_stmt 0 view .LVU1683
 6052 002c 012B     		cmp	r3, #1
 6053 002e 00D0     		beq	.L493
 6054              	.LVL440:
 6055              	.L480:
4057:base/os/FreeRTOS/Source/tasks.c **** 
 6056              		.loc 1 4057 2 view .LVU1684
 6057 0030 38BD     		pop	{r3, r4, r5, pc}
 6058              	.LVL441:
 6059              	.L493:
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6060              		.loc 1 3999 6 is_stmt 1 view .LVU1685
 6061 0032 184B     		ldr	r3, .L495
 6062 0034 1B68     		ldr	r3, [r3]
 6063 0036 A342     		cmp	r3, r4
 6064 0038 22D0     		beq	.L494
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6065              		.loc 1 3999 43 discriminator 2 view .LVU1686
4004:base/os/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6066              		.loc 1 4004 67 discriminator 2 view .LVU1687
4005:base/os/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6067              		.loc 1 4005 6 discriminator 2 view .LVU1688
 6068              	.LVL442:
4006:base/os/FreeRTOS/Source/tasks.c **** 
 6069              		.loc 1 4006 6 discriminator 2 view .LVU1689
4006:base/os/FreeRTOS/Source/tasks.c **** 
 6070              		.loc 1 4006 24 is_stmt 0 discriminator 2 view .LVU1690
 6071 003a E262     		str	r2, [r4, #44]
4010:base/os/FreeRTOS/Source/tasks.c **** 					{
 6072              		.loc 1 4010 6 is_stmt 1 discriminator 2 view .LVU1691
4010:base/os/FreeRTOS/Source/tasks.c **** 					{
 6073              		.loc 1 4010 12 is_stmt 0 discriminator 2 view .LVU1692
 6074 003c A369     		ldr	r3, [r4, #24]
4010:base/os/FreeRTOS/Source/tasks.c **** 					{
 6075              		.loc 1 4010 8 discriminator 2 view .LVU1693
 6076 003e 002B     		cmp	r3, #0
 6077 0040 02DB     		blt	.L487
4012:base/os/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cchwbchh.s 			page 226


 6078              		.loc 1 4012 7 is_stmt 1 view .LVU1694
 6079 0042 C2F13802 		rsb	r2, r2, #56
 6080              	.LVL443:
4012:base/os/FreeRTOS/Source/tasks.c **** 					}
 6081              		.loc 1 4012 7 is_stmt 0 view .LVU1695
 6082 0046 A261     		str	r2, [r4, #24]
 6083              	.L487:
4016:base/os/FreeRTOS/Source/tasks.c **** 					}
 6084              		.loc 1 4016 31 is_stmt 1 view .LVU1696
4025:base/os/FreeRTOS/Source/tasks.c **** 					{
 6085              		.loc 1 4025 6 view .LVU1697
4025:base/os/FreeRTOS/Source/tasks.c **** 					{
 6086              		.loc 1 4025 10 is_stmt 0 view .LVU1698
 6087 0048 6269     		ldr	r2, [r4, #20]
 6088 004a 01EB8101 		add	r1, r1, r1, lsl #2
 6089              	.LVL444:
4025:base/os/FreeRTOS/Source/tasks.c **** 					{
 6090              		.loc 1 4025 10 view .LVU1699
 6091 004e 124B     		ldr	r3, .L495+4
 6092 0050 03EB8103 		add	r3, r3, r1, lsl #2
4025:base/os/FreeRTOS/Source/tasks.c **** 					{
 6093              		.loc 1 4025 113 view .LVU1700
 6094 0054 9A42     		cmp	r2, r3
 6095 0056 EBD1     		bne	.L480
4027:base/os/FreeRTOS/Source/tasks.c **** 						{
 6096              		.loc 1 4027 7 is_stmt 1 view .LVU1701
4027:base/os/FreeRTOS/Source/tasks.c **** 						{
 6097              		.loc 1 4027 11 is_stmt 0 view .LVU1702
 6098 0058 251D     		adds	r5, r4, #4
 6099 005a 2846     		mov	r0, r5
 6100              	.LVL445:
4027:base/os/FreeRTOS/Source/tasks.c **** 						{
 6101              		.loc 1 4027 11 view .LVU1703
 6102 005c FFF7FEFF 		bl	uxListRemove
 6103              	.LVL446:
4033:base/os/FreeRTOS/Source/tasks.c **** 						}
 6104              		.loc 1 4033 32 is_stmt 1 view .LVU1704
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6105              		.loc 1 4036 7 view .LVU1705
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6106              		.loc 1 4036 7 view .LVU1706
 6107 0060 E06A     		ldr	r0, [r4, #44]
 6108 0062 0E4B     		ldr	r3, .L495+8
 6109 0064 1B68     		ldr	r3, [r3]
 6110 0066 9842     		cmp	r0, r3
 6111 0068 01D9     		bls	.L488
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6112              		.loc 1 4036 7 discriminator 1 view .LVU1707
 6113 006a 0C4B     		ldr	r3, .L495+8
 6114 006c 1860     		str	r0, [r3]
 6115              	.L488:
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6116              		.loc 1 4036 7 discriminator 3 view .LVU1708
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6117              		.loc 1 4036 7 discriminator 3 view .LVU1709
 6118 006e 00EB8000 		add	r0, r0, r0, lsl #2
 6119 0072 2946     		mov	r1, r5
ARM GAS  /tmp/cchwbchh.s 			page 227


 6120 0074 084B     		ldr	r3, .L495+4
 6121 0076 03EB8000 		add	r0, r3, r0, lsl #2
 6122 007a FFF7FEFF 		bl	vListInsertEnd
 6123              	.LVL447:
4036:base/os/FreeRTOS/Source/tasks.c **** 					}
 6124              		.loc 1 4036 37 discriminator 3 view .LVU1710
4055:base/os/FreeRTOS/Source/tasks.c **** 		}
 6125              		.loc 1 4055 28 discriminator 3 view .LVU1711
4057:base/os/FreeRTOS/Source/tasks.c **** 
 6126              		.loc 1 4057 2 is_stmt 0 discriminator 3 view .LVU1712
 6127 007e D7E7     		b	.L480
 6128              	.LVL448:
 6129              	.L494:
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6130              		.loc 1 3999 6 is_stmt 1 view .LVU1713
 6131              	.LBB219:
 6132              	.LBI219:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6133              		.loc 2 191 30 view .LVU1714
 6134              	.LBB220:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6135              		.loc 2 193 1 view .LVU1715
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6136              		.loc 2 195 2 view .LVU1716
 6137              		.syntax unified
 6138              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6139 0080 4FF05003 			mov r3, #80												
 6140 0084 83F31188 		msr basepri, r3											
 6141 0088 BFF36F8F 		isb														
 6142 008c BFF34F8F 		dsb														
 6143              	
 6144              	@ 0 "" 2
 6145              	.LVL449:
 6146              		.thumb
 6147              		.syntax unified
 6148              	.L486:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6149              		.loc 2 195 2 is_stmt 0 view .LVU1717
 6150              	.LBE220:
 6151              	.LBE219:
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6152              		.loc 1 3999 6 is_stmt 1 discriminator 2 view .LVU1718
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6153              		.loc 1 3999 6 discriminator 2 view .LVU1719
 6154 0090 FEE7     		b	.L486
 6155              	.LVL450:
 6156              	.L490:
 6157              	.LCFI57:
 6158              		.cfi_def_cfa_offset 0
 6159              		.cfi_restore 3
 6160              		.cfi_restore 4
 6161              		.cfi_restore 5
 6162              		.cfi_restore 14
3999:base/os/FreeRTOS/Source/tasks.c **** 
 6163              		.loc 1 3999 6 is_stmt 0 discriminator 2 view .LVU1720
 6164 0092 7047     		bx	lr
 6165              	.L496:
ARM GAS  /tmp/cchwbchh.s 			page 228


 6166              		.align	2
 6167              	.L495:
 6168 0094 00000000 		.word	.LANCHOR10
 6169 0098 00000000 		.word	.LANCHOR4
 6170 009c 00000000 		.word	.LANCHOR13
 6171              		.cfi_endproc
 6172              	.LFE54:
 6174              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6175              		.align	1
 6176              		.global	uxTaskResetEventItemValue
 6177              		.syntax unified
 6178              		.thumb
 6179              		.thumb_func
 6180              		.fpu softvfp
 6182              	uxTaskResetEventItemValue:
 6183              	.LFB55:
4377:base/os/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 6184              		.loc 1 4377 1 is_stmt 1 view -0
 6185              		.cfi_startproc
 6186              		@ args = 0, pretend = 0, frame = 0
 6187              		@ frame_needed = 0, uses_anonymous_args = 0
 6188              		@ link register save eliminated.
4378:base/os/FreeRTOS/Source/tasks.c **** 
 6189              		.loc 1 4378 1 view .LVU1722
4380:base/os/FreeRTOS/Source/tasks.c **** 
 6190              		.loc 1 4380 2 view .LVU1723
4380:base/os/FreeRTOS/Source/tasks.c **** 
 6191              		.loc 1 4380 13 is_stmt 0 view .LVU1724
 6192 0000 044A     		ldr	r2, .L498
 6193 0002 1368     		ldr	r3, [r2]
4380:base/os/FreeRTOS/Source/tasks.c **** 
 6194              		.loc 1 4380 11 view .LVU1725
 6195 0004 9869     		ldr	r0, [r3, #24]
 6196              	.LVL451:
4384:base/os/FreeRTOS/Source/tasks.c **** 
 6197              		.loc 1 4384 2 is_stmt 1 view .LVU1726
 6198 0006 1368     		ldr	r3, [r2]
 6199 0008 DB6A     		ldr	r3, [r3, #44]
 6200 000a 1268     		ldr	r2, [r2]
 6201 000c C3F13803 		rsb	r3, r3, #56
 6202 0010 9361     		str	r3, [r2, #24]
4386:base/os/FreeRTOS/Source/tasks.c **** }
 6203              		.loc 1 4386 2 view .LVU1727
4387:base/os/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 6204              		.loc 1 4387 1 is_stmt 0 view .LVU1728
 6205 0012 7047     		bx	lr
 6206              	.L499:
 6207              		.align	2
 6208              	.L498:
 6209 0014 00000000 		.word	.LANCHOR10
 6210              		.cfi_endproc
 6211              	.LFE55:
 6213              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6214              		.align	1
 6215              		.global	pvTaskIncrementMutexHeldCount
 6216              		.syntax unified
 6217              		.thumb
ARM GAS  /tmp/cchwbchh.s 			page 229


 6218              		.thumb_func
 6219              		.fpu softvfp
 6221              	pvTaskIncrementMutexHeldCount:
 6222              	.LFB56:
4393:base/os/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 6223              		.loc 1 4393 2 is_stmt 1 view -0
 6224              		.cfi_startproc
 6225              		@ args = 0, pretend = 0, frame = 0
 6226              		@ frame_needed = 0, uses_anonymous_args = 0
 6227              		@ link register save eliminated.
4396:base/os/FreeRTOS/Source/tasks.c **** 		{
 6228              		.loc 1 4396 3 view .LVU1730
4396:base/os/FreeRTOS/Source/tasks.c **** 		{
 6229              		.loc 1 4396 20 is_stmt 0 view .LVU1731
 6230 0000 054B     		ldr	r3, .L502
 6231 0002 1B68     		ldr	r3, [r3]
4396:base/os/FreeRTOS/Source/tasks.c **** 		{
 6232              		.loc 1 4396 5 view .LVU1732
 6233 0004 23B1     		cbz	r3, .L501
4398:base/os/FreeRTOS/Source/tasks.c **** 		}
 6234              		.loc 1 4398 4 is_stmt 1 view .LVU1733
4398:base/os/FreeRTOS/Source/tasks.c **** 		}
 6235              		.loc 1 4398 18 is_stmt 0 view .LVU1734
 6236 0006 044B     		ldr	r3, .L502
 6237 0008 1A68     		ldr	r2, [r3]
 6238 000a 136D     		ldr	r3, [r2, #80]
4398:base/os/FreeRTOS/Source/tasks.c **** 		}
 6239              		.loc 1 4398 35 view .LVU1735
 6240 000c 0133     		adds	r3, r3, #1
 6241 000e 1365     		str	r3, [r2, #80]
 6242              	.L501:
4401:base/os/FreeRTOS/Source/tasks.c **** 	}
 6243              		.loc 1 4401 3 is_stmt 1 view .LVU1736
4401:base/os/FreeRTOS/Source/tasks.c **** 	}
 6244              		.loc 1 4401 10 is_stmt 0 view .LVU1737
 6245 0010 014B     		ldr	r3, .L502
 6246 0012 1868     		ldr	r0, [r3]
4402:base/os/FreeRTOS/Source/tasks.c **** 
 6247              		.loc 1 4402 2 view .LVU1738
 6248 0014 7047     		bx	lr
 6249              	.L503:
 6250 0016 00BF     		.align	2
 6251              	.L502:
 6252 0018 00000000 		.word	.LANCHOR10
 6253              		.cfi_endproc
 6254              	.LFE56:
 6256              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6257              		.align	1
 6258              		.global	ulTaskNotifyTake
 6259              		.syntax unified
 6260              		.thumb
 6261              		.thumb_func
 6262              		.fpu softvfp
 6264              	ulTaskNotifyTake:
 6265              	.LVL452:
 6266              	.LFB57:
4410:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
ARM GAS  /tmp/cchwbchh.s 			page 230


 6267              		.loc 1 4410 2 is_stmt 1 view -0
 6268              		.cfi_startproc
 6269              		@ args = 0, pretend = 0, frame = 0
 6270              		@ frame_needed = 0, uses_anonymous_args = 0
4410:base/os/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 6271              		.loc 1 4410 2 is_stmt 0 view .LVU1740
 6272 0000 38B5     		push	{r3, r4, r5, lr}
 6273              	.LCFI58:
 6274              		.cfi_def_cfa_offset 16
 6275              		.cfi_offset 3, -16
 6276              		.cfi_offset 4, -12
 6277              		.cfi_offset 5, -8
 6278              		.cfi_offset 14, -4
 6279 0002 0546     		mov	r5, r0
 6280 0004 0C46     		mov	r4, r1
4411:base/os/FreeRTOS/Source/tasks.c **** 
 6281              		.loc 1 4411 2 is_stmt 1 view .LVU1741
4413:base/os/FreeRTOS/Source/tasks.c **** 		{
 6282              		.loc 1 4413 3 view .LVU1742
 6283 0006 FFF7FEFF 		bl	vPortEnterCritical
 6284              	.LVL453:
4416:base/os/FreeRTOS/Source/tasks.c **** 			{
 6285              		.loc 1 4416 4 view .LVU1743
4416:base/os/FreeRTOS/Source/tasks.c **** 			{
 6286              		.loc 1 4416 20 is_stmt 0 view .LVU1744
 6287 000a 1A4B     		ldr	r3, .L510
 6288 000c 1B68     		ldr	r3, [r3]
 6289 000e 5B6D     		ldr	r3, [r3, #84]
4416:base/os/FreeRTOS/Source/tasks.c **** 			{
 6290              		.loc 1 4416 6 view .LVU1745
 6291 0010 2BB9     		cbnz	r3, .L505
4419:base/os/FreeRTOS/Source/tasks.c **** 
 6292              		.loc 1 4419 5 is_stmt 1 view .LVU1746
4419:base/os/FreeRTOS/Source/tasks.c **** 
 6293              		.loc 1 4419 17 is_stmt 0 view .LVU1747
 6294 0012 184B     		ldr	r3, .L510
 6295 0014 1B68     		ldr	r3, [r3]
4419:base/os/FreeRTOS/Source/tasks.c **** 
 6296              		.loc 1 4419 33 view .LVU1748
 6297 0016 0122     		movs	r2, #1
 6298 0018 83F85820 		strb	r2, [r3, #88]
4421:base/os/FreeRTOS/Source/tasks.c **** 				{
 6299              		.loc 1 4421 5 is_stmt 1 view .LVU1749
4421:base/os/FreeRTOS/Source/tasks.c **** 				{
 6300              		.loc 1 4421 7 is_stmt 0 view .LVU1750
 6301 001c ACB9     		cbnz	r4, .L509
 6302              	.L505:
4439:base/os/FreeRTOS/Source/tasks.c **** 			}
 6303              		.loc 1 4439 29 is_stmt 1 view .LVU1751
4442:base/os/FreeRTOS/Source/tasks.c **** 
 6304              		.loc 1 4442 3 view .LVU1752
 6305 001e FFF7FEFF 		bl	vPortExitCritical
 6306              	.LVL454:
4444:base/os/FreeRTOS/Source/tasks.c **** 		{
 6307              		.loc 1 4444 3 view .LVU1753
 6308 0022 FFF7FEFF 		bl	vPortEnterCritical
 6309              	.LVL455:
ARM GAS  /tmp/cchwbchh.s 			page 231


4446:base/os/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6310              		.loc 1 4446 27 view .LVU1754
4447:base/os/FreeRTOS/Source/tasks.c **** 
 6311              		.loc 1 4447 4 view .LVU1755
4447:base/os/FreeRTOS/Source/tasks.c **** 
 6312              		.loc 1 4447 27 is_stmt 0 view .LVU1756
 6313 0026 134B     		ldr	r3, .L510
 6314 0028 1B68     		ldr	r3, [r3]
4447:base/os/FreeRTOS/Source/tasks.c **** 
 6315              		.loc 1 4447 13 view .LVU1757
 6316 002a 5C6D     		ldr	r4, [r3, #84]
 6317              	.LVL456:
4449:base/os/FreeRTOS/Source/tasks.c **** 			{
 6318              		.loc 1 4449 4 is_stmt 1 view .LVU1758
4449:base/os/FreeRTOS/Source/tasks.c **** 			{
 6319              		.loc 1 4449 6 is_stmt 0 view .LVU1759
 6320 002c 24B1     		cbz	r4, .L506
4451:base/os/FreeRTOS/Source/tasks.c **** 				{
 6321              		.loc 1 4451 5 is_stmt 1 view .LVU1760
4451:base/os/FreeRTOS/Source/tasks.c **** 				{
 6322              		.loc 1 4451 7 is_stmt 0 view .LVU1761
 6323 002e DDB1     		cbz	r5, .L507
4453:base/os/FreeRTOS/Source/tasks.c **** 				}
 6324              		.loc 1 4453 6 is_stmt 1 view .LVU1762
4453:base/os/FreeRTOS/Source/tasks.c **** 				}
 6325              		.loc 1 4453 18 is_stmt 0 view .LVU1763
 6326 0030 104B     		ldr	r3, .L510
 6327 0032 1B68     		ldr	r3, [r3]
4453:base/os/FreeRTOS/Source/tasks.c **** 				}
 6328              		.loc 1 4453 36 view .LVU1764
 6329 0034 0022     		movs	r2, #0
 6330 0036 5A65     		str	r2, [r3, #84]
 6331              	.L506:
4462:base/os/FreeRTOS/Source/tasks.c **** 			}
 6332              		.loc 1 4462 29 is_stmt 1 view .LVU1765
4465:base/os/FreeRTOS/Source/tasks.c **** 		}
 6333              		.loc 1 4465 4 view .LVU1766
4465:base/os/FreeRTOS/Source/tasks.c **** 		}
 6334              		.loc 1 4465 16 is_stmt 0 view .LVU1767
 6335 0038 0E4B     		ldr	r3, .L510
 6336 003a 1B68     		ldr	r3, [r3]
4465:base/os/FreeRTOS/Source/tasks.c **** 		}
 6337              		.loc 1 4465 32 view .LVU1768
 6338 003c 0022     		movs	r2, #0
 6339 003e 83F85820 		strb	r2, [r3, #88]
4467:base/os/FreeRTOS/Source/tasks.c **** 
 6340              		.loc 1 4467 3 is_stmt 1 view .LVU1769
 6341 0042 FFF7FEFF 		bl	vPortExitCritical
 6342              	.LVL457:
4469:base/os/FreeRTOS/Source/tasks.c **** 	}
 6343              		.loc 1 4469 3 view .LVU1770
4470:base/os/FreeRTOS/Source/tasks.c **** 
 6344              		.loc 1 4470 2 is_stmt 0 view .LVU1771
 6345 0046 2046     		mov	r0, r4
 6346 0048 38BD     		pop	{r3, r4, r5, pc}
 6347              	.LVL458:
 6348              	.L509:
ARM GAS  /tmp/cchwbchh.s 			page 232


4423:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 6349              		.loc 1 4423 6 is_stmt 1 view .LVU1772
 6350 004a 1146     		mov	r1, r2
 6351 004c 2046     		mov	r0, r4
 6352 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6353              	.LVL459:
4424:base/os/FreeRTOS/Source/tasks.c **** 
 6354              		.loc 1 4424 35 view .LVU1773
4430:base/os/FreeRTOS/Source/tasks.c **** 				}
 6355              		.loc 1 4430 6 view .LVU1774
 6356 0052 4FF0E023 		mov	r3, #-536813568
 6357 0056 4FF08052 		mov	r2, #268435456
 6358 005a C3F8042D 		str	r2, [r3, #3332]
4430:base/os/FreeRTOS/Source/tasks.c **** 				}
 6359              		.loc 1 4430 6 view .LVU1775
 6360              		.syntax unified
 6361              	@ 4430 "base/os/FreeRTOS/Source/tasks.c" 1
 6362 005e BFF34F8F 		dsb
 6363              	@ 0 "" 2
4430:base/os/FreeRTOS/Source/tasks.c **** 				}
 6364              		.loc 1 4430 6 view .LVU1776
 6365              	@ 4430 "base/os/FreeRTOS/Source/tasks.c" 1
 6366 0062 BFF36F8F 		isb
 6367              	@ 0 "" 2
4430:base/os/FreeRTOS/Source/tasks.c **** 				}
 6368              		.loc 1 4430 28 view .LVU1777
 6369              		.thumb
 6370              		.syntax unified
 6371 0066 DAE7     		b	.L505
 6372              	.LVL460:
 6373              	.L507:
4457:base/os/FreeRTOS/Source/tasks.c **** 				}
 6374              		.loc 1 4457 6 view .LVU1778
4457:base/os/FreeRTOS/Source/tasks.c **** 				}
 6375              		.loc 1 4457 18 is_stmt 0 view .LVU1779
 6376 0068 024B     		ldr	r3, .L510
 6377 006a 1B68     		ldr	r3, [r3]
4457:base/os/FreeRTOS/Source/tasks.c **** 				}
 6378              		.loc 1 4457 47 view .LVU1780
 6379 006c 621E     		subs	r2, r4, #1
4457:base/os/FreeRTOS/Source/tasks.c **** 				}
 6380              		.loc 1 4457 36 view .LVU1781
 6381 006e 5A65     		str	r2, [r3, #84]
 6382 0070 E2E7     		b	.L506
 6383              	.L511:
 6384 0072 00BF     		.align	2
 6385              	.L510:
 6386 0074 00000000 		.word	.LANCHOR10
 6387              		.cfi_endproc
 6388              	.LFE57:
 6390              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6391              		.align	1
 6392              		.global	xTaskNotifyWait
 6393              		.syntax unified
 6394              		.thumb
 6395              		.thumb_func
 6396              		.fpu softvfp
ARM GAS  /tmp/cchwbchh.s 			page 233


 6398              	xTaskNotifyWait:
 6399              	.LVL461:
 6400              	.LFB58:
4478:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 6401              		.loc 1 4478 2 is_stmt 1 view -0
 6402              		.cfi_startproc
 6403              		@ args = 0, pretend = 0, frame = 0
 6404              		@ frame_needed = 0, uses_anonymous_args = 0
4478:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 6405              		.loc 1 4478 2 is_stmt 0 view .LVU1783
 6406 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6407              	.LCFI59:
 6408              		.cfi_def_cfa_offset 24
 6409              		.cfi_offset 3, -24
 6410              		.cfi_offset 4, -20
 6411              		.cfi_offset 5, -16
 6412              		.cfi_offset 6, -12
 6413              		.cfi_offset 7, -8
 6414              		.cfi_offset 14, -4
 6415 0002 0646     		mov	r6, r0
 6416 0004 0F46     		mov	r7, r1
 6417 0006 1446     		mov	r4, r2
 6418 0008 1D46     		mov	r5, r3
4479:base/os/FreeRTOS/Source/tasks.c **** 
 6419              		.loc 1 4479 2 is_stmt 1 view .LVU1784
4481:base/os/FreeRTOS/Source/tasks.c **** 		{
 6420              		.loc 1 4481 3 view .LVU1785
 6421 000a FFF7FEFF 		bl	vPortEnterCritical
 6422              	.LVL462:
4484:base/os/FreeRTOS/Source/tasks.c **** 			{
 6423              		.loc 1 4484 4 view .LVU1786
4484:base/os/FreeRTOS/Source/tasks.c **** 			{
 6424              		.loc 1 4484 20 is_stmt 0 view .LVU1787
 6425 000e 214B     		ldr	r3, .L520
 6426 0010 1B68     		ldr	r3, [r3]
 6427 0012 93F85820 		ldrb	r2, [r3, #88]	@ zero_extendqisi2
 6428 0016 D2B2     		uxtb	r2, r2
4484:base/os/FreeRTOS/Source/tasks.c **** 			{
 6429              		.loc 1 4484 6 view .LVU1788
 6430 0018 022A     		cmp	r2, #2
 6431 001a 0AD0     		beq	.L513
4489:base/os/FreeRTOS/Source/tasks.c **** 
 6432              		.loc 1 4489 5 is_stmt 1 view .LVU1789
4489:base/os/FreeRTOS/Source/tasks.c **** 
 6433              		.loc 1 4489 35 is_stmt 0 view .LVU1790
 6434 001c 1D4A     		ldr	r2, .L520
 6435 001e 1168     		ldr	r1, [r2]
 6436 0020 4B6D     		ldr	r3, [r1, #84]
 6437 0022 23EA0603 		bic	r3, r3, r6
 6438 0026 4B65     		str	r3, [r1, #84]
4492:base/os/FreeRTOS/Source/tasks.c **** 
 6439              		.loc 1 4492 5 is_stmt 1 view .LVU1791
4492:base/os/FreeRTOS/Source/tasks.c **** 
 6440              		.loc 1 4492 17 is_stmt 0 view .LVU1792
 6441 0028 1368     		ldr	r3, [r2]
4492:base/os/FreeRTOS/Source/tasks.c **** 
 6442              		.loc 1 4492 33 view .LVU1793
ARM GAS  /tmp/cchwbchh.s 			page 234


 6443 002a 0122     		movs	r2, #1
 6444 002c 83F85820 		strb	r2, [r3, #88]
4494:base/os/FreeRTOS/Source/tasks.c **** 				{
 6445              		.loc 1 4494 5 is_stmt 1 view .LVU1794
4494:base/os/FreeRTOS/Source/tasks.c **** 				{
 6446              		.loc 1 4494 7 is_stmt 0 view .LVU1795
 6447 0030 CDB9     		cbnz	r5, .L518
 6448              	.L513:
4512:base/os/FreeRTOS/Source/tasks.c **** 			}
 6449              		.loc 1 4512 29 is_stmt 1 view .LVU1796
4515:base/os/FreeRTOS/Source/tasks.c **** 
 6450              		.loc 1 4515 3 view .LVU1797
 6451 0032 FFF7FEFF 		bl	vPortExitCritical
 6452              	.LVL463:
4517:base/os/FreeRTOS/Source/tasks.c **** 		{
 6453              		.loc 1 4517 3 view .LVU1798
 6454 0036 FFF7FEFF 		bl	vPortEnterCritical
 6455              	.LVL464:
4519:base/os/FreeRTOS/Source/tasks.c **** 
 6456              		.loc 1 4519 27 view .LVU1799
4521:base/os/FreeRTOS/Source/tasks.c **** 			{
 6457              		.loc 1 4521 4 view .LVU1800
4521:base/os/FreeRTOS/Source/tasks.c **** 			{
 6458              		.loc 1 4521 6 is_stmt 0 view .LVU1801
 6459 003a 1CB1     		cbz	r4, .L514
4525:base/os/FreeRTOS/Source/tasks.c **** 			}
 6460              		.loc 1 4525 5 is_stmt 1 view .LVU1802
4525:base/os/FreeRTOS/Source/tasks.c **** 			}
 6461              		.loc 1 4525 41 is_stmt 0 view .LVU1803
 6462 003c 154B     		ldr	r3, .L520
 6463 003e 1B68     		ldr	r3, [r3]
 6464 0040 5B6D     		ldr	r3, [r3, #84]
4525:base/os/FreeRTOS/Source/tasks.c **** 			}
 6465              		.loc 1 4525 27 view .LVU1804
 6466 0042 2360     		str	r3, [r4]
 6467              	.L514:
4532:base/os/FreeRTOS/Source/tasks.c **** 			{
 6468              		.loc 1 4532 4 is_stmt 1 view .LVU1805
4532:base/os/FreeRTOS/Source/tasks.c **** 			{
 6469              		.loc 1 4532 20 is_stmt 0 view .LVU1806
 6470 0044 134B     		ldr	r3, .L520
 6471 0046 1B68     		ldr	r3, [r3]
 6472 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 6473 004c DBB2     		uxtb	r3, r3
4532:base/os/FreeRTOS/Source/tasks.c **** 			{
 6474              		.loc 1 4532 6 view .LVU1807
 6475 004e 022B     		cmp	r3, #2
 6476 0050 18D0     		beq	.L519
4535:base/os/FreeRTOS/Source/tasks.c **** 			}
 6477              		.loc 1 4535 13 view .LVU1808
 6478 0052 0024     		movs	r4, #0
 6479              	.LVL465:
 6480              	.L515:
4545:base/os/FreeRTOS/Source/tasks.c **** 		}
 6481              		.loc 1 4545 4 is_stmt 1 view .LVU1809
4545:base/os/FreeRTOS/Source/tasks.c **** 		}
 6482              		.loc 1 4545 16 is_stmt 0 view .LVU1810
ARM GAS  /tmp/cchwbchh.s 			page 235


 6483 0054 0F4B     		ldr	r3, .L520
 6484 0056 1B68     		ldr	r3, [r3]
4545:base/os/FreeRTOS/Source/tasks.c **** 		}
 6485              		.loc 1 4545 32 view .LVU1811
 6486 0058 0022     		movs	r2, #0
 6487 005a 83F85820 		strb	r2, [r3, #88]
4547:base/os/FreeRTOS/Source/tasks.c **** 
 6488              		.loc 1 4547 3 is_stmt 1 view .LVU1812
 6489 005e FFF7FEFF 		bl	vPortExitCritical
 6490              	.LVL466:
4549:base/os/FreeRTOS/Source/tasks.c **** 	}
 6491              		.loc 1 4549 3 view .LVU1813
4550:base/os/FreeRTOS/Source/tasks.c **** 
 6492              		.loc 1 4550 2 is_stmt 0 view .LVU1814
 6493 0062 2046     		mov	r0, r4
 6494 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6495              	.LVL467:
 6496              	.L518:
4496:base/os/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 6497              		.loc 1 4496 6 is_stmt 1 view .LVU1815
 6498 0066 1146     		mov	r1, r2
 6499 0068 2846     		mov	r0, r5
 6500 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6501              	.LVL468:
4497:base/os/FreeRTOS/Source/tasks.c **** 
 6502              		.loc 1 4497 35 view .LVU1816
4503:base/os/FreeRTOS/Source/tasks.c **** 				}
 6503              		.loc 1 4503 6 view .LVU1817
 6504 006e 4FF0E023 		mov	r3, #-536813568
 6505 0072 4FF08052 		mov	r2, #268435456
 6506 0076 C3F8042D 		str	r2, [r3, #3332]
4503:base/os/FreeRTOS/Source/tasks.c **** 				}
 6507              		.loc 1 4503 6 view .LVU1818
 6508              		.syntax unified
 6509              	@ 4503 "base/os/FreeRTOS/Source/tasks.c" 1
 6510 007a BFF34F8F 		dsb
 6511              	@ 0 "" 2
4503:base/os/FreeRTOS/Source/tasks.c **** 				}
 6512              		.loc 1 4503 6 view .LVU1819
 6513              	@ 4503 "base/os/FreeRTOS/Source/tasks.c" 1
 6514 007e BFF36F8F 		isb
 6515              	@ 0 "" 2
4503:base/os/FreeRTOS/Source/tasks.c **** 				}
 6516              		.loc 1 4503 28 view .LVU1820
 6517              		.thumb
 6518              		.syntax unified
 6519 0082 D6E7     		b	.L513
 6520              	.L519:
4541:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6521              		.loc 1 4541 5 view .LVU1821
4541:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6522              		.loc 1 4541 35 is_stmt 0 view .LVU1822
 6523 0084 034B     		ldr	r3, .L520
 6524 0086 1A68     		ldr	r2, [r3]
 6525 0088 536D     		ldr	r3, [r2, #84]
 6526 008a 23EA0703 		bic	r3, r3, r7
 6527 008e 5365     		str	r3, [r2, #84]
ARM GAS  /tmp/cchwbchh.s 			page 236


4542:base/os/FreeRTOS/Source/tasks.c **** 			}
 6528              		.loc 1 4542 5 is_stmt 1 view .LVU1823
 6529              	.LVL469:
4542:base/os/FreeRTOS/Source/tasks.c **** 			}
 6530              		.loc 1 4542 13 is_stmt 0 view .LVU1824
 6531 0090 0124     		movs	r4, #1
 6532              	.LVL470:
4542:base/os/FreeRTOS/Source/tasks.c **** 			}
 6533              		.loc 1 4542 13 view .LVU1825
 6534 0092 DFE7     		b	.L515
 6535              	.L521:
 6536              		.align	2
 6537              	.L520:
 6538 0094 00000000 		.word	.LANCHOR10
 6539              		.cfi_endproc
 6540              	.LFE58:
 6542              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6543              		.align	1
 6544              		.global	xTaskGenericNotify
 6545              		.syntax unified
 6546              		.thumb
 6547              		.thumb_func
 6548              		.fpu softvfp
 6550              	xTaskGenericNotify:
 6551              	.LVL471:
 6552              	.LFB59:
4558:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6553              		.loc 1 4558 2 is_stmt 1 view -0
 6554              		.cfi_startproc
 6555              		@ args = 0, pretend = 0, frame = 0
 6556              		@ frame_needed = 0, uses_anonymous_args = 0
4558:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6557              		.loc 1 4558 2 is_stmt 0 view .LVU1827
 6558 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6559              	.LCFI60:
 6560              		.cfi_def_cfa_offset 24
 6561              		.cfi_offset 3, -24
 6562              		.cfi_offset 4, -20
 6563              		.cfi_offset 5, -16
 6564              		.cfi_offset 6, -12
 6565              		.cfi_offset 7, -8
 6566              		.cfi_offset 14, -4
4559:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6567              		.loc 1 4559 2 is_stmt 1 view .LVU1828
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6568              		.loc 1 4560 2 view .LVU1829
 6569              	.LVL472:
4561:base/os/FreeRTOS/Source/tasks.c **** 
 6570              		.loc 1 4561 2 view .LVU1830
4563:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6571              		.loc 1 4563 3 view .LVU1831
 6572 0002 A8B1     		cbz	r0, .L539
 6573 0004 0E46     		mov	r6, r1
 6574 0006 1746     		mov	r7, r2
 6575 0008 1C46     		mov	r4, r3
 6576 000a 0546     		mov	r5, r0
4563:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
ARM GAS  /tmp/cchwbchh.s 			page 237


 6577              		.loc 1 4563 32 discriminator 2 view .LVU1832
4564:base/os/FreeRTOS/Source/tasks.c **** 
 6578              		.loc 1 4564 3 discriminator 2 view .LVU1833
 6579              	.LVL473:
4566:base/os/FreeRTOS/Source/tasks.c **** 		{
 6580              		.loc 1 4566 3 discriminator 2 view .LVU1834
 6581 000c FFF7FEFF 		bl	vPortEnterCritical
 6582              	.LVL474:
4568:base/os/FreeRTOS/Source/tasks.c **** 			{
 6583              		.loc 1 4568 4 discriminator 2 view .LVU1835
4568:base/os/FreeRTOS/Source/tasks.c **** 			{
 6584              		.loc 1 4568 6 is_stmt 0 discriminator 2 view .LVU1836
 6585 0010 0CB1     		cbz	r4, .L525
4570:base/os/FreeRTOS/Source/tasks.c **** 			}
 6586              		.loc 1 4570 5 is_stmt 1 view .LVU1837
4570:base/os/FreeRTOS/Source/tasks.c **** 			}
 6587              		.loc 1 4570 42 is_stmt 0 view .LVU1838
 6588 0012 6B6D     		ldr	r3, [r5, #84]
4570:base/os/FreeRTOS/Source/tasks.c **** 			}
 6589              		.loc 1 4570 35 view .LVU1839
 6590 0014 2360     		str	r3, [r4]
 6591              	.L525:
4573:base/os/FreeRTOS/Source/tasks.c **** 
 6592              		.loc 1 4573 4 is_stmt 1 view .LVU1840
4573:base/os/FreeRTOS/Source/tasks.c **** 
 6593              		.loc 1 4573 26 is_stmt 0 view .LVU1841
 6594 0016 95F85830 		ldrb	r3, [r5, #88]	@ zero_extendqisi2
 6595 001a DBB2     		uxtb	r3, r3
 6596              	.LVL475:
4575:base/os/FreeRTOS/Source/tasks.c **** 
 6597              		.loc 1 4575 4 is_stmt 1 view .LVU1842
4575:base/os/FreeRTOS/Source/tasks.c **** 
 6598              		.loc 1 4575 25 is_stmt 0 view .LVU1843
 6599 001c 0222     		movs	r2, #2
 6600 001e 85F85820 		strb	r2, [r5, #88]
4577:base/os/FreeRTOS/Source/tasks.c **** 			{
 6601              		.loc 1 4577 4 is_stmt 1 view .LVU1844
 6602 0022 7A1E     		subs	r2, r7, #1
 6603 0024 032A     		cmp	r2, #3
 6604 0026 23D8     		bhi	.L536
 6605 0028 DFE802F0 		tbb	[pc, r2]
 6606              	.L528:
 6607 002c 0B       		.byte	(.L531-.L528)/2
 6608 002d 15       		.byte	(.L530-.L528)/2
 6609 002e 1A       		.byte	(.L529-.L528)/2
 6610 002f 1D       		.byte	(.L527-.L528)/2
 6611              	.LVL476:
 6612              		.p2align 1
 6613              	.L539:
4563:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6614              		.loc 1 4563 3 view .LVU1845
 6615              	.LBB221:
 6616              	.LBI221:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6617              		.loc 2 191 30 view .LVU1846
 6618              	.LBB222:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cchwbchh.s 			page 238


 6619              		.loc 2 193 1 view .LVU1847
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6620              		.loc 2 195 2 view .LVU1848
 6621              		.syntax unified
 6622              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6623 0030 4FF05003 			mov r3, #80												
 6624 0034 83F31188 		msr basepri, r3											
 6625 0038 BFF36F8F 		isb														
 6626 003c BFF34F8F 		dsb														
 6627              	
 6628              	@ 0 "" 2
 6629              	.LVL477:
 6630              		.thumb
 6631              		.syntax unified
 6632              	.L524:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6633              		.loc 2 195 2 is_stmt 0 view .LVU1849
 6634              	.LBE222:
 6635              	.LBE221:
4563:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6636              		.loc 1 4563 3 is_stmt 1 discriminator 1 view .LVU1850
4563:base/os/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6637              		.loc 1 4563 3 discriminator 1 view .LVU1851
 6638 0040 FEE7     		b	.L524
 6639              	.LVL478:
 6640              	.L531:
4580:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6641              		.loc 1 4580 6 view .LVU1852
4580:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6642              		.loc 1 4580 29 is_stmt 0 view .LVU1853
 6643 0042 6A6D     		ldr	r2, [r5, #84]
 6644 0044 3243     		orrs	r2, r2, r6
 6645 0046 6A65     		str	r2, [r5, #84]
4581:base/os/FreeRTOS/Source/tasks.c **** 
 6646              		.loc 1 4581 6 is_stmt 1 view .LVU1854
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6647              		.loc 1 4560 13 is_stmt 0 view .LVU1855
 6648 0048 0124     		movs	r4, #1
 6649              	.LVL479:
 6650              	.L526:
4609:base/os/FreeRTOS/Source/tasks.c **** 
 6651              		.loc 1 4609 22 is_stmt 1 view .LVU1856
4613:base/os/FreeRTOS/Source/tasks.c **** 			{
 6652              		.loc 1 4613 4 view .LVU1857
4613:base/os/FreeRTOS/Source/tasks.c **** 			{
 6653              		.loc 1 4613 6 is_stmt 0 view .LVU1858
 6654 004a 012B     		cmp	r3, #1
 6655 004c 14D0     		beq	.L540
 6656              	.LVL480:
 6657              	.L532:
4650:base/os/FreeRTOS/Source/tasks.c **** 			}
 6658              		.loc 1 4650 29 is_stmt 1 view .LVU1859
4653:base/os/FreeRTOS/Source/tasks.c **** 
 6659              		.loc 1 4653 3 view .LVU1860
 6660 004e FFF7FEFF 		bl	vPortExitCritical
 6661              	.LVL481:
4655:base/os/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cchwbchh.s 			page 239


 6662              		.loc 1 4655 3 view .LVU1861
4656:base/os/FreeRTOS/Source/tasks.c **** 
 6663              		.loc 1 4656 2 is_stmt 0 view .LVU1862
 6664 0052 2046     		mov	r0, r4
 6665 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6666              	.LVL482:
 6667              	.L530:
4584:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6668              		.loc 1 4584 6 is_stmt 1 view .LVU1863
4584:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6669              		.loc 1 4584 13 is_stmt 0 view .LVU1864
 6670 0056 6A6D     		ldr	r2, [r5, #84]
4584:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6671              		.loc 1 4584 32 view .LVU1865
 6672 0058 0132     		adds	r2, r2, #1
 6673 005a 6A65     		str	r2, [r5, #84]
4585:base/os/FreeRTOS/Source/tasks.c **** 
 6674              		.loc 1 4585 6 is_stmt 1 view .LVU1866
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6675              		.loc 1 4560 13 is_stmt 0 view .LVU1867
 6676 005c 0124     		movs	r4, #1
 6677              	.LVL483:
4585:base/os/FreeRTOS/Source/tasks.c **** 
 6678              		.loc 1 4585 6 view .LVU1868
 6679 005e F4E7     		b	.L526
 6680              	.LVL484:
 6681              	.L529:
4588:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6682              		.loc 1 4588 6 is_stmt 1 view .LVU1869
4588:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6683              		.loc 1 4588 29 is_stmt 0 view .LVU1870
 6684 0060 6E65     		str	r6, [r5, #84]
4589:base/os/FreeRTOS/Source/tasks.c **** 
 6685              		.loc 1 4589 6 is_stmt 1 view .LVU1871
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6686              		.loc 1 4560 13 is_stmt 0 view .LVU1872
 6687 0062 0124     		movs	r4, #1
 6688              	.LVL485:
4589:base/os/FreeRTOS/Source/tasks.c **** 
 6689              		.loc 1 4589 6 view .LVU1873
 6690 0064 F1E7     		b	.L526
 6691              	.LVL486:
 6692              	.L527:
4592:base/os/FreeRTOS/Source/tasks.c **** 					{
 6693              		.loc 1 4592 6 is_stmt 1 view .LVU1874
4592:base/os/FreeRTOS/Source/tasks.c **** 					{
 6694              		.loc 1 4592 8 is_stmt 0 view .LVU1875
 6695 0066 022B     		cmp	r3, #2
 6696 0068 04D0     		beq	.L537
4594:base/os/FreeRTOS/Source/tasks.c **** 					}
 6697              		.loc 1 4594 7 is_stmt 1 view .LVU1876
4594:base/os/FreeRTOS/Source/tasks.c **** 					}
 6698              		.loc 1 4594 30 is_stmt 0 view .LVU1877
 6699 006a 6E65     		str	r6, [r5, #84]
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6700              		.loc 1 4560 13 view .LVU1878
 6701 006c 0124     		movs	r4, #1
ARM GAS  /tmp/cchwbchh.s 			page 240


 6702              	.LVL487:
4560:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6703              		.loc 1 4560 13 view .LVU1879
 6704 006e ECE7     		b	.L526
 6705              	.LVL488:
 6706              	.L536:
4577:base/os/FreeRTOS/Source/tasks.c **** 			{
 6707              		.loc 1 4577 4 view .LVU1880
 6708 0070 0124     		movs	r4, #1
 6709              	.LVL489:
4577:base/os/FreeRTOS/Source/tasks.c **** 			{
 6710              		.loc 1 4577 4 view .LVU1881
 6711 0072 EAE7     		b	.L526
 6712              	.LVL490:
 6713              	.L537:
4599:base/os/FreeRTOS/Source/tasks.c **** 					}
 6714              		.loc 1 4599 15 view .LVU1882
 6715 0074 0024     		movs	r4, #0
 6716              	.LVL491:
4599:base/os/FreeRTOS/Source/tasks.c **** 					}
 6717              		.loc 1 4599 15 view .LVU1883
 6718 0076 E8E7     		b	.L526
 6719              	.LVL492:
 6720              	.L540:
4615:base/os/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6721              		.loc 1 4615 5 is_stmt 1 view .LVU1884
4615:base/os/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6722              		.loc 1 4615 14 is_stmt 0 view .LVU1885
 6723 0078 2E1D     		adds	r6, r5, #4
 6724              	.LVL493:
4615:base/os/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6725              		.loc 1 4615 14 view .LVU1886
 6726 007a 3046     		mov	r0, r6
 6727 007c FFF7FEFF 		bl	uxListRemove
 6728              	.LVL494:
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6729              		.loc 1 4616 5 is_stmt 1 view .LVU1887
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6730              		.loc 1 4616 5 view .LVU1888
 6731 0080 E86A     		ldr	r0, [r5, #44]
 6732 0082 154B     		ldr	r3, .L541
 6733 0084 1B68     		ldr	r3, [r3]
 6734 0086 9842     		cmp	r0, r3
 6735 0088 01D9     		bls	.L533
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6736              		.loc 1 4616 5 discriminator 1 view .LVU1889
 6737 008a 134B     		ldr	r3, .L541
 6738 008c 1860     		str	r0, [r3]
 6739              	.L533:
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6740              		.loc 1 4616 5 discriminator 3 view .LVU1890
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6741              		.loc 1 4616 5 discriminator 3 view .LVU1891
 6742 008e 00EB8000 		add	r0, r0, r0, lsl #2
 6743 0092 3146     		mov	r1, r6
 6744 0094 114B     		ldr	r3, .L541+4
 6745 0096 03EB8000 		add	r0, r3, r0, lsl #2
ARM GAS  /tmp/cchwbchh.s 			page 241


 6746 009a FFF7FEFF 		bl	vListInsertEnd
 6747              	.LVL495:
4616:base/os/FreeRTOS/Source/tasks.c **** 
 6748              		.loc 1 4616 35 discriminator 3 view .LVU1892
4619:base/os/FreeRTOS/Source/tasks.c **** 
 6749              		.loc 1 4619 5 discriminator 3 view .LVU1893
 6750 009e AB6A     		ldr	r3, [r5, #40]
 6751 00a0 43B1     		cbz	r3, .L534
4619:base/os/FreeRTOS/Source/tasks.c **** 
 6752              		.loc 1 4619 5 view .LVU1894
 6753              	.LBB223:
 6754              	.LBI223:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6755              		.loc 2 191 30 view .LVU1895
 6756              	.LBB224:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6757              		.loc 2 193 1 view .LVU1896
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6758              		.loc 2 195 2 view .LVU1897
 6759              		.syntax unified
 6760              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6761 00a2 4FF05003 			mov r3, #80												
 6762 00a6 83F31188 		msr basepri, r3											
 6763 00aa BFF36F8F 		isb														
 6764 00ae BFF34F8F 		dsb														
 6765              	
 6766              	@ 0 "" 2
 6767              	.LVL496:
 6768              		.thumb
 6769              		.syntax unified
 6770              	.L535:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6771              		.loc 2 195 2 is_stmt 0 view .LVU1898
 6772              	.LBE224:
 6773              	.LBE223:
4619:base/os/FreeRTOS/Source/tasks.c **** 
 6774              		.loc 1 4619 5 is_stmt 1 discriminator 2 view .LVU1899
4619:base/os/FreeRTOS/Source/tasks.c **** 
 6775              		.loc 1 4619 5 discriminator 2 view .LVU1900
 6776 00b2 FEE7     		b	.L535
 6777              	.L534:
4619:base/os/FreeRTOS/Source/tasks.c **** 
 6778              		.loc 1 4619 82 discriminator 2 view .LVU1901
4637:base/os/FreeRTOS/Source/tasks.c **** 				{
 6779              		.loc 1 4637 5 discriminator 2 view .LVU1902
4637:base/os/FreeRTOS/Source/tasks.c **** 				{
 6780              		.loc 1 4637 14 is_stmt 0 discriminator 2 view .LVU1903
 6781 00b4 EA6A     		ldr	r2, [r5, #44]
4637:base/os/FreeRTOS/Source/tasks.c **** 				{
 6782              		.loc 1 4637 41 discriminator 2 view .LVU1904
 6783 00b6 0A4B     		ldr	r3, .L541+8
 6784 00b8 1B68     		ldr	r3, [r3]
 6785 00ba DB6A     		ldr	r3, [r3, #44]
4637:base/os/FreeRTOS/Source/tasks.c **** 				{
 6786              		.loc 1 4637 7 discriminator 2 view .LVU1905
 6787 00bc 9A42     		cmp	r2, r3
 6788 00be C6D9     		bls	.L532
ARM GAS  /tmp/cchwbchh.s 			page 242


4641:base/os/FreeRTOS/Source/tasks.c **** 				}
 6789              		.loc 1 4641 6 is_stmt 1 view .LVU1906
 6790 00c0 4FF0E023 		mov	r3, #-536813568
 6791 00c4 4FF08052 		mov	r2, #268435456
 6792 00c8 C3F8042D 		str	r2, [r3, #3332]
4641:base/os/FreeRTOS/Source/tasks.c **** 				}
 6793              		.loc 1 4641 6 view .LVU1907
 6794              		.syntax unified
 6795              	@ 4641 "base/os/FreeRTOS/Source/tasks.c" 1
 6796 00cc BFF34F8F 		dsb
 6797              	@ 0 "" 2
4641:base/os/FreeRTOS/Source/tasks.c **** 				}
 6798              		.loc 1 4641 6 view .LVU1908
 6799              	@ 4641 "base/os/FreeRTOS/Source/tasks.c" 1
 6800 00d0 BFF36F8F 		isb
 6801              	@ 0 "" 2
4641:base/os/FreeRTOS/Source/tasks.c **** 				}
 6802              		.loc 1 4641 37 view .LVU1909
 6803              		.thumb
 6804              		.syntax unified
 6805 00d4 BBE7     		b	.L532
 6806              	.L542:
 6807 00d6 00BF     		.align	2
 6808              	.L541:
 6809 00d8 00000000 		.word	.LANCHOR13
 6810 00dc 00000000 		.word	.LANCHOR4
 6811 00e0 00000000 		.word	.LANCHOR10
 6812              		.cfi_endproc
 6813              	.LFE59:
 6815              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6816              		.align	1
 6817              		.global	xTaskGenericNotifyFromISR
 6818              		.syntax unified
 6819              		.thumb
 6820              		.thumb_func
 6821              		.fpu softvfp
 6823              	xTaskGenericNotifyFromISR:
 6824              	.LVL497:
 6825              	.LFB60:
4664:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6826              		.loc 1 4664 2 view -0
 6827              		.cfi_startproc
 6828              		@ args = 4, pretend = 0, frame = 0
 6829              		@ frame_needed = 0, uses_anonymous_args = 0
4665:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6830              		.loc 1 4665 2 view .LVU1911
4666:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6831              		.loc 1 4666 2 view .LVU1912
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6832              		.loc 1 4667 2 view .LVU1913
4668:base/os/FreeRTOS/Source/tasks.c **** 
 6833              		.loc 1 4668 2 view .LVU1914
4670:base/os/FreeRTOS/Source/tasks.c **** 
 6834              		.loc 1 4670 3 view .LVU1915
 6835 0000 08B3     		cbz	r0, .L564
4664:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6836              		.loc 1 4664 2 is_stmt 0 discriminator 2 view .LVU1916
ARM GAS  /tmp/cchwbchh.s 			page 243


 6837 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6838              	.LCFI61:
 6839              		.cfi_def_cfa_offset 24
 6840              		.cfi_offset 4, -24
 6841              		.cfi_offset 5, -20
 6842              		.cfi_offset 6, -16
 6843              		.cfi_offset 7, -12
 6844              		.cfi_offset 8, -8
 6845              		.cfi_offset 14, -4
 6846 0006 0E46     		mov	r6, r1
 6847 0008 1746     		mov	r7, r2
 6848 000a 1C46     		mov	r4, r3
 6849 000c 0546     		mov	r5, r0
4670:base/os/FreeRTOS/Source/tasks.c **** 
 6850              		.loc 1 4670 32 is_stmt 1 discriminator 2 view .LVU1917
4688:base/os/FreeRTOS/Source/tasks.c **** 
 6851              		.loc 1 4688 3 discriminator 2 view .LVU1918
 6852 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 6853              	.LVL498:
4690:base/os/FreeRTOS/Source/tasks.c **** 
 6854              		.loc 1 4690 3 discriminator 2 view .LVU1919
4692:base/os/FreeRTOS/Source/tasks.c **** 		{
 6855              		.loc 1 4692 3 discriminator 2 view .LVU1920
 6856              	.LBB225:
 6857              	.LBI225:
 207:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6858              		.loc 2 207 34 discriminator 2 view .LVU1921
 6859              	.LBB226:
 209:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6860              		.loc 2 209 1 discriminator 2 view .LVU1922
 211:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6861              		.loc 2 211 2 discriminator 2 view .LVU1923
 6862              		.syntax unified
 6863              	@ 211 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6864 0012 EFF31188 			mrs r8, basepri											
 6865 0016 4FF05003 		mov r3, #80												
 6866 001a 83F31188 		msr basepri, r3											
 6867 001e BFF36F8F 		isb														
 6868 0022 BFF34F8F 		dsb														
 6869              	
 6870              	@ 0 "" 2
 6871              	.LVL499:
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 6872              		.loc 2 223 2 discriminator 2 view .LVU1924
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 6873              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU1925
 6874              		.thumb
 6875              		.syntax unified
 6876              	.LBE226:
 6877              	.LBE225:
4694:base/os/FreeRTOS/Source/tasks.c **** 			{
 6878              		.loc 1 4694 4 is_stmt 1 discriminator 2 view .LVU1926
4694:base/os/FreeRTOS/Source/tasks.c **** 			{
 6879              		.loc 1 4694 6 is_stmt 0 discriminator 2 view .LVU1927
 6880 0026 0CB1     		cbz	r4, .L546
4696:base/os/FreeRTOS/Source/tasks.c **** 			}
 6881              		.loc 1 4696 5 is_stmt 1 view .LVU1928
ARM GAS  /tmp/cchwbchh.s 			page 244


4696:base/os/FreeRTOS/Source/tasks.c **** 			}
 6882              		.loc 1 4696 42 is_stmt 0 view .LVU1929
 6883 0028 6B6D     		ldr	r3, [r5, #84]
4696:base/os/FreeRTOS/Source/tasks.c **** 			}
 6884              		.loc 1 4696 35 view .LVU1930
 6885 002a 2360     		str	r3, [r4]
 6886              	.L546:
4699:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6887              		.loc 1 4699 4 is_stmt 1 view .LVU1931
4699:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6888              		.loc 1 4699 26 is_stmt 0 view .LVU1932
 6889 002c 95F85830 		ldrb	r3, [r5, #88]	@ zero_extendqisi2
 6890 0030 DBB2     		uxtb	r3, r3
 6891              	.LVL500:
4700:base/os/FreeRTOS/Source/tasks.c **** 
 6892              		.loc 1 4700 4 is_stmt 1 view .LVU1933
4700:base/os/FreeRTOS/Source/tasks.c **** 
 6893              		.loc 1 4700 25 is_stmt 0 view .LVU1934
 6894 0032 0222     		movs	r2, #2
 6895 0034 85F85820 		strb	r2, [r5, #88]
4702:base/os/FreeRTOS/Source/tasks.c **** 			{
 6896              		.loc 1 4702 4 is_stmt 1 view .LVU1935
 6897 0038 7A1E     		subs	r2, r7, #1
 6898 003a 032A     		cmp	r2, #3
 6899 003c 24D8     		bhi	.L560
 6900 003e DFE802F0 		tbb	[pc, r2]
 6901              	.L549:
 6902 0042 0B       		.byte	(.L552-.L549)/2
 6903 0043 16       		.byte	(.L551-.L549)/2
 6904 0044 1B       		.byte	(.L550-.L549)/2
 6905 0045 1E       		.byte	(.L548-.L549)/2
 6906              	.LVL501:
 6907              		.p2align 1
 6908              	.L564:
 6909              	.LCFI62:
 6910              		.cfi_def_cfa_offset 0
 6911              		.cfi_restore 4
 6912              		.cfi_restore 5
 6913              		.cfi_restore 6
 6914              		.cfi_restore 7
 6915              		.cfi_restore 8
 6916              		.cfi_restore 14
4670:base/os/FreeRTOS/Source/tasks.c **** 
 6917              		.loc 1 4670 3 view .LVU1936
 6918              	.LBB227:
 6919              	.LBI227:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6920              		.loc 2 191 30 view .LVU1937
 6921              	.LBB228:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6922              		.loc 2 193 1 view .LVU1938
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6923              		.loc 2 195 2 view .LVU1939
 6924              		.syntax unified
 6925              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6926 0046 4FF05003 			mov r3, #80												
 6927 004a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cchwbchh.s 			page 245


 6928 004e BFF36F8F 		isb														
 6929 0052 BFF34F8F 		dsb														
 6930              	
 6931              	@ 0 "" 2
 6932              	.LVL502:
 6933              		.thumb
 6934              		.syntax unified
 6935              	.L545:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6936              		.loc 2 195 2 is_stmt 0 view .LVU1940
 6937              	.LBE228:
 6938              	.LBE227:
4670:base/os/FreeRTOS/Source/tasks.c **** 
 6939              		.loc 1 4670 3 is_stmt 1 discriminator 1 view .LVU1941
4670:base/os/FreeRTOS/Source/tasks.c **** 
 6940              		.loc 1 4670 3 discriminator 1 view .LVU1942
 6941 0056 FEE7     		b	.L545
 6942              	.LVL503:
 6943              	.L552:
 6944              	.LCFI63:
 6945              		.cfi_def_cfa_offset 24
 6946              		.cfi_offset 4, -24
 6947              		.cfi_offset 5, -20
 6948              		.cfi_offset 6, -16
 6949              		.cfi_offset 7, -12
 6950              		.cfi_offset 8, -8
 6951              		.cfi_offset 14, -4
4705:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6952              		.loc 1 4705 6 view .LVU1943
4705:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6953              		.loc 1 4705 29 is_stmt 0 view .LVU1944
 6954 0058 6A6D     		ldr	r2, [r5, #84]
 6955 005a 3243     		orrs	r2, r2, r6
 6956 005c 6A65     		str	r2, [r5, #84]
4706:base/os/FreeRTOS/Source/tasks.c **** 
 6957              		.loc 1 4706 6 is_stmt 1 view .LVU1945
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6958              		.loc 1 4667 13 is_stmt 0 view .LVU1946
 6959 005e 0124     		movs	r4, #1
 6960              	.LVL504:
 6961              	.L547:
4734:base/os/FreeRTOS/Source/tasks.c **** 
 6962              		.loc 1 4734 31 is_stmt 1 view .LVU1947
4738:base/os/FreeRTOS/Source/tasks.c **** 			{
 6963              		.loc 1 4738 4 view .LVU1948
4738:base/os/FreeRTOS/Source/tasks.c **** 			{
 6964              		.loc 1 4738 6 is_stmt 0 view .LVU1949
 6965 0060 012B     		cmp	r3, #1
 6966 0062 15D0     		beq	.L565
 6967              	.LVL505:
 6968              	.L553:
4773:base/os/FreeRTOS/Source/tasks.c **** 				}
 6969              		.loc 1 4773 30 is_stmt 1 view .LVU1950
4777:base/os/FreeRTOS/Source/tasks.c **** 
 6970              		.loc 1 4777 3 view .LVU1951
 6971              	.LBB229:
 6972              	.LBI229:
ARM GAS  /tmp/cchwbchh.s 			page 246


 227:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 6973              		.loc 2 227 30 view .LVU1952
 6974              	.LBB230:
 6975              		.loc 2 229 2 view .LVU1953
 6976              		.syntax unified
 6977              	@ 229 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6978 0064 88F31188 			msr basepri, r8	
 6979              	@ 0 "" 2
 6980              		.thumb
 6981              		.syntax unified
 6982              	.LBE230:
 6983              	.LBE229:
4779:base/os/FreeRTOS/Source/tasks.c **** 	}
 6984              		.loc 1 4779 3 view .LVU1954
4780:base/os/FreeRTOS/Source/tasks.c **** 
 6985              		.loc 1 4780 2 is_stmt 0 view .LVU1955
 6986 0068 2046     		mov	r0, r4
 6987 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6988              	.LVL506:
 6989              	.L551:
4709:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6990              		.loc 1 4709 6 is_stmt 1 view .LVU1956
4709:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6991              		.loc 1 4709 13 is_stmt 0 view .LVU1957
 6992 006e 6A6D     		ldr	r2, [r5, #84]
4709:base/os/FreeRTOS/Source/tasks.c **** 					break;
 6993              		.loc 1 4709 32 view .LVU1958
 6994 0070 0132     		adds	r2, r2, #1
 6995 0072 6A65     		str	r2, [r5, #84]
4710:base/os/FreeRTOS/Source/tasks.c **** 
 6996              		.loc 1 4710 6 is_stmt 1 view .LVU1959
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6997              		.loc 1 4667 13 is_stmt 0 view .LVU1960
 6998 0074 0124     		movs	r4, #1
 6999              	.LVL507:
4710:base/os/FreeRTOS/Source/tasks.c **** 
 7000              		.loc 1 4710 6 view .LVU1961
 7001 0076 F3E7     		b	.L547
 7002              	.LVL508:
 7003              	.L550:
4713:base/os/FreeRTOS/Source/tasks.c **** 					break;
 7004              		.loc 1 4713 6 is_stmt 1 view .LVU1962
4713:base/os/FreeRTOS/Source/tasks.c **** 					break;
 7005              		.loc 1 4713 29 is_stmt 0 view .LVU1963
 7006 0078 6E65     		str	r6, [r5, #84]
4714:base/os/FreeRTOS/Source/tasks.c **** 
 7007              		.loc 1 4714 6 is_stmt 1 view .LVU1964
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7008              		.loc 1 4667 13 is_stmt 0 view .LVU1965
 7009 007a 0124     		movs	r4, #1
 7010              	.LVL509:
4714:base/os/FreeRTOS/Source/tasks.c **** 
 7011              		.loc 1 4714 6 view .LVU1966
 7012 007c F0E7     		b	.L547
 7013              	.LVL510:
 7014              	.L548:
4717:base/os/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cchwbchh.s 			page 247


 7015              		.loc 1 4717 6 is_stmt 1 view .LVU1967
4717:base/os/FreeRTOS/Source/tasks.c **** 					{
 7016              		.loc 1 4717 8 is_stmt 0 view .LVU1968
 7017 007e 022B     		cmp	r3, #2
 7018 0080 04D0     		beq	.L561
4719:base/os/FreeRTOS/Source/tasks.c **** 					}
 7019              		.loc 1 4719 7 is_stmt 1 view .LVU1969
4719:base/os/FreeRTOS/Source/tasks.c **** 					}
 7020              		.loc 1 4719 30 is_stmt 0 view .LVU1970
 7021 0082 6E65     		str	r6, [r5, #84]
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7022              		.loc 1 4667 13 view .LVU1971
 7023 0084 0124     		movs	r4, #1
 7024              	.LVL511:
4667:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7025              		.loc 1 4667 13 view .LVU1972
 7026 0086 EBE7     		b	.L547
 7027              	.LVL512:
 7028              	.L560:
4702:base/os/FreeRTOS/Source/tasks.c **** 			{
 7029              		.loc 1 4702 4 view .LVU1973
 7030 0088 0124     		movs	r4, #1
 7031              	.LVL513:
4702:base/os/FreeRTOS/Source/tasks.c **** 			{
 7032              		.loc 1 4702 4 view .LVU1974
 7033 008a E9E7     		b	.L547
 7034              	.LVL514:
 7035              	.L561:
4724:base/os/FreeRTOS/Source/tasks.c **** 					}
 7036              		.loc 1 4724 15 view .LVU1975
 7037 008c 0024     		movs	r4, #0
 7038              	.LVL515:
4724:base/os/FreeRTOS/Source/tasks.c **** 					}
 7039              		.loc 1 4724 15 view .LVU1976
 7040 008e E7E7     		b	.L547
 7041              	.LVL516:
 7042              	.L565:
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7043              		.loc 1 4741 5 is_stmt 1 view .LVU1977
 7044 0090 AB6A     		ldr	r3, [r5, #40]
 7045              	.LVL517:
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7046              		.loc 1 4741 5 is_stmt 0 view .LVU1978
 7047 0092 43B1     		cbz	r3, .L554
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7048              		.loc 1 4741 5 is_stmt 1 view .LVU1979
 7049              	.LBB231:
 7050              	.LBI231:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 7051              		.loc 2 191 30 view .LVU1980
 7052              	.LBB232:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7053              		.loc 2 193 1 view .LVU1981
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7054              		.loc 2 195 2 view .LVU1982
 7055              		.syntax unified
 7056              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cchwbchh.s 			page 248


 7057 0094 4FF05003 			mov r3, #80												
 7058 0098 83F31188 		msr basepri, r3											
 7059 009c BFF36F8F 		isb														
 7060 00a0 BFF34F8F 		dsb														
 7061              	
 7062              	@ 0 "" 2
 7063              	.LVL518:
 7064              		.thumb
 7065              		.syntax unified
 7066              	.L555:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7067              		.loc 2 195 2 is_stmt 0 view .LVU1983
 7068              	.LBE232:
 7069              	.LBE231:
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7070              		.loc 1 4741 5 is_stmt 1 discriminator 2 view .LVU1984
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7071              		.loc 1 4741 5 discriminator 2 view .LVU1985
 7072 00a4 FEE7     		b	.L555
 7073              	.L554:
4741:base/os/FreeRTOS/Source/tasks.c **** 
 7074              		.loc 1 4741 82 discriminator 2 view .LVU1986
4743:base/os/FreeRTOS/Source/tasks.c **** 				{
 7075              		.loc 1 4743 5 discriminator 2 view .LVU1987
4743:base/os/FreeRTOS/Source/tasks.c **** 				{
 7076              		.loc 1 4743 30 is_stmt 0 discriminator 2 view .LVU1988
 7077 00a6 164B     		ldr	r3, .L566
 7078 00a8 1B68     		ldr	r3, [r3]
4743:base/os/FreeRTOS/Source/tasks.c **** 				{
 7079              		.loc 1 4743 7 discriminator 2 view .LVU1989
 7080 00aa F3B9     		cbnz	r3, .L556
4745:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7081              		.loc 1 4745 6 is_stmt 1 view .LVU1990
4745:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7082              		.loc 1 4745 15 is_stmt 0 view .LVU1991
 7083 00ac 2E1D     		adds	r6, r5, #4
 7084              	.LVL519:
4745:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7085              		.loc 1 4745 15 view .LVU1992
 7086 00ae 3046     		mov	r0, r6
 7087 00b0 FFF7FEFF 		bl	uxListRemove
 7088              	.LVL520:
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
 7089              		.loc 1 4746 6 is_stmt 1 view .LVU1993
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
 7090              		.loc 1 4746 6 view .LVU1994
 7091 00b4 E86A     		ldr	r0, [r5, #44]
 7092 00b6 134B     		ldr	r3, .L566+4
 7093 00b8 1B68     		ldr	r3, [r3]
 7094 00ba 9842     		cmp	r0, r3
 7095 00bc 01D9     		bls	.L557
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
 7096              		.loc 1 4746 6 discriminator 1 view .LVU1995
 7097 00be 114B     		ldr	r3, .L566+4
 7098 00c0 1860     		str	r0, [r3]
 7099              	.L557:
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cchwbchh.s 			page 249


 7100              		.loc 1 4746 6 discriminator 3 view .LVU1996
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
 7101              		.loc 1 4746 6 discriminator 3 view .LVU1997
 7102 00c2 00EB8000 		add	r0, r0, r0, lsl #2
 7103 00c6 3146     		mov	r1, r6
 7104 00c8 0F4B     		ldr	r3, .L566+8
 7105 00ca 03EB8000 		add	r0, r3, r0, lsl #2
 7106 00ce FFF7FEFF 		bl	vListInsertEnd
 7107              	.LVL521:
4746:base/os/FreeRTOS/Source/tasks.c **** 				}
 7108              		.loc 1 4746 36 discriminator 3 view .LVU1998
 7109              	.L558:
4755:base/os/FreeRTOS/Source/tasks.c **** 				{
 7110              		.loc 1 4755 5 view .LVU1999
4755:base/os/FreeRTOS/Source/tasks.c **** 				{
 7111              		.loc 1 4755 14 is_stmt 0 view .LVU2000
 7112 00d2 EA6A     		ldr	r2, [r5, #44]
4755:base/os/FreeRTOS/Source/tasks.c **** 				{
 7113              		.loc 1 4755 41 view .LVU2001
 7114 00d4 0D4B     		ldr	r3, .L566+12
 7115 00d6 1B68     		ldr	r3, [r3]
 7116 00d8 DB6A     		ldr	r3, [r3, #44]
4755:base/os/FreeRTOS/Source/tasks.c **** 				{
 7117              		.loc 1 4755 7 view .LVU2002
 7118 00da 9A42     		cmp	r2, r3
 7119 00dc C2D9     		bls	.L553
4759:base/os/FreeRTOS/Source/tasks.c **** 					{
 7120              		.loc 1 4759 6 is_stmt 1 view .LVU2003
4759:base/os/FreeRTOS/Source/tasks.c **** 					{
 7121              		.loc 1 4759 8 is_stmt 0 view .LVU2004
 7122 00de 069B     		ldr	r3, [sp, #24]
 7123 00e0 4BB1     		cbz	r3, .L559
4761:base/os/FreeRTOS/Source/tasks.c **** 					}
 7124              		.loc 1 4761 7 is_stmt 1 view .LVU2005
4761:base/os/FreeRTOS/Source/tasks.c **** 					}
 7125              		.loc 1 4761 34 is_stmt 0 view .LVU2006
 7126 00e2 0123     		movs	r3, #1
 7127 00e4 069A     		ldr	r2, [sp, #24]
 7128 00e6 1360     		str	r3, [r2]
 7129 00e8 BCE7     		b	.L553
 7130              	.LVL522:
 7131              	.L556:
4752:base/os/FreeRTOS/Source/tasks.c **** 				}
 7132              		.loc 1 4752 6 is_stmt 1 view .LVU2007
 7133 00ea 05F11801 		add	r1, r5, #24
 7134 00ee 0848     		ldr	r0, .L566+16
 7135 00f0 FFF7FEFF 		bl	vListInsertEnd
 7136              	.LVL523:
 7137 00f4 EDE7     		b	.L558
 7138              	.LVL524:
 7139              	.L559:
4768:base/os/FreeRTOS/Source/tasks.c **** 					}
 7140              		.loc 1 4768 7 view .LVU2008
4768:base/os/FreeRTOS/Source/tasks.c **** 					}
 7141              		.loc 1 4768 21 is_stmt 0 view .LVU2009
 7142 00f6 074B     		ldr	r3, .L566+20
 7143 00f8 0122     		movs	r2, #1
ARM GAS  /tmp/cchwbchh.s 			page 250


 7144 00fa 1A60     		str	r2, [r3]
 7145 00fc B2E7     		b	.L553
 7146              	.L567:
 7147 00fe 00BF     		.align	2
 7148              	.L566:
 7149 0100 00000000 		.word	.LANCHOR16
 7150 0104 00000000 		.word	.LANCHOR13
 7151 0108 00000000 		.word	.LANCHOR4
 7152 010c 00000000 		.word	.LANCHOR10
 7153 0110 00000000 		.word	.LANCHOR1
 7154 0114 00000000 		.word	.LANCHOR20
 7155              		.cfi_endproc
 7156              	.LFE60:
 7158              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7159              		.align	1
 7160              		.global	vTaskNotifyGiveFromISR
 7161              		.syntax unified
 7162              		.thumb
 7163              		.thumb_func
 7164              		.fpu softvfp
 7166              	vTaskNotifyGiveFromISR:
 7167              	.LVL525:
 7168              	.LFB61:
4788:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7169              		.loc 1 4788 2 is_stmt 1 view -0
 7170              		.cfi_startproc
 7171              		@ args = 0, pretend = 0, frame = 0
 7172              		@ frame_needed = 0, uses_anonymous_args = 0
4788:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7173              		.loc 1 4788 2 is_stmt 0 view .LVU2011
 7174 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7175              	.LCFI64:
 7176              		.cfi_def_cfa_offset 24
 7177              		.cfi_offset 3, -24
 7178              		.cfi_offset 4, -20
 7179              		.cfi_offset 5, -16
 7180              		.cfi_offset 6, -12
 7181              		.cfi_offset 7, -8
 7182              		.cfi_offset 14, -4
4789:base/os/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 7183              		.loc 1 4789 2 is_stmt 1 view .LVU2012
4790:base/os/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7184              		.loc 1 4790 2 view .LVU2013
4791:base/os/FreeRTOS/Source/tasks.c **** 
 7185              		.loc 1 4791 2 view .LVU2014
4793:base/os/FreeRTOS/Source/tasks.c **** 
 7186              		.loc 1 4793 3 view .LVU2015
 7187 0002 E0B1     		cbz	r0, .L579
 7188 0004 0D46     		mov	r5, r1
 7189 0006 0446     		mov	r4, r0
4793:base/os/FreeRTOS/Source/tasks.c **** 
 7190              		.loc 1 4793 32 discriminator 2 view .LVU2016
4811:base/os/FreeRTOS/Source/tasks.c **** 
 7191              		.loc 1 4811 3 discriminator 2 view .LVU2017
 7192 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7193              	.LVL526:
4813:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 251


 7194              		.loc 1 4813 3 discriminator 2 view .LVU2018
4815:base/os/FreeRTOS/Source/tasks.c **** 		{
 7195              		.loc 1 4815 3 discriminator 2 view .LVU2019
 7196              	.LBB233:
 7197              	.LBI233:
 207:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 7198              		.loc 2 207 34 discriminator 2 view .LVU2020
 7199              	.LBB234:
 209:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7200              		.loc 2 209 1 discriminator 2 view .LVU2021
 211:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7201              		.loc 2 211 2 discriminator 2 view .LVU2022
 7202              		.syntax unified
 7203              	@ 211 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7204 000c EFF31183 			mrs r3, basepri											
 7205 0010 4FF05002 		mov r2, #80												
 7206 0014 82F31188 		msr basepri, r2											
 7207 0018 BFF36F8F 		isb														
 7208 001c BFF34F8F 		dsb														
 7209              	
 7210              	@ 0 "" 2
 7211              		.thumb
 7212              		.syntax unified
 7213 0020 1E46     		mov	r6, r3
 7214              	.LVL527:
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 7215              		.loc 2 223 2 discriminator 2 view .LVU2023
 223:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 7216              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU2024
 7217              	.LBE234:
 7218              	.LBE233:
4817:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7219              		.loc 1 4817 4 is_stmt 1 discriminator 2 view .LVU2025
4817:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7220              		.loc 1 4817 26 is_stmt 0 discriminator 2 view .LVU2026
 7221 0022 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 7222              	.LVL528:
4817:base/os/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7223              		.loc 1 4817 26 discriminator 2 view .LVU2027
 7224 0026 DBB2     		uxtb	r3, r3
 7225              	.LVL529:
4818:base/os/FreeRTOS/Source/tasks.c **** 
 7226              		.loc 1 4818 4 is_stmt 1 discriminator 2 view .LVU2028
4818:base/os/FreeRTOS/Source/tasks.c **** 
 7227              		.loc 1 4818 25 is_stmt 0 discriminator 2 view .LVU2029
 7228 0028 0222     		movs	r2, #2
 7229 002a 84F85820 		strb	r2, [r4, #88]
4822:base/os/FreeRTOS/Source/tasks.c **** 
 7230              		.loc 1 4822 4 is_stmt 1 discriminator 2 view .LVU2030
4822:base/os/FreeRTOS/Source/tasks.c **** 
 7231              		.loc 1 4822 11 is_stmt 0 discriminator 2 view .LVU2031
 7232 002e 626D     		ldr	r2, [r4, #84]
4822:base/os/FreeRTOS/Source/tasks.c **** 
 7233              		.loc 1 4822 30 discriminator 2 view .LVU2032
 7234 0030 0132     		adds	r2, r2, #1
 7235 0032 6265     		str	r2, [r4, #84]
4824:base/os/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cchwbchh.s 			page 252


 7236              		.loc 1 4824 36 is_stmt 1 discriminator 2 view .LVU2033
4828:base/os/FreeRTOS/Source/tasks.c **** 			{
 7237              		.loc 1 4828 4 discriminator 2 view .LVU2034
4828:base/os/FreeRTOS/Source/tasks.c **** 			{
 7238              		.loc 1 4828 6 is_stmt 0 discriminator 2 view .LVU2035
 7239 0034 012B     		cmp	r3, #1
 7240 0036 0BD0     		beq	.L580
 7241              	.LVL530:
 7242              	.L571:
4863:base/os/FreeRTOS/Source/tasks.c **** 				}
 7243              		.loc 1 4863 30 is_stmt 1 view .LVU2036
4867:base/os/FreeRTOS/Source/tasks.c **** 	}
 7244              		.loc 1 4867 3 view .LVU2037
 7245              	.LBB235:
 7246              	.LBI235:
 227:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 7247              		.loc 2 227 30 view .LVU2038
 7248              	.LBB236:
 7249              		.loc 2 229 2 view .LVU2039
 7250              		.syntax unified
 7251              	@ 229 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7252 0038 86F31188 			msr basepri, r6	
 7253              	@ 0 "" 2
 7254              		.thumb
 7255              		.syntax unified
 7256              	.LBE236:
 7257              	.LBE235:
4868:base/os/FreeRTOS/Source/tasks.c **** 
 7258              		.loc 1 4868 2 is_stmt 0 view .LVU2040
 7259 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7260              	.LVL531:
 7261              	.L579:
4793:base/os/FreeRTOS/Source/tasks.c **** 
 7262              		.loc 1 4793 3 is_stmt 1 view .LVU2041
 7263              	.LBB237:
 7264              	.LBI237:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 7265              		.loc 2 191 30 view .LVU2042
 7266              	.LBB238:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7267              		.loc 2 193 1 view .LVU2043
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7268              		.loc 2 195 2 view .LVU2044
 7269              		.syntax unified
 7270              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7271 003e 4FF05003 			mov r3, #80												
 7272 0042 83F31188 		msr basepri, r3											
 7273 0046 BFF36F8F 		isb														
 7274 004a BFF34F8F 		dsb														
 7275              	
 7276              	@ 0 "" 2
 7277              	.LVL532:
 7278              		.thumb
 7279              		.syntax unified
 7280              	.L570:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7281              		.loc 2 195 2 is_stmt 0 view .LVU2045
ARM GAS  /tmp/cchwbchh.s 			page 253


 7282              	.LBE238:
 7283              	.LBE237:
4793:base/os/FreeRTOS/Source/tasks.c **** 
 7284              		.loc 1 4793 3 is_stmt 1 discriminator 1 view .LVU2046
4793:base/os/FreeRTOS/Source/tasks.c **** 
 7285              		.loc 1 4793 3 discriminator 1 view .LVU2047
 7286 004e FEE7     		b	.L570
 7287              	.LVL533:
 7288              	.L580:
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7289              		.loc 1 4831 5 view .LVU2048
 7290 0050 A36A     		ldr	r3, [r4, #40]
 7291              	.LVL534:
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7292              		.loc 1 4831 5 is_stmt 0 view .LVU2049
 7293 0052 43B1     		cbz	r3, .L572
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7294              		.loc 1 4831 5 is_stmt 1 view .LVU2050
 7295              	.LBB239:
 7296              	.LBI239:
 191:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 7297              		.loc 2 191 30 view .LVU2051
 7298              	.LBB240:
 193:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7299              		.loc 2 193 1 view .LVU2052
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7300              		.loc 2 195 2 view .LVU2053
 7301              		.syntax unified
 7302              	@ 195 "base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7303 0054 4FF05003 			mov r3, #80												
 7304 0058 83F31188 		msr basepri, r3											
 7305 005c BFF36F8F 		isb														
 7306 0060 BFF34F8F 		dsb														
 7307              	
 7308              	@ 0 "" 2
 7309              	.LVL535:
 7310              		.thumb
 7311              		.syntax unified
 7312              	.L573:
 195:base/os/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7313              		.loc 2 195 2 is_stmt 0 view .LVU2054
 7314              	.LBE240:
 7315              	.LBE239:
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7316              		.loc 1 4831 5 is_stmt 1 discriminator 2 view .LVU2055
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7317              		.loc 1 4831 5 discriminator 2 view .LVU2056
 7318 0064 FEE7     		b	.L573
 7319              	.L572:
4831:base/os/FreeRTOS/Source/tasks.c **** 
 7320              		.loc 1 4831 82 discriminator 2 view .LVU2057
4833:base/os/FreeRTOS/Source/tasks.c **** 				{
 7321              		.loc 1 4833 5 discriminator 2 view .LVU2058
4833:base/os/FreeRTOS/Source/tasks.c **** 				{
 7322              		.loc 1 4833 30 is_stmt 0 discriminator 2 view .LVU2059
 7323 0066 154B     		ldr	r3, .L581
 7324 0068 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cchwbchh.s 			page 254


4833:base/os/FreeRTOS/Source/tasks.c **** 				{
 7325              		.loc 1 4833 7 discriminator 2 view .LVU2060
 7326 006a E3B9     		cbnz	r3, .L574
4835:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7327              		.loc 1 4835 6 is_stmt 1 view .LVU2061
4835:base/os/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7328              		.loc 1 4835 15 is_stmt 0 view .LVU2062
 7329 006c 271D     		adds	r7, r4, #4
 7330 006e 3846     		mov	r0, r7
 7331 0070 FFF7FEFF 		bl	uxListRemove
 7332              	.LVL536:
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7333              		.loc 1 4836 6 is_stmt 1 view .LVU2063
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7334              		.loc 1 4836 6 view .LVU2064
 7335 0074 E06A     		ldr	r0, [r4, #44]
 7336 0076 124B     		ldr	r3, .L581+4
 7337 0078 1B68     		ldr	r3, [r3]
 7338 007a 9842     		cmp	r0, r3
 7339 007c 01D9     		bls	.L575
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7340              		.loc 1 4836 6 discriminator 1 view .LVU2065
 7341 007e 104B     		ldr	r3, .L581+4
 7342 0080 1860     		str	r0, [r3]
 7343              	.L575:
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7344              		.loc 1 4836 6 discriminator 3 view .LVU2066
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7345              		.loc 1 4836 6 discriminator 3 view .LVU2067
 7346 0082 00EB8000 		add	r0, r0, r0, lsl #2
 7347 0086 3946     		mov	r1, r7
 7348 0088 0E4B     		ldr	r3, .L581+8
 7349 008a 03EB8000 		add	r0, r3, r0, lsl #2
 7350 008e FFF7FEFF 		bl	vListInsertEnd
 7351              	.LVL537:
4836:base/os/FreeRTOS/Source/tasks.c **** 				}
 7352              		.loc 1 4836 36 discriminator 3 view .LVU2068
 7353              	.L576:
4845:base/os/FreeRTOS/Source/tasks.c **** 				{
 7354              		.loc 1 4845 5 view .LVU2069
4845:base/os/FreeRTOS/Source/tasks.c **** 				{
 7355              		.loc 1 4845 14 is_stmt 0 view .LVU2070
 7356 0092 E26A     		ldr	r2, [r4, #44]
4845:base/os/FreeRTOS/Source/tasks.c **** 				{
 7357              		.loc 1 4845 41 view .LVU2071
 7358 0094 0C4B     		ldr	r3, .L581+12
 7359 0096 1B68     		ldr	r3, [r3]
 7360 0098 DB6A     		ldr	r3, [r3, #44]
4845:base/os/FreeRTOS/Source/tasks.c **** 				{
 7361              		.loc 1 4845 7 view .LVU2072
 7362 009a 9A42     		cmp	r2, r3
 7363 009c CCD9     		bls	.L571
4849:base/os/FreeRTOS/Source/tasks.c **** 					{
 7364              		.loc 1 4849 6 is_stmt 1 view .LVU2073
4849:base/os/FreeRTOS/Source/tasks.c **** 					{
 7365              		.loc 1 4849 8 is_stmt 0 view .LVU2074
 7366 009e 45B1     		cbz	r5, .L577
ARM GAS  /tmp/cchwbchh.s 			page 255


4851:base/os/FreeRTOS/Source/tasks.c **** 					}
 7367              		.loc 1 4851 7 is_stmt 1 view .LVU2075
4851:base/os/FreeRTOS/Source/tasks.c **** 					}
 7368              		.loc 1 4851 34 is_stmt 0 view .LVU2076
 7369 00a0 0123     		movs	r3, #1
 7370 00a2 2B60     		str	r3, [r5]
 7371 00a4 C8E7     		b	.L571
 7372              	.L574:
4842:base/os/FreeRTOS/Source/tasks.c **** 				}
 7373              		.loc 1 4842 6 is_stmt 1 view .LVU2077
 7374 00a6 04F11801 		add	r1, r4, #24
 7375 00aa 0848     		ldr	r0, .L581+16
 7376 00ac FFF7FEFF 		bl	vListInsertEnd
 7377              	.LVL538:
 7378 00b0 EFE7     		b	.L576
 7379              	.L577:
4858:base/os/FreeRTOS/Source/tasks.c **** 					}
 7380              		.loc 1 4858 7 view .LVU2078
4858:base/os/FreeRTOS/Source/tasks.c **** 					}
 7381              		.loc 1 4858 21 is_stmt 0 view .LVU2079
 7382 00b2 074B     		ldr	r3, .L581+20
 7383 00b4 0122     		movs	r2, #1
 7384 00b6 1A60     		str	r2, [r3]
 7385 00b8 BEE7     		b	.L571
 7386              	.L582:
 7387 00ba 00BF     		.align	2
 7388              	.L581:
 7389 00bc 00000000 		.word	.LANCHOR16
 7390 00c0 00000000 		.word	.LANCHOR13
 7391 00c4 00000000 		.word	.LANCHOR4
 7392 00c8 00000000 		.word	.LANCHOR10
 7393 00cc 00000000 		.word	.LANCHOR1
 7394 00d0 00000000 		.word	.LANCHOR20
 7395              		.cfi_endproc
 7396              	.LFE61:
 7398              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7399              		.align	1
 7400              		.global	xTaskNotifyStateClear
 7401              		.syntax unified
 7402              		.thumb
 7403              		.thumb_func
 7404              		.fpu softvfp
 7406              	xTaskNotifyStateClear:
 7407              	.LVL539:
 7408              	.LFB62:
4877:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 7409              		.loc 1 4877 2 is_stmt 1 view -0
 7410              		.cfi_startproc
 7411              		@ args = 0, pretend = 0, frame = 0
 7412              		@ frame_needed = 0, uses_anonymous_args = 0
4877:base/os/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 7413              		.loc 1 4877 2 is_stmt 0 view .LVU2081
 7414 0000 10B5     		push	{r4, lr}
 7415              	.LCFI65:
 7416              		.cfi_def_cfa_offset 8
 7417              		.cfi_offset 4, -8
 7418              		.cfi_offset 14, -4
ARM GAS  /tmp/cchwbchh.s 			page 256


4878:base/os/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 7419              		.loc 1 4878 2 is_stmt 1 view .LVU2082
4879:base/os/FreeRTOS/Source/tasks.c **** 
 7420              		.loc 1 4879 2 view .LVU2083
4883:base/os/FreeRTOS/Source/tasks.c **** 
 7421              		.loc 1 4883 3 view .LVU2084
4883:base/os/FreeRTOS/Source/tasks.c **** 
 7422              		.loc 1 4883 11 is_stmt 0 view .LVU2085
 7423 0002 0446     		mov	r4, r0
 7424 0004 58B1     		cbz	r0, .L588
 7425              	.LVL540:
 7426              	.L584:
4885:base/os/FreeRTOS/Source/tasks.c **** 		{
 7427              		.loc 1 4885 3 is_stmt 1 discriminator 4 view .LVU2086
 7428 0006 FFF7FEFF 		bl	vPortEnterCritical
 7429              	.LVL541:
4887:base/os/FreeRTOS/Source/tasks.c **** 			{
 7430              		.loc 1 4887 4 discriminator 4 view .LVU2087
4887:base/os/FreeRTOS/Source/tasks.c **** 			{
 7431              		.loc 1 4887 13 is_stmt 0 discriminator 4 view .LVU2088
 7432 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 7433 000e DBB2     		uxtb	r3, r3
4887:base/os/FreeRTOS/Source/tasks.c **** 			{
 7434              		.loc 1 4887 6 discriminator 4 view .LVU2089
 7435 0010 022B     		cmp	r3, #2
 7436 0012 07D0     		beq	.L589
4894:base/os/FreeRTOS/Source/tasks.c **** 			}
 7437              		.loc 1 4894 13 view .LVU2090
 7438 0014 0024     		movs	r4, #0
 7439              	.LVL542:
 7440              	.L585:
4897:base/os/FreeRTOS/Source/tasks.c **** 
 7441              		.loc 1 4897 3 is_stmt 1 view .LVU2091
 7442 0016 FFF7FEFF 		bl	vPortExitCritical
 7443              	.LVL543:
4899:base/os/FreeRTOS/Source/tasks.c **** 	}
 7444              		.loc 1 4899 3 view .LVU2092
4900:base/os/FreeRTOS/Source/tasks.c **** 
 7445              		.loc 1 4900 2 is_stmt 0 view .LVU2093
 7446 001a 2046     		mov	r0, r4
 7447 001c 10BD     		pop	{r4, pc}
 7448              	.LVL544:
 7449              	.L588:
4883:base/os/FreeRTOS/Source/tasks.c **** 
 7450              		.loc 1 4883 11 discriminator 1 view .LVU2094
 7451 001e 044B     		ldr	r3, .L590
 7452 0020 1C68     		ldr	r4, [r3]
 7453              	.LVL545:
4883:base/os/FreeRTOS/Source/tasks.c **** 
 7454              		.loc 1 4883 11 discriminator 1 view .LVU2095
 7455 0022 F0E7     		b	.L584
 7456              	.LVL546:
 7457              	.L589:
4889:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7458              		.loc 1 4889 5 is_stmt 1 view .LVU2096
4889:base/os/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7459              		.loc 1 4889 26 is_stmt 0 view .LVU2097
ARM GAS  /tmp/cchwbchh.s 			page 257


 7460 0024 0023     		movs	r3, #0
 7461 0026 84F85830 		strb	r3, [r4, #88]
4890:base/os/FreeRTOS/Source/tasks.c **** 			}
 7462              		.loc 1 4890 5 is_stmt 1 view .LVU2098
 7463              	.LVL547:
4890:base/os/FreeRTOS/Source/tasks.c **** 			}
 7464              		.loc 1 4890 13 is_stmt 0 view .LVU2099
 7465 002a 0124     		movs	r4, #1
 7466              	.LVL548:
4890:base/os/FreeRTOS/Source/tasks.c **** 			}
 7467              		.loc 1 4890 13 view .LVU2100
 7468 002c F3E7     		b	.L585
 7469              	.L591:
 7470 002e 00BF     		.align	2
 7471              	.L590:
 7472 0030 00000000 		.word	.LANCHOR10
 7473              		.cfi_endproc
 7474              	.LFE62:
 7476              		.global	pxCurrentTCB
 7477              		.section	.bss.pxCurrentTCB,"aw",%nobits
 7478              		.align	2
 7479              		.set	.LANCHOR10,. + 0
 7482              	pxCurrentTCB:
 7483 0000 00000000 		.space	4
 7484              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 7485              		.align	2
 7486              		.set	.LANCHOR2,. + 0
 7489              	pxDelayedTaskList:
 7490 0000 00000000 		.space	4
 7491              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 7492              		.align	2
 7493              		.set	.LANCHOR8,. + 0
 7496              	pxOverflowDelayedTaskList:
 7497 0000 00000000 		.space	4
 7498              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 7499              		.align	2
 7500              		.set	.LANCHOR4,. + 0
 7503              	pxReadyTasksLists:
 7504 0000 00000000 		.space	1120
 7504      00000000 
 7504      00000000 
 7504      00000000 
 7504      00000000 
 7505              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7506              		.align	2
 7507              		.set	.LANCHOR9,. + 0
 7510              	uxCurrentNumberOfTasks:
 7511 0000 00000000 		.space	4
 7512              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 7513              		.align	2
 7514              		.set	.LANCHOR14,. + 0
 7517              	uxDeletedTasksWaitingCleanUp:
 7518 0000 00000000 		.space	4
 7519              		.section	.bss.uxPendedTicks,"aw",%nobits
 7520              		.align	2
 7521              		.set	.LANCHOR19,. + 0
 7524              	uxPendedTicks:
ARM GAS  /tmp/cchwbchh.s 			page 258


 7525 0000 00000000 		.space	4
 7526              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7527              		.align	2
 7528              		.set	.LANCHOR16,. + 0
 7531              	uxSchedulerSuspended:
 7532 0000 00000000 		.space	4
 7533              		.section	.bss.uxTaskNumber,"aw",%nobits
 7534              		.align	2
 7535              		.set	.LANCHOR12,. + 0
 7538              	uxTaskNumber:
 7539 0000 00000000 		.space	4
 7540              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7541              		.align	2
 7542              		.set	.LANCHOR13,. + 0
 7545              	uxTopReadyPriority:
 7546 0000 00000000 		.space	4
 7547              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7548              		.align	2
 7549              		.set	.LANCHOR5,. + 0
 7552              	xDelayedTaskList1:
 7553 0000 00000000 		.space	20
 7553      00000000 
 7553      00000000 
 7553      00000000 
 7553      00000000 
 7554              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7555              		.align	2
 7556              		.set	.LANCHOR6,. + 0
 7559              	xDelayedTaskList2:
 7560 0000 00000000 		.space	20
 7560      00000000 
 7560      00000000 
 7560      00000000 
 7560      00000000 
 7561              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 7562              		.align	2
 7563              		.set	.LANCHOR17,. + 0
 7566              	xIdleTaskHandle:
 7567 0000 00000000 		.space	4
 7568              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7569              		.align	2
 7570              		.set	.LANCHOR3,. + 0
 7573              	xNextTaskUnblockTime:
 7574 0000 00000000 		.space	4
 7575              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7576              		.align	2
 7577              		.set	.LANCHOR18,. + 0
 7580              	xNumOfOverflows:
 7581 0000 00000000 		.space	4
 7582              		.section	.bss.xPendingReadyList,"aw",%nobits
 7583              		.align	2
 7584              		.set	.LANCHOR1,. + 0
 7587              	xPendingReadyList:
 7588 0000 00000000 		.space	20
 7588      00000000 
 7588      00000000 
 7588      00000000 
ARM GAS  /tmp/cchwbchh.s 			page 259


 7588      00000000 
 7589              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7590              		.align	2
 7591              		.set	.LANCHOR11,. + 0
 7594              	xSchedulerRunning:
 7595 0000 00000000 		.space	4
 7596              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7597              		.align	2
 7598              		.set	.LANCHOR0,. + 0
 7601              	xSuspendedTaskList:
 7602 0000 00000000 		.space	20
 7602      00000000 
 7602      00000000 
 7602      00000000 
 7602      00000000 
 7603              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 7604              		.align	2
 7605              		.set	.LANCHOR7,. + 0
 7608              	xTasksWaitingTermination:
 7609 0000 00000000 		.space	20
 7609      00000000 
 7609      00000000 
 7609      00000000 
 7609      00000000 
 7610              		.section	.bss.xTickCount,"aw",%nobits
 7611              		.align	2
 7612              		.set	.LANCHOR15,. + 0
 7615              	xTickCount:
 7616 0000 00000000 		.space	4
 7617              		.section	.bss.xYieldPending,"aw",%nobits
 7618              		.align	2
 7619              		.set	.LANCHOR20,. + 0
 7622              	xYieldPending:
 7623 0000 00000000 		.space	4
 7624              		.text
 7625              	.Letext0:
 7626              		.file 3 "/usr/lib/gcc/arm-none-eabi/11.1.0/include/stddef.h"
 7627              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 7628              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 7629              		.file 6 "base/os/FreeRTOS/Source/include/projdefs.h"
 7630              		.file 7 "base/os/FreeRTOS/Source/include/FreeRTOS.h"
 7631              		.file 8 "base/os/FreeRTOS/Source/include/list.h"
 7632              		.file 9 "base/os/FreeRTOS/Source/include/task.h"
 7633              		.file 10 "base/os/FreeRTOS/Source/include/portable.h"
 7634              		.file 11 "base/os/FreeRTOS/Source/include/timers.h"
 7635              		.file 12 "/usr/arm-none-eabi/include/string.h"
ARM GAS  /tmp/cchwbchh.s 			page 260


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cchwbchh.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cchwbchh.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cchwbchh.s:112    .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/cchwbchh.s:118    .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cchwbchh.s:124    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cchwbchh.s:167    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cchwbchh.s:173    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cchwbchh.s:216    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/cchwbchh.s:222    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cchwbchh.s:228    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cchwbchh.s:382    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cchwbchh.s:388    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cchwbchh.s:461    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/cchwbchh.s:473    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cchwbchh.s:479    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cchwbchh.s:621    .text.prvAddNewTaskToReadyList:0000000000000094 $d
     /tmp/cchwbchh.s:631    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cchwbchh.s:637    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cchwbchh.s:714    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cchwbchh.s:720    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cchwbchh.s:793    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/cchwbchh.s:800    .text.prvIdleTask:0000000000000000 $t
     /tmp/cchwbchh.s:806    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cchwbchh.s:855    .text.prvIdleTask:0000000000000024 $d
     /tmp/cchwbchh.s:860    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cchwbchh.s:866    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cchwbchh.s:973    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/cchwbchh.s:983    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/cchwbchh.s:990    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/cchwbchh.s:1149   .text.xTaskCreate:0000000000000000 $t
     /tmp/cchwbchh.s:1156   .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cchwbchh.s:1281   .text.vTaskDelete:0000000000000000 $t
     /tmp/cchwbchh.s:1288   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cchwbchh.s:1454   .text.vTaskDelete:000000000000009c $d
     /tmp/cchwbchh.s:1465   .text.eTaskGetState:0000000000000000 $t
     /tmp/cchwbchh.s:1472   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cchwbchh.s:1609   .text.eTaskGetState:000000000000006c $d
     /tmp/cchwbchh.s:1618   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cchwbchh.s:1625   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cchwbchh.s:1671   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cchwbchh.s:1676   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cchwbchh.s:1683   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cchwbchh.s:1762   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/cchwbchh.s:1767   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cchwbchh.s:1774   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cchwbchh.s:2008   .text.vTaskPrioritySet:00000000000000c8 $d
     /tmp/cchwbchh.s:2015   .text.vTaskResume:0000000000000000 $t
     /tmp/cchwbchh.s:2022   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cchwbchh.s:2155   .text.vTaskResume:000000000000007c $d
     /tmp/cchwbchh.s:2162   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cchwbchh.s:2169   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cchwbchh.s:2341   .text.xTaskResumeFromISR:0000000000000090 $d
     /tmp/cchwbchh.s:2350   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/cchwbchh.s:2354   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cchwbchh.s:2361   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
ARM GAS  /tmp/cchwbchh.s 			page 261


     /tmp/cchwbchh.s:2524   .text.vTaskStartScheduler:0000000000000084 $d
     /tmp/cchwbchh.s:2534   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cchwbchh.s:2541   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cchwbchh.s:2584   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cchwbchh.s:2589   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cchwbchh.s:2596   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cchwbchh.s:2613   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cchwbchh.s:2618   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cchwbchh.s:2625   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cchwbchh.s:2646   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/cchwbchh.s:2651   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cchwbchh.s:2658   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cchwbchh.s:2687   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/cchwbchh.s:2692   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cchwbchh.s:2699   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cchwbchh.s:2715   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cchwbchh.s:2720   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cchwbchh.s:2727   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cchwbchh.s:2787   .text.pcTaskGetName:0000000000000024 $d
     /tmp/cchwbchh.s:2792   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cchwbchh.s:2799   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cchwbchh.s:3064   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/cchwbchh.s:3079   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cchwbchh.s:3086   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cchwbchh.s:3323   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/cchwbchh.s:3335   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cchwbchh.s:3342   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cchwbchh.s:3562   .text.vTaskDelayUntil:000000000000009c $d
     /tmp/cchwbchh.s:3569   .text.vTaskDelay:0000000000000000 $t
     /tmp/cchwbchh.s:3576   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cchwbchh.s:3668   .text.vTaskDelay:0000000000000048 $d
     /tmp/cchwbchh.s:3673   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cchwbchh.s:3680   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cchwbchh.s:3806   .text.vTaskSwitchContext:0000000000000080 $d
     /tmp/cchwbchh.s:3817   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cchwbchh.s:3824   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cchwbchh.s:4011   .text.vTaskSuspend:00000000000000b0 $d
     /tmp/cchwbchh.s:4020   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cchwbchh.s:4027   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cchwbchh.s:4094   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/cchwbchh.s:4099   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cchwbchh.s:4106   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cchwbchh.s:4221   .text.vTaskPlaceOnUnorderedEventList:0000000000000050 $d
     /tmp/cchwbchh.s:4227   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cchwbchh.s:4234   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cchwbchh.s:4310   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/cchwbchh.s:4315   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cchwbchh.s:4322   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cchwbchh.s:4455   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/cchwbchh.s:4465   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cchwbchh.s:4472   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cchwbchh.s:4609   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/cchwbchh.s:4618   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cchwbchh.s:4625   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cchwbchh.s:4694   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/cchwbchh.s:4700   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cchwbchh.s:4707   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
ARM GAS  /tmp/cchwbchh.s 			page 262


     /tmp/cchwbchh.s:4730   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/cchwbchh.s:4736   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cchwbchh.s:4743   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cchwbchh.s:4928   .text.xTaskCheckForTimeOut:000000000000007c $d
     /tmp/cchwbchh.s:4935   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cchwbchh.s:4942   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cchwbchh.s:4959   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cchwbchh.s:4964   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cchwbchh.s:4971   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cchwbchh.s:5004   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cchwbchh.s:5011   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cchwbchh.s:5036   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cchwbchh.s:5043   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cchwbchh.s:5190   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/cchwbchh.s:5195   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cchwbchh.s:5201   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cchwbchh.s:5316   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cchwbchh.s:5323   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cchwbchh.s:5462   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/cchwbchh.s:5472   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/cchwbchh.s:5479   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cchwbchh.s:5521   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/cchwbchh.s:5526   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cchwbchh.s:5533   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cchwbchh.s:5552   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cchwbchh.s:5557   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cchwbchh.s:5564   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cchwbchh.s:5602   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/cchwbchh.s:5608   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cchwbchh.s:5615   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cchwbchh.s:5773   .text.xTaskPriorityInherit:000000000000008c $d
     /tmp/cchwbchh.s:5780   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cchwbchh.s:5787   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cchwbchh.s:5966   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/cchwbchh.s:5973   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cchwbchh.s:5980   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cchwbchh.s:6168   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000094 $d
     /tmp/cchwbchh.s:6175   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cchwbchh.s:6182   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cchwbchh.s:6209   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cchwbchh.s:6214   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cchwbchh.s:6221   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cchwbchh.s:6252   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cchwbchh.s:6257   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cchwbchh.s:6264   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cchwbchh.s:6386   .text.ulTaskNotifyTake:0000000000000074 $d
     /tmp/cchwbchh.s:6391   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cchwbchh.s:6398   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cchwbchh.s:6538   .text.xTaskNotifyWait:0000000000000094 $d
     /tmp/cchwbchh.s:6543   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cchwbchh.s:6550   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cchwbchh.s:6607   .text.xTaskGenericNotify:000000000000002c $d
     /tmp/cchwbchh.s:6612   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/cchwbchh.s:6809   .text.xTaskGenericNotify:00000000000000d8 $d
     /tmp/cchwbchh.s:6816   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cchwbchh.s:6823   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cchwbchh.s:6902   .text.xTaskGenericNotifyFromISR:0000000000000042 $d
ARM GAS  /tmp/cchwbchh.s 			page 263


     /tmp/cchwbchh.s:6907   .text.xTaskGenericNotifyFromISR:0000000000000046 $t
     /tmp/cchwbchh.s:7149   .text.xTaskGenericNotifyFromISR:0000000000000100 $d
     /tmp/cchwbchh.s:7159   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cchwbchh.s:7166   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cchwbchh.s:7389   .text.vTaskNotifyGiveFromISR:00000000000000bc $d
     /tmp/cchwbchh.s:7399   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cchwbchh.s:7406   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cchwbchh.s:7472   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/cchwbchh.s:7482   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cchwbchh.s:7478   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cchwbchh.s:7485   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cchwbchh.s:7489   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cchwbchh.s:7492   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cchwbchh.s:7496   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cchwbchh.s:7499   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cchwbchh.s:7503   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cchwbchh.s:7506   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cchwbchh.s:7510   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cchwbchh.s:7513   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cchwbchh.s:7517   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cchwbchh.s:7520   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cchwbchh.s:7524   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cchwbchh.s:7527   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cchwbchh.s:7531   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cchwbchh.s:7534   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cchwbchh.s:7538   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cchwbchh.s:7541   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cchwbchh.s:7545   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cchwbchh.s:7548   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cchwbchh.s:7552   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cchwbchh.s:7555   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cchwbchh.s:7559   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cchwbchh.s:7562   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cchwbchh.s:7566   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cchwbchh.s:7569   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cchwbchh.s:7573   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cchwbchh.s:7576   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cchwbchh.s:7580   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cchwbchh.s:7583   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cchwbchh.s:7587   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cchwbchh.s:7590   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cchwbchh.s:7594   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cchwbchh.s:7597   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cchwbchh.s:7601   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cchwbchh.s:7604   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cchwbchh.s:7608   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cchwbchh.s:7611   .bss.xTickCount:0000000000000000 $d
     /tmp/cchwbchh.s:7615   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cchwbchh.s:7618   .bss.xYieldPending:0000000000000000 $d
     /tmp/cchwbchh.s:7622   .bss.xYieldPending:0000000000000000 xYieldPending

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
ARM GAS  /tmp/cchwbchh.s 			page 264


vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
